/**
 ******************************************************************************
 * @file           : main.c
 * @author         : Auto-generated by STM32CubeIDE
 * @brief          : Main program body
 ******************************************************************************
 * @attention
 *
 * <h2><center>&copy; Copyright (c) 2021 STMicroelectronics.
 * All rights reserved.</center></h2>
 *
 * This software component is licensed by ST under BSD 3-Clause license,
 * the "License"; You may not use this file except in compliance with the
 * License. You may obtain a copy of the License at:
 *                        opensource.org/licenses/BSD-3-Clause
 *
 ******************************************************************************
 */

/*
 * Cách sử dụng pp bit-fields trong hệ thống nhúng:
 * Đặt vấn đề: Ở bài tập LedOn, để thiết lập vị trí bit cần được sử dụng thì chúng ta đã dùng
 * phương pháp mặt nạ bit. Tuy nhiên pp này có nhược điểm là việc xác định vị trí bit của thanh
 * ghi, số bit cần dịch và toán tử sử dụng(OR hoặc AND) khá là phức tạp.
 *
 * Phương Pháp bit-fields cung cấp cho ta một cách làm đơn giản hơn để xác định các công việc
 * xử lý bit trên thanh ghi.
 * Điều kiện tiên quyết: dựa vào datasheet, phải viết lại cấu hình từng bit của thanh ghi trong file thư viện.
 *
 * Cách làm:
 * B1: Tạo thư viện cấu hình chân_bit của các thanh ghi đc sử dụng để lập trình Header File (sử dụng cấu trúc typedef struct)
 * Vd: ở bài LedOn ta sử dụng 3 thanh ghi nên sẽ viết thư viện cấu hình lại cho 3 thanh ghi đó
 * Lưu ý: ko cần thiết viết thư viện cho các thanh ghi không được sử dụng.
 *
 * B2: Thiết lập địa chỉ cho các struct(đại diện cho các thanh ghi)
 * Sử dụng các typedef struct đã tạo làm kiểu_biến đại diện cho thanh ghi đã đc cấu hình trong file thư viện
 *
 * B3: Cấu hình(điều khiển) bit các chân thanh ghi theo cấu hình chân đã cài đặt theo thư viện
 * Ta chỉ cần biết số chân và sử dụng con trỏ struct(tên_biến_struct -> thành_phần) để xử lý cấu hình cho chân bit
 *
 * Đánh giá: Phương pháp bit-field, mặc dù pp này cần phải viết cấu hình chân các thanh ghi trong một file thư viện
 * nhưng việc này giúp cho lập trình viên về sau sẽ viết code đc dễ dàng hơn. Tránh đc tình trạng điều khiển bit
 * sai do việc tính toán dịch bit của pp mặt nạ bit.
 * ->Đây là pp nên sử dụng cho các dự án hệ thống nhúng
 * */

#if !defined(__SOFT_FP__) && defined(__ARM_FP)
  #warning "FPU is not initialized, but the project is compiling for an FPU. Please initialize the FPU before use."
#endif

#include "main.h"   //B1: thư viện cấu hình chân pin (dùng để xác định chân khi sử dụng pp bit-fields)

/*uint32_t *pClkCtrlReg 	= (uint32_t*)0x40023830;
uint32_t *pPortDmodeReg = (uint32_t*)0x40020C00;
uint32_t *pPortDoutReg  = (uint32_t*)0x40020C14;*/


int main(void)
{
	//B2: Thiết lập địa chỉ cho các struct(đại diện cho các thanh ghi)
	RCC_AHB1ENR_t volatile *const pClkCtrlReg   = (RCC_AHB1ENR_t *)0x40023830;
	GPIOx_MODE_t volatile *const  pPortDmodeReg = (GPIOx_MODE_t *)0x40020C00;
	GPIOx_ODR_t volatile *const pPortDoutReg    = (GPIOx_ODR_t *)0x40020C14;

	//B3: Cấu hình(điều khiển) bit các chân thanh ghi theo cấu hình chân đã cài đặt theo thư viện
	//1.Thiết lập xung clock thanh ghi AHB1ENR set bit 3
	pClkCtrlReg->gpiod_en = 1;      //thiết lập chân gpiod_en của thanh ghi pClkCtrlReg lên trạng thái 1

	//2.Cấu hình port làm ngõ ra IO
	pPortDmodeReg->pin_12 = 1; //chân pin 12 của thanh ghi pPortDmodeReg lên 1:

	while(1)
	{
		//3. Set chan 12 GPIO của thanh ghi pPortDoutReg lên 1 cho LED sáng
		pPortDoutReg->pin_12 = 1;

	    //thiet lap ham delay led
	    //tao ra 10000 vong lap
	    for(uint32_t i = 0 ; i < 300000 ; i++);

	    //Turn of LED
	    pPortDoutReg->pin_12 = 0;

	    for(uint32_t i = 0 ; i < 300000 ; i++);
	}
}
