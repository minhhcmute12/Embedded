/**
  ******************************************************************************
  * @file    main.c
  * @author  Auto-generated by STM32CubeIDE
  * @version V1.0
  * @brief   Default main function.
  ******************************************************************************
*/

/**
 * Chỉ thị tiền xử lý trong lập trình C (S31)
 *
 * + Macros trong C(#define): (V190)
 * Được sử dụng để thay thế văn bản trong code, dùng để xác định môt hằng số
 * Cú pháp: #define <TÊN_TỪ_THAY_THẾ> <VALUE>
 * Example: #define MAX_RECORD 10   | 	#define PIN_8 8
 * Khác với CONST(hằng số thường là các luật, định luật,ko thay đổi đc) thì define cho phép
 * thay đổi hằng số theo ý lập trình viên tùy vào ngữ cảnh thực hiện công việc.
 * KO có dấu chấm phẩy khi kết thúc 1 define
 * <TÊN_TỪ_THAY_THẾ> : nên viết dạng chữ hoa, và nó là một nhãn dán, ko phải biến, nên sẽ ko tiêu tốn
 * bộ nhớ trong quá trình biên dịch.
 *
 * Thêm: Tạo công thức khi dùng với #define
 * VD: #define PI_VALUE 3.1415
 * #define AREA_OF_CIRCLE(r) PI_VALUE * r * r     //r: giá trị param sẽ đc đưa vào
 *
 * Code chính: areaCircle = AREA_OF_CIRCLE(radius);   //đưa giá trị radius vào công thức
 * ==> areaCircle = PI_VALUE * radius * radius;   <=> areaCircle = 3.1415 * radius * radius;
 * => Tuy nhiên, ko nên hoặc hạn chế sử dụng cách này vì mục đích chính của define là tạo ra các giá trị
 * hằng nhằm thay thế văn bản. Nếu có thêm 1 dòng như "areaCircle = AREA_OF_CIRCLE(radius+1);" thì chắc
 * chắn giá trị của define sẽ thay đổi hoặc ko chính xác.
 * Vd:  areaCircle = AREA_OF_CIRCLE(1+1);  //ý lập trình viên mong muốn đưa 2 vào
 * ==> areaCircle = PI_VALUE * 1+1 * 1+1;  //tạo ra 1 công thức toán sai hoặc khác -> kết quả define sẽ SAI
 *
 * ->Vì vậy khi triển khai define với một công thức toán thì nên thêm dấu '()' để đảm bảo tính toán vẹn
 * vd: #define AREA_OF_CIRCLE(r) ((PI_VALUE) * (r) * (r))
 */

/**
 * + Chỉ thị tiền xử lý có điều kiện(#if,#ifdef,#endif,#else,#undef,#ifndef)
 * 1. #if and #endif directive
 * Syntax:
 * #if <constant expression_ Biểu thức điều kiện>
 *
 * #endif
 *
 * Example:
 * #if 0
 * //code block_ nội dung code
 * #endif
 * Giải thích:
 * Lệnh này kiểm tra xem biểu thức hằng có giá trị bằng 0 hay khác không.
 * Nếu hằng số là 0, thì khối mã sẽ không được đưa vào để biên dịch mã.
 * Nếu các hằng số khác 0, khối mã sẽ được đưa vào để biên dịch mã.
 * Các lập trình viên thường dùng cách này để loại trừ một đoạn code khỏi bản build.
 * Có nghĩa là dù bạn viết các dòng code sai hoặc các dong code vô nghĩa giữa #if 0 .... #endif thì khi build code
 * thì trình biên dịch cũng sẽ ko báo lỗi đối với chương trình.
 * Ngược lại, ta có #if 1 .... #endif. Mục đích đoạn code này là ta cho nó kết hợp với #if 0 .... #endif trong quá trình code.
 * Lúc này trong đoạn code sẽ cho phép ta xác định được dòng code nào được build và không được build
 *
 * 2. #if ...#else ...#endif
 * Syntax:
 * #if <constant expression_ Biểu thức điều kiện>
 *
 * #else
 *
 * #endif
 */
#include <stdio.h>

//#define AREA_CIR
#define AREA_TRI

#if !defined(AREA_CIR) && !defined(AREA_TRI)
	#warning "No macros defined."
#endif

int main()
{

#ifdef AREA_CIR
	printf("This is circle area calculation program\n");
   float radius = 0;
   fflush(stdout);
   printf("Enter the radius :");
   fflush(stdout);
   scanf("%f", &radius);
   printf("Area of circle  = %f\n",(3.1415 * radius * radius));
   fflush(stdout);
#endif


#ifdef AREA_TRI
   printf("This is Triangle area calculation program\n");
   float base, height;
   fflush(stdout);
   printf("Enter base and height: ");
   fflush(stdout);
   scanf("%f%f",&base, &height);
   printf("Area of triangle = %f\n", (0.5 * base * height));
#endif


   return 0;

}
