
02_HAL_UART.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001a34  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000028  08001bf8  08001bf8  00011bf8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001c20  08001c20  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  08001c20  08001c20  00011c20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08001c28  08001c28  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001c28  08001c28  00011c28  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001c2c  08001c2c  00011c2c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08001c30  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000060  20000010  08001c40  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000070  08001c40  00020070  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY
 13 .debug_info   000052de  00000000  00000000  00020083  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000119f  00000000  00000000  00025361  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000590  00000000  00000000  00026500  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000041e  00000000  00000000  00026a90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00020453  00000000  00000000  00026eae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00005fe4  00000000  00000000  00047301  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c616d  00000000  00000000  0004d2e5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000159c  00000000  00000000  00113454  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000055  00000000  00000000  001149f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000010 	.word	0x20000010
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08001be0 	.word	0x08001be0

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000014 	.word	0x20000014
 8000200:	08001be0 	.word	0x08001be0

08000204 <strlen>:
 8000204:	4603      	mov	r3, r0
 8000206:	f813 2b01 	ldrb.w	r2, [r3], #1
 800020a:	2a00      	cmp	r2, #0
 800020c:	d1fb      	bne.n	8000206 <strlen+0x2>
 800020e:	1a18      	subs	r0, r3, r0
 8000210:	3801      	subs	r0, #1
 8000212:	4770      	bx	lr

08000214 <__aeabi_uldivmod>:
 8000214:	b953      	cbnz	r3, 800022c <__aeabi_uldivmod+0x18>
 8000216:	b94a      	cbnz	r2, 800022c <__aeabi_uldivmod+0x18>
 8000218:	2900      	cmp	r1, #0
 800021a:	bf08      	it	eq
 800021c:	2800      	cmpeq	r0, #0
 800021e:	bf1c      	itt	ne
 8000220:	f04f 31ff 	movne.w	r1, #4294967295
 8000224:	f04f 30ff 	movne.w	r0, #4294967295
 8000228:	f000 b970 	b.w	800050c <__aeabi_idiv0>
 800022c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000230:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000234:	f000 f806 	bl	8000244 <__udivmoddi4>
 8000238:	f8dd e004 	ldr.w	lr, [sp, #4]
 800023c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000240:	b004      	add	sp, #16
 8000242:	4770      	bx	lr

08000244 <__udivmoddi4>:
 8000244:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000248:	9e08      	ldr	r6, [sp, #32]
 800024a:	460d      	mov	r5, r1
 800024c:	4604      	mov	r4, r0
 800024e:	460f      	mov	r7, r1
 8000250:	2b00      	cmp	r3, #0
 8000252:	d14a      	bne.n	80002ea <__udivmoddi4+0xa6>
 8000254:	428a      	cmp	r2, r1
 8000256:	4694      	mov	ip, r2
 8000258:	d965      	bls.n	8000326 <__udivmoddi4+0xe2>
 800025a:	fab2 f382 	clz	r3, r2
 800025e:	b143      	cbz	r3, 8000272 <__udivmoddi4+0x2e>
 8000260:	fa02 fc03 	lsl.w	ip, r2, r3
 8000264:	f1c3 0220 	rsb	r2, r3, #32
 8000268:	409f      	lsls	r7, r3
 800026a:	fa20 f202 	lsr.w	r2, r0, r2
 800026e:	4317      	orrs	r7, r2
 8000270:	409c      	lsls	r4, r3
 8000272:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000276:	fa1f f58c 	uxth.w	r5, ip
 800027a:	fbb7 f1fe 	udiv	r1, r7, lr
 800027e:	0c22      	lsrs	r2, r4, #16
 8000280:	fb0e 7711 	mls	r7, lr, r1, r7
 8000284:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000288:	fb01 f005 	mul.w	r0, r1, r5
 800028c:	4290      	cmp	r0, r2
 800028e:	d90a      	bls.n	80002a6 <__udivmoddi4+0x62>
 8000290:	eb1c 0202 	adds.w	r2, ip, r2
 8000294:	f101 37ff 	add.w	r7, r1, #4294967295
 8000298:	f080 811c 	bcs.w	80004d4 <__udivmoddi4+0x290>
 800029c:	4290      	cmp	r0, r2
 800029e:	f240 8119 	bls.w	80004d4 <__udivmoddi4+0x290>
 80002a2:	3902      	subs	r1, #2
 80002a4:	4462      	add	r2, ip
 80002a6:	1a12      	subs	r2, r2, r0
 80002a8:	b2a4      	uxth	r4, r4
 80002aa:	fbb2 f0fe 	udiv	r0, r2, lr
 80002ae:	fb0e 2210 	mls	r2, lr, r0, r2
 80002b2:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002b6:	fb00 f505 	mul.w	r5, r0, r5
 80002ba:	42a5      	cmp	r5, r4
 80002bc:	d90a      	bls.n	80002d4 <__udivmoddi4+0x90>
 80002be:	eb1c 0404 	adds.w	r4, ip, r4
 80002c2:	f100 32ff 	add.w	r2, r0, #4294967295
 80002c6:	f080 8107 	bcs.w	80004d8 <__udivmoddi4+0x294>
 80002ca:	42a5      	cmp	r5, r4
 80002cc:	f240 8104 	bls.w	80004d8 <__udivmoddi4+0x294>
 80002d0:	4464      	add	r4, ip
 80002d2:	3802      	subs	r0, #2
 80002d4:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002d8:	1b64      	subs	r4, r4, r5
 80002da:	2100      	movs	r1, #0
 80002dc:	b11e      	cbz	r6, 80002e6 <__udivmoddi4+0xa2>
 80002de:	40dc      	lsrs	r4, r3
 80002e0:	2300      	movs	r3, #0
 80002e2:	e9c6 4300 	strd	r4, r3, [r6]
 80002e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ea:	428b      	cmp	r3, r1
 80002ec:	d908      	bls.n	8000300 <__udivmoddi4+0xbc>
 80002ee:	2e00      	cmp	r6, #0
 80002f0:	f000 80ed 	beq.w	80004ce <__udivmoddi4+0x28a>
 80002f4:	2100      	movs	r1, #0
 80002f6:	e9c6 0500 	strd	r0, r5, [r6]
 80002fa:	4608      	mov	r0, r1
 80002fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000300:	fab3 f183 	clz	r1, r3
 8000304:	2900      	cmp	r1, #0
 8000306:	d149      	bne.n	800039c <__udivmoddi4+0x158>
 8000308:	42ab      	cmp	r3, r5
 800030a:	d302      	bcc.n	8000312 <__udivmoddi4+0xce>
 800030c:	4282      	cmp	r2, r0
 800030e:	f200 80f8 	bhi.w	8000502 <__udivmoddi4+0x2be>
 8000312:	1a84      	subs	r4, r0, r2
 8000314:	eb65 0203 	sbc.w	r2, r5, r3
 8000318:	2001      	movs	r0, #1
 800031a:	4617      	mov	r7, r2
 800031c:	2e00      	cmp	r6, #0
 800031e:	d0e2      	beq.n	80002e6 <__udivmoddi4+0xa2>
 8000320:	e9c6 4700 	strd	r4, r7, [r6]
 8000324:	e7df      	b.n	80002e6 <__udivmoddi4+0xa2>
 8000326:	b902      	cbnz	r2, 800032a <__udivmoddi4+0xe6>
 8000328:	deff      	udf	#255	; 0xff
 800032a:	fab2 f382 	clz	r3, r2
 800032e:	2b00      	cmp	r3, #0
 8000330:	f040 8090 	bne.w	8000454 <__udivmoddi4+0x210>
 8000334:	1a8a      	subs	r2, r1, r2
 8000336:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800033a:	fa1f fe8c 	uxth.w	lr, ip
 800033e:	2101      	movs	r1, #1
 8000340:	fbb2 f5f7 	udiv	r5, r2, r7
 8000344:	fb07 2015 	mls	r0, r7, r5, r2
 8000348:	0c22      	lsrs	r2, r4, #16
 800034a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800034e:	fb0e f005 	mul.w	r0, lr, r5
 8000352:	4290      	cmp	r0, r2
 8000354:	d908      	bls.n	8000368 <__udivmoddi4+0x124>
 8000356:	eb1c 0202 	adds.w	r2, ip, r2
 800035a:	f105 38ff 	add.w	r8, r5, #4294967295
 800035e:	d202      	bcs.n	8000366 <__udivmoddi4+0x122>
 8000360:	4290      	cmp	r0, r2
 8000362:	f200 80cb 	bhi.w	80004fc <__udivmoddi4+0x2b8>
 8000366:	4645      	mov	r5, r8
 8000368:	1a12      	subs	r2, r2, r0
 800036a:	b2a4      	uxth	r4, r4
 800036c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000370:	fb07 2210 	mls	r2, r7, r0, r2
 8000374:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000378:	fb0e fe00 	mul.w	lr, lr, r0
 800037c:	45a6      	cmp	lr, r4
 800037e:	d908      	bls.n	8000392 <__udivmoddi4+0x14e>
 8000380:	eb1c 0404 	adds.w	r4, ip, r4
 8000384:	f100 32ff 	add.w	r2, r0, #4294967295
 8000388:	d202      	bcs.n	8000390 <__udivmoddi4+0x14c>
 800038a:	45a6      	cmp	lr, r4
 800038c:	f200 80bb 	bhi.w	8000506 <__udivmoddi4+0x2c2>
 8000390:	4610      	mov	r0, r2
 8000392:	eba4 040e 	sub.w	r4, r4, lr
 8000396:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800039a:	e79f      	b.n	80002dc <__udivmoddi4+0x98>
 800039c:	f1c1 0720 	rsb	r7, r1, #32
 80003a0:	408b      	lsls	r3, r1
 80003a2:	fa22 fc07 	lsr.w	ip, r2, r7
 80003a6:	ea4c 0c03 	orr.w	ip, ip, r3
 80003aa:	fa05 f401 	lsl.w	r4, r5, r1
 80003ae:	fa20 f307 	lsr.w	r3, r0, r7
 80003b2:	40fd      	lsrs	r5, r7
 80003b4:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003b8:	4323      	orrs	r3, r4
 80003ba:	fbb5 f8f9 	udiv	r8, r5, r9
 80003be:	fa1f fe8c 	uxth.w	lr, ip
 80003c2:	fb09 5518 	mls	r5, r9, r8, r5
 80003c6:	0c1c      	lsrs	r4, r3, #16
 80003c8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003cc:	fb08 f50e 	mul.w	r5, r8, lr
 80003d0:	42a5      	cmp	r5, r4
 80003d2:	fa02 f201 	lsl.w	r2, r2, r1
 80003d6:	fa00 f001 	lsl.w	r0, r0, r1
 80003da:	d90b      	bls.n	80003f4 <__udivmoddi4+0x1b0>
 80003dc:	eb1c 0404 	adds.w	r4, ip, r4
 80003e0:	f108 3aff 	add.w	sl, r8, #4294967295
 80003e4:	f080 8088 	bcs.w	80004f8 <__udivmoddi4+0x2b4>
 80003e8:	42a5      	cmp	r5, r4
 80003ea:	f240 8085 	bls.w	80004f8 <__udivmoddi4+0x2b4>
 80003ee:	f1a8 0802 	sub.w	r8, r8, #2
 80003f2:	4464      	add	r4, ip
 80003f4:	1b64      	subs	r4, r4, r5
 80003f6:	b29d      	uxth	r5, r3
 80003f8:	fbb4 f3f9 	udiv	r3, r4, r9
 80003fc:	fb09 4413 	mls	r4, r9, r3, r4
 8000400:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000404:	fb03 fe0e 	mul.w	lr, r3, lr
 8000408:	45a6      	cmp	lr, r4
 800040a:	d908      	bls.n	800041e <__udivmoddi4+0x1da>
 800040c:	eb1c 0404 	adds.w	r4, ip, r4
 8000410:	f103 35ff 	add.w	r5, r3, #4294967295
 8000414:	d26c      	bcs.n	80004f0 <__udivmoddi4+0x2ac>
 8000416:	45a6      	cmp	lr, r4
 8000418:	d96a      	bls.n	80004f0 <__udivmoddi4+0x2ac>
 800041a:	3b02      	subs	r3, #2
 800041c:	4464      	add	r4, ip
 800041e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000422:	fba3 9502 	umull	r9, r5, r3, r2
 8000426:	eba4 040e 	sub.w	r4, r4, lr
 800042a:	42ac      	cmp	r4, r5
 800042c:	46c8      	mov	r8, r9
 800042e:	46ae      	mov	lr, r5
 8000430:	d356      	bcc.n	80004e0 <__udivmoddi4+0x29c>
 8000432:	d053      	beq.n	80004dc <__udivmoddi4+0x298>
 8000434:	b156      	cbz	r6, 800044c <__udivmoddi4+0x208>
 8000436:	ebb0 0208 	subs.w	r2, r0, r8
 800043a:	eb64 040e 	sbc.w	r4, r4, lr
 800043e:	fa04 f707 	lsl.w	r7, r4, r7
 8000442:	40ca      	lsrs	r2, r1
 8000444:	40cc      	lsrs	r4, r1
 8000446:	4317      	orrs	r7, r2
 8000448:	e9c6 7400 	strd	r7, r4, [r6]
 800044c:	4618      	mov	r0, r3
 800044e:	2100      	movs	r1, #0
 8000450:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000454:	f1c3 0120 	rsb	r1, r3, #32
 8000458:	fa02 fc03 	lsl.w	ip, r2, r3
 800045c:	fa20 f201 	lsr.w	r2, r0, r1
 8000460:	fa25 f101 	lsr.w	r1, r5, r1
 8000464:	409d      	lsls	r5, r3
 8000466:	432a      	orrs	r2, r5
 8000468:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800046c:	fa1f fe8c 	uxth.w	lr, ip
 8000470:	fbb1 f0f7 	udiv	r0, r1, r7
 8000474:	fb07 1510 	mls	r5, r7, r0, r1
 8000478:	0c11      	lsrs	r1, r2, #16
 800047a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800047e:	fb00 f50e 	mul.w	r5, r0, lr
 8000482:	428d      	cmp	r5, r1
 8000484:	fa04 f403 	lsl.w	r4, r4, r3
 8000488:	d908      	bls.n	800049c <__udivmoddi4+0x258>
 800048a:	eb1c 0101 	adds.w	r1, ip, r1
 800048e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000492:	d22f      	bcs.n	80004f4 <__udivmoddi4+0x2b0>
 8000494:	428d      	cmp	r5, r1
 8000496:	d92d      	bls.n	80004f4 <__udivmoddi4+0x2b0>
 8000498:	3802      	subs	r0, #2
 800049a:	4461      	add	r1, ip
 800049c:	1b49      	subs	r1, r1, r5
 800049e:	b292      	uxth	r2, r2
 80004a0:	fbb1 f5f7 	udiv	r5, r1, r7
 80004a4:	fb07 1115 	mls	r1, r7, r5, r1
 80004a8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004ac:	fb05 f10e 	mul.w	r1, r5, lr
 80004b0:	4291      	cmp	r1, r2
 80004b2:	d908      	bls.n	80004c6 <__udivmoddi4+0x282>
 80004b4:	eb1c 0202 	adds.w	r2, ip, r2
 80004b8:	f105 38ff 	add.w	r8, r5, #4294967295
 80004bc:	d216      	bcs.n	80004ec <__udivmoddi4+0x2a8>
 80004be:	4291      	cmp	r1, r2
 80004c0:	d914      	bls.n	80004ec <__udivmoddi4+0x2a8>
 80004c2:	3d02      	subs	r5, #2
 80004c4:	4462      	add	r2, ip
 80004c6:	1a52      	subs	r2, r2, r1
 80004c8:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004cc:	e738      	b.n	8000340 <__udivmoddi4+0xfc>
 80004ce:	4631      	mov	r1, r6
 80004d0:	4630      	mov	r0, r6
 80004d2:	e708      	b.n	80002e6 <__udivmoddi4+0xa2>
 80004d4:	4639      	mov	r1, r7
 80004d6:	e6e6      	b.n	80002a6 <__udivmoddi4+0x62>
 80004d8:	4610      	mov	r0, r2
 80004da:	e6fb      	b.n	80002d4 <__udivmoddi4+0x90>
 80004dc:	4548      	cmp	r0, r9
 80004de:	d2a9      	bcs.n	8000434 <__udivmoddi4+0x1f0>
 80004e0:	ebb9 0802 	subs.w	r8, r9, r2
 80004e4:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004e8:	3b01      	subs	r3, #1
 80004ea:	e7a3      	b.n	8000434 <__udivmoddi4+0x1f0>
 80004ec:	4645      	mov	r5, r8
 80004ee:	e7ea      	b.n	80004c6 <__udivmoddi4+0x282>
 80004f0:	462b      	mov	r3, r5
 80004f2:	e794      	b.n	800041e <__udivmoddi4+0x1da>
 80004f4:	4640      	mov	r0, r8
 80004f6:	e7d1      	b.n	800049c <__udivmoddi4+0x258>
 80004f8:	46d0      	mov	r8, sl
 80004fa:	e77b      	b.n	80003f4 <__udivmoddi4+0x1b0>
 80004fc:	3d02      	subs	r5, #2
 80004fe:	4462      	add	r2, ip
 8000500:	e732      	b.n	8000368 <__udivmoddi4+0x124>
 8000502:	4608      	mov	r0, r1
 8000504:	e70a      	b.n	800031c <__udivmoddi4+0xd8>
 8000506:	4464      	add	r4, ip
 8000508:	3802      	subs	r0, #2
 800050a:	e742      	b.n	8000392 <__udivmoddi4+0x14e>

0800050c <__aeabi_idiv0>:
 800050c:	4770      	bx	lr
 800050e:	bf00      	nop

08000510 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000510:	b580      	push	{r7, lr}
 8000512:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000514:	4b0e      	ldr	r3, [pc, #56]	; (8000550 <HAL_Init+0x40>)
 8000516:	681b      	ldr	r3, [r3, #0]
 8000518:	4a0d      	ldr	r2, [pc, #52]	; (8000550 <HAL_Init+0x40>)
 800051a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800051e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000520:	4b0b      	ldr	r3, [pc, #44]	; (8000550 <HAL_Init+0x40>)
 8000522:	681b      	ldr	r3, [r3, #0]
 8000524:	4a0a      	ldr	r2, [pc, #40]	; (8000550 <HAL_Init+0x40>)
 8000526:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800052a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800052c:	4b08      	ldr	r3, [pc, #32]	; (8000550 <HAL_Init+0x40>)
 800052e:	681b      	ldr	r3, [r3, #0]
 8000530:	4a07      	ldr	r2, [pc, #28]	; (8000550 <HAL_Init+0x40>)
 8000532:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000536:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000538:	2003      	movs	r0, #3
 800053a:	f000 f92b 	bl	8000794 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800053e:	2000      	movs	r0, #0
 8000540:	f000 f808 	bl	8000554 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000544:	f001 fa7e 	bl	8001a44 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000548:	2300      	movs	r3, #0
}
 800054a:	4618      	mov	r0, r3
 800054c:	bd80      	pop	{r7, pc}
 800054e:	bf00      	nop
 8000550:	40023c00 	.word	0x40023c00

08000554 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000554:	b580      	push	{r7, lr}
 8000556:	b082      	sub	sp, #8
 8000558:	af00      	add	r7, sp, #0
 800055a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800055c:	4b12      	ldr	r3, [pc, #72]	; (80005a8 <HAL_InitTick+0x54>)
 800055e:	681a      	ldr	r2, [r3, #0]
 8000560:	4b12      	ldr	r3, [pc, #72]	; (80005ac <HAL_InitTick+0x58>)
 8000562:	781b      	ldrb	r3, [r3, #0]
 8000564:	4619      	mov	r1, r3
 8000566:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800056a:	fbb3 f3f1 	udiv	r3, r3, r1
 800056e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000572:	4618      	mov	r0, r3
 8000574:	f000 f943 	bl	80007fe <HAL_SYSTICK_Config>
 8000578:	4603      	mov	r3, r0
 800057a:	2b00      	cmp	r3, #0
 800057c:	d001      	beq.n	8000582 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800057e:	2301      	movs	r3, #1
 8000580:	e00e      	b.n	80005a0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000582:	687b      	ldr	r3, [r7, #4]
 8000584:	2b0f      	cmp	r3, #15
 8000586:	d80a      	bhi.n	800059e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000588:	2200      	movs	r2, #0
 800058a:	6879      	ldr	r1, [r7, #4]
 800058c:	f04f 30ff 	mov.w	r0, #4294967295
 8000590:	f000 f90b 	bl	80007aa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000594:	4a06      	ldr	r2, [pc, #24]	; (80005b0 <HAL_InitTick+0x5c>)
 8000596:	687b      	ldr	r3, [r7, #4]
 8000598:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800059a:	2300      	movs	r3, #0
 800059c:	e000      	b.n	80005a0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800059e:	2301      	movs	r3, #1
}
 80005a0:	4618      	mov	r0, r3
 80005a2:	3708      	adds	r7, #8
 80005a4:	46bd      	mov	sp, r7
 80005a6:	bd80      	pop	{r7, pc}
 80005a8:	2000000c 	.word	0x2000000c
 80005ac:	20000004 	.word	0x20000004
 80005b0:	20000000 	.word	0x20000000

080005b4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80005b4:	b480      	push	{r7}
 80005b6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80005b8:	4b06      	ldr	r3, [pc, #24]	; (80005d4 <HAL_IncTick+0x20>)
 80005ba:	781b      	ldrb	r3, [r3, #0]
 80005bc:	461a      	mov	r2, r3
 80005be:	4b06      	ldr	r3, [pc, #24]	; (80005d8 <HAL_IncTick+0x24>)
 80005c0:	681b      	ldr	r3, [r3, #0]
 80005c2:	4413      	add	r3, r2
 80005c4:	4a04      	ldr	r2, [pc, #16]	; (80005d8 <HAL_IncTick+0x24>)
 80005c6:	6013      	str	r3, [r2, #0]
}
 80005c8:	bf00      	nop
 80005ca:	46bd      	mov	sp, r7
 80005cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d0:	4770      	bx	lr
 80005d2:	bf00      	nop
 80005d4:	20000004 	.word	0x20000004
 80005d8:	2000002c 	.word	0x2000002c

080005dc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80005dc:	b480      	push	{r7}
 80005de:	af00      	add	r7, sp, #0
  return uwTick;
 80005e0:	4b03      	ldr	r3, [pc, #12]	; (80005f0 <HAL_GetTick+0x14>)
 80005e2:	681b      	ldr	r3, [r3, #0]
}
 80005e4:	4618      	mov	r0, r3
 80005e6:	46bd      	mov	sp, r7
 80005e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ec:	4770      	bx	lr
 80005ee:	bf00      	nop
 80005f0:	2000002c 	.word	0x2000002c

080005f4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80005f4:	b480      	push	{r7}
 80005f6:	b085      	sub	sp, #20
 80005f8:	af00      	add	r7, sp, #0
 80005fa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80005fc:	687b      	ldr	r3, [r7, #4]
 80005fe:	f003 0307 	and.w	r3, r3, #7
 8000602:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000604:	4b0c      	ldr	r3, [pc, #48]	; (8000638 <__NVIC_SetPriorityGrouping+0x44>)
 8000606:	68db      	ldr	r3, [r3, #12]
 8000608:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800060a:	68ba      	ldr	r2, [r7, #8]
 800060c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000610:	4013      	ands	r3, r2
 8000612:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000614:	68fb      	ldr	r3, [r7, #12]
 8000616:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000618:	68bb      	ldr	r3, [r7, #8]
 800061a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800061c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000620:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000624:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000626:	4a04      	ldr	r2, [pc, #16]	; (8000638 <__NVIC_SetPriorityGrouping+0x44>)
 8000628:	68bb      	ldr	r3, [r7, #8]
 800062a:	60d3      	str	r3, [r2, #12]
}
 800062c:	bf00      	nop
 800062e:	3714      	adds	r7, #20
 8000630:	46bd      	mov	sp, r7
 8000632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000636:	4770      	bx	lr
 8000638:	e000ed00 	.word	0xe000ed00

0800063c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800063c:	b480      	push	{r7}
 800063e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000640:	4b04      	ldr	r3, [pc, #16]	; (8000654 <__NVIC_GetPriorityGrouping+0x18>)
 8000642:	68db      	ldr	r3, [r3, #12]
 8000644:	0a1b      	lsrs	r3, r3, #8
 8000646:	f003 0307 	and.w	r3, r3, #7
}
 800064a:	4618      	mov	r0, r3
 800064c:	46bd      	mov	sp, r7
 800064e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000652:	4770      	bx	lr
 8000654:	e000ed00 	.word	0xe000ed00

08000658 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000658:	b480      	push	{r7}
 800065a:	b083      	sub	sp, #12
 800065c:	af00      	add	r7, sp, #0
 800065e:	4603      	mov	r3, r0
 8000660:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000662:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000666:	2b00      	cmp	r3, #0
 8000668:	db0b      	blt.n	8000682 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800066a:	79fb      	ldrb	r3, [r7, #7]
 800066c:	f003 021f 	and.w	r2, r3, #31
 8000670:	4907      	ldr	r1, [pc, #28]	; (8000690 <__NVIC_EnableIRQ+0x38>)
 8000672:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000676:	095b      	lsrs	r3, r3, #5
 8000678:	2001      	movs	r0, #1
 800067a:	fa00 f202 	lsl.w	r2, r0, r2
 800067e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000682:	bf00      	nop
 8000684:	370c      	adds	r7, #12
 8000686:	46bd      	mov	sp, r7
 8000688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800068c:	4770      	bx	lr
 800068e:	bf00      	nop
 8000690:	e000e100 	.word	0xe000e100

08000694 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000694:	b480      	push	{r7}
 8000696:	b083      	sub	sp, #12
 8000698:	af00      	add	r7, sp, #0
 800069a:	4603      	mov	r3, r0
 800069c:	6039      	str	r1, [r7, #0]
 800069e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80006a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006a4:	2b00      	cmp	r3, #0
 80006a6:	db0a      	blt.n	80006be <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006a8:	683b      	ldr	r3, [r7, #0]
 80006aa:	b2da      	uxtb	r2, r3
 80006ac:	490c      	ldr	r1, [pc, #48]	; (80006e0 <__NVIC_SetPriority+0x4c>)
 80006ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006b2:	0112      	lsls	r2, r2, #4
 80006b4:	b2d2      	uxtb	r2, r2
 80006b6:	440b      	add	r3, r1
 80006b8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80006bc:	e00a      	b.n	80006d4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006be:	683b      	ldr	r3, [r7, #0]
 80006c0:	b2da      	uxtb	r2, r3
 80006c2:	4908      	ldr	r1, [pc, #32]	; (80006e4 <__NVIC_SetPriority+0x50>)
 80006c4:	79fb      	ldrb	r3, [r7, #7]
 80006c6:	f003 030f 	and.w	r3, r3, #15
 80006ca:	3b04      	subs	r3, #4
 80006cc:	0112      	lsls	r2, r2, #4
 80006ce:	b2d2      	uxtb	r2, r2
 80006d0:	440b      	add	r3, r1
 80006d2:	761a      	strb	r2, [r3, #24]
}
 80006d4:	bf00      	nop
 80006d6:	370c      	adds	r7, #12
 80006d8:	46bd      	mov	sp, r7
 80006da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006de:	4770      	bx	lr
 80006e0:	e000e100 	.word	0xe000e100
 80006e4:	e000ed00 	.word	0xe000ed00

080006e8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80006e8:	b480      	push	{r7}
 80006ea:	b089      	sub	sp, #36	; 0x24
 80006ec:	af00      	add	r7, sp, #0
 80006ee:	60f8      	str	r0, [r7, #12]
 80006f0:	60b9      	str	r1, [r7, #8]
 80006f2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80006f4:	68fb      	ldr	r3, [r7, #12]
 80006f6:	f003 0307 	and.w	r3, r3, #7
 80006fa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80006fc:	69fb      	ldr	r3, [r7, #28]
 80006fe:	f1c3 0307 	rsb	r3, r3, #7
 8000702:	2b04      	cmp	r3, #4
 8000704:	bf28      	it	cs
 8000706:	2304      	movcs	r3, #4
 8000708:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800070a:	69fb      	ldr	r3, [r7, #28]
 800070c:	3304      	adds	r3, #4
 800070e:	2b06      	cmp	r3, #6
 8000710:	d902      	bls.n	8000718 <NVIC_EncodePriority+0x30>
 8000712:	69fb      	ldr	r3, [r7, #28]
 8000714:	3b03      	subs	r3, #3
 8000716:	e000      	b.n	800071a <NVIC_EncodePriority+0x32>
 8000718:	2300      	movs	r3, #0
 800071a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800071c:	f04f 32ff 	mov.w	r2, #4294967295
 8000720:	69bb      	ldr	r3, [r7, #24]
 8000722:	fa02 f303 	lsl.w	r3, r2, r3
 8000726:	43da      	mvns	r2, r3
 8000728:	68bb      	ldr	r3, [r7, #8]
 800072a:	401a      	ands	r2, r3
 800072c:	697b      	ldr	r3, [r7, #20]
 800072e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000730:	f04f 31ff 	mov.w	r1, #4294967295
 8000734:	697b      	ldr	r3, [r7, #20]
 8000736:	fa01 f303 	lsl.w	r3, r1, r3
 800073a:	43d9      	mvns	r1, r3
 800073c:	687b      	ldr	r3, [r7, #4]
 800073e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000740:	4313      	orrs	r3, r2
         );
}
 8000742:	4618      	mov	r0, r3
 8000744:	3724      	adds	r7, #36	; 0x24
 8000746:	46bd      	mov	sp, r7
 8000748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800074c:	4770      	bx	lr
	...

08000750 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000750:	b580      	push	{r7, lr}
 8000752:	b082      	sub	sp, #8
 8000754:	af00      	add	r7, sp, #0
 8000756:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000758:	687b      	ldr	r3, [r7, #4]
 800075a:	3b01      	subs	r3, #1
 800075c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000760:	d301      	bcc.n	8000766 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000762:	2301      	movs	r3, #1
 8000764:	e00f      	b.n	8000786 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000766:	4a0a      	ldr	r2, [pc, #40]	; (8000790 <SysTick_Config+0x40>)
 8000768:	687b      	ldr	r3, [r7, #4]
 800076a:	3b01      	subs	r3, #1
 800076c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800076e:	210f      	movs	r1, #15
 8000770:	f04f 30ff 	mov.w	r0, #4294967295
 8000774:	f7ff ff8e 	bl	8000694 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000778:	4b05      	ldr	r3, [pc, #20]	; (8000790 <SysTick_Config+0x40>)
 800077a:	2200      	movs	r2, #0
 800077c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800077e:	4b04      	ldr	r3, [pc, #16]	; (8000790 <SysTick_Config+0x40>)
 8000780:	2207      	movs	r2, #7
 8000782:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000784:	2300      	movs	r3, #0
}
 8000786:	4618      	mov	r0, r3
 8000788:	3708      	adds	r7, #8
 800078a:	46bd      	mov	sp, r7
 800078c:	bd80      	pop	{r7, pc}
 800078e:	bf00      	nop
 8000790:	e000e010 	.word	0xe000e010

08000794 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000794:	b580      	push	{r7, lr}
 8000796:	b082      	sub	sp, #8
 8000798:	af00      	add	r7, sp, #0
 800079a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800079c:	6878      	ldr	r0, [r7, #4]
 800079e:	f7ff ff29 	bl	80005f4 <__NVIC_SetPriorityGrouping>
}
 80007a2:	bf00      	nop
 80007a4:	3708      	adds	r7, #8
 80007a6:	46bd      	mov	sp, r7
 80007a8:	bd80      	pop	{r7, pc}

080007aa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80007aa:	b580      	push	{r7, lr}
 80007ac:	b086      	sub	sp, #24
 80007ae:	af00      	add	r7, sp, #0
 80007b0:	4603      	mov	r3, r0
 80007b2:	60b9      	str	r1, [r7, #8]
 80007b4:	607a      	str	r2, [r7, #4]
 80007b6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80007b8:	2300      	movs	r3, #0
 80007ba:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80007bc:	f7ff ff3e 	bl	800063c <__NVIC_GetPriorityGrouping>
 80007c0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80007c2:	687a      	ldr	r2, [r7, #4]
 80007c4:	68b9      	ldr	r1, [r7, #8]
 80007c6:	6978      	ldr	r0, [r7, #20]
 80007c8:	f7ff ff8e 	bl	80006e8 <NVIC_EncodePriority>
 80007cc:	4602      	mov	r2, r0
 80007ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80007d2:	4611      	mov	r1, r2
 80007d4:	4618      	mov	r0, r3
 80007d6:	f7ff ff5d 	bl	8000694 <__NVIC_SetPriority>
}
 80007da:	bf00      	nop
 80007dc:	3718      	adds	r7, #24
 80007de:	46bd      	mov	sp, r7
 80007e0:	bd80      	pop	{r7, pc}

080007e2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80007e2:	b580      	push	{r7, lr}
 80007e4:	b082      	sub	sp, #8
 80007e6:	af00      	add	r7, sp, #0
 80007e8:	4603      	mov	r3, r0
 80007ea:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80007ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007f0:	4618      	mov	r0, r3
 80007f2:	f7ff ff31 	bl	8000658 <__NVIC_EnableIRQ>
}
 80007f6:	bf00      	nop
 80007f8:	3708      	adds	r7, #8
 80007fa:	46bd      	mov	sp, r7
 80007fc:	bd80      	pop	{r7, pc}

080007fe <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80007fe:	b580      	push	{r7, lr}
 8000800:	b082      	sub	sp, #8
 8000802:	af00      	add	r7, sp, #0
 8000804:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000806:	6878      	ldr	r0, [r7, #4]
 8000808:	f7ff ffa2 	bl	8000750 <SysTick_Config>
 800080c:	4603      	mov	r3, r0
}
 800080e:	4618      	mov	r0, r3
 8000810:	3708      	adds	r7, #8
 8000812:	46bd      	mov	sp, r7
 8000814:	bd80      	pop	{r7, pc}

08000816 <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 8000816:	b580      	push	{r7, lr}
 8000818:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 800081a:	f000 f802 	bl	8000822 <HAL_SYSTICK_Callback>
}
 800081e:	bf00      	nop
 8000820:	bd80      	pop	{r7, pc}

08000822 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8000822:	b480      	push	{r7}
 8000824:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 8000826:	bf00      	nop
 8000828:	46bd      	mov	sp, r7
 800082a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800082e:	4770      	bx	lr

08000830 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000830:	b480      	push	{r7}
 8000832:	b089      	sub	sp, #36	; 0x24
 8000834:	af00      	add	r7, sp, #0
 8000836:	6078      	str	r0, [r7, #4]
 8000838:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800083a:	2300      	movs	r3, #0
 800083c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800083e:	2300      	movs	r3, #0
 8000840:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000842:	2300      	movs	r3, #0
 8000844:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000846:	2300      	movs	r3, #0
 8000848:	61fb      	str	r3, [r7, #28]
 800084a:	e165      	b.n	8000b18 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800084c:	2201      	movs	r2, #1
 800084e:	69fb      	ldr	r3, [r7, #28]
 8000850:	fa02 f303 	lsl.w	r3, r2, r3
 8000854:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000856:	683b      	ldr	r3, [r7, #0]
 8000858:	681b      	ldr	r3, [r3, #0]
 800085a:	697a      	ldr	r2, [r7, #20]
 800085c:	4013      	ands	r3, r2
 800085e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000860:	693a      	ldr	r2, [r7, #16]
 8000862:	697b      	ldr	r3, [r7, #20]
 8000864:	429a      	cmp	r2, r3
 8000866:	f040 8154 	bne.w	8000b12 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800086a:	683b      	ldr	r3, [r7, #0]
 800086c:	685b      	ldr	r3, [r3, #4]
 800086e:	2b01      	cmp	r3, #1
 8000870:	d00b      	beq.n	800088a <HAL_GPIO_Init+0x5a>
 8000872:	683b      	ldr	r3, [r7, #0]
 8000874:	685b      	ldr	r3, [r3, #4]
 8000876:	2b02      	cmp	r3, #2
 8000878:	d007      	beq.n	800088a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800087a:	683b      	ldr	r3, [r7, #0]
 800087c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800087e:	2b11      	cmp	r3, #17
 8000880:	d003      	beq.n	800088a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000882:	683b      	ldr	r3, [r7, #0]
 8000884:	685b      	ldr	r3, [r3, #4]
 8000886:	2b12      	cmp	r3, #18
 8000888:	d130      	bne.n	80008ec <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800088a:	687b      	ldr	r3, [r7, #4]
 800088c:	689b      	ldr	r3, [r3, #8]
 800088e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000890:	69fb      	ldr	r3, [r7, #28]
 8000892:	005b      	lsls	r3, r3, #1
 8000894:	2203      	movs	r2, #3
 8000896:	fa02 f303 	lsl.w	r3, r2, r3
 800089a:	43db      	mvns	r3, r3
 800089c:	69ba      	ldr	r2, [r7, #24]
 800089e:	4013      	ands	r3, r2
 80008a0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80008a2:	683b      	ldr	r3, [r7, #0]
 80008a4:	68da      	ldr	r2, [r3, #12]
 80008a6:	69fb      	ldr	r3, [r7, #28]
 80008a8:	005b      	lsls	r3, r3, #1
 80008aa:	fa02 f303 	lsl.w	r3, r2, r3
 80008ae:	69ba      	ldr	r2, [r7, #24]
 80008b0:	4313      	orrs	r3, r2
 80008b2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	69ba      	ldr	r2, [r7, #24]
 80008b8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80008ba:	687b      	ldr	r3, [r7, #4]
 80008bc:	685b      	ldr	r3, [r3, #4]
 80008be:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80008c0:	2201      	movs	r2, #1
 80008c2:	69fb      	ldr	r3, [r7, #28]
 80008c4:	fa02 f303 	lsl.w	r3, r2, r3
 80008c8:	43db      	mvns	r3, r3
 80008ca:	69ba      	ldr	r2, [r7, #24]
 80008cc:	4013      	ands	r3, r2
 80008ce:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80008d0:	683b      	ldr	r3, [r7, #0]
 80008d2:	685b      	ldr	r3, [r3, #4]
 80008d4:	091b      	lsrs	r3, r3, #4
 80008d6:	f003 0201 	and.w	r2, r3, #1
 80008da:	69fb      	ldr	r3, [r7, #28]
 80008dc:	fa02 f303 	lsl.w	r3, r2, r3
 80008e0:	69ba      	ldr	r2, [r7, #24]
 80008e2:	4313      	orrs	r3, r2
 80008e4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80008e6:	687b      	ldr	r3, [r7, #4]
 80008e8:	69ba      	ldr	r2, [r7, #24]
 80008ea:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80008ec:	687b      	ldr	r3, [r7, #4]
 80008ee:	68db      	ldr	r3, [r3, #12]
 80008f0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80008f2:	69fb      	ldr	r3, [r7, #28]
 80008f4:	005b      	lsls	r3, r3, #1
 80008f6:	2203      	movs	r2, #3
 80008f8:	fa02 f303 	lsl.w	r3, r2, r3
 80008fc:	43db      	mvns	r3, r3
 80008fe:	69ba      	ldr	r2, [r7, #24]
 8000900:	4013      	ands	r3, r2
 8000902:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000904:	683b      	ldr	r3, [r7, #0]
 8000906:	689a      	ldr	r2, [r3, #8]
 8000908:	69fb      	ldr	r3, [r7, #28]
 800090a:	005b      	lsls	r3, r3, #1
 800090c:	fa02 f303 	lsl.w	r3, r2, r3
 8000910:	69ba      	ldr	r2, [r7, #24]
 8000912:	4313      	orrs	r3, r2
 8000914:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8000916:	687b      	ldr	r3, [r7, #4]
 8000918:	69ba      	ldr	r2, [r7, #24]
 800091a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800091c:	683b      	ldr	r3, [r7, #0]
 800091e:	685b      	ldr	r3, [r3, #4]
 8000920:	2b02      	cmp	r3, #2
 8000922:	d003      	beq.n	800092c <HAL_GPIO_Init+0xfc>
 8000924:	683b      	ldr	r3, [r7, #0]
 8000926:	685b      	ldr	r3, [r3, #4]
 8000928:	2b12      	cmp	r3, #18
 800092a:	d123      	bne.n	8000974 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800092c:	69fb      	ldr	r3, [r7, #28]
 800092e:	08da      	lsrs	r2, r3, #3
 8000930:	687b      	ldr	r3, [r7, #4]
 8000932:	3208      	adds	r2, #8
 8000934:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000938:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800093a:	69fb      	ldr	r3, [r7, #28]
 800093c:	f003 0307 	and.w	r3, r3, #7
 8000940:	009b      	lsls	r3, r3, #2
 8000942:	220f      	movs	r2, #15
 8000944:	fa02 f303 	lsl.w	r3, r2, r3
 8000948:	43db      	mvns	r3, r3
 800094a:	69ba      	ldr	r2, [r7, #24]
 800094c:	4013      	ands	r3, r2
 800094e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000950:	683b      	ldr	r3, [r7, #0]
 8000952:	691a      	ldr	r2, [r3, #16]
 8000954:	69fb      	ldr	r3, [r7, #28]
 8000956:	f003 0307 	and.w	r3, r3, #7
 800095a:	009b      	lsls	r3, r3, #2
 800095c:	fa02 f303 	lsl.w	r3, r2, r3
 8000960:	69ba      	ldr	r2, [r7, #24]
 8000962:	4313      	orrs	r3, r2
 8000964:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000966:	69fb      	ldr	r3, [r7, #28]
 8000968:	08da      	lsrs	r2, r3, #3
 800096a:	687b      	ldr	r3, [r7, #4]
 800096c:	3208      	adds	r2, #8
 800096e:	69b9      	ldr	r1, [r7, #24]
 8000970:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	681b      	ldr	r3, [r3, #0]
 8000978:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800097a:	69fb      	ldr	r3, [r7, #28]
 800097c:	005b      	lsls	r3, r3, #1
 800097e:	2203      	movs	r2, #3
 8000980:	fa02 f303 	lsl.w	r3, r2, r3
 8000984:	43db      	mvns	r3, r3
 8000986:	69ba      	ldr	r2, [r7, #24]
 8000988:	4013      	ands	r3, r2
 800098a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800098c:	683b      	ldr	r3, [r7, #0]
 800098e:	685b      	ldr	r3, [r3, #4]
 8000990:	f003 0203 	and.w	r2, r3, #3
 8000994:	69fb      	ldr	r3, [r7, #28]
 8000996:	005b      	lsls	r3, r3, #1
 8000998:	fa02 f303 	lsl.w	r3, r2, r3
 800099c:	69ba      	ldr	r2, [r7, #24]
 800099e:	4313      	orrs	r3, r2
 80009a0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	69ba      	ldr	r2, [r7, #24]
 80009a6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80009a8:	683b      	ldr	r3, [r7, #0]
 80009aa:	685b      	ldr	r3, [r3, #4]
 80009ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009b0:	2b00      	cmp	r3, #0
 80009b2:	f000 80ae 	beq.w	8000b12 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009b6:	2300      	movs	r3, #0
 80009b8:	60fb      	str	r3, [r7, #12]
 80009ba:	4b5d      	ldr	r3, [pc, #372]	; (8000b30 <HAL_GPIO_Init+0x300>)
 80009bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009be:	4a5c      	ldr	r2, [pc, #368]	; (8000b30 <HAL_GPIO_Init+0x300>)
 80009c0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009c4:	6453      	str	r3, [r2, #68]	; 0x44
 80009c6:	4b5a      	ldr	r3, [pc, #360]	; (8000b30 <HAL_GPIO_Init+0x300>)
 80009c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009ca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80009ce:	60fb      	str	r3, [r7, #12]
 80009d0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80009d2:	4a58      	ldr	r2, [pc, #352]	; (8000b34 <HAL_GPIO_Init+0x304>)
 80009d4:	69fb      	ldr	r3, [r7, #28]
 80009d6:	089b      	lsrs	r3, r3, #2
 80009d8:	3302      	adds	r3, #2
 80009da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80009de:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80009e0:	69fb      	ldr	r3, [r7, #28]
 80009e2:	f003 0303 	and.w	r3, r3, #3
 80009e6:	009b      	lsls	r3, r3, #2
 80009e8:	220f      	movs	r2, #15
 80009ea:	fa02 f303 	lsl.w	r3, r2, r3
 80009ee:	43db      	mvns	r3, r3
 80009f0:	69ba      	ldr	r2, [r7, #24]
 80009f2:	4013      	ands	r3, r2
 80009f4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	4a4f      	ldr	r2, [pc, #316]	; (8000b38 <HAL_GPIO_Init+0x308>)
 80009fa:	4293      	cmp	r3, r2
 80009fc:	d025      	beq.n	8000a4a <HAL_GPIO_Init+0x21a>
 80009fe:	687b      	ldr	r3, [r7, #4]
 8000a00:	4a4e      	ldr	r2, [pc, #312]	; (8000b3c <HAL_GPIO_Init+0x30c>)
 8000a02:	4293      	cmp	r3, r2
 8000a04:	d01f      	beq.n	8000a46 <HAL_GPIO_Init+0x216>
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	4a4d      	ldr	r2, [pc, #308]	; (8000b40 <HAL_GPIO_Init+0x310>)
 8000a0a:	4293      	cmp	r3, r2
 8000a0c:	d019      	beq.n	8000a42 <HAL_GPIO_Init+0x212>
 8000a0e:	687b      	ldr	r3, [r7, #4]
 8000a10:	4a4c      	ldr	r2, [pc, #304]	; (8000b44 <HAL_GPIO_Init+0x314>)
 8000a12:	4293      	cmp	r3, r2
 8000a14:	d013      	beq.n	8000a3e <HAL_GPIO_Init+0x20e>
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	4a4b      	ldr	r2, [pc, #300]	; (8000b48 <HAL_GPIO_Init+0x318>)
 8000a1a:	4293      	cmp	r3, r2
 8000a1c:	d00d      	beq.n	8000a3a <HAL_GPIO_Init+0x20a>
 8000a1e:	687b      	ldr	r3, [r7, #4]
 8000a20:	4a4a      	ldr	r2, [pc, #296]	; (8000b4c <HAL_GPIO_Init+0x31c>)
 8000a22:	4293      	cmp	r3, r2
 8000a24:	d007      	beq.n	8000a36 <HAL_GPIO_Init+0x206>
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	4a49      	ldr	r2, [pc, #292]	; (8000b50 <HAL_GPIO_Init+0x320>)
 8000a2a:	4293      	cmp	r3, r2
 8000a2c:	d101      	bne.n	8000a32 <HAL_GPIO_Init+0x202>
 8000a2e:	2306      	movs	r3, #6
 8000a30:	e00c      	b.n	8000a4c <HAL_GPIO_Init+0x21c>
 8000a32:	2307      	movs	r3, #7
 8000a34:	e00a      	b.n	8000a4c <HAL_GPIO_Init+0x21c>
 8000a36:	2305      	movs	r3, #5
 8000a38:	e008      	b.n	8000a4c <HAL_GPIO_Init+0x21c>
 8000a3a:	2304      	movs	r3, #4
 8000a3c:	e006      	b.n	8000a4c <HAL_GPIO_Init+0x21c>
 8000a3e:	2303      	movs	r3, #3
 8000a40:	e004      	b.n	8000a4c <HAL_GPIO_Init+0x21c>
 8000a42:	2302      	movs	r3, #2
 8000a44:	e002      	b.n	8000a4c <HAL_GPIO_Init+0x21c>
 8000a46:	2301      	movs	r3, #1
 8000a48:	e000      	b.n	8000a4c <HAL_GPIO_Init+0x21c>
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	69fa      	ldr	r2, [r7, #28]
 8000a4e:	f002 0203 	and.w	r2, r2, #3
 8000a52:	0092      	lsls	r2, r2, #2
 8000a54:	4093      	lsls	r3, r2
 8000a56:	69ba      	ldr	r2, [r7, #24]
 8000a58:	4313      	orrs	r3, r2
 8000a5a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000a5c:	4935      	ldr	r1, [pc, #212]	; (8000b34 <HAL_GPIO_Init+0x304>)
 8000a5e:	69fb      	ldr	r3, [r7, #28]
 8000a60:	089b      	lsrs	r3, r3, #2
 8000a62:	3302      	adds	r3, #2
 8000a64:	69ba      	ldr	r2, [r7, #24]
 8000a66:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000a6a:	4b3a      	ldr	r3, [pc, #232]	; (8000b54 <HAL_GPIO_Init+0x324>)
 8000a6c:	681b      	ldr	r3, [r3, #0]
 8000a6e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000a70:	693b      	ldr	r3, [r7, #16]
 8000a72:	43db      	mvns	r3, r3
 8000a74:	69ba      	ldr	r2, [r7, #24]
 8000a76:	4013      	ands	r3, r2
 8000a78:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000a7a:	683b      	ldr	r3, [r7, #0]
 8000a7c:	685b      	ldr	r3, [r3, #4]
 8000a7e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000a82:	2b00      	cmp	r3, #0
 8000a84:	d003      	beq.n	8000a8e <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8000a86:	69ba      	ldr	r2, [r7, #24]
 8000a88:	693b      	ldr	r3, [r7, #16]
 8000a8a:	4313      	orrs	r3, r2
 8000a8c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000a8e:	4a31      	ldr	r2, [pc, #196]	; (8000b54 <HAL_GPIO_Init+0x324>)
 8000a90:	69bb      	ldr	r3, [r7, #24]
 8000a92:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000a94:	4b2f      	ldr	r3, [pc, #188]	; (8000b54 <HAL_GPIO_Init+0x324>)
 8000a96:	685b      	ldr	r3, [r3, #4]
 8000a98:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000a9a:	693b      	ldr	r3, [r7, #16]
 8000a9c:	43db      	mvns	r3, r3
 8000a9e:	69ba      	ldr	r2, [r7, #24]
 8000aa0:	4013      	ands	r3, r2
 8000aa2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000aa4:	683b      	ldr	r3, [r7, #0]
 8000aa6:	685b      	ldr	r3, [r3, #4]
 8000aa8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000aac:	2b00      	cmp	r3, #0
 8000aae:	d003      	beq.n	8000ab8 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8000ab0:	69ba      	ldr	r2, [r7, #24]
 8000ab2:	693b      	ldr	r3, [r7, #16]
 8000ab4:	4313      	orrs	r3, r2
 8000ab6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000ab8:	4a26      	ldr	r2, [pc, #152]	; (8000b54 <HAL_GPIO_Init+0x324>)
 8000aba:	69bb      	ldr	r3, [r7, #24]
 8000abc:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000abe:	4b25      	ldr	r3, [pc, #148]	; (8000b54 <HAL_GPIO_Init+0x324>)
 8000ac0:	689b      	ldr	r3, [r3, #8]
 8000ac2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000ac4:	693b      	ldr	r3, [r7, #16]
 8000ac6:	43db      	mvns	r3, r3
 8000ac8:	69ba      	ldr	r2, [r7, #24]
 8000aca:	4013      	ands	r3, r2
 8000acc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000ace:	683b      	ldr	r3, [r7, #0]
 8000ad0:	685b      	ldr	r3, [r3, #4]
 8000ad2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000ad6:	2b00      	cmp	r3, #0
 8000ad8:	d003      	beq.n	8000ae2 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8000ada:	69ba      	ldr	r2, [r7, #24]
 8000adc:	693b      	ldr	r3, [r7, #16]
 8000ade:	4313      	orrs	r3, r2
 8000ae0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000ae2:	4a1c      	ldr	r2, [pc, #112]	; (8000b54 <HAL_GPIO_Init+0x324>)
 8000ae4:	69bb      	ldr	r3, [r7, #24]
 8000ae6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000ae8:	4b1a      	ldr	r3, [pc, #104]	; (8000b54 <HAL_GPIO_Init+0x324>)
 8000aea:	68db      	ldr	r3, [r3, #12]
 8000aec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000aee:	693b      	ldr	r3, [r7, #16]
 8000af0:	43db      	mvns	r3, r3
 8000af2:	69ba      	ldr	r2, [r7, #24]
 8000af4:	4013      	ands	r3, r2
 8000af6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000af8:	683b      	ldr	r3, [r7, #0]
 8000afa:	685b      	ldr	r3, [r3, #4]
 8000afc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000b00:	2b00      	cmp	r3, #0
 8000b02:	d003      	beq.n	8000b0c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8000b04:	69ba      	ldr	r2, [r7, #24]
 8000b06:	693b      	ldr	r3, [r7, #16]
 8000b08:	4313      	orrs	r3, r2
 8000b0a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000b0c:	4a11      	ldr	r2, [pc, #68]	; (8000b54 <HAL_GPIO_Init+0x324>)
 8000b0e:	69bb      	ldr	r3, [r7, #24]
 8000b10:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000b12:	69fb      	ldr	r3, [r7, #28]
 8000b14:	3301      	adds	r3, #1
 8000b16:	61fb      	str	r3, [r7, #28]
 8000b18:	69fb      	ldr	r3, [r7, #28]
 8000b1a:	2b0f      	cmp	r3, #15
 8000b1c:	f67f ae96 	bls.w	800084c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000b20:	bf00      	nop
 8000b22:	bf00      	nop
 8000b24:	3724      	adds	r7, #36	; 0x24
 8000b26:	46bd      	mov	sp, r7
 8000b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b2c:	4770      	bx	lr
 8000b2e:	bf00      	nop
 8000b30:	40023800 	.word	0x40023800
 8000b34:	40013800 	.word	0x40013800
 8000b38:	40020000 	.word	0x40020000
 8000b3c:	40020400 	.word	0x40020400
 8000b40:	40020800 	.word	0x40020800
 8000b44:	40020c00 	.word	0x40020c00
 8000b48:	40021000 	.word	0x40021000
 8000b4c:	40021400 	.word	0x40021400
 8000b50:	40021800 	.word	0x40021800
 8000b54:	40013c00 	.word	0x40013c00

08000b58 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8000b58:	b480      	push	{r7}
 8000b5a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8000b5c:	4b03      	ldr	r3, [pc, #12]	; (8000b6c <HAL_RCC_GetHCLKFreq+0x14>)
 8000b5e:	681b      	ldr	r3, [r3, #0]
}
 8000b60:	4618      	mov	r0, r3
 8000b62:	46bd      	mov	sp, r7
 8000b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b68:	4770      	bx	lr
 8000b6a:	bf00      	nop
 8000b6c:	2000000c 	.word	0x2000000c

08000b70 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8000b70:	b580      	push	{r7, lr}
 8000b72:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8000b74:	f7ff fff0 	bl	8000b58 <HAL_RCC_GetHCLKFreq>
 8000b78:	4602      	mov	r2, r0
 8000b7a:	4b05      	ldr	r3, [pc, #20]	; (8000b90 <HAL_RCC_GetPCLK1Freq+0x20>)
 8000b7c:	689b      	ldr	r3, [r3, #8]
 8000b7e:	0a9b      	lsrs	r3, r3, #10
 8000b80:	f003 0307 	and.w	r3, r3, #7
 8000b84:	4903      	ldr	r1, [pc, #12]	; (8000b94 <HAL_RCC_GetPCLK1Freq+0x24>)
 8000b86:	5ccb      	ldrb	r3, [r1, r3]
 8000b88:	fa22 f303 	lsr.w	r3, r2, r3
}
 8000b8c:	4618      	mov	r0, r3
 8000b8e:	bd80      	pop	{r7, pc}
 8000b90:	40023800 	.word	0x40023800
 8000b94:	08001c18 	.word	0x08001c18

08000b98 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8000b9c:	f7ff ffdc 	bl	8000b58 <HAL_RCC_GetHCLKFreq>
 8000ba0:	4602      	mov	r2, r0
 8000ba2:	4b05      	ldr	r3, [pc, #20]	; (8000bb8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8000ba4:	689b      	ldr	r3, [r3, #8]
 8000ba6:	0b5b      	lsrs	r3, r3, #13
 8000ba8:	f003 0307 	and.w	r3, r3, #7
 8000bac:	4903      	ldr	r1, [pc, #12]	; (8000bbc <HAL_RCC_GetPCLK2Freq+0x24>)
 8000bae:	5ccb      	ldrb	r3, [r1, r3]
 8000bb0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8000bb4:	4618      	mov	r0, r3
 8000bb6:	bd80      	pop	{r7, pc}
 8000bb8:	40023800 	.word	0x40023800
 8000bbc:	08001c18 	.word	0x08001c18

08000bc0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	b082      	sub	sp, #8
 8000bc4:	af00      	add	r7, sp, #0
 8000bc6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	d101      	bne.n	8000bd2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8000bce:	2301      	movs	r3, #1
 8000bd0:	e03f      	b.n	8000c52 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8000bd8:	b2db      	uxtb	r3, r3
 8000bda:	2b00      	cmp	r3, #0
 8000bdc:	d106      	bne.n	8000bec <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	2200      	movs	r2, #0
 8000be2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8000be6:	6878      	ldr	r0, [r7, #4]
 8000be8:	f000 ff4e 	bl	8001a88 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	2224      	movs	r2, #36	; 0x24
 8000bf0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	681b      	ldr	r3, [r3, #0]
 8000bf8:	68da      	ldr	r2, [r3, #12]
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	681b      	ldr	r3, [r3, #0]
 8000bfe:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8000c02:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8000c04:	6878      	ldr	r0, [r7, #4]
 8000c06:	f000 f9b1 	bl	8000f6c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	681b      	ldr	r3, [r3, #0]
 8000c0e:	691a      	ldr	r2, [r3, #16]
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	681b      	ldr	r3, [r3, #0]
 8000c14:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8000c18:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	681b      	ldr	r3, [r3, #0]
 8000c1e:	695a      	ldr	r2, [r3, #20]
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	681b      	ldr	r3, [r3, #0]
 8000c24:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8000c28:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	681b      	ldr	r3, [r3, #0]
 8000c2e:	68da      	ldr	r2, [r3, #12]
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	681b      	ldr	r3, [r3, #0]
 8000c34:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8000c38:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	2220      	movs	r2, #32
 8000c44:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	2220      	movs	r2, #32
 8000c4c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8000c50:	2300      	movs	r3, #0
}
 8000c52:	4618      	mov	r0, r3
 8000c54:	3708      	adds	r7, #8
 8000c56:	46bd      	mov	sp, r7
 8000c58:	bd80      	pop	{r7, pc}

08000c5a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8000c5a:	b580      	push	{r7, lr}
 8000c5c:	b088      	sub	sp, #32
 8000c5e:	af02      	add	r7, sp, #8
 8000c60:	60f8      	str	r0, [r7, #12]
 8000c62:	60b9      	str	r1, [r7, #8]
 8000c64:	603b      	str	r3, [r7, #0]
 8000c66:	4613      	mov	r3, r2
 8000c68:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8000c6e:	68fb      	ldr	r3, [r7, #12]
 8000c70:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8000c74:	b2db      	uxtb	r3, r3
 8000c76:	2b20      	cmp	r3, #32
 8000c78:	f040 8083 	bne.w	8000d82 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8000c7c:	68bb      	ldr	r3, [r7, #8]
 8000c7e:	2b00      	cmp	r3, #0
 8000c80:	d002      	beq.n	8000c88 <HAL_UART_Transmit+0x2e>
 8000c82:	88fb      	ldrh	r3, [r7, #6]
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	d101      	bne.n	8000c8c <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8000c88:	2301      	movs	r3, #1
 8000c8a:	e07b      	b.n	8000d84 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8000c8c:	68fb      	ldr	r3, [r7, #12]
 8000c8e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8000c92:	2b01      	cmp	r3, #1
 8000c94:	d101      	bne.n	8000c9a <HAL_UART_Transmit+0x40>
 8000c96:	2302      	movs	r3, #2
 8000c98:	e074      	b.n	8000d84 <HAL_UART_Transmit+0x12a>
 8000c9a:	68fb      	ldr	r3, [r7, #12]
 8000c9c:	2201      	movs	r2, #1
 8000c9e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8000ca2:	68fb      	ldr	r3, [r7, #12]
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8000ca8:	68fb      	ldr	r3, [r7, #12]
 8000caa:	2221      	movs	r2, #33	; 0x21
 8000cac:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8000cb0:	f7ff fc94 	bl	80005dc <HAL_GetTick>
 8000cb4:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8000cb6:	68fb      	ldr	r3, [r7, #12]
 8000cb8:	88fa      	ldrh	r2, [r7, #6]
 8000cba:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8000cbc:	68fb      	ldr	r3, [r7, #12]
 8000cbe:	88fa      	ldrh	r2, [r7, #6]
 8000cc0:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8000cc2:	68fb      	ldr	r3, [r7, #12]
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8000cca:	e042      	b.n	8000d52 <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 8000ccc:	68fb      	ldr	r3, [r7, #12]
 8000cce:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8000cd0:	b29b      	uxth	r3, r3
 8000cd2:	3b01      	subs	r3, #1
 8000cd4:	b29a      	uxth	r2, r3
 8000cd6:	68fb      	ldr	r3, [r7, #12]
 8000cd8:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8000cda:	68fb      	ldr	r3, [r7, #12]
 8000cdc:	689b      	ldr	r3, [r3, #8]
 8000cde:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000ce2:	d122      	bne.n	8000d2a <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8000ce4:	683b      	ldr	r3, [r7, #0]
 8000ce6:	9300      	str	r3, [sp, #0]
 8000ce8:	697b      	ldr	r3, [r7, #20]
 8000cea:	2200      	movs	r2, #0
 8000cec:	2180      	movs	r1, #128	; 0x80
 8000cee:	68f8      	ldr	r0, [r7, #12]
 8000cf0:	f000 f8f2 	bl	8000ed8 <UART_WaitOnFlagUntilTimeout>
 8000cf4:	4603      	mov	r3, r0
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	d001      	beq.n	8000cfe <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 8000cfa:	2303      	movs	r3, #3
 8000cfc:	e042      	b.n	8000d84 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8000cfe:	68bb      	ldr	r3, [r7, #8]
 8000d00:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8000d02:	693b      	ldr	r3, [r7, #16]
 8000d04:	881b      	ldrh	r3, [r3, #0]
 8000d06:	461a      	mov	r2, r3
 8000d08:	68fb      	ldr	r3, [r7, #12]
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8000d10:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8000d12:	68fb      	ldr	r3, [r7, #12]
 8000d14:	691b      	ldr	r3, [r3, #16]
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	d103      	bne.n	8000d22 <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 8000d1a:	68bb      	ldr	r3, [r7, #8]
 8000d1c:	3302      	adds	r3, #2
 8000d1e:	60bb      	str	r3, [r7, #8]
 8000d20:	e017      	b.n	8000d52 <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 8000d22:	68bb      	ldr	r3, [r7, #8]
 8000d24:	3301      	adds	r3, #1
 8000d26:	60bb      	str	r3, [r7, #8]
 8000d28:	e013      	b.n	8000d52 <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8000d2a:	683b      	ldr	r3, [r7, #0]
 8000d2c:	9300      	str	r3, [sp, #0]
 8000d2e:	697b      	ldr	r3, [r7, #20]
 8000d30:	2200      	movs	r2, #0
 8000d32:	2180      	movs	r1, #128	; 0x80
 8000d34:	68f8      	ldr	r0, [r7, #12]
 8000d36:	f000 f8cf 	bl	8000ed8 <UART_WaitOnFlagUntilTimeout>
 8000d3a:	4603      	mov	r3, r0
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	d001      	beq.n	8000d44 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 8000d40:	2303      	movs	r3, #3
 8000d42:	e01f      	b.n	8000d84 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8000d44:	68bb      	ldr	r3, [r7, #8]
 8000d46:	1c5a      	adds	r2, r3, #1
 8000d48:	60ba      	str	r2, [r7, #8]
 8000d4a:	781a      	ldrb	r2, [r3, #0]
 8000d4c:	68fb      	ldr	r3, [r7, #12]
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8000d52:	68fb      	ldr	r3, [r7, #12]
 8000d54:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8000d56:	b29b      	uxth	r3, r3
 8000d58:	2b00      	cmp	r3, #0
 8000d5a:	d1b7      	bne.n	8000ccc <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8000d5c:	683b      	ldr	r3, [r7, #0]
 8000d5e:	9300      	str	r3, [sp, #0]
 8000d60:	697b      	ldr	r3, [r7, #20]
 8000d62:	2200      	movs	r2, #0
 8000d64:	2140      	movs	r1, #64	; 0x40
 8000d66:	68f8      	ldr	r0, [r7, #12]
 8000d68:	f000 f8b6 	bl	8000ed8 <UART_WaitOnFlagUntilTimeout>
 8000d6c:	4603      	mov	r3, r0
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	d001      	beq.n	8000d76 <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 8000d72:	2303      	movs	r3, #3
 8000d74:	e006      	b.n	8000d84 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8000d76:	68fb      	ldr	r3, [r7, #12]
 8000d78:	2220      	movs	r2, #32
 8000d7a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8000d7e:	2300      	movs	r3, #0
 8000d80:	e000      	b.n	8000d84 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8000d82:	2302      	movs	r3, #2
  }
}
 8000d84:	4618      	mov	r0, r3
 8000d86:	3718      	adds	r7, #24
 8000d88:	46bd      	mov	sp, r7
 8000d8a:	bd80      	pop	{r7, pc}

08000d8c <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	b088      	sub	sp, #32
 8000d90:	af02      	add	r7, sp, #8
 8000d92:	60f8      	str	r0, [r7, #12]
 8000d94:	60b9      	str	r1, [r7, #8]
 8000d96:	603b      	str	r3, [r7, #0]
 8000d98:	4613      	mov	r3, r2
 8000d9a:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8000d9c:	2300      	movs	r3, #0
 8000d9e:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8000da0:	68fb      	ldr	r3, [r7, #12]
 8000da2:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8000da6:	b2db      	uxtb	r3, r3
 8000da8:	2b20      	cmp	r3, #32
 8000daa:	f040 8090 	bne.w	8000ece <HAL_UART_Receive+0x142>
  {
    if ((pData == NULL) || (Size == 0U))
 8000dae:	68bb      	ldr	r3, [r7, #8]
 8000db0:	2b00      	cmp	r3, #0
 8000db2:	d002      	beq.n	8000dba <HAL_UART_Receive+0x2e>
 8000db4:	88fb      	ldrh	r3, [r7, #6]
 8000db6:	2b00      	cmp	r3, #0
 8000db8:	d101      	bne.n	8000dbe <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8000dba:	2301      	movs	r3, #1
 8000dbc:	e088      	b.n	8000ed0 <HAL_UART_Receive+0x144>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8000dbe:	68fb      	ldr	r3, [r7, #12]
 8000dc0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8000dc4:	2b01      	cmp	r3, #1
 8000dc6:	d101      	bne.n	8000dcc <HAL_UART_Receive+0x40>
 8000dc8:	2302      	movs	r3, #2
 8000dca:	e081      	b.n	8000ed0 <HAL_UART_Receive+0x144>
 8000dcc:	68fb      	ldr	r3, [r7, #12]
 8000dce:	2201      	movs	r2, #1
 8000dd0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8000dd4:	68fb      	ldr	r3, [r7, #12]
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8000dda:	68fb      	ldr	r3, [r7, #12]
 8000ddc:	2222      	movs	r2, #34	; 0x22
 8000dde:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8000de2:	f7ff fbfb 	bl	80005dc <HAL_GetTick>
 8000de6:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8000de8:	68fb      	ldr	r3, [r7, #12]
 8000dea:	88fa      	ldrh	r2, [r7, #6]
 8000dec:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8000dee:	68fb      	ldr	r3, [r7, #12]
 8000df0:	88fa      	ldrh	r2, [r7, #6]
 8000df2:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8000df4:	68fb      	ldr	r3, [r7, #12]
 8000df6:	2200      	movs	r2, #0
 8000df8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8000dfc:	e05c      	b.n	8000eb8 <HAL_UART_Receive+0x12c>
    {
      huart->RxXferCount--;
 8000dfe:	68fb      	ldr	r3, [r7, #12]
 8000e00:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8000e02:	b29b      	uxth	r3, r3
 8000e04:	3b01      	subs	r3, #1
 8000e06:	b29a      	uxth	r2, r3
 8000e08:	68fb      	ldr	r3, [r7, #12]
 8000e0a:	85da      	strh	r2, [r3, #46]	; 0x2e
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8000e0c:	68fb      	ldr	r3, [r7, #12]
 8000e0e:	689b      	ldr	r3, [r3, #8]
 8000e10:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000e14:	d12b      	bne.n	8000e6e <HAL_UART_Receive+0xe2>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8000e16:	683b      	ldr	r3, [r7, #0]
 8000e18:	9300      	str	r3, [sp, #0]
 8000e1a:	697b      	ldr	r3, [r7, #20]
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	2120      	movs	r1, #32
 8000e20:	68f8      	ldr	r0, [r7, #12]
 8000e22:	f000 f859 	bl	8000ed8 <UART_WaitOnFlagUntilTimeout>
 8000e26:	4603      	mov	r3, r0
 8000e28:	2b00      	cmp	r3, #0
 8000e2a:	d001      	beq.n	8000e30 <HAL_UART_Receive+0xa4>
        {
          return HAL_TIMEOUT;
 8000e2c:	2303      	movs	r3, #3
 8000e2e:	e04f      	b.n	8000ed0 <HAL_UART_Receive+0x144>
        }
        tmp = (uint16_t *) pData;
 8000e30:	68bb      	ldr	r3, [r7, #8]
 8000e32:	613b      	str	r3, [r7, #16]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8000e34:	68fb      	ldr	r3, [r7, #12]
 8000e36:	691b      	ldr	r3, [r3, #16]
 8000e38:	2b00      	cmp	r3, #0
 8000e3a:	d10c      	bne.n	8000e56 <HAL_UART_Receive+0xca>
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8000e3c:	68fb      	ldr	r3, [r7, #12]
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	685b      	ldr	r3, [r3, #4]
 8000e42:	b29b      	uxth	r3, r3
 8000e44:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8000e48:	b29a      	uxth	r2, r3
 8000e4a:	693b      	ldr	r3, [r7, #16]
 8000e4c:	801a      	strh	r2, [r3, #0]
          pData += 2U;
 8000e4e:	68bb      	ldr	r3, [r7, #8]
 8000e50:	3302      	adds	r3, #2
 8000e52:	60bb      	str	r3, [r7, #8]
 8000e54:	e030      	b.n	8000eb8 <HAL_UART_Receive+0x12c>
        }
        else
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8000e56:	68fb      	ldr	r3, [r7, #12]
 8000e58:	681b      	ldr	r3, [r3, #0]
 8000e5a:	685b      	ldr	r3, [r3, #4]
 8000e5c:	b29b      	uxth	r3, r3
 8000e5e:	b2db      	uxtb	r3, r3
 8000e60:	b29a      	uxth	r2, r3
 8000e62:	693b      	ldr	r3, [r7, #16]
 8000e64:	801a      	strh	r2, [r3, #0]
          pData += 1U;
 8000e66:	68bb      	ldr	r3, [r7, #8]
 8000e68:	3301      	adds	r3, #1
 8000e6a:	60bb      	str	r3, [r7, #8]
 8000e6c:	e024      	b.n	8000eb8 <HAL_UART_Receive+0x12c>
        }

      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8000e6e:	683b      	ldr	r3, [r7, #0]
 8000e70:	9300      	str	r3, [sp, #0]
 8000e72:	697b      	ldr	r3, [r7, #20]
 8000e74:	2200      	movs	r2, #0
 8000e76:	2120      	movs	r1, #32
 8000e78:	68f8      	ldr	r0, [r7, #12]
 8000e7a:	f000 f82d 	bl	8000ed8 <UART_WaitOnFlagUntilTimeout>
 8000e7e:	4603      	mov	r3, r0
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	d001      	beq.n	8000e88 <HAL_UART_Receive+0xfc>
        {
          return HAL_TIMEOUT;
 8000e84:	2303      	movs	r3, #3
 8000e86:	e023      	b.n	8000ed0 <HAL_UART_Receive+0x144>
        }
        if (huart->Init.Parity == UART_PARITY_NONE)
 8000e88:	68fb      	ldr	r3, [r7, #12]
 8000e8a:	691b      	ldr	r3, [r3, #16]
 8000e8c:	2b00      	cmp	r3, #0
 8000e8e:	d108      	bne.n	8000ea2 <HAL_UART_Receive+0x116>
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8000e90:	68fb      	ldr	r3, [r7, #12]
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	6859      	ldr	r1, [r3, #4]
 8000e96:	68bb      	ldr	r3, [r7, #8]
 8000e98:	1c5a      	adds	r2, r3, #1
 8000e9a:	60ba      	str	r2, [r7, #8]
 8000e9c:	b2ca      	uxtb	r2, r1
 8000e9e:	701a      	strb	r2, [r3, #0]
 8000ea0:	e00a      	b.n	8000eb8 <HAL_UART_Receive+0x12c>
        }
        else
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8000ea2:	68fb      	ldr	r3, [r7, #12]
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	685b      	ldr	r3, [r3, #4]
 8000ea8:	b2da      	uxtb	r2, r3
 8000eaa:	68bb      	ldr	r3, [r7, #8]
 8000eac:	1c59      	adds	r1, r3, #1
 8000eae:	60b9      	str	r1, [r7, #8]
 8000eb0:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8000eb4:	b2d2      	uxtb	r2, r2
 8000eb6:	701a      	strb	r2, [r3, #0]
    while (huart->RxXferCount > 0U)
 8000eb8:	68fb      	ldr	r3, [r7, #12]
 8000eba:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8000ebc:	b29b      	uxth	r3, r3
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	d19d      	bne.n	8000dfe <HAL_UART_Receive+0x72>

      }
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8000ec2:	68fb      	ldr	r3, [r7, #12]
 8000ec4:	2220      	movs	r2, #32
 8000ec6:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    return HAL_OK;
 8000eca:	2300      	movs	r3, #0
 8000ecc:	e000      	b.n	8000ed0 <HAL_UART_Receive+0x144>
  }
  else
  {
    return HAL_BUSY;
 8000ece:	2302      	movs	r3, #2
  }
}
 8000ed0:	4618      	mov	r0, r3
 8000ed2:	3718      	adds	r7, #24
 8000ed4:	46bd      	mov	sp, r7
 8000ed6:	bd80      	pop	{r7, pc}

08000ed8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	b084      	sub	sp, #16
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	60f8      	str	r0, [r7, #12]
 8000ee0:	60b9      	str	r1, [r7, #8]
 8000ee2:	603b      	str	r3, [r7, #0]
 8000ee4:	4613      	mov	r3, r2
 8000ee6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8000ee8:	e02c      	b.n	8000f44 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8000eea:	69bb      	ldr	r3, [r7, #24]
 8000eec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ef0:	d028      	beq.n	8000f44 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8000ef2:	69bb      	ldr	r3, [r7, #24]
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	d007      	beq.n	8000f08 <UART_WaitOnFlagUntilTimeout+0x30>
 8000ef8:	f7ff fb70 	bl	80005dc <HAL_GetTick>
 8000efc:	4602      	mov	r2, r0
 8000efe:	683b      	ldr	r3, [r7, #0]
 8000f00:	1ad3      	subs	r3, r2, r3
 8000f02:	69ba      	ldr	r2, [r7, #24]
 8000f04:	429a      	cmp	r2, r3
 8000f06:	d21d      	bcs.n	8000f44 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8000f08:	68fb      	ldr	r3, [r7, #12]
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	68da      	ldr	r2, [r3, #12]
 8000f0e:	68fb      	ldr	r3, [r7, #12]
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8000f16:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8000f18:	68fb      	ldr	r3, [r7, #12]
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	695a      	ldr	r2, [r3, #20]
 8000f1e:	68fb      	ldr	r3, [r7, #12]
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	f022 0201 	bic.w	r2, r2, #1
 8000f26:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8000f28:	68fb      	ldr	r3, [r7, #12]
 8000f2a:	2220      	movs	r2, #32
 8000f2c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8000f30:	68fb      	ldr	r3, [r7, #12]
 8000f32:	2220      	movs	r2, #32
 8000f34:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8000f38:	68fb      	ldr	r3, [r7, #12]
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8000f40:	2303      	movs	r3, #3
 8000f42:	e00f      	b.n	8000f64 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8000f44:	68fb      	ldr	r3, [r7, #12]
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	681a      	ldr	r2, [r3, #0]
 8000f4a:	68bb      	ldr	r3, [r7, #8]
 8000f4c:	4013      	ands	r3, r2
 8000f4e:	68ba      	ldr	r2, [r7, #8]
 8000f50:	429a      	cmp	r2, r3
 8000f52:	bf0c      	ite	eq
 8000f54:	2301      	moveq	r3, #1
 8000f56:	2300      	movne	r3, #0
 8000f58:	b2db      	uxtb	r3, r3
 8000f5a:	461a      	mov	r2, r3
 8000f5c:	79fb      	ldrb	r3, [r7, #7]
 8000f5e:	429a      	cmp	r2, r3
 8000f60:	d0c3      	beq.n	8000eea <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8000f62:	2300      	movs	r3, #0
}
 8000f64:	4618      	mov	r0, r3
 8000f66:	3710      	adds	r7, #16
 8000f68:	46bd      	mov	sp, r7
 8000f6a:	bd80      	pop	{r7, pc}

08000f6c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8000f6c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8000f70:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	f8c7 01fc 	str.w	r0, [r7, #508]	; 0x1fc
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8000f7a:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	691b      	ldr	r3, [r3, #16]
 8000f82:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8000f86:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8000f8a:	68d9      	ldr	r1, [r3, #12]
 8000f8c:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8000f90:	681a      	ldr	r2, [r3, #0]
 8000f92:	ea40 0301 	orr.w	r3, r0, r1
 8000f96:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8000f98:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8000f9c:	689a      	ldr	r2, [r3, #8]
 8000f9e:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8000fa2:	691b      	ldr	r3, [r3, #16]
 8000fa4:	431a      	orrs	r2, r3
 8000fa6:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8000faa:	695b      	ldr	r3, [r3, #20]
 8000fac:	431a      	orrs	r2, r3
 8000fae:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8000fb2:	69db      	ldr	r3, [r3, #28]
 8000fb4:	4313      	orrs	r3, r2
 8000fb6:	f8c7 3204 	str.w	r3, [r7, #516]	; 0x204
  MODIFY_REG(huart->Instance->CR1,
 8000fba:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	68db      	ldr	r3, [r3, #12]
 8000fc2:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8000fc6:	f021 010c 	bic.w	r1, r1, #12
 8000fca:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8000fce:	681a      	ldr	r2, [r3, #0]
 8000fd0:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
 8000fd4:	430b      	orrs	r3, r1
 8000fd6:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8000fd8:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	695b      	ldr	r3, [r3, #20]
 8000fe0:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8000fe4:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8000fe8:	6999      	ldr	r1, [r3, #24]
 8000fea:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8000fee:	681a      	ldr	r2, [r3, #0]
 8000ff0:	ea40 0301 	orr.w	r3, r0, r1
 8000ff4:	6153      	str	r3, [r2, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8000ff6:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8000ffa:	69db      	ldr	r3, [r3, #28]
 8000ffc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001000:	f040 824a 	bne.w	8001498 <UART_SetConfig+0x52c>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8001004:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8001008:	681a      	ldr	r2, [r3, #0]
 800100a:	4b96      	ldr	r3, [pc, #600]	; (8001264 <UART_SetConfig+0x2f8>)
 800100c:	429a      	cmp	r2, r3
 800100e:	d006      	beq.n	800101e <UART_SetConfig+0xb2>
 8001010:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8001014:	681a      	ldr	r2, [r3, #0]
 8001016:	4b94      	ldr	r3, [pc, #592]	; (8001268 <UART_SetConfig+0x2fc>)
 8001018:	429a      	cmp	r2, r3
 800101a:	f040 8129 	bne.w	8001270 <UART_SetConfig+0x304>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800101e:	f7ff fdbb 	bl	8000b98 <HAL_RCC_GetPCLK2Freq>
 8001022:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8001026:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800102a:	2200      	movs	r2, #0
 800102c:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
 8001030:	f8c7 21f4 	str.w	r2, [r7, #500]	; 0x1f4
 8001034:	e9d7 457c 	ldrd	r4, r5, [r7, #496]	; 0x1f0
 8001038:	4622      	mov	r2, r4
 800103a:	462b      	mov	r3, r5
 800103c:	1891      	adds	r1, r2, r2
 800103e:	f8c7 10d0 	str.w	r1, [r7, #208]	; 0xd0
 8001042:	415b      	adcs	r3, r3
 8001044:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8001048:	e9d7 2334 	ldrd	r2, r3, [r7, #208]	; 0xd0
 800104c:	4621      	mov	r1, r4
 800104e:	1851      	adds	r1, r2, r1
 8001050:	f8c7 10c8 	str.w	r1, [r7, #200]	; 0xc8
 8001054:	4629      	mov	r1, r5
 8001056:	414b      	adcs	r3, r1
 8001058:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800105c:	f04f 0200 	mov.w	r2, #0
 8001060:	f04f 0300 	mov.w	r3, #0
 8001064:	e9d7 8932 	ldrd	r8, r9, [r7, #200]	; 0xc8
 8001068:	4649      	mov	r1, r9
 800106a:	00cb      	lsls	r3, r1, #3
 800106c:	4641      	mov	r1, r8
 800106e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001072:	4641      	mov	r1, r8
 8001074:	00ca      	lsls	r2, r1, #3
 8001076:	4610      	mov	r0, r2
 8001078:	4619      	mov	r1, r3
 800107a:	4603      	mov	r3, r0
 800107c:	4622      	mov	r2, r4
 800107e:	189b      	adds	r3, r3, r2
 8001080:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 8001084:	462b      	mov	r3, r5
 8001086:	460a      	mov	r2, r1
 8001088:	eb42 0303 	adc.w	r3, r2, r3
 800108c:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
 8001090:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8001094:	685b      	ldr	r3, [r3, #4]
 8001096:	2200      	movs	r2, #0
 8001098:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 800109c:	f8c7 21e4 	str.w	r2, [r7, #484]	; 0x1e4
 80010a0:	e9d7 1278 	ldrd	r1, r2, [r7, #480]	; 0x1e0
 80010a4:	460b      	mov	r3, r1
 80010a6:	18db      	adds	r3, r3, r3
 80010a8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80010ac:	4613      	mov	r3, r2
 80010ae:	eb42 0303 	adc.w	r3, r2, r3
 80010b2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80010b6:	e9d7 2330 	ldrd	r2, r3, [r7, #192]	; 0xc0
 80010ba:	e9d7 017a 	ldrd	r0, r1, [r7, #488]	; 0x1e8
 80010be:	f7ff f8a9 	bl	8000214 <__aeabi_uldivmod>
 80010c2:	4602      	mov	r2, r0
 80010c4:	460b      	mov	r3, r1
 80010c6:	4b69      	ldr	r3, [pc, #420]	; (800126c <UART_SetConfig+0x300>)
 80010c8:	fba3 2302 	umull	r2, r3, r3, r2
 80010cc:	095b      	lsrs	r3, r3, #5
 80010ce:	011c      	lsls	r4, r3, #4
 80010d0:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80010d4:	2200      	movs	r2, #0
 80010d6:	f8c7 31d8 	str.w	r3, [r7, #472]	; 0x1d8
 80010da:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 80010de:	e9d7 8976 	ldrd	r8, r9, [r7, #472]	; 0x1d8
 80010e2:	4642      	mov	r2, r8
 80010e4:	464b      	mov	r3, r9
 80010e6:	1891      	adds	r1, r2, r2
 80010e8:	f8c7 10b8 	str.w	r1, [r7, #184]	; 0xb8
 80010ec:	415b      	adcs	r3, r3
 80010ee:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80010f2:	e9d7 232e 	ldrd	r2, r3, [r7, #184]	; 0xb8
 80010f6:	4641      	mov	r1, r8
 80010f8:	1851      	adds	r1, r2, r1
 80010fa:	f8c7 10b0 	str.w	r1, [r7, #176]	; 0xb0
 80010fe:	4649      	mov	r1, r9
 8001100:	414b      	adcs	r3, r1
 8001102:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8001106:	f04f 0200 	mov.w	r2, #0
 800110a:	f04f 0300 	mov.w	r3, #0
 800110e:	e9d7 ab2c 	ldrd	sl, fp, [r7, #176]	; 0xb0
 8001112:	4659      	mov	r1, fp
 8001114:	00cb      	lsls	r3, r1, #3
 8001116:	4651      	mov	r1, sl
 8001118:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800111c:	4651      	mov	r1, sl
 800111e:	00ca      	lsls	r2, r1, #3
 8001120:	4610      	mov	r0, r2
 8001122:	4619      	mov	r1, r3
 8001124:	4603      	mov	r3, r0
 8001126:	4642      	mov	r2, r8
 8001128:	189b      	adds	r3, r3, r2
 800112a:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
 800112e:	464b      	mov	r3, r9
 8001130:	460a      	mov	r2, r1
 8001132:	eb42 0303 	adc.w	r3, r2, r3
 8001136:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
 800113a:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800113e:	685b      	ldr	r3, [r3, #4]
 8001140:	2200      	movs	r2, #0
 8001142:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 8001146:	f8c7 21cc 	str.w	r2, [r7, #460]	; 0x1cc
 800114a:	e9d7 1272 	ldrd	r1, r2, [r7, #456]	; 0x1c8
 800114e:	460b      	mov	r3, r1
 8001150:	18db      	adds	r3, r3, r3
 8001152:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8001156:	4613      	mov	r3, r2
 8001158:	eb42 0303 	adc.w	r3, r2, r3
 800115c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8001160:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	; 0xa8
 8001164:	e9d7 0174 	ldrd	r0, r1, [r7, #464]	; 0x1d0
 8001168:	f7ff f854 	bl	8000214 <__aeabi_uldivmod>
 800116c:	4602      	mov	r2, r0
 800116e:	460b      	mov	r3, r1
 8001170:	4611      	mov	r1, r2
 8001172:	4b3e      	ldr	r3, [pc, #248]	; (800126c <UART_SetConfig+0x300>)
 8001174:	fba3 2301 	umull	r2, r3, r3, r1
 8001178:	095b      	lsrs	r3, r3, #5
 800117a:	2264      	movs	r2, #100	; 0x64
 800117c:	fb02 f303 	mul.w	r3, r2, r3
 8001180:	1acb      	subs	r3, r1, r3
 8001182:	00db      	lsls	r3, r3, #3
 8001184:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8001188:	4b38      	ldr	r3, [pc, #224]	; (800126c <UART_SetConfig+0x300>)
 800118a:	fba3 2302 	umull	r2, r3, r3, r2
 800118e:	095b      	lsrs	r3, r3, #5
 8001190:	005b      	lsls	r3, r3, #1
 8001192:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8001196:	441c      	add	r4, r3
 8001198:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800119c:	2200      	movs	r2, #0
 800119e:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 80011a2:	f8c7 21c4 	str.w	r2, [r7, #452]	; 0x1c4
 80011a6:	e9d7 8970 	ldrd	r8, r9, [r7, #448]	; 0x1c0
 80011aa:	4642      	mov	r2, r8
 80011ac:	464b      	mov	r3, r9
 80011ae:	1891      	adds	r1, r2, r2
 80011b0:	f8c7 10a0 	str.w	r1, [r7, #160]	; 0xa0
 80011b4:	415b      	adcs	r3, r3
 80011b6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80011ba:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	; 0xa0
 80011be:	4641      	mov	r1, r8
 80011c0:	1851      	adds	r1, r2, r1
 80011c2:	f8c7 1098 	str.w	r1, [r7, #152]	; 0x98
 80011c6:	4649      	mov	r1, r9
 80011c8:	414b      	adcs	r3, r1
 80011ca:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80011ce:	f04f 0200 	mov.w	r2, #0
 80011d2:	f04f 0300 	mov.w	r3, #0
 80011d6:	e9d7 ab26 	ldrd	sl, fp, [r7, #152]	; 0x98
 80011da:	4659      	mov	r1, fp
 80011dc:	00cb      	lsls	r3, r1, #3
 80011de:	4651      	mov	r1, sl
 80011e0:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80011e4:	4651      	mov	r1, sl
 80011e6:	00ca      	lsls	r2, r1, #3
 80011e8:	4610      	mov	r0, r2
 80011ea:	4619      	mov	r1, r3
 80011ec:	4603      	mov	r3, r0
 80011ee:	4642      	mov	r2, r8
 80011f0:	189b      	adds	r3, r3, r2
 80011f2:	f8c7 31b8 	str.w	r3, [r7, #440]	; 0x1b8
 80011f6:	464b      	mov	r3, r9
 80011f8:	460a      	mov	r2, r1
 80011fa:	eb42 0303 	adc.w	r3, r2, r3
 80011fe:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8001202:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8001206:	685b      	ldr	r3, [r3, #4]
 8001208:	2200      	movs	r2, #0
 800120a:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
 800120e:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
 8001212:	e9d7 126c 	ldrd	r1, r2, [r7, #432]	; 0x1b0
 8001216:	460b      	mov	r3, r1
 8001218:	18db      	adds	r3, r3, r3
 800121a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800121e:	4613      	mov	r3, r2
 8001220:	eb42 0303 	adc.w	r3, r2, r3
 8001224:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8001228:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	; 0x90
 800122c:	e9d7 016e 	ldrd	r0, r1, [r7, #440]	; 0x1b8
 8001230:	f7fe fff0 	bl	8000214 <__aeabi_uldivmod>
 8001234:	4602      	mov	r2, r0
 8001236:	460b      	mov	r3, r1
 8001238:	4b0c      	ldr	r3, [pc, #48]	; (800126c <UART_SetConfig+0x300>)
 800123a:	fba3 1302 	umull	r1, r3, r3, r2
 800123e:	095b      	lsrs	r3, r3, #5
 8001240:	2164      	movs	r1, #100	; 0x64
 8001242:	fb01 f303 	mul.w	r3, r1, r3
 8001246:	1ad3      	subs	r3, r2, r3
 8001248:	00db      	lsls	r3, r3, #3
 800124a:	3332      	adds	r3, #50	; 0x32
 800124c:	4a07      	ldr	r2, [pc, #28]	; (800126c <UART_SetConfig+0x300>)
 800124e:	fba2 2303 	umull	r2, r3, r2, r3
 8001252:	095b      	lsrs	r3, r3, #5
 8001254:	f003 0207 	and.w	r2, r3, #7
 8001258:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	4422      	add	r2, r4
 8001260:	609a      	str	r2, [r3, #8]
 8001262:	e34a      	b.n	80018fa <UART_SetConfig+0x98e>
 8001264:	40011000 	.word	0x40011000
 8001268:	40011400 	.word	0x40011400
 800126c:	51eb851f 	.word	0x51eb851f
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8001270:	f7ff fc7e 	bl	8000b70 <HAL_RCC_GetPCLK1Freq>
 8001274:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8001278:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800127c:	2200      	movs	r2, #0
 800127e:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 8001282:	f8c7 21ac 	str.w	r2, [r7, #428]	; 0x1ac
 8001286:	e9d7 456a 	ldrd	r4, r5, [r7, #424]	; 0x1a8
 800128a:	4622      	mov	r2, r4
 800128c:	462b      	mov	r3, r5
 800128e:	1891      	adds	r1, r2, r2
 8001290:	f8c7 1088 	str.w	r1, [r7, #136]	; 0x88
 8001294:	415b      	adcs	r3, r3
 8001296:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800129a:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 800129e:	4621      	mov	r1, r4
 80012a0:	eb12 0a01 	adds.w	sl, r2, r1
 80012a4:	4629      	mov	r1, r5
 80012a6:	eb43 0b01 	adc.w	fp, r3, r1
 80012aa:	f04f 0200 	mov.w	r2, #0
 80012ae:	f04f 0300 	mov.w	r3, #0
 80012b2:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80012b6:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80012ba:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80012be:	4692      	mov	sl, r2
 80012c0:	469b      	mov	fp, r3
 80012c2:	4623      	mov	r3, r4
 80012c4:	eb1a 0303 	adds.w	r3, sl, r3
 80012c8:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 80012cc:	462b      	mov	r3, r5
 80012ce:	eb4b 0303 	adc.w	r3, fp, r3
 80012d2:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 80012d6:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80012da:	685b      	ldr	r3, [r3, #4]
 80012dc:	2200      	movs	r2, #0
 80012de:	f8c7 3198 	str.w	r3, [r7, #408]	; 0x198
 80012e2:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 80012e6:	e9d7 1266 	ldrd	r1, r2, [r7, #408]	; 0x198
 80012ea:	460b      	mov	r3, r1
 80012ec:	18db      	adds	r3, r3, r3
 80012ee:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80012f2:	4613      	mov	r3, r2
 80012f4:	eb42 0303 	adc.w	r3, r2, r3
 80012f8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80012fc:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 8001300:	e9d7 0168 	ldrd	r0, r1, [r7, #416]	; 0x1a0
 8001304:	f7fe ff86 	bl	8000214 <__aeabi_uldivmod>
 8001308:	4602      	mov	r2, r0
 800130a:	460b      	mov	r3, r1
 800130c:	4b61      	ldr	r3, [pc, #388]	; (8001494 <UART_SetConfig+0x528>)
 800130e:	fba3 2302 	umull	r2, r3, r3, r2
 8001312:	095b      	lsrs	r3, r3, #5
 8001314:	011c      	lsls	r4, r3, #4
 8001316:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800131a:	2200      	movs	r2, #0
 800131c:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
 8001320:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
 8001324:	e9d7 8964 	ldrd	r8, r9, [r7, #400]	; 0x190
 8001328:	4642      	mov	r2, r8
 800132a:	464b      	mov	r3, r9
 800132c:	1891      	adds	r1, r2, r2
 800132e:	67b9      	str	r1, [r7, #120]	; 0x78
 8001330:	415b      	adcs	r3, r3
 8001332:	67fb      	str	r3, [r7, #124]	; 0x7c
 8001334:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 8001338:	4641      	mov	r1, r8
 800133a:	1851      	adds	r1, r2, r1
 800133c:	6739      	str	r1, [r7, #112]	; 0x70
 800133e:	4649      	mov	r1, r9
 8001340:	414b      	adcs	r3, r1
 8001342:	677b      	str	r3, [r7, #116]	; 0x74
 8001344:	f04f 0200 	mov.w	r2, #0
 8001348:	f04f 0300 	mov.w	r3, #0
 800134c:	e9d7 ab1c 	ldrd	sl, fp, [r7, #112]	; 0x70
 8001350:	4659      	mov	r1, fp
 8001352:	00cb      	lsls	r3, r1, #3
 8001354:	4651      	mov	r1, sl
 8001356:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800135a:	4651      	mov	r1, sl
 800135c:	00ca      	lsls	r2, r1, #3
 800135e:	4610      	mov	r0, r2
 8001360:	4619      	mov	r1, r3
 8001362:	4603      	mov	r3, r0
 8001364:	4642      	mov	r2, r8
 8001366:	189b      	adds	r3, r3, r2
 8001368:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 800136c:	464b      	mov	r3, r9
 800136e:	460a      	mov	r2, r1
 8001370:	eb42 0303 	adc.w	r3, r2, r3
 8001374:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
 8001378:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800137c:	685b      	ldr	r3, [r3, #4]
 800137e:	2200      	movs	r2, #0
 8001380:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8001384:	f8c7 2184 	str.w	r2, [r7, #388]	; 0x184
 8001388:	e9d7 1260 	ldrd	r1, r2, [r7, #384]	; 0x180
 800138c:	460b      	mov	r3, r1
 800138e:	18db      	adds	r3, r3, r3
 8001390:	66bb      	str	r3, [r7, #104]	; 0x68
 8001392:	4613      	mov	r3, r2
 8001394:	eb42 0303 	adc.w	r3, r2, r3
 8001398:	66fb      	str	r3, [r7, #108]	; 0x6c
 800139a:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 800139e:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 80013a2:	f7fe ff37 	bl	8000214 <__aeabi_uldivmod>
 80013a6:	4602      	mov	r2, r0
 80013a8:	460b      	mov	r3, r1
 80013aa:	4611      	mov	r1, r2
 80013ac:	4b39      	ldr	r3, [pc, #228]	; (8001494 <UART_SetConfig+0x528>)
 80013ae:	fba3 2301 	umull	r2, r3, r3, r1
 80013b2:	095b      	lsrs	r3, r3, #5
 80013b4:	2264      	movs	r2, #100	; 0x64
 80013b6:	fb02 f303 	mul.w	r3, r2, r3
 80013ba:	1acb      	subs	r3, r1, r3
 80013bc:	00db      	lsls	r3, r3, #3
 80013be:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80013c2:	4b34      	ldr	r3, [pc, #208]	; (8001494 <UART_SetConfig+0x528>)
 80013c4:	fba3 2302 	umull	r2, r3, r3, r2
 80013c8:	095b      	lsrs	r3, r3, #5
 80013ca:	005b      	lsls	r3, r3, #1
 80013cc:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80013d0:	441c      	add	r4, r3
 80013d2:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80013d6:	2200      	movs	r2, #0
 80013d8:	f8c7 3178 	str.w	r3, [r7, #376]	; 0x178
 80013dc:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 80013e0:	e9d7 895e 	ldrd	r8, r9, [r7, #376]	; 0x178
 80013e4:	4642      	mov	r2, r8
 80013e6:	464b      	mov	r3, r9
 80013e8:	1891      	adds	r1, r2, r2
 80013ea:	6639      	str	r1, [r7, #96]	; 0x60
 80013ec:	415b      	adcs	r3, r3
 80013ee:	667b      	str	r3, [r7, #100]	; 0x64
 80013f0:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 80013f4:	4641      	mov	r1, r8
 80013f6:	1851      	adds	r1, r2, r1
 80013f8:	65b9      	str	r1, [r7, #88]	; 0x58
 80013fa:	4649      	mov	r1, r9
 80013fc:	414b      	adcs	r3, r1
 80013fe:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001400:	f04f 0200 	mov.w	r2, #0
 8001404:	f04f 0300 	mov.w	r3, #0
 8001408:	e9d7 ab16 	ldrd	sl, fp, [r7, #88]	; 0x58
 800140c:	4659      	mov	r1, fp
 800140e:	00cb      	lsls	r3, r1, #3
 8001410:	4651      	mov	r1, sl
 8001412:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001416:	4651      	mov	r1, sl
 8001418:	00ca      	lsls	r2, r1, #3
 800141a:	4610      	mov	r0, r2
 800141c:	4619      	mov	r1, r3
 800141e:	4603      	mov	r3, r0
 8001420:	4642      	mov	r2, r8
 8001422:	189b      	adds	r3, r3, r2
 8001424:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
 8001428:	464b      	mov	r3, r9
 800142a:	460a      	mov	r2, r1
 800142c:	eb42 0303 	adc.w	r3, r2, r3
 8001430:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
 8001434:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8001438:	685b      	ldr	r3, [r3, #4]
 800143a:	2200      	movs	r2, #0
 800143c:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
 8001440:	f8c7 216c 	str.w	r2, [r7, #364]	; 0x16c
 8001444:	e9d7 125a 	ldrd	r1, r2, [r7, #360]	; 0x168
 8001448:	460b      	mov	r3, r1
 800144a:	18db      	adds	r3, r3, r3
 800144c:	653b      	str	r3, [r7, #80]	; 0x50
 800144e:	4613      	mov	r3, r2
 8001450:	eb42 0303 	adc.w	r3, r2, r3
 8001454:	657b      	str	r3, [r7, #84]	; 0x54
 8001456:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800145a:	e9d7 015c 	ldrd	r0, r1, [r7, #368]	; 0x170
 800145e:	f7fe fed9 	bl	8000214 <__aeabi_uldivmod>
 8001462:	4602      	mov	r2, r0
 8001464:	460b      	mov	r3, r1
 8001466:	4b0b      	ldr	r3, [pc, #44]	; (8001494 <UART_SetConfig+0x528>)
 8001468:	fba3 1302 	umull	r1, r3, r3, r2
 800146c:	095b      	lsrs	r3, r3, #5
 800146e:	2164      	movs	r1, #100	; 0x64
 8001470:	fb01 f303 	mul.w	r3, r1, r3
 8001474:	1ad3      	subs	r3, r2, r3
 8001476:	00db      	lsls	r3, r3, #3
 8001478:	3332      	adds	r3, #50	; 0x32
 800147a:	4a06      	ldr	r2, [pc, #24]	; (8001494 <UART_SetConfig+0x528>)
 800147c:	fba2 2303 	umull	r2, r3, r2, r3
 8001480:	095b      	lsrs	r3, r3, #5
 8001482:	f003 0207 	and.w	r2, r3, #7
 8001486:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	4422      	add	r2, r4
 800148e:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8001490:	e233      	b.n	80018fa <UART_SetConfig+0x98e>
 8001492:	bf00      	nop
 8001494:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8001498:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800149c:	681a      	ldr	r2, [r3, #0]
 800149e:	4b8d      	ldr	r3, [pc, #564]	; (80016d4 <UART_SetConfig+0x768>)
 80014a0:	429a      	cmp	r2, r3
 80014a2:	d006      	beq.n	80014b2 <UART_SetConfig+0x546>
 80014a4:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80014a8:	681a      	ldr	r2, [r3, #0]
 80014aa:	4b8b      	ldr	r3, [pc, #556]	; (80016d8 <UART_SetConfig+0x76c>)
 80014ac:	429a      	cmp	r2, r3
 80014ae:	f040 8117 	bne.w	80016e0 <UART_SetConfig+0x774>
      pclk = HAL_RCC_GetPCLK2Freq();
 80014b2:	f7ff fb71 	bl	8000b98 <HAL_RCC_GetPCLK2Freq>
 80014b6:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80014ba:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80014be:	2200      	movs	r2, #0
 80014c0:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
 80014c4:	f8c7 2164 	str.w	r2, [r7, #356]	; 0x164
 80014c8:	e9d7 4558 	ldrd	r4, r5, [r7, #352]	; 0x160
 80014cc:	4622      	mov	r2, r4
 80014ce:	462b      	mov	r3, r5
 80014d0:	1891      	adds	r1, r2, r2
 80014d2:	64b9      	str	r1, [r7, #72]	; 0x48
 80014d4:	415b      	adcs	r3, r3
 80014d6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80014d8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80014dc:	4621      	mov	r1, r4
 80014de:	eb12 0801 	adds.w	r8, r2, r1
 80014e2:	4629      	mov	r1, r5
 80014e4:	eb43 0901 	adc.w	r9, r3, r1
 80014e8:	f04f 0200 	mov.w	r2, #0
 80014ec:	f04f 0300 	mov.w	r3, #0
 80014f0:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80014f4:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80014f8:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80014fc:	4690      	mov	r8, r2
 80014fe:	4699      	mov	r9, r3
 8001500:	4623      	mov	r3, r4
 8001502:	eb18 0303 	adds.w	r3, r8, r3
 8001506:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 800150a:	462b      	mov	r3, r5
 800150c:	eb49 0303 	adc.w	r3, r9, r3
 8001510:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
 8001514:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8001518:	685b      	ldr	r3, [r3, #4]
 800151a:	2200      	movs	r2, #0
 800151c:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8001520:	f8c7 2154 	str.w	r2, [r7, #340]	; 0x154
 8001524:	f04f 0200 	mov.w	r2, #0
 8001528:	f04f 0300 	mov.w	r3, #0
 800152c:	e9d7 4554 	ldrd	r4, r5, [r7, #336]	; 0x150
 8001530:	4629      	mov	r1, r5
 8001532:	008b      	lsls	r3, r1, #2
 8001534:	4621      	mov	r1, r4
 8001536:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800153a:	4621      	mov	r1, r4
 800153c:	008a      	lsls	r2, r1, #2
 800153e:	e9d7 0156 	ldrd	r0, r1, [r7, #344]	; 0x158
 8001542:	f7fe fe67 	bl	8000214 <__aeabi_uldivmod>
 8001546:	4602      	mov	r2, r0
 8001548:	460b      	mov	r3, r1
 800154a:	4b64      	ldr	r3, [pc, #400]	; (80016dc <UART_SetConfig+0x770>)
 800154c:	fba3 2302 	umull	r2, r3, r3, r2
 8001550:	095b      	lsrs	r3, r3, #5
 8001552:	011c      	lsls	r4, r3, #4
 8001554:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001558:	2200      	movs	r2, #0
 800155a:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
 800155e:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 8001562:	e9d7 8952 	ldrd	r8, r9, [r7, #328]	; 0x148
 8001566:	4642      	mov	r2, r8
 8001568:	464b      	mov	r3, r9
 800156a:	1891      	adds	r1, r2, r2
 800156c:	6439      	str	r1, [r7, #64]	; 0x40
 800156e:	415b      	adcs	r3, r3
 8001570:	647b      	str	r3, [r7, #68]	; 0x44
 8001572:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8001576:	4641      	mov	r1, r8
 8001578:	1851      	adds	r1, r2, r1
 800157a:	63b9      	str	r1, [r7, #56]	; 0x38
 800157c:	4649      	mov	r1, r9
 800157e:	414b      	adcs	r3, r1
 8001580:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001582:	f04f 0200 	mov.w	r2, #0
 8001586:	f04f 0300 	mov.w	r3, #0
 800158a:	e9d7 ab0e 	ldrd	sl, fp, [r7, #56]	; 0x38
 800158e:	4659      	mov	r1, fp
 8001590:	00cb      	lsls	r3, r1, #3
 8001592:	4651      	mov	r1, sl
 8001594:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001598:	4651      	mov	r1, sl
 800159a:	00ca      	lsls	r2, r1, #3
 800159c:	4610      	mov	r0, r2
 800159e:	4619      	mov	r1, r3
 80015a0:	4603      	mov	r3, r0
 80015a2:	4642      	mov	r2, r8
 80015a4:	189b      	adds	r3, r3, r2
 80015a6:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
 80015aa:	464b      	mov	r3, r9
 80015ac:	460a      	mov	r2, r1
 80015ae:	eb42 0303 	adc.w	r3, r2, r3
 80015b2:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
 80015b6:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80015ba:	685b      	ldr	r3, [r3, #4]
 80015bc:	2200      	movs	r2, #0
 80015be:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
 80015c2:	f8c7 213c 	str.w	r2, [r7, #316]	; 0x13c
 80015c6:	f04f 0200 	mov.w	r2, #0
 80015ca:	f04f 0300 	mov.w	r3, #0
 80015ce:	e9d7 894e 	ldrd	r8, r9, [r7, #312]	; 0x138
 80015d2:	4649      	mov	r1, r9
 80015d4:	008b      	lsls	r3, r1, #2
 80015d6:	4641      	mov	r1, r8
 80015d8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80015dc:	4641      	mov	r1, r8
 80015de:	008a      	lsls	r2, r1, #2
 80015e0:	e9d7 0150 	ldrd	r0, r1, [r7, #320]	; 0x140
 80015e4:	f7fe fe16 	bl	8000214 <__aeabi_uldivmod>
 80015e8:	4602      	mov	r2, r0
 80015ea:	460b      	mov	r3, r1
 80015ec:	4611      	mov	r1, r2
 80015ee:	4b3b      	ldr	r3, [pc, #236]	; (80016dc <UART_SetConfig+0x770>)
 80015f0:	fba3 2301 	umull	r2, r3, r3, r1
 80015f4:	095b      	lsrs	r3, r3, #5
 80015f6:	2264      	movs	r2, #100	; 0x64
 80015f8:	fb02 f303 	mul.w	r3, r2, r3
 80015fc:	1acb      	subs	r3, r1, r3
 80015fe:	011b      	lsls	r3, r3, #4
 8001600:	3332      	adds	r3, #50	; 0x32
 8001602:	4a36      	ldr	r2, [pc, #216]	; (80016dc <UART_SetConfig+0x770>)
 8001604:	fba2 2303 	umull	r2, r3, r2, r3
 8001608:	095b      	lsrs	r3, r3, #5
 800160a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800160e:	441c      	add	r4, r3
 8001610:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001614:	2200      	movs	r2, #0
 8001616:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 800161a:	f8c7 2134 	str.w	r2, [r7, #308]	; 0x134
 800161e:	e9d7 894c 	ldrd	r8, r9, [r7, #304]	; 0x130
 8001622:	4642      	mov	r2, r8
 8001624:	464b      	mov	r3, r9
 8001626:	1891      	adds	r1, r2, r2
 8001628:	6339      	str	r1, [r7, #48]	; 0x30
 800162a:	415b      	adcs	r3, r3
 800162c:	637b      	str	r3, [r7, #52]	; 0x34
 800162e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8001632:	4641      	mov	r1, r8
 8001634:	1851      	adds	r1, r2, r1
 8001636:	62b9      	str	r1, [r7, #40]	; 0x28
 8001638:	4649      	mov	r1, r9
 800163a:	414b      	adcs	r3, r1
 800163c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800163e:	f04f 0200 	mov.w	r2, #0
 8001642:	f04f 0300 	mov.w	r3, #0
 8001646:	e9d7 ab0a 	ldrd	sl, fp, [r7, #40]	; 0x28
 800164a:	4659      	mov	r1, fp
 800164c:	00cb      	lsls	r3, r1, #3
 800164e:	4651      	mov	r1, sl
 8001650:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001654:	4651      	mov	r1, sl
 8001656:	00ca      	lsls	r2, r1, #3
 8001658:	4610      	mov	r0, r2
 800165a:	4619      	mov	r1, r3
 800165c:	4603      	mov	r3, r0
 800165e:	4642      	mov	r2, r8
 8001660:	189b      	adds	r3, r3, r2
 8001662:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8001666:	464b      	mov	r3, r9
 8001668:	460a      	mov	r2, r1
 800166a:	eb42 0303 	adc.w	r3, r2, r3
 800166e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8001672:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8001676:	685b      	ldr	r3, [r3, #4]
 8001678:	2200      	movs	r2, #0
 800167a:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 800167e:	f8c7 2124 	str.w	r2, [r7, #292]	; 0x124
 8001682:	f04f 0200 	mov.w	r2, #0
 8001686:	f04f 0300 	mov.w	r3, #0
 800168a:	e9d7 8948 	ldrd	r8, r9, [r7, #288]	; 0x120
 800168e:	4649      	mov	r1, r9
 8001690:	008b      	lsls	r3, r1, #2
 8001692:	4641      	mov	r1, r8
 8001694:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8001698:	4641      	mov	r1, r8
 800169a:	008a      	lsls	r2, r1, #2
 800169c:	e9d7 014a 	ldrd	r0, r1, [r7, #296]	; 0x128
 80016a0:	f7fe fdb8 	bl	8000214 <__aeabi_uldivmod>
 80016a4:	4602      	mov	r2, r0
 80016a6:	460b      	mov	r3, r1
 80016a8:	4b0c      	ldr	r3, [pc, #48]	; (80016dc <UART_SetConfig+0x770>)
 80016aa:	fba3 1302 	umull	r1, r3, r3, r2
 80016ae:	095b      	lsrs	r3, r3, #5
 80016b0:	2164      	movs	r1, #100	; 0x64
 80016b2:	fb01 f303 	mul.w	r3, r1, r3
 80016b6:	1ad3      	subs	r3, r2, r3
 80016b8:	011b      	lsls	r3, r3, #4
 80016ba:	3332      	adds	r3, #50	; 0x32
 80016bc:	4a07      	ldr	r2, [pc, #28]	; (80016dc <UART_SetConfig+0x770>)
 80016be:	fba2 2303 	umull	r2, r3, r2, r3
 80016c2:	095b      	lsrs	r3, r3, #5
 80016c4:	f003 020f 	and.w	r2, r3, #15
 80016c8:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	4422      	add	r2, r4
 80016d0:	609a      	str	r2, [r3, #8]
 80016d2:	e112      	b.n	80018fa <UART_SetConfig+0x98e>
 80016d4:	40011000 	.word	0x40011000
 80016d8:	40011400 	.word	0x40011400
 80016dc:	51eb851f 	.word	0x51eb851f
      pclk = HAL_RCC_GetPCLK1Freq();
 80016e0:	f7ff fa46 	bl	8000b70 <HAL_RCC_GetPCLK1Freq>
 80016e4:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80016e8:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80016ec:	2200      	movs	r2, #0
 80016ee:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 80016f2:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 80016f6:	e9d7 8946 	ldrd	r8, r9, [r7, #280]	; 0x118
 80016fa:	4642      	mov	r2, r8
 80016fc:	464b      	mov	r3, r9
 80016fe:	1891      	adds	r1, r2, r2
 8001700:	6239      	str	r1, [r7, #32]
 8001702:	415b      	adcs	r3, r3
 8001704:	627b      	str	r3, [r7, #36]	; 0x24
 8001706:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800170a:	4641      	mov	r1, r8
 800170c:	1854      	adds	r4, r2, r1
 800170e:	4649      	mov	r1, r9
 8001710:	eb43 0501 	adc.w	r5, r3, r1
 8001714:	f04f 0200 	mov.w	r2, #0
 8001718:	f04f 0300 	mov.w	r3, #0
 800171c:	00eb      	lsls	r3, r5, #3
 800171e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001722:	00e2      	lsls	r2, r4, #3
 8001724:	4614      	mov	r4, r2
 8001726:	461d      	mov	r5, r3
 8001728:	4643      	mov	r3, r8
 800172a:	18e3      	adds	r3, r4, r3
 800172c:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8001730:	464b      	mov	r3, r9
 8001732:	eb45 0303 	adc.w	r3, r5, r3
 8001736:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 800173a:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800173e:	685b      	ldr	r3, [r3, #4]
 8001740:	2200      	movs	r2, #0
 8001742:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8001746:	f8c7 210c 	str.w	r2, [r7, #268]	; 0x10c
 800174a:	f04f 0200 	mov.w	r2, #0
 800174e:	f04f 0300 	mov.w	r3, #0
 8001752:	e9d7 4542 	ldrd	r4, r5, [r7, #264]	; 0x108
 8001756:	4629      	mov	r1, r5
 8001758:	008b      	lsls	r3, r1, #2
 800175a:	4621      	mov	r1, r4
 800175c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8001760:	4621      	mov	r1, r4
 8001762:	008a      	lsls	r2, r1, #2
 8001764:	e9d7 0144 	ldrd	r0, r1, [r7, #272]	; 0x110
 8001768:	f7fe fd54 	bl	8000214 <__aeabi_uldivmod>
 800176c:	4602      	mov	r2, r0
 800176e:	460b      	mov	r3, r1
 8001770:	4b65      	ldr	r3, [pc, #404]	; (8001908 <UART_SetConfig+0x99c>)
 8001772:	fba3 2302 	umull	r2, r3, r3, r2
 8001776:	095b      	lsrs	r3, r3, #5
 8001778:	011c      	lsls	r4, r3, #4
 800177a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800177e:	2200      	movs	r2, #0
 8001780:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8001784:	f8c7 2104 	str.w	r2, [r7, #260]	; 0x104
 8001788:	e9d7 8940 	ldrd	r8, r9, [r7, #256]	; 0x100
 800178c:	4642      	mov	r2, r8
 800178e:	464b      	mov	r3, r9
 8001790:	1891      	adds	r1, r2, r2
 8001792:	61b9      	str	r1, [r7, #24]
 8001794:	415b      	adcs	r3, r3
 8001796:	61fb      	str	r3, [r7, #28]
 8001798:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800179c:	4641      	mov	r1, r8
 800179e:	1851      	adds	r1, r2, r1
 80017a0:	6139      	str	r1, [r7, #16]
 80017a2:	4649      	mov	r1, r9
 80017a4:	414b      	adcs	r3, r1
 80017a6:	617b      	str	r3, [r7, #20]
 80017a8:	f04f 0200 	mov.w	r2, #0
 80017ac:	f04f 0300 	mov.w	r3, #0
 80017b0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80017b4:	4659      	mov	r1, fp
 80017b6:	00cb      	lsls	r3, r1, #3
 80017b8:	4651      	mov	r1, sl
 80017ba:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80017be:	4651      	mov	r1, sl
 80017c0:	00ca      	lsls	r2, r1, #3
 80017c2:	4610      	mov	r0, r2
 80017c4:	4619      	mov	r1, r3
 80017c6:	4603      	mov	r3, r0
 80017c8:	4642      	mov	r2, r8
 80017ca:	189b      	adds	r3, r3, r2
 80017cc:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80017d0:	464b      	mov	r3, r9
 80017d2:	460a      	mov	r2, r1
 80017d4:	eb42 0303 	adc.w	r3, r2, r3
 80017d8:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80017dc:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80017e0:	685b      	ldr	r3, [r3, #4]
 80017e2:	2200      	movs	r2, #0
 80017e4:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80017e8:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
 80017ec:	f04f 0200 	mov.w	r2, #0
 80017f0:	f04f 0300 	mov.w	r3, #0
 80017f4:	e9d7 893c 	ldrd	r8, r9, [r7, #240]	; 0xf0
 80017f8:	4649      	mov	r1, r9
 80017fa:	008b      	lsls	r3, r1, #2
 80017fc:	4641      	mov	r1, r8
 80017fe:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8001802:	4641      	mov	r1, r8
 8001804:	008a      	lsls	r2, r1, #2
 8001806:	e9d7 013e 	ldrd	r0, r1, [r7, #248]	; 0xf8
 800180a:	f7fe fd03 	bl	8000214 <__aeabi_uldivmod>
 800180e:	4602      	mov	r2, r0
 8001810:	460b      	mov	r3, r1
 8001812:	4611      	mov	r1, r2
 8001814:	4b3c      	ldr	r3, [pc, #240]	; (8001908 <UART_SetConfig+0x99c>)
 8001816:	fba3 2301 	umull	r2, r3, r3, r1
 800181a:	095b      	lsrs	r3, r3, #5
 800181c:	2264      	movs	r2, #100	; 0x64
 800181e:	fb02 f303 	mul.w	r3, r2, r3
 8001822:	1acb      	subs	r3, r1, r3
 8001824:	011b      	lsls	r3, r3, #4
 8001826:	3332      	adds	r3, #50	; 0x32
 8001828:	4a37      	ldr	r2, [pc, #220]	; (8001908 <UART_SetConfig+0x99c>)
 800182a:	fba2 2303 	umull	r2, r3, r2, r3
 800182e:	095b      	lsrs	r3, r3, #5
 8001830:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001834:	441c      	add	r4, r3
 8001836:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800183a:	2200      	movs	r2, #0
 800183c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8001840:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8001844:	e9d7 893a 	ldrd	r8, r9, [r7, #232]	; 0xe8
 8001848:	4642      	mov	r2, r8
 800184a:	464b      	mov	r3, r9
 800184c:	1891      	adds	r1, r2, r2
 800184e:	60b9      	str	r1, [r7, #8]
 8001850:	415b      	adcs	r3, r3
 8001852:	60fb      	str	r3, [r7, #12]
 8001854:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001858:	4641      	mov	r1, r8
 800185a:	1851      	adds	r1, r2, r1
 800185c:	6039      	str	r1, [r7, #0]
 800185e:	4649      	mov	r1, r9
 8001860:	414b      	adcs	r3, r1
 8001862:	607b      	str	r3, [r7, #4]
 8001864:	f04f 0200 	mov.w	r2, #0
 8001868:	f04f 0300 	mov.w	r3, #0
 800186c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8001870:	4659      	mov	r1, fp
 8001872:	00cb      	lsls	r3, r1, #3
 8001874:	4651      	mov	r1, sl
 8001876:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800187a:	4651      	mov	r1, sl
 800187c:	00ca      	lsls	r2, r1, #3
 800187e:	4610      	mov	r0, r2
 8001880:	4619      	mov	r1, r3
 8001882:	4603      	mov	r3, r0
 8001884:	4642      	mov	r2, r8
 8001886:	189b      	adds	r3, r3, r2
 8001888:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800188c:	464b      	mov	r3, r9
 800188e:	460a      	mov	r2, r1
 8001890:	eb42 0303 	adc.w	r3, r2, r3
 8001894:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8001898:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800189c:	685b      	ldr	r3, [r3, #4]
 800189e:	2200      	movs	r2, #0
 80018a0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80018a4:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80018a8:	f04f 0200 	mov.w	r2, #0
 80018ac:	f04f 0300 	mov.w	r3, #0
 80018b0:	e9d7 8936 	ldrd	r8, r9, [r7, #216]	; 0xd8
 80018b4:	4649      	mov	r1, r9
 80018b6:	008b      	lsls	r3, r1, #2
 80018b8:	4641      	mov	r1, r8
 80018ba:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80018be:	4641      	mov	r1, r8
 80018c0:	008a      	lsls	r2, r1, #2
 80018c2:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80018c6:	f7fe fca5 	bl	8000214 <__aeabi_uldivmod>
 80018ca:	4602      	mov	r2, r0
 80018cc:	460b      	mov	r3, r1
 80018ce:	4b0e      	ldr	r3, [pc, #56]	; (8001908 <UART_SetConfig+0x99c>)
 80018d0:	fba3 1302 	umull	r1, r3, r3, r2
 80018d4:	095b      	lsrs	r3, r3, #5
 80018d6:	2164      	movs	r1, #100	; 0x64
 80018d8:	fb01 f303 	mul.w	r3, r1, r3
 80018dc:	1ad3      	subs	r3, r2, r3
 80018de:	011b      	lsls	r3, r3, #4
 80018e0:	3332      	adds	r3, #50	; 0x32
 80018e2:	4a09      	ldr	r2, [pc, #36]	; (8001908 <UART_SetConfig+0x99c>)
 80018e4:	fba2 2303 	umull	r2, r3, r2, r3
 80018e8:	095b      	lsrs	r3, r3, #5
 80018ea:	f003 020f 	and.w	r2, r3, #15
 80018ee:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	4422      	add	r2, r4
 80018f6:	609a      	str	r2, [r3, #8]
}
 80018f8:	e7ff      	b.n	80018fa <UART_SetConfig+0x98e>
 80018fa:	bf00      	nop
 80018fc:	f507 7702 	add.w	r7, r7, #520	; 0x208
 8001900:	46bd      	mov	sp, r7
 8001902:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001906:	bf00      	nop
 8001908:	51eb851f 	.word	0x51eb851f

0800190c <SysTick_Handler>:
 * @return      - none
 *
 * @Note        - Hàm này ghi đề hàm nằm trong file "startup_stm32f446retx.s"
 */
void SysTick_Handler(void)
{
 800190c:	b580      	push	{r7, lr}
 800190e:	af00      	add	r7, sp, #0
	HAL_IncTick(); 					//Sử dụng làm cơ sở thời gian ứng dụng.
 8001910:	f7fe fe50 	bl	80005b4 <HAL_IncTick>
	HAL_SYSTICK_IRQHandler();		//Sử dụng làm cơ sở thời gian ngắt trong ứng dụng.
 8001914:	f7fe ff7f 	bl	8000816 <HAL_SYSTICK_IRQHandler>
	/* Giải thích:
	 * Tăng giá trị biến uwTick: Hàm này tăng giá trị của biến toàn cục uwTick lên 1. Biến
	 * uwTick là một biến đếm thời gian được sử dụng bởi HAL để cung cấp các hàm quản lý
	 * thời gian như HAL_Delay() và HAL_GetTick().
	 */
}
 8001918:	bf00      	nop
 800191a:	bd80      	pop	{r7, pc}

0800191c <main>:
UART_HandleTypeDef huart2; 				//Biến toàn cục UART Handle

char *user_data = "The application is running \n\r";			//Nội dung để gử

int main(void)
{
 800191c:	b590      	push	{r4, r7, lr}
 800191e:	b09d      	sub	sp, #116	; 0x74
 8001920:	af00      	add	r7, sp, #0
	HAL_Init();						//Call HAL_MspInit()
 8001922:	f7fe fdf5 	bl	8000510 <HAL_Init>
	SystemCLockConfig();
 8001926:	f000 f847 	bl	80019b8 <SystemCLockConfig>
	UART2_Init();					//Call HAL_UART_MspInit()
 800192a:	f000 f84d 	bl	80019c8 <UART2_Init>

	//Tx
	uint16_t len_of_data = strlen(user_data);
 800192e:	4b20      	ldr	r3, [pc, #128]	; (80019b0 <main+0x94>)
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	4618      	mov	r0, r3
 8001934:	f7fe fc66 	bl	8000204 <strlen>
 8001938:	4603      	mov	r3, r0
 800193a:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a
	/*if(HAL_UART_Transmit(&huart2, (uint8_t*)user_data, len_of_data, HAL_MAX_DELAY) != HAL_OK)
	{
		Error_Handler();
	}*/
	HAL_UART_Transmit(&huart2, (uint8_t*)user_data, len_of_data, HAL_MAX_DELAY);
 800193e:	4b1c      	ldr	r3, [pc, #112]	; (80019b0 <main+0x94>)
 8001940:	6819      	ldr	r1, [r3, #0]
 8001942:	f8b7 206a 	ldrh.w	r2, [r7, #106]	; 0x6a
 8001946:	f04f 33ff 	mov.w	r3, #4294967295
 800194a:	481a      	ldr	r0, [pc, #104]	; (80019b4 <main+0x98>)
 800194c:	f7ff f985 	bl	8000c5a <HAL_UART_Transmit>

	//Rx
	uint8_t rcvd_data;											//Lưu nội dung 1 byte nhận
	uint8_t data_buffer[100];									//Mảng lưu nội dung nhận
	uint32_t count=0;											//Đếm index của mảng
 8001950:	2300      	movs	r3, #0
 8001952:	66fb      	str	r3, [r7, #108]	; 0x6c
	while(1)
	{
		HAL_UART_Receive(&huart2, &rcvd_data, 1, HAL_MAX_DELAY);	//1: nhận từng byte(chứ)
 8001954:	f107 0169 	add.w	r1, r7, #105	; 0x69
 8001958:	f04f 33ff 	mov.w	r3, #4294967295
 800195c:	2201      	movs	r2, #1
 800195e:	4815      	ldr	r0, [pc, #84]	; (80019b4 <main+0x98>)
 8001960:	f7ff fa14 	bl	8000d8c <HAL_UART_Receive>
		if(rcvd_data == '\r')
 8001964:	f897 3069 	ldrb.w	r3, [r7, #105]	; 0x69
 8001968:	2b0d      	cmp	r3, #13
 800196a:	d00f      	beq.n	800198c <main+0x70>
			//Kiểm tra đã đến ký tự cuối cùng
			break;			//thoát khởi vòng lặp
		}
		else
		{
			data_buffer[count++] = convert_to_capital(rcvd_data);
 800196c:	f897 2069 	ldrb.w	r2, [r7, #105]	; 0x69
 8001970:	6efc      	ldr	r4, [r7, #108]	; 0x6c
 8001972:	1c63      	adds	r3, r4, #1
 8001974:	66fb      	str	r3, [r7, #108]	; 0x6c
 8001976:	4610      	mov	r0, r2
 8001978:	f000 f84c 	bl	8001a14 <convert_to_capital>
 800197c:	4603      	mov	r3, r0
 800197e:	461a      	mov	r2, r3
 8001980:	f104 0370 	add.w	r3, r4, #112	; 0x70
 8001984:	443b      	add	r3, r7
 8001986:	f803 2c6c 	strb.w	r2, [r3, #-108]
		HAL_UART_Receive(&huart2, &rcvd_data, 1, HAL_MAX_DELAY);	//1: nhận từng byte(chứ)
 800198a:	e7e3      	b.n	8001954 <main+0x38>
			break;			//thoát khởi vòng lặp
 800198c:	bf00      	nop
		}
	}
	data_buffer[count++] = '\r';		//đưa con trỏ xuống dòng và về đầu dòng
 800198e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001990:	1c5a      	adds	r2, r3, #1
 8001992:	66fa      	str	r2, [r7, #108]	; 0x6c
 8001994:	3370      	adds	r3, #112	; 0x70
 8001996:	443b      	add	r3, r7
 8001998:	220d      	movs	r2, #13
 800199a:	f803 2c6c 	strb.w	r2, [r3, #-108]
	HAL_UART_Transmit(&huart2, data_buffer, count , HAL_MAX_DELAY);  //gửi lại tin nhắn đc nhận
 800199e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80019a0:	b29a      	uxth	r2, r3
 80019a2:	1d39      	adds	r1, r7, #4
 80019a4:	f04f 33ff 	mov.w	r3, #4294967295
 80019a8:	4802      	ldr	r0, [pc, #8]	; (80019b4 <main+0x98>)
 80019aa:	f7ff f956 	bl	8000c5a <HAL_UART_Transmit>

	while(1);
 80019ae:	e7fe      	b.n	80019ae <main+0x92>
 80019b0:	20000008 	.word	0x20000008
 80019b4:	20000030 	.word	0x20000030

080019b8 <SystemCLockConfig>:
 * @return      - none
 *
 * @Note        - none
 */
void SystemCLockConfig(void)
{
 80019b8:	b480      	push	{r7}
 80019ba:	af00      	add	r7, sp, #0

}
 80019bc:	bf00      	nop
 80019be:	46bd      	mov	sp, r7
 80019c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c4:	4770      	bx	lr
	...

080019c8 <UART2_Init>:
 * @return      - none
 *
 * @Note        - none
 */
void UART2_Init(void)
{
 80019c8:	b580      	push	{r7, lr}
 80019ca:	af00      	add	r7, sp, #0
	//Cài đặt từng thông số USARTx
	huart2.Instance = USART2;
 80019cc:	4b0f      	ldr	r3, [pc, #60]	; (8001a0c <UART2_Init+0x44>)
 80019ce:	4a10      	ldr	r2, [pc, #64]	; (8001a10 <UART2_Init+0x48>)
 80019d0:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 80019d2:	4b0e      	ldr	r3, [pc, #56]	; (8001a0c <UART2_Init+0x44>)
 80019d4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80019d8:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80019da:	4b0c      	ldr	r3, [pc, #48]	; (8001a0c <UART2_Init+0x44>)
 80019dc:	2200      	movs	r2, #0
 80019de:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 80019e0:	4b0a      	ldr	r3, [pc, #40]	; (8001a0c <UART2_Init+0x44>)
 80019e2:	2200      	movs	r2, #0
 80019e4:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 80019e6:	4b09      	ldr	r3, [pc, #36]	; (8001a0c <UART2_Init+0x44>)
 80019e8:	2200      	movs	r2, #0
 80019ea:	611a      	str	r2, [r3, #16]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80019ec:	4b07      	ldr	r3, [pc, #28]	; (8001a0c <UART2_Init+0x44>)
 80019ee:	2200      	movs	r2, #0
 80019f0:	619a      	str	r2, [r3, #24]
	huart2.Init.Mode = UART_MODE_TX_RX;
 80019f2:	4b06      	ldr	r3, [pc, #24]	; (8001a0c <UART2_Init+0x44>)
 80019f4:	220c      	movs	r2, #12
 80019f6:	615a      	str	r2, [r3, #20]

	//Cấu hình USARTx
	if(HAL_UART_Init(&huart2) != HAL_OK)
 80019f8:	4804      	ldr	r0, [pc, #16]	; (8001a0c <UART2_Init+0x44>)
 80019fa:	f7ff f8e1 	bl	8000bc0 <HAL_UART_Init>
 80019fe:	4603      	mov	r3, r0
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d001      	beq.n	8001a08 <UART2_Init+0x40>
	{
		//This is a Problem
		Error_Handler();
 8001a04:	f000 f81b 	bl	8001a3e <Error_Handler>
		/* Giải thích:
		 * Kiểu biến của hàm HAL_UART_Init là một kiểu "Enum" "HAL_StatusTypeDef"
		 * mà "Enum" "HAL_StatusTypeDef" là gồm các lựa chọn trạng thái kết quả hàm
		 */
	}
}
 8001a08:	bf00      	nop
 8001a0a:	bd80      	pop	{r7, pc}
 8001a0c:	20000030 	.word	0x20000030
 8001a10:	40004400 	.word	0x40004400

08001a14 <convert_to_capital>:
 * @return      - none
 *
 * @Note        - none
 */
uint8_t convert_to_capital(uint8_t data)
{
 8001a14:	b480      	push	{r7}
 8001a16:	b083      	sub	sp, #12
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	4603      	mov	r3, r0
 8001a1c:	71fb      	strb	r3, [r7, #7]
	if(data >= 'a' && data <= 'z')
 8001a1e:	79fb      	ldrb	r3, [r7, #7]
 8001a20:	2b60      	cmp	r3, #96	; 0x60
 8001a22:	d905      	bls.n	8001a30 <convert_to_capital+0x1c>
 8001a24:	79fb      	ldrb	r3, [r7, #7]
 8001a26:	2b7a      	cmp	r3, #122	; 0x7a
 8001a28:	d802      	bhi.n	8001a30 <convert_to_capital+0x1c>
	{
		data = data - ('a' - 'A');
 8001a2a:	79fb      	ldrb	r3, [r7, #7]
 8001a2c:	3b20      	subs	r3, #32
 8001a2e:	71fb      	strb	r3, [r7, #7]
	}
	return data;
 8001a30:	79fb      	ldrb	r3, [r7, #7]
}
 8001a32:	4618      	mov	r0, r3
 8001a34:	370c      	adds	r7, #12
 8001a36:	46bd      	mov	sp, r7
 8001a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a3c:	4770      	bx	lr

08001a3e <Error_Handler>:
 * @return      - none
 *
 * @Note        - none
 */
void Error_Handler(void)
{
 8001a3e:	b480      	push	{r7}
 8001a40:	af00      	add	r7, sp, #0
	while(1); //chương trình lặp lại vô hạn
 8001a42:	e7fe      	b.n	8001a42 <Error_Handler+0x4>

08001a44 <HAL_MspInit>:
 *
 * @Note        - Thiết lập các cấu hình ban đầu cho hệ thống, bao gồm các
 * cấu hình liên quan đến ngắt (interrupt) và xử lý lỗi trên bộ xử lý ARM Cortex-M4.
 */
void HAL_MspInit(void)
{
 8001a44:	b580      	push	{r7, lr}
 8001a46:	af00      	add	r7, sp, #0
	/* Khởi tạo các khai báo cụ thể liên quan Low Level Processor */
	//1.Setup the priority grouping of the arm cortex mx processor - "stm32f4xx_hal_cortex.h"
	HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a48:	2003      	movs	r0, #3
 8001a4a:	f7fe fea3 	bl	8000794 <HAL_NVIC_SetPriorityGrouping>

	//2.Enable the required system exception of the arm cortex mx processor
	//usg fault, memory fault and bus fault of system exception
	SCB->SHCSR |= (0x7 << 16);		//0x7=111 -> Set 3 bit cùng lúc bắt đầu từ bit 16
 8001a4e:	4b0d      	ldr	r3, [pc, #52]	; (8001a84 <HAL_MspInit+0x40>)
 8001a50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a52:	4a0c      	ldr	r2, [pc, #48]	; (8001a84 <HAL_MspInit+0x40>)
 8001a54:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
 8001a58:	6253      	str	r3, [r2, #36]	; 0x24

	//3.Configure the priority for the "system exception"
	HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	2100      	movs	r1, #0
 8001a5e:	f06f 000b 	mvn.w	r0, #11
 8001a62:	f7fe fea2 	bl	80007aa <HAL_NVIC_SetPriority>
	HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 8001a66:	2200      	movs	r2, #0
 8001a68:	2100      	movs	r1, #0
 8001a6a:	f06f 000a 	mvn.w	r0, #10
 8001a6e:	f7fe fe9c 	bl	80007aa <HAL_NVIC_SetPriority>
	HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 8001a72:	2200      	movs	r2, #0
 8001a74:	2100      	movs	r1, #0
 8001a76:	f06f 0009 	mvn.w	r0, #9
 8001a7a:	f7fe fe96 	bl	80007aa <HAL_NVIC_SetPriority>
	/*
	 * 0,0 : Ưu tiên mức cao nhất và mức phụ cao nhất, nghĩa là khi có System Exception
	 * thì sẽ ưu tiên mức cao nhất đc NVIC kích hoạt.
	 * SCB: System Control Block(CortexM4_UserGuide->4.3)
	 */
}
 8001a7e:	bf00      	nop
 8001a80:	bd80      	pop	{r7, pc}
 8001a82:	bf00      	nop
 8001a84:	e000ed00 	.word	0xe000ed00

08001a88 <HAL_UART_MspInit>:
 * @return      - none
 *
 * @Note        - none
 */
void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	b08a      	sub	sp, #40	; 0x28
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef gpio_uart;

	/* Khởi tạo Low Level Processor of UART Peripheral */
	//1.Enable the clock for the USART2 and GPIOA peripheral
	__HAL_RCC_USART2_CLK_ENABLE();
 8001a90:	2300      	movs	r3, #0
 8001a92:	613b      	str	r3, [r7, #16]
 8001a94:	4b1e      	ldr	r3, [pc, #120]	; (8001b10 <HAL_UART_MspInit+0x88>)
 8001a96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a98:	4a1d      	ldr	r2, [pc, #116]	; (8001b10 <HAL_UART_MspInit+0x88>)
 8001a9a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a9e:	6413      	str	r3, [r2, #64]	; 0x40
 8001aa0:	4b1b      	ldr	r3, [pc, #108]	; (8001b10 <HAL_UART_MspInit+0x88>)
 8001aa2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aa4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001aa8:	613b      	str	r3, [r7, #16]
 8001aaa:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8001aac:	2300      	movs	r3, #0
 8001aae:	60fb      	str	r3, [r7, #12]
 8001ab0:	4b17      	ldr	r3, [pc, #92]	; (8001b10 <HAL_UART_MspInit+0x88>)
 8001ab2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ab4:	4a16      	ldr	r2, [pc, #88]	; (8001b10 <HAL_UART_MspInit+0x88>)
 8001ab6:	f043 0301 	orr.w	r3, r3, #1
 8001aba:	6313      	str	r3, [r2, #48]	; 0x30
 8001abc:	4b14      	ldr	r3, [pc, #80]	; (8001b10 <HAL_UART_MspInit+0x88>)
 8001abe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ac0:	f003 0301 	and.w	r3, r3, #1
 8001ac4:	60fb      	str	r3, [r7, #12]
 8001ac6:	68fb      	ldr	r3, [r7, #12]

	//2.Do the pin GPIO configurations for USART
	//UART_Tx
	gpio_uart.Pin = GPIO_PIN_2;
 8001ac8:	2304      	movs	r3, #4
 8001aca:	617b      	str	r3, [r7, #20]
	gpio_uart.Mode = GPIO_MODE_AF_PP;
 8001acc:	2302      	movs	r3, #2
 8001ace:	61bb      	str	r3, [r7, #24]
	gpio_uart.Pull = GPIO_PULLUP;
 8001ad0:	2301      	movs	r3, #1
 8001ad2:	61fb      	str	r3, [r7, #28]
	gpio_uart.Speed = GPIO_SPEED_FREQ_LOW;
 8001ad4:	2300      	movs	r3, #0
 8001ad6:	623b      	str	r3, [r7, #32]
	gpio_uart.Alternate = GPIO_AF7_USART2;
 8001ad8:	2307      	movs	r3, #7
 8001ada:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(GPIOA, &gpio_uart);
 8001adc:	f107 0314 	add.w	r3, r7, #20
 8001ae0:	4619      	mov	r1, r3
 8001ae2:	480c      	ldr	r0, [pc, #48]	; (8001b14 <HAL_UART_MspInit+0x8c>)
 8001ae4:	f7fe fea4 	bl	8000830 <HAL_GPIO_Init>
	//UART_Rx
	gpio_uart.Pin = GPIO_PIN_3;
 8001ae8:	2308      	movs	r3, #8
 8001aea:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOA, &gpio_uart);
 8001aec:	f107 0314 	add.w	r3, r7, #20
 8001af0:	4619      	mov	r1, r3
 8001af2:	4808      	ldr	r0, [pc, #32]	; (8001b14 <HAL_UART_MspInit+0x8c>)
 8001af4:	f7fe fe9c 	bl	8000830 <HAL_GPIO_Init>

	//3.Enable the IRQ and setup the priority(NVIC settings)
	HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001af8:	2026      	movs	r0, #38	; 0x26
 8001afa:	f7fe fe72 	bl	80007e2 <HAL_NVIC_EnableIRQ>
	HAL_NVIC_SetPriority(USART2_IRQn, 15, 0);
 8001afe:	2200      	movs	r2, #0
 8001b00:	210f      	movs	r1, #15
 8001b02:	2026      	movs	r0, #38	; 0x26
 8001b04:	f7fe fe51 	bl	80007aa <HAL_NVIC_SetPriority>

}
 8001b08:	bf00      	nop
 8001b0a:	3728      	adds	r7, #40	; 0x28
 8001b0c:	46bd      	mov	sp, r7
 8001b0e:	bd80      	pop	{r7, pc}
 8001b10:	40023800 	.word	0x40023800
 8001b14:	40020000 	.word	0x40020000

08001b18 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001b18:	b480      	push	{r7}
 8001b1a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001b1c:	4b08      	ldr	r3, [pc, #32]	; (8001b40 <SystemInit+0x28>)
 8001b1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001b22:	4a07      	ldr	r2, [pc, #28]	; (8001b40 <SystemInit+0x28>)
 8001b24:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001b28:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001b2c:	4b04      	ldr	r3, [pc, #16]	; (8001b40 <SystemInit+0x28>)
 8001b2e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001b32:	609a      	str	r2, [r3, #8]
#endif
}
 8001b34:	bf00      	nop
 8001b36:	46bd      	mov	sp, r7
 8001b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b3c:	4770      	bx	lr
 8001b3e:	bf00      	nop
 8001b40:	e000ed00 	.word	0xe000ed00

08001b44 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001b44:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001b7c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001b48:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001b4a:	e003      	b.n	8001b54 <LoopCopyDataInit>

08001b4c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001b4c:	4b0c      	ldr	r3, [pc, #48]	; (8001b80 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001b4e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001b50:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001b52:	3104      	adds	r1, #4

08001b54 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001b54:	480b      	ldr	r0, [pc, #44]	; (8001b84 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001b56:	4b0c      	ldr	r3, [pc, #48]	; (8001b88 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001b58:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001b5a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001b5c:	d3f6      	bcc.n	8001b4c <CopyDataInit>
  ldr  r2, =_sbss
 8001b5e:	4a0b      	ldr	r2, [pc, #44]	; (8001b8c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001b60:	e002      	b.n	8001b68 <LoopFillZerobss>

08001b62 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001b62:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001b64:	f842 3b04 	str.w	r3, [r2], #4

08001b68 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001b68:	4b09      	ldr	r3, [pc, #36]	; (8001b90 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001b6a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001b6c:	d3f9      	bcc.n	8001b62 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001b6e:	f7ff ffd3 	bl	8001b18 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001b72:	f000 f811 	bl	8001b98 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001b76:	f7ff fed1 	bl	800191c <main>
  bx  lr    
 8001b7a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001b7c:	2001ffff 	.word	0x2001ffff
  ldr  r3, =_sidata
 8001b80:	08001c30 	.word	0x08001c30
  ldr  r0, =_sdata
 8001b84:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001b88:	20000010 	.word	0x20000010
  ldr  r2, =_sbss
 8001b8c:	20000010 	.word	0x20000010
  ldr  r3, = _ebss
 8001b90:	20000070 	.word	0x20000070

08001b94 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001b94:	e7fe      	b.n	8001b94 <ADC_IRQHandler>
	...

08001b98 <__libc_init_array>:
 8001b98:	b570      	push	{r4, r5, r6, lr}
 8001b9a:	4d0d      	ldr	r5, [pc, #52]	; (8001bd0 <__libc_init_array+0x38>)
 8001b9c:	4c0d      	ldr	r4, [pc, #52]	; (8001bd4 <__libc_init_array+0x3c>)
 8001b9e:	1b64      	subs	r4, r4, r5
 8001ba0:	10a4      	asrs	r4, r4, #2
 8001ba2:	2600      	movs	r6, #0
 8001ba4:	42a6      	cmp	r6, r4
 8001ba6:	d109      	bne.n	8001bbc <__libc_init_array+0x24>
 8001ba8:	4d0b      	ldr	r5, [pc, #44]	; (8001bd8 <__libc_init_array+0x40>)
 8001baa:	4c0c      	ldr	r4, [pc, #48]	; (8001bdc <__libc_init_array+0x44>)
 8001bac:	f000 f818 	bl	8001be0 <_init>
 8001bb0:	1b64      	subs	r4, r4, r5
 8001bb2:	10a4      	asrs	r4, r4, #2
 8001bb4:	2600      	movs	r6, #0
 8001bb6:	42a6      	cmp	r6, r4
 8001bb8:	d105      	bne.n	8001bc6 <__libc_init_array+0x2e>
 8001bba:	bd70      	pop	{r4, r5, r6, pc}
 8001bbc:	f855 3b04 	ldr.w	r3, [r5], #4
 8001bc0:	4798      	blx	r3
 8001bc2:	3601      	adds	r6, #1
 8001bc4:	e7ee      	b.n	8001ba4 <__libc_init_array+0xc>
 8001bc6:	f855 3b04 	ldr.w	r3, [r5], #4
 8001bca:	4798      	blx	r3
 8001bcc:	3601      	adds	r6, #1
 8001bce:	e7f2      	b.n	8001bb6 <__libc_init_array+0x1e>
 8001bd0:	08001c28 	.word	0x08001c28
 8001bd4:	08001c28 	.word	0x08001c28
 8001bd8:	08001c28 	.word	0x08001c28
 8001bdc:	08001c2c 	.word	0x08001c2c

08001be0 <_init>:
 8001be0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001be2:	bf00      	nop
 8001be4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001be6:	bc08      	pop	{r3}
 8001be8:	469e      	mov	lr, r3
 8001bea:	4770      	bx	lr

08001bec <_fini>:
 8001bec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001bee:	bf00      	nop
 8001bf0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001bf2:	bc08      	pop	{r3}
 8001bf4:	469e      	mov	lr, r3
 8001bf6:	4770      	bx	lr
