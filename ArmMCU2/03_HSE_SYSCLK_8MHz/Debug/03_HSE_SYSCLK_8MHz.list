
03_HSE_SYSCLK_8MHz.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002e5c  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000008c  0800302c  0800302c  0001302c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080030b8  080030b8  0002005c  2**0
                  CONTENTS
  4 .ARM          00000008  080030b8  080030b8  000130b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080030c0  080030c0  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080030c0  080030c0  000130c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080030c4  080030c4  000130c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  080030c8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001ac  2000005c  08003124  0002005c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000208  08003124  00020208  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00005de4  00000000  00000000  000200cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000013cc  00000000  00000000  00025eb3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000005f8  00000000  00000000  00027280  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000470  00000000  00000000  00027878  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000209af  00000000  00000000  00027ce8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00007a4e  00000000  00000000  00048697  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c6ac6  00000000  00000000  000500e5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00001c8c  00000000  00000000  00116bac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005c  00000000  00000000  00118838  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	2000005c 	.word	0x2000005c
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08003014 	.word	0x08003014

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000060 	.word	0x20000060
 800020c:	08003014 	.word	0x08003014

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b970 	b.w	80005b8 <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9e08      	ldr	r6, [sp, #32]
 80002f6:	460d      	mov	r5, r1
 80002f8:	4604      	mov	r4, r0
 80002fa:	460f      	mov	r7, r1
 80002fc:	2b00      	cmp	r3, #0
 80002fe:	d14a      	bne.n	8000396 <__udivmoddi4+0xa6>
 8000300:	428a      	cmp	r2, r1
 8000302:	4694      	mov	ip, r2
 8000304:	d965      	bls.n	80003d2 <__udivmoddi4+0xe2>
 8000306:	fab2 f382 	clz	r3, r2
 800030a:	b143      	cbz	r3, 800031e <__udivmoddi4+0x2e>
 800030c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000310:	f1c3 0220 	rsb	r2, r3, #32
 8000314:	409f      	lsls	r7, r3
 8000316:	fa20 f202 	lsr.w	r2, r0, r2
 800031a:	4317      	orrs	r7, r2
 800031c:	409c      	lsls	r4, r3
 800031e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000322:	fa1f f58c 	uxth.w	r5, ip
 8000326:	fbb7 f1fe 	udiv	r1, r7, lr
 800032a:	0c22      	lsrs	r2, r4, #16
 800032c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000330:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000334:	fb01 f005 	mul.w	r0, r1, r5
 8000338:	4290      	cmp	r0, r2
 800033a:	d90a      	bls.n	8000352 <__udivmoddi4+0x62>
 800033c:	eb1c 0202 	adds.w	r2, ip, r2
 8000340:	f101 37ff 	add.w	r7, r1, #4294967295
 8000344:	f080 811c 	bcs.w	8000580 <__udivmoddi4+0x290>
 8000348:	4290      	cmp	r0, r2
 800034a:	f240 8119 	bls.w	8000580 <__udivmoddi4+0x290>
 800034e:	3902      	subs	r1, #2
 8000350:	4462      	add	r2, ip
 8000352:	1a12      	subs	r2, r2, r0
 8000354:	b2a4      	uxth	r4, r4
 8000356:	fbb2 f0fe 	udiv	r0, r2, lr
 800035a:	fb0e 2210 	mls	r2, lr, r0, r2
 800035e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000362:	fb00 f505 	mul.w	r5, r0, r5
 8000366:	42a5      	cmp	r5, r4
 8000368:	d90a      	bls.n	8000380 <__udivmoddi4+0x90>
 800036a:	eb1c 0404 	adds.w	r4, ip, r4
 800036e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000372:	f080 8107 	bcs.w	8000584 <__udivmoddi4+0x294>
 8000376:	42a5      	cmp	r5, r4
 8000378:	f240 8104 	bls.w	8000584 <__udivmoddi4+0x294>
 800037c:	4464      	add	r4, ip
 800037e:	3802      	subs	r0, #2
 8000380:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000384:	1b64      	subs	r4, r4, r5
 8000386:	2100      	movs	r1, #0
 8000388:	b11e      	cbz	r6, 8000392 <__udivmoddi4+0xa2>
 800038a:	40dc      	lsrs	r4, r3
 800038c:	2300      	movs	r3, #0
 800038e:	e9c6 4300 	strd	r4, r3, [r6]
 8000392:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000396:	428b      	cmp	r3, r1
 8000398:	d908      	bls.n	80003ac <__udivmoddi4+0xbc>
 800039a:	2e00      	cmp	r6, #0
 800039c:	f000 80ed 	beq.w	800057a <__udivmoddi4+0x28a>
 80003a0:	2100      	movs	r1, #0
 80003a2:	e9c6 0500 	strd	r0, r5, [r6]
 80003a6:	4608      	mov	r0, r1
 80003a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ac:	fab3 f183 	clz	r1, r3
 80003b0:	2900      	cmp	r1, #0
 80003b2:	d149      	bne.n	8000448 <__udivmoddi4+0x158>
 80003b4:	42ab      	cmp	r3, r5
 80003b6:	d302      	bcc.n	80003be <__udivmoddi4+0xce>
 80003b8:	4282      	cmp	r2, r0
 80003ba:	f200 80f8 	bhi.w	80005ae <__udivmoddi4+0x2be>
 80003be:	1a84      	subs	r4, r0, r2
 80003c0:	eb65 0203 	sbc.w	r2, r5, r3
 80003c4:	2001      	movs	r0, #1
 80003c6:	4617      	mov	r7, r2
 80003c8:	2e00      	cmp	r6, #0
 80003ca:	d0e2      	beq.n	8000392 <__udivmoddi4+0xa2>
 80003cc:	e9c6 4700 	strd	r4, r7, [r6]
 80003d0:	e7df      	b.n	8000392 <__udivmoddi4+0xa2>
 80003d2:	b902      	cbnz	r2, 80003d6 <__udivmoddi4+0xe6>
 80003d4:	deff      	udf	#255	; 0xff
 80003d6:	fab2 f382 	clz	r3, r2
 80003da:	2b00      	cmp	r3, #0
 80003dc:	f040 8090 	bne.w	8000500 <__udivmoddi4+0x210>
 80003e0:	1a8a      	subs	r2, r1, r2
 80003e2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003e6:	fa1f fe8c 	uxth.w	lr, ip
 80003ea:	2101      	movs	r1, #1
 80003ec:	fbb2 f5f7 	udiv	r5, r2, r7
 80003f0:	fb07 2015 	mls	r0, r7, r5, r2
 80003f4:	0c22      	lsrs	r2, r4, #16
 80003f6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003fa:	fb0e f005 	mul.w	r0, lr, r5
 80003fe:	4290      	cmp	r0, r2
 8000400:	d908      	bls.n	8000414 <__udivmoddi4+0x124>
 8000402:	eb1c 0202 	adds.w	r2, ip, r2
 8000406:	f105 38ff 	add.w	r8, r5, #4294967295
 800040a:	d202      	bcs.n	8000412 <__udivmoddi4+0x122>
 800040c:	4290      	cmp	r0, r2
 800040e:	f200 80cb 	bhi.w	80005a8 <__udivmoddi4+0x2b8>
 8000412:	4645      	mov	r5, r8
 8000414:	1a12      	subs	r2, r2, r0
 8000416:	b2a4      	uxth	r4, r4
 8000418:	fbb2 f0f7 	udiv	r0, r2, r7
 800041c:	fb07 2210 	mls	r2, r7, r0, r2
 8000420:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000424:	fb0e fe00 	mul.w	lr, lr, r0
 8000428:	45a6      	cmp	lr, r4
 800042a:	d908      	bls.n	800043e <__udivmoddi4+0x14e>
 800042c:	eb1c 0404 	adds.w	r4, ip, r4
 8000430:	f100 32ff 	add.w	r2, r0, #4294967295
 8000434:	d202      	bcs.n	800043c <__udivmoddi4+0x14c>
 8000436:	45a6      	cmp	lr, r4
 8000438:	f200 80bb 	bhi.w	80005b2 <__udivmoddi4+0x2c2>
 800043c:	4610      	mov	r0, r2
 800043e:	eba4 040e 	sub.w	r4, r4, lr
 8000442:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000446:	e79f      	b.n	8000388 <__udivmoddi4+0x98>
 8000448:	f1c1 0720 	rsb	r7, r1, #32
 800044c:	408b      	lsls	r3, r1
 800044e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000452:	ea4c 0c03 	orr.w	ip, ip, r3
 8000456:	fa05 f401 	lsl.w	r4, r5, r1
 800045a:	fa20 f307 	lsr.w	r3, r0, r7
 800045e:	40fd      	lsrs	r5, r7
 8000460:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000464:	4323      	orrs	r3, r4
 8000466:	fbb5 f8f9 	udiv	r8, r5, r9
 800046a:	fa1f fe8c 	uxth.w	lr, ip
 800046e:	fb09 5518 	mls	r5, r9, r8, r5
 8000472:	0c1c      	lsrs	r4, r3, #16
 8000474:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000478:	fb08 f50e 	mul.w	r5, r8, lr
 800047c:	42a5      	cmp	r5, r4
 800047e:	fa02 f201 	lsl.w	r2, r2, r1
 8000482:	fa00 f001 	lsl.w	r0, r0, r1
 8000486:	d90b      	bls.n	80004a0 <__udivmoddi4+0x1b0>
 8000488:	eb1c 0404 	adds.w	r4, ip, r4
 800048c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000490:	f080 8088 	bcs.w	80005a4 <__udivmoddi4+0x2b4>
 8000494:	42a5      	cmp	r5, r4
 8000496:	f240 8085 	bls.w	80005a4 <__udivmoddi4+0x2b4>
 800049a:	f1a8 0802 	sub.w	r8, r8, #2
 800049e:	4464      	add	r4, ip
 80004a0:	1b64      	subs	r4, r4, r5
 80004a2:	b29d      	uxth	r5, r3
 80004a4:	fbb4 f3f9 	udiv	r3, r4, r9
 80004a8:	fb09 4413 	mls	r4, r9, r3, r4
 80004ac:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004b0:	fb03 fe0e 	mul.w	lr, r3, lr
 80004b4:	45a6      	cmp	lr, r4
 80004b6:	d908      	bls.n	80004ca <__udivmoddi4+0x1da>
 80004b8:	eb1c 0404 	adds.w	r4, ip, r4
 80004bc:	f103 35ff 	add.w	r5, r3, #4294967295
 80004c0:	d26c      	bcs.n	800059c <__udivmoddi4+0x2ac>
 80004c2:	45a6      	cmp	lr, r4
 80004c4:	d96a      	bls.n	800059c <__udivmoddi4+0x2ac>
 80004c6:	3b02      	subs	r3, #2
 80004c8:	4464      	add	r4, ip
 80004ca:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004ce:	fba3 9502 	umull	r9, r5, r3, r2
 80004d2:	eba4 040e 	sub.w	r4, r4, lr
 80004d6:	42ac      	cmp	r4, r5
 80004d8:	46c8      	mov	r8, r9
 80004da:	46ae      	mov	lr, r5
 80004dc:	d356      	bcc.n	800058c <__udivmoddi4+0x29c>
 80004de:	d053      	beq.n	8000588 <__udivmoddi4+0x298>
 80004e0:	b156      	cbz	r6, 80004f8 <__udivmoddi4+0x208>
 80004e2:	ebb0 0208 	subs.w	r2, r0, r8
 80004e6:	eb64 040e 	sbc.w	r4, r4, lr
 80004ea:	fa04 f707 	lsl.w	r7, r4, r7
 80004ee:	40ca      	lsrs	r2, r1
 80004f0:	40cc      	lsrs	r4, r1
 80004f2:	4317      	orrs	r7, r2
 80004f4:	e9c6 7400 	strd	r7, r4, [r6]
 80004f8:	4618      	mov	r0, r3
 80004fa:	2100      	movs	r1, #0
 80004fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000500:	f1c3 0120 	rsb	r1, r3, #32
 8000504:	fa02 fc03 	lsl.w	ip, r2, r3
 8000508:	fa20 f201 	lsr.w	r2, r0, r1
 800050c:	fa25 f101 	lsr.w	r1, r5, r1
 8000510:	409d      	lsls	r5, r3
 8000512:	432a      	orrs	r2, r5
 8000514:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000518:	fa1f fe8c 	uxth.w	lr, ip
 800051c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000520:	fb07 1510 	mls	r5, r7, r0, r1
 8000524:	0c11      	lsrs	r1, r2, #16
 8000526:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800052a:	fb00 f50e 	mul.w	r5, r0, lr
 800052e:	428d      	cmp	r5, r1
 8000530:	fa04 f403 	lsl.w	r4, r4, r3
 8000534:	d908      	bls.n	8000548 <__udivmoddi4+0x258>
 8000536:	eb1c 0101 	adds.w	r1, ip, r1
 800053a:	f100 38ff 	add.w	r8, r0, #4294967295
 800053e:	d22f      	bcs.n	80005a0 <__udivmoddi4+0x2b0>
 8000540:	428d      	cmp	r5, r1
 8000542:	d92d      	bls.n	80005a0 <__udivmoddi4+0x2b0>
 8000544:	3802      	subs	r0, #2
 8000546:	4461      	add	r1, ip
 8000548:	1b49      	subs	r1, r1, r5
 800054a:	b292      	uxth	r2, r2
 800054c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000550:	fb07 1115 	mls	r1, r7, r5, r1
 8000554:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000558:	fb05 f10e 	mul.w	r1, r5, lr
 800055c:	4291      	cmp	r1, r2
 800055e:	d908      	bls.n	8000572 <__udivmoddi4+0x282>
 8000560:	eb1c 0202 	adds.w	r2, ip, r2
 8000564:	f105 38ff 	add.w	r8, r5, #4294967295
 8000568:	d216      	bcs.n	8000598 <__udivmoddi4+0x2a8>
 800056a:	4291      	cmp	r1, r2
 800056c:	d914      	bls.n	8000598 <__udivmoddi4+0x2a8>
 800056e:	3d02      	subs	r5, #2
 8000570:	4462      	add	r2, ip
 8000572:	1a52      	subs	r2, r2, r1
 8000574:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000578:	e738      	b.n	80003ec <__udivmoddi4+0xfc>
 800057a:	4631      	mov	r1, r6
 800057c:	4630      	mov	r0, r6
 800057e:	e708      	b.n	8000392 <__udivmoddi4+0xa2>
 8000580:	4639      	mov	r1, r7
 8000582:	e6e6      	b.n	8000352 <__udivmoddi4+0x62>
 8000584:	4610      	mov	r0, r2
 8000586:	e6fb      	b.n	8000380 <__udivmoddi4+0x90>
 8000588:	4548      	cmp	r0, r9
 800058a:	d2a9      	bcs.n	80004e0 <__udivmoddi4+0x1f0>
 800058c:	ebb9 0802 	subs.w	r8, r9, r2
 8000590:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000594:	3b01      	subs	r3, #1
 8000596:	e7a3      	b.n	80004e0 <__udivmoddi4+0x1f0>
 8000598:	4645      	mov	r5, r8
 800059a:	e7ea      	b.n	8000572 <__udivmoddi4+0x282>
 800059c:	462b      	mov	r3, r5
 800059e:	e794      	b.n	80004ca <__udivmoddi4+0x1da>
 80005a0:	4640      	mov	r0, r8
 80005a2:	e7d1      	b.n	8000548 <__udivmoddi4+0x258>
 80005a4:	46d0      	mov	r8, sl
 80005a6:	e77b      	b.n	80004a0 <__udivmoddi4+0x1b0>
 80005a8:	3d02      	subs	r5, #2
 80005aa:	4462      	add	r2, ip
 80005ac:	e732      	b.n	8000414 <__udivmoddi4+0x124>
 80005ae:	4608      	mov	r0, r1
 80005b0:	e70a      	b.n	80003c8 <__udivmoddi4+0xd8>
 80005b2:	4464      	add	r4, ip
 80005b4:	3802      	subs	r0, #2
 80005b6:	e742      	b.n	800043e <__udivmoddi4+0x14e>

080005b8 <__aeabi_idiv0>:
 80005b8:	4770      	bx	lr
 80005ba:	bf00      	nop

080005bc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80005bc:	b580      	push	{r7, lr}
 80005be:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80005c0:	4b0e      	ldr	r3, [pc, #56]	; (80005fc <HAL_Init+0x40>)
 80005c2:	681b      	ldr	r3, [r3, #0]
 80005c4:	4a0d      	ldr	r2, [pc, #52]	; (80005fc <HAL_Init+0x40>)
 80005c6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80005ca:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80005cc:	4b0b      	ldr	r3, [pc, #44]	; (80005fc <HAL_Init+0x40>)
 80005ce:	681b      	ldr	r3, [r3, #0]
 80005d0:	4a0a      	ldr	r2, [pc, #40]	; (80005fc <HAL_Init+0x40>)
 80005d2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80005d6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80005d8:	4b08      	ldr	r3, [pc, #32]	; (80005fc <HAL_Init+0x40>)
 80005da:	681b      	ldr	r3, [r3, #0]
 80005dc:	4a07      	ldr	r2, [pc, #28]	; (80005fc <HAL_Init+0x40>)
 80005de:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80005e2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80005e4:	2003      	movs	r0, #3
 80005e6:	f000 f92b 	bl	8000840 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80005ea:	2000      	movs	r0, #0
 80005ec:	f000 f808 	bl	8000600 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80005f0:	f001 ffba 	bl	8002568 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80005f4:	2300      	movs	r3, #0
}
 80005f6:	4618      	mov	r0, r3
 80005f8:	bd80      	pop	{r7, pc}
 80005fa:	bf00      	nop
 80005fc:	40023c00 	.word	0x40023c00

08000600 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000600:	b580      	push	{r7, lr}
 8000602:	b082      	sub	sp, #8
 8000604:	af00      	add	r7, sp, #0
 8000606:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000608:	4b12      	ldr	r3, [pc, #72]	; (8000654 <HAL_InitTick+0x54>)
 800060a:	681a      	ldr	r2, [r3, #0]
 800060c:	4b12      	ldr	r3, [pc, #72]	; (8000658 <HAL_InitTick+0x58>)
 800060e:	781b      	ldrb	r3, [r3, #0]
 8000610:	4619      	mov	r1, r3
 8000612:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000616:	fbb3 f3f1 	udiv	r3, r3, r1
 800061a:	fbb2 f3f3 	udiv	r3, r2, r3
 800061e:	4618      	mov	r0, r3
 8000620:	f000 f943 	bl	80008aa <HAL_SYSTICK_Config>
 8000624:	4603      	mov	r3, r0
 8000626:	2b00      	cmp	r3, #0
 8000628:	d001      	beq.n	800062e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800062a:	2301      	movs	r3, #1
 800062c:	e00e      	b.n	800064c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800062e:	687b      	ldr	r3, [r7, #4]
 8000630:	2b0f      	cmp	r3, #15
 8000632:	d80a      	bhi.n	800064a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000634:	2200      	movs	r2, #0
 8000636:	6879      	ldr	r1, [r7, #4]
 8000638:	f04f 30ff 	mov.w	r0, #4294967295
 800063c:	f000 f90b 	bl	8000856 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000640:	4a06      	ldr	r2, [pc, #24]	; (800065c <HAL_InitTick+0x5c>)
 8000642:	687b      	ldr	r3, [r7, #4]
 8000644:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000646:	2300      	movs	r3, #0
 8000648:	e000      	b.n	800064c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800064a:	2301      	movs	r3, #1
}
 800064c:	4618      	mov	r0, r3
 800064e:	3708      	adds	r7, #8
 8000650:	46bd      	mov	sp, r7
 8000652:	bd80      	pop	{r7, pc}
 8000654:	20000008 	.word	0x20000008
 8000658:	20000004 	.word	0x20000004
 800065c:	20000000 	.word	0x20000000

08000660 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000660:	b480      	push	{r7}
 8000662:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000664:	4b06      	ldr	r3, [pc, #24]	; (8000680 <HAL_IncTick+0x20>)
 8000666:	781b      	ldrb	r3, [r3, #0]
 8000668:	461a      	mov	r2, r3
 800066a:	4b06      	ldr	r3, [pc, #24]	; (8000684 <HAL_IncTick+0x24>)
 800066c:	681b      	ldr	r3, [r3, #0]
 800066e:	4413      	add	r3, r2
 8000670:	4a04      	ldr	r2, [pc, #16]	; (8000684 <HAL_IncTick+0x24>)
 8000672:	6013      	str	r3, [r2, #0]
}
 8000674:	bf00      	nop
 8000676:	46bd      	mov	sp, r7
 8000678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800067c:	4770      	bx	lr
 800067e:	bf00      	nop
 8000680:	20000004 	.word	0x20000004
 8000684:	20000078 	.word	0x20000078

08000688 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000688:	b480      	push	{r7}
 800068a:	af00      	add	r7, sp, #0
  return uwTick;
 800068c:	4b03      	ldr	r3, [pc, #12]	; (800069c <HAL_GetTick+0x14>)
 800068e:	681b      	ldr	r3, [r3, #0]
}
 8000690:	4618      	mov	r0, r3
 8000692:	46bd      	mov	sp, r7
 8000694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000698:	4770      	bx	lr
 800069a:	bf00      	nop
 800069c:	20000078 	.word	0x20000078

080006a0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80006a0:	b480      	push	{r7}
 80006a2:	b085      	sub	sp, #20
 80006a4:	af00      	add	r7, sp, #0
 80006a6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80006a8:	687b      	ldr	r3, [r7, #4]
 80006aa:	f003 0307 	and.w	r3, r3, #7
 80006ae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80006b0:	4b0c      	ldr	r3, [pc, #48]	; (80006e4 <__NVIC_SetPriorityGrouping+0x44>)
 80006b2:	68db      	ldr	r3, [r3, #12]
 80006b4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80006b6:	68ba      	ldr	r2, [r7, #8]
 80006b8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80006bc:	4013      	ands	r3, r2
 80006be:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80006c0:	68fb      	ldr	r3, [r7, #12]
 80006c2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80006c4:	68bb      	ldr	r3, [r7, #8]
 80006c6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80006c8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80006cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80006d0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80006d2:	4a04      	ldr	r2, [pc, #16]	; (80006e4 <__NVIC_SetPriorityGrouping+0x44>)
 80006d4:	68bb      	ldr	r3, [r7, #8]
 80006d6:	60d3      	str	r3, [r2, #12]
}
 80006d8:	bf00      	nop
 80006da:	3714      	adds	r7, #20
 80006dc:	46bd      	mov	sp, r7
 80006de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006e2:	4770      	bx	lr
 80006e4:	e000ed00 	.word	0xe000ed00

080006e8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80006e8:	b480      	push	{r7}
 80006ea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80006ec:	4b04      	ldr	r3, [pc, #16]	; (8000700 <__NVIC_GetPriorityGrouping+0x18>)
 80006ee:	68db      	ldr	r3, [r3, #12]
 80006f0:	0a1b      	lsrs	r3, r3, #8
 80006f2:	f003 0307 	and.w	r3, r3, #7
}
 80006f6:	4618      	mov	r0, r3
 80006f8:	46bd      	mov	sp, r7
 80006fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006fe:	4770      	bx	lr
 8000700:	e000ed00 	.word	0xe000ed00

08000704 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000704:	b480      	push	{r7}
 8000706:	b083      	sub	sp, #12
 8000708:	af00      	add	r7, sp, #0
 800070a:	4603      	mov	r3, r0
 800070c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800070e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000712:	2b00      	cmp	r3, #0
 8000714:	db0b      	blt.n	800072e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000716:	79fb      	ldrb	r3, [r7, #7]
 8000718:	f003 021f 	and.w	r2, r3, #31
 800071c:	4907      	ldr	r1, [pc, #28]	; (800073c <__NVIC_EnableIRQ+0x38>)
 800071e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000722:	095b      	lsrs	r3, r3, #5
 8000724:	2001      	movs	r0, #1
 8000726:	fa00 f202 	lsl.w	r2, r0, r2
 800072a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800072e:	bf00      	nop
 8000730:	370c      	adds	r7, #12
 8000732:	46bd      	mov	sp, r7
 8000734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000738:	4770      	bx	lr
 800073a:	bf00      	nop
 800073c:	e000e100 	.word	0xe000e100

08000740 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000740:	b480      	push	{r7}
 8000742:	b083      	sub	sp, #12
 8000744:	af00      	add	r7, sp, #0
 8000746:	4603      	mov	r3, r0
 8000748:	6039      	str	r1, [r7, #0]
 800074a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800074c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000750:	2b00      	cmp	r3, #0
 8000752:	db0a      	blt.n	800076a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000754:	683b      	ldr	r3, [r7, #0]
 8000756:	b2da      	uxtb	r2, r3
 8000758:	490c      	ldr	r1, [pc, #48]	; (800078c <__NVIC_SetPriority+0x4c>)
 800075a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800075e:	0112      	lsls	r2, r2, #4
 8000760:	b2d2      	uxtb	r2, r2
 8000762:	440b      	add	r3, r1
 8000764:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000768:	e00a      	b.n	8000780 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800076a:	683b      	ldr	r3, [r7, #0]
 800076c:	b2da      	uxtb	r2, r3
 800076e:	4908      	ldr	r1, [pc, #32]	; (8000790 <__NVIC_SetPriority+0x50>)
 8000770:	79fb      	ldrb	r3, [r7, #7]
 8000772:	f003 030f 	and.w	r3, r3, #15
 8000776:	3b04      	subs	r3, #4
 8000778:	0112      	lsls	r2, r2, #4
 800077a:	b2d2      	uxtb	r2, r2
 800077c:	440b      	add	r3, r1
 800077e:	761a      	strb	r2, [r3, #24]
}
 8000780:	bf00      	nop
 8000782:	370c      	adds	r7, #12
 8000784:	46bd      	mov	sp, r7
 8000786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800078a:	4770      	bx	lr
 800078c:	e000e100 	.word	0xe000e100
 8000790:	e000ed00 	.word	0xe000ed00

08000794 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000794:	b480      	push	{r7}
 8000796:	b089      	sub	sp, #36	; 0x24
 8000798:	af00      	add	r7, sp, #0
 800079a:	60f8      	str	r0, [r7, #12]
 800079c:	60b9      	str	r1, [r7, #8]
 800079e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80007a0:	68fb      	ldr	r3, [r7, #12]
 80007a2:	f003 0307 	and.w	r3, r3, #7
 80007a6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80007a8:	69fb      	ldr	r3, [r7, #28]
 80007aa:	f1c3 0307 	rsb	r3, r3, #7
 80007ae:	2b04      	cmp	r3, #4
 80007b0:	bf28      	it	cs
 80007b2:	2304      	movcs	r3, #4
 80007b4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80007b6:	69fb      	ldr	r3, [r7, #28]
 80007b8:	3304      	adds	r3, #4
 80007ba:	2b06      	cmp	r3, #6
 80007bc:	d902      	bls.n	80007c4 <NVIC_EncodePriority+0x30>
 80007be:	69fb      	ldr	r3, [r7, #28]
 80007c0:	3b03      	subs	r3, #3
 80007c2:	e000      	b.n	80007c6 <NVIC_EncodePriority+0x32>
 80007c4:	2300      	movs	r3, #0
 80007c6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80007c8:	f04f 32ff 	mov.w	r2, #4294967295
 80007cc:	69bb      	ldr	r3, [r7, #24]
 80007ce:	fa02 f303 	lsl.w	r3, r2, r3
 80007d2:	43da      	mvns	r2, r3
 80007d4:	68bb      	ldr	r3, [r7, #8]
 80007d6:	401a      	ands	r2, r3
 80007d8:	697b      	ldr	r3, [r7, #20]
 80007da:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80007dc:	f04f 31ff 	mov.w	r1, #4294967295
 80007e0:	697b      	ldr	r3, [r7, #20]
 80007e2:	fa01 f303 	lsl.w	r3, r1, r3
 80007e6:	43d9      	mvns	r1, r3
 80007e8:	687b      	ldr	r3, [r7, #4]
 80007ea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80007ec:	4313      	orrs	r3, r2
         );
}
 80007ee:	4618      	mov	r0, r3
 80007f0:	3724      	adds	r7, #36	; 0x24
 80007f2:	46bd      	mov	sp, r7
 80007f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f8:	4770      	bx	lr
	...

080007fc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80007fc:	b580      	push	{r7, lr}
 80007fe:	b082      	sub	sp, #8
 8000800:	af00      	add	r7, sp, #0
 8000802:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000804:	687b      	ldr	r3, [r7, #4]
 8000806:	3b01      	subs	r3, #1
 8000808:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800080c:	d301      	bcc.n	8000812 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800080e:	2301      	movs	r3, #1
 8000810:	e00f      	b.n	8000832 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000812:	4a0a      	ldr	r2, [pc, #40]	; (800083c <SysTick_Config+0x40>)
 8000814:	687b      	ldr	r3, [r7, #4]
 8000816:	3b01      	subs	r3, #1
 8000818:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800081a:	210f      	movs	r1, #15
 800081c:	f04f 30ff 	mov.w	r0, #4294967295
 8000820:	f7ff ff8e 	bl	8000740 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000824:	4b05      	ldr	r3, [pc, #20]	; (800083c <SysTick_Config+0x40>)
 8000826:	2200      	movs	r2, #0
 8000828:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800082a:	4b04      	ldr	r3, [pc, #16]	; (800083c <SysTick_Config+0x40>)
 800082c:	2207      	movs	r2, #7
 800082e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000830:	2300      	movs	r3, #0
}
 8000832:	4618      	mov	r0, r3
 8000834:	3708      	adds	r7, #8
 8000836:	46bd      	mov	sp, r7
 8000838:	bd80      	pop	{r7, pc}
 800083a:	bf00      	nop
 800083c:	e000e010 	.word	0xe000e010

08000840 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000840:	b580      	push	{r7, lr}
 8000842:	b082      	sub	sp, #8
 8000844:	af00      	add	r7, sp, #0
 8000846:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000848:	6878      	ldr	r0, [r7, #4]
 800084a:	f7ff ff29 	bl	80006a0 <__NVIC_SetPriorityGrouping>
}
 800084e:	bf00      	nop
 8000850:	3708      	adds	r7, #8
 8000852:	46bd      	mov	sp, r7
 8000854:	bd80      	pop	{r7, pc}

08000856 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000856:	b580      	push	{r7, lr}
 8000858:	b086      	sub	sp, #24
 800085a:	af00      	add	r7, sp, #0
 800085c:	4603      	mov	r3, r0
 800085e:	60b9      	str	r1, [r7, #8]
 8000860:	607a      	str	r2, [r7, #4]
 8000862:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000864:	2300      	movs	r3, #0
 8000866:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000868:	f7ff ff3e 	bl	80006e8 <__NVIC_GetPriorityGrouping>
 800086c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800086e:	687a      	ldr	r2, [r7, #4]
 8000870:	68b9      	ldr	r1, [r7, #8]
 8000872:	6978      	ldr	r0, [r7, #20]
 8000874:	f7ff ff8e 	bl	8000794 <NVIC_EncodePriority>
 8000878:	4602      	mov	r2, r0
 800087a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800087e:	4611      	mov	r1, r2
 8000880:	4618      	mov	r0, r3
 8000882:	f7ff ff5d 	bl	8000740 <__NVIC_SetPriority>
}
 8000886:	bf00      	nop
 8000888:	3718      	adds	r7, #24
 800088a:	46bd      	mov	sp, r7
 800088c:	bd80      	pop	{r7, pc}

0800088e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800088e:	b580      	push	{r7, lr}
 8000890:	b082      	sub	sp, #8
 8000892:	af00      	add	r7, sp, #0
 8000894:	4603      	mov	r3, r0
 8000896:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000898:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800089c:	4618      	mov	r0, r3
 800089e:	f7ff ff31 	bl	8000704 <__NVIC_EnableIRQ>
}
 80008a2:	bf00      	nop
 80008a4:	3708      	adds	r7, #8
 80008a6:	46bd      	mov	sp, r7
 80008a8:	bd80      	pop	{r7, pc}

080008aa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80008aa:	b580      	push	{r7, lr}
 80008ac:	b082      	sub	sp, #8
 80008ae:	af00      	add	r7, sp, #0
 80008b0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80008b2:	6878      	ldr	r0, [r7, #4]
 80008b4:	f7ff ffa2 	bl	80007fc <SysTick_Config>
 80008b8:	4603      	mov	r3, r0
}
 80008ba:	4618      	mov	r0, r3
 80008bc:	3708      	adds	r7, #8
 80008be:	46bd      	mov	sp, r7
 80008c0:	bd80      	pop	{r7, pc}
	...

080008c4 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 80008c4:	b480      	push	{r7}
 80008c6:	b083      	sub	sp, #12
 80008c8:	af00      	add	r7, sp, #0
 80008ca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 80008cc:	687b      	ldr	r3, [r7, #4]
 80008ce:	2b04      	cmp	r3, #4
 80008d0:	d106      	bne.n	80008e0 <HAL_SYSTICK_CLKSourceConfig+0x1c>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 80008d2:	4b09      	ldr	r3, [pc, #36]	; (80008f8 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 80008d4:	681b      	ldr	r3, [r3, #0]
 80008d6:	4a08      	ldr	r2, [pc, #32]	; (80008f8 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 80008d8:	f043 0304 	orr.w	r3, r3, #4
 80008dc:	6013      	str	r3, [r2, #0]
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
  }
}
 80008de:	e005      	b.n	80008ec <HAL_SYSTICK_CLKSourceConfig+0x28>
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 80008e0:	4b05      	ldr	r3, [pc, #20]	; (80008f8 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 80008e2:	681b      	ldr	r3, [r3, #0]
 80008e4:	4a04      	ldr	r2, [pc, #16]	; (80008f8 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 80008e6:	f023 0304 	bic.w	r3, r3, #4
 80008ea:	6013      	str	r3, [r2, #0]
}
 80008ec:	bf00      	nop
 80008ee:	370c      	adds	r7, #12
 80008f0:	46bd      	mov	sp, r7
 80008f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f6:	4770      	bx	lr
 80008f8:	e000e010 	.word	0xe000e010

080008fc <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 80008fc:	b580      	push	{r7, lr}
 80008fe:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 8000900:	f000 f802 	bl	8000908 <HAL_SYSTICK_Callback>
}
 8000904:	bf00      	nop
 8000906:	bd80      	pop	{r7, pc}

08000908 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8000908:	b480      	push	{r7}
 800090a:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 800090c:	bf00      	nop
 800090e:	46bd      	mov	sp, r7
 8000910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000914:	4770      	bx	lr
	...

08000918 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000918:	b480      	push	{r7}
 800091a:	b089      	sub	sp, #36	; 0x24
 800091c:	af00      	add	r7, sp, #0
 800091e:	6078      	str	r0, [r7, #4]
 8000920:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000922:	2300      	movs	r3, #0
 8000924:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000926:	2300      	movs	r3, #0
 8000928:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800092a:	2300      	movs	r3, #0
 800092c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800092e:	2300      	movs	r3, #0
 8000930:	61fb      	str	r3, [r7, #28]
 8000932:	e165      	b.n	8000c00 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000934:	2201      	movs	r2, #1
 8000936:	69fb      	ldr	r3, [r7, #28]
 8000938:	fa02 f303 	lsl.w	r3, r2, r3
 800093c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800093e:	683b      	ldr	r3, [r7, #0]
 8000940:	681b      	ldr	r3, [r3, #0]
 8000942:	697a      	ldr	r2, [r7, #20]
 8000944:	4013      	ands	r3, r2
 8000946:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000948:	693a      	ldr	r2, [r7, #16]
 800094a:	697b      	ldr	r3, [r7, #20]
 800094c:	429a      	cmp	r2, r3
 800094e:	f040 8154 	bne.w	8000bfa <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000952:	683b      	ldr	r3, [r7, #0]
 8000954:	685b      	ldr	r3, [r3, #4]
 8000956:	2b01      	cmp	r3, #1
 8000958:	d00b      	beq.n	8000972 <HAL_GPIO_Init+0x5a>
 800095a:	683b      	ldr	r3, [r7, #0]
 800095c:	685b      	ldr	r3, [r3, #4]
 800095e:	2b02      	cmp	r3, #2
 8000960:	d007      	beq.n	8000972 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000962:	683b      	ldr	r3, [r7, #0]
 8000964:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000966:	2b11      	cmp	r3, #17
 8000968:	d003      	beq.n	8000972 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800096a:	683b      	ldr	r3, [r7, #0]
 800096c:	685b      	ldr	r3, [r3, #4]
 800096e:	2b12      	cmp	r3, #18
 8000970:	d130      	bne.n	80009d4 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000972:	687b      	ldr	r3, [r7, #4]
 8000974:	689b      	ldr	r3, [r3, #8]
 8000976:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000978:	69fb      	ldr	r3, [r7, #28]
 800097a:	005b      	lsls	r3, r3, #1
 800097c:	2203      	movs	r2, #3
 800097e:	fa02 f303 	lsl.w	r3, r2, r3
 8000982:	43db      	mvns	r3, r3
 8000984:	69ba      	ldr	r2, [r7, #24]
 8000986:	4013      	ands	r3, r2
 8000988:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800098a:	683b      	ldr	r3, [r7, #0]
 800098c:	68da      	ldr	r2, [r3, #12]
 800098e:	69fb      	ldr	r3, [r7, #28]
 8000990:	005b      	lsls	r3, r3, #1
 8000992:	fa02 f303 	lsl.w	r3, r2, r3
 8000996:	69ba      	ldr	r2, [r7, #24]
 8000998:	4313      	orrs	r3, r2
 800099a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	69ba      	ldr	r2, [r7, #24]
 80009a0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	685b      	ldr	r3, [r3, #4]
 80009a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80009a8:	2201      	movs	r2, #1
 80009aa:	69fb      	ldr	r3, [r7, #28]
 80009ac:	fa02 f303 	lsl.w	r3, r2, r3
 80009b0:	43db      	mvns	r3, r3
 80009b2:	69ba      	ldr	r2, [r7, #24]
 80009b4:	4013      	ands	r3, r2
 80009b6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80009b8:	683b      	ldr	r3, [r7, #0]
 80009ba:	685b      	ldr	r3, [r3, #4]
 80009bc:	091b      	lsrs	r3, r3, #4
 80009be:	f003 0201 	and.w	r2, r3, #1
 80009c2:	69fb      	ldr	r3, [r7, #28]
 80009c4:	fa02 f303 	lsl.w	r3, r2, r3
 80009c8:	69ba      	ldr	r2, [r7, #24]
 80009ca:	4313      	orrs	r3, r2
 80009cc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	69ba      	ldr	r2, [r7, #24]
 80009d2:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	68db      	ldr	r3, [r3, #12]
 80009d8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80009da:	69fb      	ldr	r3, [r7, #28]
 80009dc:	005b      	lsls	r3, r3, #1
 80009de:	2203      	movs	r2, #3
 80009e0:	fa02 f303 	lsl.w	r3, r2, r3
 80009e4:	43db      	mvns	r3, r3
 80009e6:	69ba      	ldr	r2, [r7, #24]
 80009e8:	4013      	ands	r3, r2
 80009ea:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80009ec:	683b      	ldr	r3, [r7, #0]
 80009ee:	689a      	ldr	r2, [r3, #8]
 80009f0:	69fb      	ldr	r3, [r7, #28]
 80009f2:	005b      	lsls	r3, r3, #1
 80009f4:	fa02 f303 	lsl.w	r3, r2, r3
 80009f8:	69ba      	ldr	r2, [r7, #24]
 80009fa:	4313      	orrs	r3, r2
 80009fc:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80009fe:	687b      	ldr	r3, [r7, #4]
 8000a00:	69ba      	ldr	r2, [r7, #24]
 8000a02:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000a04:	683b      	ldr	r3, [r7, #0]
 8000a06:	685b      	ldr	r3, [r3, #4]
 8000a08:	2b02      	cmp	r3, #2
 8000a0a:	d003      	beq.n	8000a14 <HAL_GPIO_Init+0xfc>
 8000a0c:	683b      	ldr	r3, [r7, #0]
 8000a0e:	685b      	ldr	r3, [r3, #4]
 8000a10:	2b12      	cmp	r3, #18
 8000a12:	d123      	bne.n	8000a5c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000a14:	69fb      	ldr	r3, [r7, #28]
 8000a16:	08da      	lsrs	r2, r3, #3
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	3208      	adds	r2, #8
 8000a1c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000a20:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000a22:	69fb      	ldr	r3, [r7, #28]
 8000a24:	f003 0307 	and.w	r3, r3, #7
 8000a28:	009b      	lsls	r3, r3, #2
 8000a2a:	220f      	movs	r2, #15
 8000a2c:	fa02 f303 	lsl.w	r3, r2, r3
 8000a30:	43db      	mvns	r3, r3
 8000a32:	69ba      	ldr	r2, [r7, #24]
 8000a34:	4013      	ands	r3, r2
 8000a36:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000a38:	683b      	ldr	r3, [r7, #0]
 8000a3a:	691a      	ldr	r2, [r3, #16]
 8000a3c:	69fb      	ldr	r3, [r7, #28]
 8000a3e:	f003 0307 	and.w	r3, r3, #7
 8000a42:	009b      	lsls	r3, r3, #2
 8000a44:	fa02 f303 	lsl.w	r3, r2, r3
 8000a48:	69ba      	ldr	r2, [r7, #24]
 8000a4a:	4313      	orrs	r3, r2
 8000a4c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000a4e:	69fb      	ldr	r3, [r7, #28]
 8000a50:	08da      	lsrs	r2, r3, #3
 8000a52:	687b      	ldr	r3, [r7, #4]
 8000a54:	3208      	adds	r2, #8
 8000a56:	69b9      	ldr	r1, [r7, #24]
 8000a58:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	681b      	ldr	r3, [r3, #0]
 8000a60:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000a62:	69fb      	ldr	r3, [r7, #28]
 8000a64:	005b      	lsls	r3, r3, #1
 8000a66:	2203      	movs	r2, #3
 8000a68:	fa02 f303 	lsl.w	r3, r2, r3
 8000a6c:	43db      	mvns	r3, r3
 8000a6e:	69ba      	ldr	r2, [r7, #24]
 8000a70:	4013      	ands	r3, r2
 8000a72:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000a74:	683b      	ldr	r3, [r7, #0]
 8000a76:	685b      	ldr	r3, [r3, #4]
 8000a78:	f003 0203 	and.w	r2, r3, #3
 8000a7c:	69fb      	ldr	r3, [r7, #28]
 8000a7e:	005b      	lsls	r3, r3, #1
 8000a80:	fa02 f303 	lsl.w	r3, r2, r3
 8000a84:	69ba      	ldr	r2, [r7, #24]
 8000a86:	4313      	orrs	r3, r2
 8000a88:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	69ba      	ldr	r2, [r7, #24]
 8000a8e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000a90:	683b      	ldr	r3, [r7, #0]
 8000a92:	685b      	ldr	r3, [r3, #4]
 8000a94:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a98:	2b00      	cmp	r3, #0
 8000a9a:	f000 80ae 	beq.w	8000bfa <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	60fb      	str	r3, [r7, #12]
 8000aa2:	4b5d      	ldr	r3, [pc, #372]	; (8000c18 <HAL_GPIO_Init+0x300>)
 8000aa4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000aa6:	4a5c      	ldr	r2, [pc, #368]	; (8000c18 <HAL_GPIO_Init+0x300>)
 8000aa8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000aac:	6453      	str	r3, [r2, #68]	; 0x44
 8000aae:	4b5a      	ldr	r3, [pc, #360]	; (8000c18 <HAL_GPIO_Init+0x300>)
 8000ab0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ab2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ab6:	60fb      	str	r3, [r7, #12]
 8000ab8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000aba:	4a58      	ldr	r2, [pc, #352]	; (8000c1c <HAL_GPIO_Init+0x304>)
 8000abc:	69fb      	ldr	r3, [r7, #28]
 8000abe:	089b      	lsrs	r3, r3, #2
 8000ac0:	3302      	adds	r3, #2
 8000ac2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ac6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000ac8:	69fb      	ldr	r3, [r7, #28]
 8000aca:	f003 0303 	and.w	r3, r3, #3
 8000ace:	009b      	lsls	r3, r3, #2
 8000ad0:	220f      	movs	r2, #15
 8000ad2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ad6:	43db      	mvns	r3, r3
 8000ad8:	69ba      	ldr	r2, [r7, #24]
 8000ada:	4013      	ands	r3, r2
 8000adc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	4a4f      	ldr	r2, [pc, #316]	; (8000c20 <HAL_GPIO_Init+0x308>)
 8000ae2:	4293      	cmp	r3, r2
 8000ae4:	d025      	beq.n	8000b32 <HAL_GPIO_Init+0x21a>
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	4a4e      	ldr	r2, [pc, #312]	; (8000c24 <HAL_GPIO_Init+0x30c>)
 8000aea:	4293      	cmp	r3, r2
 8000aec:	d01f      	beq.n	8000b2e <HAL_GPIO_Init+0x216>
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	4a4d      	ldr	r2, [pc, #308]	; (8000c28 <HAL_GPIO_Init+0x310>)
 8000af2:	4293      	cmp	r3, r2
 8000af4:	d019      	beq.n	8000b2a <HAL_GPIO_Init+0x212>
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	4a4c      	ldr	r2, [pc, #304]	; (8000c2c <HAL_GPIO_Init+0x314>)
 8000afa:	4293      	cmp	r3, r2
 8000afc:	d013      	beq.n	8000b26 <HAL_GPIO_Init+0x20e>
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	4a4b      	ldr	r2, [pc, #300]	; (8000c30 <HAL_GPIO_Init+0x318>)
 8000b02:	4293      	cmp	r3, r2
 8000b04:	d00d      	beq.n	8000b22 <HAL_GPIO_Init+0x20a>
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	4a4a      	ldr	r2, [pc, #296]	; (8000c34 <HAL_GPIO_Init+0x31c>)
 8000b0a:	4293      	cmp	r3, r2
 8000b0c:	d007      	beq.n	8000b1e <HAL_GPIO_Init+0x206>
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	4a49      	ldr	r2, [pc, #292]	; (8000c38 <HAL_GPIO_Init+0x320>)
 8000b12:	4293      	cmp	r3, r2
 8000b14:	d101      	bne.n	8000b1a <HAL_GPIO_Init+0x202>
 8000b16:	2306      	movs	r3, #6
 8000b18:	e00c      	b.n	8000b34 <HAL_GPIO_Init+0x21c>
 8000b1a:	2307      	movs	r3, #7
 8000b1c:	e00a      	b.n	8000b34 <HAL_GPIO_Init+0x21c>
 8000b1e:	2305      	movs	r3, #5
 8000b20:	e008      	b.n	8000b34 <HAL_GPIO_Init+0x21c>
 8000b22:	2304      	movs	r3, #4
 8000b24:	e006      	b.n	8000b34 <HAL_GPIO_Init+0x21c>
 8000b26:	2303      	movs	r3, #3
 8000b28:	e004      	b.n	8000b34 <HAL_GPIO_Init+0x21c>
 8000b2a:	2302      	movs	r3, #2
 8000b2c:	e002      	b.n	8000b34 <HAL_GPIO_Init+0x21c>
 8000b2e:	2301      	movs	r3, #1
 8000b30:	e000      	b.n	8000b34 <HAL_GPIO_Init+0x21c>
 8000b32:	2300      	movs	r3, #0
 8000b34:	69fa      	ldr	r2, [r7, #28]
 8000b36:	f002 0203 	and.w	r2, r2, #3
 8000b3a:	0092      	lsls	r2, r2, #2
 8000b3c:	4093      	lsls	r3, r2
 8000b3e:	69ba      	ldr	r2, [r7, #24]
 8000b40:	4313      	orrs	r3, r2
 8000b42:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000b44:	4935      	ldr	r1, [pc, #212]	; (8000c1c <HAL_GPIO_Init+0x304>)
 8000b46:	69fb      	ldr	r3, [r7, #28]
 8000b48:	089b      	lsrs	r3, r3, #2
 8000b4a:	3302      	adds	r3, #2
 8000b4c:	69ba      	ldr	r2, [r7, #24]
 8000b4e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000b52:	4b3a      	ldr	r3, [pc, #232]	; (8000c3c <HAL_GPIO_Init+0x324>)
 8000b54:	681b      	ldr	r3, [r3, #0]
 8000b56:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000b58:	693b      	ldr	r3, [r7, #16]
 8000b5a:	43db      	mvns	r3, r3
 8000b5c:	69ba      	ldr	r2, [r7, #24]
 8000b5e:	4013      	ands	r3, r2
 8000b60:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000b62:	683b      	ldr	r3, [r7, #0]
 8000b64:	685b      	ldr	r3, [r3, #4]
 8000b66:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000b6a:	2b00      	cmp	r3, #0
 8000b6c:	d003      	beq.n	8000b76 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8000b6e:	69ba      	ldr	r2, [r7, #24]
 8000b70:	693b      	ldr	r3, [r7, #16]
 8000b72:	4313      	orrs	r3, r2
 8000b74:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000b76:	4a31      	ldr	r2, [pc, #196]	; (8000c3c <HAL_GPIO_Init+0x324>)
 8000b78:	69bb      	ldr	r3, [r7, #24]
 8000b7a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000b7c:	4b2f      	ldr	r3, [pc, #188]	; (8000c3c <HAL_GPIO_Init+0x324>)
 8000b7e:	685b      	ldr	r3, [r3, #4]
 8000b80:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000b82:	693b      	ldr	r3, [r7, #16]
 8000b84:	43db      	mvns	r3, r3
 8000b86:	69ba      	ldr	r2, [r7, #24]
 8000b88:	4013      	ands	r3, r2
 8000b8a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000b8c:	683b      	ldr	r3, [r7, #0]
 8000b8e:	685b      	ldr	r3, [r3, #4]
 8000b90:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b94:	2b00      	cmp	r3, #0
 8000b96:	d003      	beq.n	8000ba0 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8000b98:	69ba      	ldr	r2, [r7, #24]
 8000b9a:	693b      	ldr	r3, [r7, #16]
 8000b9c:	4313      	orrs	r3, r2
 8000b9e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000ba0:	4a26      	ldr	r2, [pc, #152]	; (8000c3c <HAL_GPIO_Init+0x324>)
 8000ba2:	69bb      	ldr	r3, [r7, #24]
 8000ba4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000ba6:	4b25      	ldr	r3, [pc, #148]	; (8000c3c <HAL_GPIO_Init+0x324>)
 8000ba8:	689b      	ldr	r3, [r3, #8]
 8000baa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000bac:	693b      	ldr	r3, [r7, #16]
 8000bae:	43db      	mvns	r3, r3
 8000bb0:	69ba      	ldr	r2, [r7, #24]
 8000bb2:	4013      	ands	r3, r2
 8000bb4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000bb6:	683b      	ldr	r3, [r7, #0]
 8000bb8:	685b      	ldr	r3, [r3, #4]
 8000bba:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000bbe:	2b00      	cmp	r3, #0
 8000bc0:	d003      	beq.n	8000bca <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8000bc2:	69ba      	ldr	r2, [r7, #24]
 8000bc4:	693b      	ldr	r3, [r7, #16]
 8000bc6:	4313      	orrs	r3, r2
 8000bc8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000bca:	4a1c      	ldr	r2, [pc, #112]	; (8000c3c <HAL_GPIO_Init+0x324>)
 8000bcc:	69bb      	ldr	r3, [r7, #24]
 8000bce:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000bd0:	4b1a      	ldr	r3, [pc, #104]	; (8000c3c <HAL_GPIO_Init+0x324>)
 8000bd2:	68db      	ldr	r3, [r3, #12]
 8000bd4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000bd6:	693b      	ldr	r3, [r7, #16]
 8000bd8:	43db      	mvns	r3, r3
 8000bda:	69ba      	ldr	r2, [r7, #24]
 8000bdc:	4013      	ands	r3, r2
 8000bde:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000be0:	683b      	ldr	r3, [r7, #0]
 8000be2:	685b      	ldr	r3, [r3, #4]
 8000be4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000be8:	2b00      	cmp	r3, #0
 8000bea:	d003      	beq.n	8000bf4 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8000bec:	69ba      	ldr	r2, [r7, #24]
 8000bee:	693b      	ldr	r3, [r7, #16]
 8000bf0:	4313      	orrs	r3, r2
 8000bf2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000bf4:	4a11      	ldr	r2, [pc, #68]	; (8000c3c <HAL_GPIO_Init+0x324>)
 8000bf6:	69bb      	ldr	r3, [r7, #24]
 8000bf8:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000bfa:	69fb      	ldr	r3, [r7, #28]
 8000bfc:	3301      	adds	r3, #1
 8000bfe:	61fb      	str	r3, [r7, #28]
 8000c00:	69fb      	ldr	r3, [r7, #28]
 8000c02:	2b0f      	cmp	r3, #15
 8000c04:	f67f ae96 	bls.w	8000934 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000c08:	bf00      	nop
 8000c0a:	bf00      	nop
 8000c0c:	3724      	adds	r7, #36	; 0x24
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c14:	4770      	bx	lr
 8000c16:	bf00      	nop
 8000c18:	40023800 	.word	0x40023800
 8000c1c:	40013800 	.word	0x40013800
 8000c20:	40020000 	.word	0x40020000
 8000c24:	40020400 	.word	0x40020400
 8000c28:	40020800 	.word	0x40020800
 8000c2c:	40020c00 	.word	0x40020c00
 8000c30:	40021000 	.word	0x40021000
 8000c34:	40021400 	.word	0x40021400
 8000c38:	40021800 	.word	0x40021800
 8000c3c:	40013c00 	.word	0x40013c00

08000c40 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8000c40:	b580      	push	{r7, lr}
 8000c42:	b084      	sub	sp, #16
 8000c44:	af00      	add	r7, sp, #0
 8000c46:	6078      	str	r0, [r7, #4]
 8000c48:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	2b00      	cmp	r3, #0
 8000c4e:	d101      	bne.n	8000c54 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8000c50:	2301      	movs	r3, #1
 8000c52:	e0cc      	b.n	8000dee <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8000c54:	4b68      	ldr	r3, [pc, #416]	; (8000df8 <HAL_RCC_ClockConfig+0x1b8>)
 8000c56:	681b      	ldr	r3, [r3, #0]
 8000c58:	f003 030f 	and.w	r3, r3, #15
 8000c5c:	683a      	ldr	r2, [r7, #0]
 8000c5e:	429a      	cmp	r2, r3
 8000c60:	d90c      	bls.n	8000c7c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000c62:	4b65      	ldr	r3, [pc, #404]	; (8000df8 <HAL_RCC_ClockConfig+0x1b8>)
 8000c64:	683a      	ldr	r2, [r7, #0]
 8000c66:	b2d2      	uxtb	r2, r2
 8000c68:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000c6a:	4b63      	ldr	r3, [pc, #396]	; (8000df8 <HAL_RCC_ClockConfig+0x1b8>)
 8000c6c:	681b      	ldr	r3, [r3, #0]
 8000c6e:	f003 030f 	and.w	r3, r3, #15
 8000c72:	683a      	ldr	r2, [r7, #0]
 8000c74:	429a      	cmp	r2, r3
 8000c76:	d001      	beq.n	8000c7c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8000c78:	2301      	movs	r3, #1
 8000c7a:	e0b8      	b.n	8000dee <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	681b      	ldr	r3, [r3, #0]
 8000c80:	f003 0302 	and.w	r3, r3, #2
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	d020      	beq.n	8000cca <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	681b      	ldr	r3, [r3, #0]
 8000c8c:	f003 0304 	and.w	r3, r3, #4
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	d005      	beq.n	8000ca0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8000c94:	4b59      	ldr	r3, [pc, #356]	; (8000dfc <HAL_RCC_ClockConfig+0x1bc>)
 8000c96:	689b      	ldr	r3, [r3, #8]
 8000c98:	4a58      	ldr	r2, [pc, #352]	; (8000dfc <HAL_RCC_ClockConfig+0x1bc>)
 8000c9a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8000c9e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	681b      	ldr	r3, [r3, #0]
 8000ca4:	f003 0308 	and.w	r3, r3, #8
 8000ca8:	2b00      	cmp	r3, #0
 8000caa:	d005      	beq.n	8000cb8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8000cac:	4b53      	ldr	r3, [pc, #332]	; (8000dfc <HAL_RCC_ClockConfig+0x1bc>)
 8000cae:	689b      	ldr	r3, [r3, #8]
 8000cb0:	4a52      	ldr	r2, [pc, #328]	; (8000dfc <HAL_RCC_ClockConfig+0x1bc>)
 8000cb2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8000cb6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000cb8:	4b50      	ldr	r3, [pc, #320]	; (8000dfc <HAL_RCC_ClockConfig+0x1bc>)
 8000cba:	689b      	ldr	r3, [r3, #8]
 8000cbc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	689b      	ldr	r3, [r3, #8]
 8000cc4:	494d      	ldr	r1, [pc, #308]	; (8000dfc <HAL_RCC_ClockConfig+0x1bc>)
 8000cc6:	4313      	orrs	r3, r2
 8000cc8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	681b      	ldr	r3, [r3, #0]
 8000cce:	f003 0301 	and.w	r3, r3, #1
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d044      	beq.n	8000d60 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	685b      	ldr	r3, [r3, #4]
 8000cda:	2b01      	cmp	r3, #1
 8000cdc:	d107      	bne.n	8000cee <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000cde:	4b47      	ldr	r3, [pc, #284]	; (8000dfc <HAL_RCC_ClockConfig+0x1bc>)
 8000ce0:	681b      	ldr	r3, [r3, #0]
 8000ce2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	d119      	bne.n	8000d1e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8000cea:	2301      	movs	r3, #1
 8000cec:	e07f      	b.n	8000dee <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	685b      	ldr	r3, [r3, #4]
 8000cf2:	2b02      	cmp	r3, #2
 8000cf4:	d003      	beq.n	8000cfe <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8000cfa:	2b03      	cmp	r3, #3
 8000cfc:	d107      	bne.n	8000d0e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000cfe:	4b3f      	ldr	r3, [pc, #252]	; (8000dfc <HAL_RCC_ClockConfig+0x1bc>)
 8000d00:	681b      	ldr	r3, [r3, #0]
 8000d02:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000d06:	2b00      	cmp	r3, #0
 8000d08:	d109      	bne.n	8000d1e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8000d0a:	2301      	movs	r3, #1
 8000d0c:	e06f      	b.n	8000dee <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000d0e:	4b3b      	ldr	r3, [pc, #236]	; (8000dfc <HAL_RCC_ClockConfig+0x1bc>)
 8000d10:	681b      	ldr	r3, [r3, #0]
 8000d12:	f003 0302 	and.w	r3, r3, #2
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	d101      	bne.n	8000d1e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8000d1a:	2301      	movs	r3, #1
 8000d1c:	e067      	b.n	8000dee <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000d1e:	4b37      	ldr	r3, [pc, #220]	; (8000dfc <HAL_RCC_ClockConfig+0x1bc>)
 8000d20:	689b      	ldr	r3, [r3, #8]
 8000d22:	f023 0203 	bic.w	r2, r3, #3
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	685b      	ldr	r3, [r3, #4]
 8000d2a:	4934      	ldr	r1, [pc, #208]	; (8000dfc <HAL_RCC_ClockConfig+0x1bc>)
 8000d2c:	4313      	orrs	r3, r2
 8000d2e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8000d30:	f7ff fcaa 	bl	8000688 <HAL_GetTick>
 8000d34:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000d36:	e00a      	b.n	8000d4e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000d38:	f7ff fca6 	bl	8000688 <HAL_GetTick>
 8000d3c:	4602      	mov	r2, r0
 8000d3e:	68fb      	ldr	r3, [r7, #12]
 8000d40:	1ad3      	subs	r3, r2, r3
 8000d42:	f241 3288 	movw	r2, #5000	; 0x1388
 8000d46:	4293      	cmp	r3, r2
 8000d48:	d901      	bls.n	8000d4e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8000d4a:	2303      	movs	r3, #3
 8000d4c:	e04f      	b.n	8000dee <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000d4e:	4b2b      	ldr	r3, [pc, #172]	; (8000dfc <HAL_RCC_ClockConfig+0x1bc>)
 8000d50:	689b      	ldr	r3, [r3, #8]
 8000d52:	f003 020c 	and.w	r2, r3, #12
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	685b      	ldr	r3, [r3, #4]
 8000d5a:	009b      	lsls	r3, r3, #2
 8000d5c:	429a      	cmp	r2, r3
 8000d5e:	d1eb      	bne.n	8000d38 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8000d60:	4b25      	ldr	r3, [pc, #148]	; (8000df8 <HAL_RCC_ClockConfig+0x1b8>)
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	f003 030f 	and.w	r3, r3, #15
 8000d68:	683a      	ldr	r2, [r7, #0]
 8000d6a:	429a      	cmp	r2, r3
 8000d6c:	d20c      	bcs.n	8000d88 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000d6e:	4b22      	ldr	r3, [pc, #136]	; (8000df8 <HAL_RCC_ClockConfig+0x1b8>)
 8000d70:	683a      	ldr	r2, [r7, #0]
 8000d72:	b2d2      	uxtb	r2, r2
 8000d74:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000d76:	4b20      	ldr	r3, [pc, #128]	; (8000df8 <HAL_RCC_ClockConfig+0x1b8>)
 8000d78:	681b      	ldr	r3, [r3, #0]
 8000d7a:	f003 030f 	and.w	r3, r3, #15
 8000d7e:	683a      	ldr	r2, [r7, #0]
 8000d80:	429a      	cmp	r2, r3
 8000d82:	d001      	beq.n	8000d88 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8000d84:	2301      	movs	r3, #1
 8000d86:	e032      	b.n	8000dee <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	f003 0304 	and.w	r3, r3, #4
 8000d90:	2b00      	cmp	r3, #0
 8000d92:	d008      	beq.n	8000da6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8000d94:	4b19      	ldr	r3, [pc, #100]	; (8000dfc <HAL_RCC_ClockConfig+0x1bc>)
 8000d96:	689b      	ldr	r3, [r3, #8]
 8000d98:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	68db      	ldr	r3, [r3, #12]
 8000da0:	4916      	ldr	r1, [pc, #88]	; (8000dfc <HAL_RCC_ClockConfig+0x1bc>)
 8000da2:	4313      	orrs	r3, r2
 8000da4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	681b      	ldr	r3, [r3, #0]
 8000daa:	f003 0308 	and.w	r3, r3, #8
 8000dae:	2b00      	cmp	r3, #0
 8000db0:	d009      	beq.n	8000dc6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8000db2:	4b12      	ldr	r3, [pc, #72]	; (8000dfc <HAL_RCC_ClockConfig+0x1bc>)
 8000db4:	689b      	ldr	r3, [r3, #8]
 8000db6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	691b      	ldr	r3, [r3, #16]
 8000dbe:	00db      	lsls	r3, r3, #3
 8000dc0:	490e      	ldr	r1, [pc, #56]	; (8000dfc <HAL_RCC_ClockConfig+0x1bc>)
 8000dc2:	4313      	orrs	r3, r2
 8000dc4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8000dc6:	f000 f855 	bl	8000e74 <HAL_RCC_GetSysClockFreq>
 8000dca:	4602      	mov	r2, r0
 8000dcc:	4b0b      	ldr	r3, [pc, #44]	; (8000dfc <HAL_RCC_ClockConfig+0x1bc>)
 8000dce:	689b      	ldr	r3, [r3, #8]
 8000dd0:	091b      	lsrs	r3, r3, #4
 8000dd2:	f003 030f 	and.w	r3, r3, #15
 8000dd6:	490a      	ldr	r1, [pc, #40]	; (8000e00 <HAL_RCC_ClockConfig+0x1c0>)
 8000dd8:	5ccb      	ldrb	r3, [r1, r3]
 8000dda:	fa22 f303 	lsr.w	r3, r2, r3
 8000dde:	4a09      	ldr	r2, [pc, #36]	; (8000e04 <HAL_RCC_ClockConfig+0x1c4>)
 8000de0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8000de2:	4b09      	ldr	r3, [pc, #36]	; (8000e08 <HAL_RCC_ClockConfig+0x1c8>)
 8000de4:	681b      	ldr	r3, [r3, #0]
 8000de6:	4618      	mov	r0, r3
 8000de8:	f7ff fc0a 	bl	8000600 <HAL_InitTick>

  return HAL_OK;
 8000dec:	2300      	movs	r3, #0
}
 8000dee:	4618      	mov	r0, r3
 8000df0:	3710      	adds	r7, #16
 8000df2:	46bd      	mov	sp, r7
 8000df4:	bd80      	pop	{r7, pc}
 8000df6:	bf00      	nop
 8000df8:	40023c00 	.word	0x40023c00
 8000dfc:	40023800 	.word	0x40023800
 8000e00:	0800306c 	.word	0x0800306c
 8000e04:	20000008 	.word	0x20000008
 8000e08:	20000000 	.word	0x20000000

08000e0c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8000e0c:	b480      	push	{r7}
 8000e0e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8000e10:	4b03      	ldr	r3, [pc, #12]	; (8000e20 <HAL_RCC_GetHCLKFreq+0x14>)
 8000e12:	681b      	ldr	r3, [r3, #0]
}
 8000e14:	4618      	mov	r0, r3
 8000e16:	46bd      	mov	sp, r7
 8000e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e1c:	4770      	bx	lr
 8000e1e:	bf00      	nop
 8000e20:	20000008 	.word	0x20000008

08000e24 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8000e24:	b580      	push	{r7, lr}
 8000e26:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8000e28:	f7ff fff0 	bl	8000e0c <HAL_RCC_GetHCLKFreq>
 8000e2c:	4602      	mov	r2, r0
 8000e2e:	4b05      	ldr	r3, [pc, #20]	; (8000e44 <HAL_RCC_GetPCLK1Freq+0x20>)
 8000e30:	689b      	ldr	r3, [r3, #8]
 8000e32:	0a9b      	lsrs	r3, r3, #10
 8000e34:	f003 0307 	and.w	r3, r3, #7
 8000e38:	4903      	ldr	r1, [pc, #12]	; (8000e48 <HAL_RCC_GetPCLK1Freq+0x24>)
 8000e3a:	5ccb      	ldrb	r3, [r1, r3]
 8000e3c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8000e40:	4618      	mov	r0, r3
 8000e42:	bd80      	pop	{r7, pc}
 8000e44:	40023800 	.word	0x40023800
 8000e48:	0800307c 	.word	0x0800307c

08000e4c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8000e50:	f7ff ffdc 	bl	8000e0c <HAL_RCC_GetHCLKFreq>
 8000e54:	4602      	mov	r2, r0
 8000e56:	4b05      	ldr	r3, [pc, #20]	; (8000e6c <HAL_RCC_GetPCLK2Freq+0x20>)
 8000e58:	689b      	ldr	r3, [r3, #8]
 8000e5a:	0b5b      	lsrs	r3, r3, #13
 8000e5c:	f003 0307 	and.w	r3, r3, #7
 8000e60:	4903      	ldr	r1, [pc, #12]	; (8000e70 <HAL_RCC_GetPCLK2Freq+0x24>)
 8000e62:	5ccb      	ldrb	r3, [r1, r3]
 8000e64:	fa22 f303 	lsr.w	r3, r2, r3
}
 8000e68:	4618      	mov	r0, r3
 8000e6a:	bd80      	pop	{r7, pc}
 8000e6c:	40023800 	.word	0x40023800
 8000e70:	0800307c 	.word	0x0800307c

08000e74 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8000e74:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8000e78:	b0ae      	sub	sp, #184	; 0xb8
 8000e7a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8000e7c:	2300      	movs	r3, #0
 8000e7e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 8000e82:	2300      	movs	r3, #0
 8000e84:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8000e88:	2300      	movs	r3, #0
 8000e8a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 8000e8e:	2300      	movs	r3, #0
 8000e90:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8000e94:	2300      	movs	r3, #0
 8000e96:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8000e9a:	4bcb      	ldr	r3, [pc, #812]	; (80011c8 <HAL_RCC_GetSysClockFreq+0x354>)
 8000e9c:	689b      	ldr	r3, [r3, #8]
 8000e9e:	f003 030c 	and.w	r3, r3, #12
 8000ea2:	2b0c      	cmp	r3, #12
 8000ea4:	f200 8206 	bhi.w	80012b4 <HAL_RCC_GetSysClockFreq+0x440>
 8000ea8:	a201      	add	r2, pc, #4	; (adr r2, 8000eb0 <HAL_RCC_GetSysClockFreq+0x3c>)
 8000eaa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000eae:	bf00      	nop
 8000eb0:	08000ee5 	.word	0x08000ee5
 8000eb4:	080012b5 	.word	0x080012b5
 8000eb8:	080012b5 	.word	0x080012b5
 8000ebc:	080012b5 	.word	0x080012b5
 8000ec0:	08000eed 	.word	0x08000eed
 8000ec4:	080012b5 	.word	0x080012b5
 8000ec8:	080012b5 	.word	0x080012b5
 8000ecc:	080012b5 	.word	0x080012b5
 8000ed0:	08000ef5 	.word	0x08000ef5
 8000ed4:	080012b5 	.word	0x080012b5
 8000ed8:	080012b5 	.word	0x080012b5
 8000edc:	080012b5 	.word	0x080012b5
 8000ee0:	080010e5 	.word	0x080010e5
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8000ee4:	4bb9      	ldr	r3, [pc, #740]	; (80011cc <HAL_RCC_GetSysClockFreq+0x358>)
 8000ee6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 8000eea:	e1e7      	b.n	80012bc <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8000eec:	4bb8      	ldr	r3, [pc, #736]	; (80011d0 <HAL_RCC_GetSysClockFreq+0x35c>)
 8000eee:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8000ef2:	e1e3      	b.n	80012bc <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000ef4:	4bb4      	ldr	r3, [pc, #720]	; (80011c8 <HAL_RCC_GetSysClockFreq+0x354>)
 8000ef6:	685b      	ldr	r3, [r3, #4]
 8000ef8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000efc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8000f00:	4bb1      	ldr	r3, [pc, #708]	; (80011c8 <HAL_RCC_GetSysClockFreq+0x354>)
 8000f02:	685b      	ldr	r3, [r3, #4]
 8000f04:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	d071      	beq.n	8000ff0 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000f0c:	4bae      	ldr	r3, [pc, #696]	; (80011c8 <HAL_RCC_GetSysClockFreq+0x354>)
 8000f0e:	685b      	ldr	r3, [r3, #4]
 8000f10:	099b      	lsrs	r3, r3, #6
 8000f12:	2200      	movs	r2, #0
 8000f14:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8000f18:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8000f1c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8000f20:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8000f24:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8000f28:	2300      	movs	r3, #0
 8000f2a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8000f2e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8000f32:	4622      	mov	r2, r4
 8000f34:	462b      	mov	r3, r5
 8000f36:	f04f 0000 	mov.w	r0, #0
 8000f3a:	f04f 0100 	mov.w	r1, #0
 8000f3e:	0159      	lsls	r1, r3, #5
 8000f40:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8000f44:	0150      	lsls	r0, r2, #5
 8000f46:	4602      	mov	r2, r0
 8000f48:	460b      	mov	r3, r1
 8000f4a:	4621      	mov	r1, r4
 8000f4c:	1a51      	subs	r1, r2, r1
 8000f4e:	6439      	str	r1, [r7, #64]	; 0x40
 8000f50:	4629      	mov	r1, r5
 8000f52:	eb63 0301 	sbc.w	r3, r3, r1
 8000f56:	647b      	str	r3, [r7, #68]	; 0x44
 8000f58:	f04f 0200 	mov.w	r2, #0
 8000f5c:	f04f 0300 	mov.w	r3, #0
 8000f60:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8000f64:	4649      	mov	r1, r9
 8000f66:	018b      	lsls	r3, r1, #6
 8000f68:	4641      	mov	r1, r8
 8000f6a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8000f6e:	4641      	mov	r1, r8
 8000f70:	018a      	lsls	r2, r1, #6
 8000f72:	4641      	mov	r1, r8
 8000f74:	1a51      	subs	r1, r2, r1
 8000f76:	63b9      	str	r1, [r7, #56]	; 0x38
 8000f78:	4649      	mov	r1, r9
 8000f7a:	eb63 0301 	sbc.w	r3, r3, r1
 8000f7e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000f80:	f04f 0200 	mov.w	r2, #0
 8000f84:	f04f 0300 	mov.w	r3, #0
 8000f88:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8000f8c:	4649      	mov	r1, r9
 8000f8e:	00cb      	lsls	r3, r1, #3
 8000f90:	4641      	mov	r1, r8
 8000f92:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8000f96:	4641      	mov	r1, r8
 8000f98:	00ca      	lsls	r2, r1, #3
 8000f9a:	4610      	mov	r0, r2
 8000f9c:	4619      	mov	r1, r3
 8000f9e:	4603      	mov	r3, r0
 8000fa0:	4622      	mov	r2, r4
 8000fa2:	189b      	adds	r3, r3, r2
 8000fa4:	633b      	str	r3, [r7, #48]	; 0x30
 8000fa6:	462b      	mov	r3, r5
 8000fa8:	460a      	mov	r2, r1
 8000faa:	eb42 0303 	adc.w	r3, r2, r3
 8000fae:	637b      	str	r3, [r7, #52]	; 0x34
 8000fb0:	f04f 0200 	mov.w	r2, #0
 8000fb4:	f04f 0300 	mov.w	r3, #0
 8000fb8:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8000fbc:	4629      	mov	r1, r5
 8000fbe:	024b      	lsls	r3, r1, #9
 8000fc0:	4621      	mov	r1, r4
 8000fc2:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8000fc6:	4621      	mov	r1, r4
 8000fc8:	024a      	lsls	r2, r1, #9
 8000fca:	4610      	mov	r0, r2
 8000fcc:	4619      	mov	r1, r3
 8000fce:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8000fd8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8000fdc:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8000fe0:	f7ff f96e 	bl	80002c0 <__aeabi_uldivmod>
 8000fe4:	4602      	mov	r2, r0
 8000fe6:	460b      	mov	r3, r1
 8000fe8:	4613      	mov	r3, r2
 8000fea:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8000fee:	e067      	b.n	80010c0 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000ff0:	4b75      	ldr	r3, [pc, #468]	; (80011c8 <HAL_RCC_GetSysClockFreq+0x354>)
 8000ff2:	685b      	ldr	r3, [r3, #4]
 8000ff4:	099b      	lsrs	r3, r3, #6
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8000ffc:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8001000:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001004:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001008:	67bb      	str	r3, [r7, #120]	; 0x78
 800100a:	2300      	movs	r3, #0
 800100c:	67fb      	str	r3, [r7, #124]	; 0x7c
 800100e:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8001012:	4622      	mov	r2, r4
 8001014:	462b      	mov	r3, r5
 8001016:	f04f 0000 	mov.w	r0, #0
 800101a:	f04f 0100 	mov.w	r1, #0
 800101e:	0159      	lsls	r1, r3, #5
 8001020:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001024:	0150      	lsls	r0, r2, #5
 8001026:	4602      	mov	r2, r0
 8001028:	460b      	mov	r3, r1
 800102a:	4621      	mov	r1, r4
 800102c:	1a51      	subs	r1, r2, r1
 800102e:	62b9      	str	r1, [r7, #40]	; 0x28
 8001030:	4629      	mov	r1, r5
 8001032:	eb63 0301 	sbc.w	r3, r3, r1
 8001036:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001038:	f04f 0200 	mov.w	r2, #0
 800103c:	f04f 0300 	mov.w	r3, #0
 8001040:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8001044:	4649      	mov	r1, r9
 8001046:	018b      	lsls	r3, r1, #6
 8001048:	4641      	mov	r1, r8
 800104a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800104e:	4641      	mov	r1, r8
 8001050:	018a      	lsls	r2, r1, #6
 8001052:	4641      	mov	r1, r8
 8001054:	ebb2 0a01 	subs.w	sl, r2, r1
 8001058:	4649      	mov	r1, r9
 800105a:	eb63 0b01 	sbc.w	fp, r3, r1
 800105e:	f04f 0200 	mov.w	r2, #0
 8001062:	f04f 0300 	mov.w	r3, #0
 8001066:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800106a:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800106e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8001072:	4692      	mov	sl, r2
 8001074:	469b      	mov	fp, r3
 8001076:	4623      	mov	r3, r4
 8001078:	eb1a 0303 	adds.w	r3, sl, r3
 800107c:	623b      	str	r3, [r7, #32]
 800107e:	462b      	mov	r3, r5
 8001080:	eb4b 0303 	adc.w	r3, fp, r3
 8001084:	627b      	str	r3, [r7, #36]	; 0x24
 8001086:	f04f 0200 	mov.w	r2, #0
 800108a:	f04f 0300 	mov.w	r3, #0
 800108e:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8001092:	4629      	mov	r1, r5
 8001094:	028b      	lsls	r3, r1, #10
 8001096:	4621      	mov	r1, r4
 8001098:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800109c:	4621      	mov	r1, r4
 800109e:	028a      	lsls	r2, r1, #10
 80010a0:	4610      	mov	r0, r2
 80010a2:	4619      	mov	r1, r3
 80010a4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80010a8:	2200      	movs	r2, #0
 80010aa:	673b      	str	r3, [r7, #112]	; 0x70
 80010ac:	677a      	str	r2, [r7, #116]	; 0x74
 80010ae:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 80010b2:	f7ff f905 	bl	80002c0 <__aeabi_uldivmod>
 80010b6:	4602      	mov	r2, r0
 80010b8:	460b      	mov	r3, r1
 80010ba:	4613      	mov	r3, r2
 80010bc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80010c0:	4b41      	ldr	r3, [pc, #260]	; (80011c8 <HAL_RCC_GetSysClockFreq+0x354>)
 80010c2:	685b      	ldr	r3, [r3, #4]
 80010c4:	0c1b      	lsrs	r3, r3, #16
 80010c6:	f003 0303 	and.w	r3, r3, #3
 80010ca:	3301      	adds	r3, #1
 80010cc:	005b      	lsls	r3, r3, #1
 80010ce:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 80010d2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80010d6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80010da:	fbb2 f3f3 	udiv	r3, r2, r3
 80010de:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80010e2:	e0eb      	b.n	80012bc <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80010e4:	4b38      	ldr	r3, [pc, #224]	; (80011c8 <HAL_RCC_GetSysClockFreq+0x354>)
 80010e6:	685b      	ldr	r3, [r3, #4]
 80010e8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80010ec:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80010f0:	4b35      	ldr	r3, [pc, #212]	; (80011c8 <HAL_RCC_GetSysClockFreq+0x354>)
 80010f2:	685b      	ldr	r3, [r3, #4]
 80010f4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d06b      	beq.n	80011d4 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80010fc:	4b32      	ldr	r3, [pc, #200]	; (80011c8 <HAL_RCC_GetSysClockFreq+0x354>)
 80010fe:	685b      	ldr	r3, [r3, #4]
 8001100:	099b      	lsrs	r3, r3, #6
 8001102:	2200      	movs	r2, #0
 8001104:	66bb      	str	r3, [r7, #104]	; 0x68
 8001106:	66fa      	str	r2, [r7, #108]	; 0x6c
 8001108:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800110a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800110e:	663b      	str	r3, [r7, #96]	; 0x60
 8001110:	2300      	movs	r3, #0
 8001112:	667b      	str	r3, [r7, #100]	; 0x64
 8001114:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8001118:	4622      	mov	r2, r4
 800111a:	462b      	mov	r3, r5
 800111c:	f04f 0000 	mov.w	r0, #0
 8001120:	f04f 0100 	mov.w	r1, #0
 8001124:	0159      	lsls	r1, r3, #5
 8001126:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800112a:	0150      	lsls	r0, r2, #5
 800112c:	4602      	mov	r2, r0
 800112e:	460b      	mov	r3, r1
 8001130:	4621      	mov	r1, r4
 8001132:	1a51      	subs	r1, r2, r1
 8001134:	61b9      	str	r1, [r7, #24]
 8001136:	4629      	mov	r1, r5
 8001138:	eb63 0301 	sbc.w	r3, r3, r1
 800113c:	61fb      	str	r3, [r7, #28]
 800113e:	f04f 0200 	mov.w	r2, #0
 8001142:	f04f 0300 	mov.w	r3, #0
 8001146:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 800114a:	4659      	mov	r1, fp
 800114c:	018b      	lsls	r3, r1, #6
 800114e:	4651      	mov	r1, sl
 8001150:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001154:	4651      	mov	r1, sl
 8001156:	018a      	lsls	r2, r1, #6
 8001158:	4651      	mov	r1, sl
 800115a:	ebb2 0801 	subs.w	r8, r2, r1
 800115e:	4659      	mov	r1, fp
 8001160:	eb63 0901 	sbc.w	r9, r3, r1
 8001164:	f04f 0200 	mov.w	r2, #0
 8001168:	f04f 0300 	mov.w	r3, #0
 800116c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001170:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001174:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001178:	4690      	mov	r8, r2
 800117a:	4699      	mov	r9, r3
 800117c:	4623      	mov	r3, r4
 800117e:	eb18 0303 	adds.w	r3, r8, r3
 8001182:	613b      	str	r3, [r7, #16]
 8001184:	462b      	mov	r3, r5
 8001186:	eb49 0303 	adc.w	r3, r9, r3
 800118a:	617b      	str	r3, [r7, #20]
 800118c:	f04f 0200 	mov.w	r2, #0
 8001190:	f04f 0300 	mov.w	r3, #0
 8001194:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8001198:	4629      	mov	r1, r5
 800119a:	024b      	lsls	r3, r1, #9
 800119c:	4621      	mov	r1, r4
 800119e:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80011a2:	4621      	mov	r1, r4
 80011a4:	024a      	lsls	r2, r1, #9
 80011a6:	4610      	mov	r0, r2
 80011a8:	4619      	mov	r1, r3
 80011aa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80011ae:	2200      	movs	r2, #0
 80011b0:	65bb      	str	r3, [r7, #88]	; 0x58
 80011b2:	65fa      	str	r2, [r7, #92]	; 0x5c
 80011b4:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80011b8:	f7ff f882 	bl	80002c0 <__aeabi_uldivmod>
 80011bc:	4602      	mov	r2, r0
 80011be:	460b      	mov	r3, r1
 80011c0:	4613      	mov	r3, r2
 80011c2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80011c6:	e065      	b.n	8001294 <HAL_RCC_GetSysClockFreq+0x420>
 80011c8:	40023800 	.word	0x40023800
 80011cc:	00f42400 	.word	0x00f42400
 80011d0:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80011d4:	4b3d      	ldr	r3, [pc, #244]	; (80012cc <HAL_RCC_GetSysClockFreq+0x458>)
 80011d6:	685b      	ldr	r3, [r3, #4]
 80011d8:	099b      	lsrs	r3, r3, #6
 80011da:	2200      	movs	r2, #0
 80011dc:	4618      	mov	r0, r3
 80011de:	4611      	mov	r1, r2
 80011e0:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80011e4:	653b      	str	r3, [r7, #80]	; 0x50
 80011e6:	2300      	movs	r3, #0
 80011e8:	657b      	str	r3, [r7, #84]	; 0x54
 80011ea:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 80011ee:	4642      	mov	r2, r8
 80011f0:	464b      	mov	r3, r9
 80011f2:	f04f 0000 	mov.w	r0, #0
 80011f6:	f04f 0100 	mov.w	r1, #0
 80011fa:	0159      	lsls	r1, r3, #5
 80011fc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001200:	0150      	lsls	r0, r2, #5
 8001202:	4602      	mov	r2, r0
 8001204:	460b      	mov	r3, r1
 8001206:	4641      	mov	r1, r8
 8001208:	1a51      	subs	r1, r2, r1
 800120a:	60b9      	str	r1, [r7, #8]
 800120c:	4649      	mov	r1, r9
 800120e:	eb63 0301 	sbc.w	r3, r3, r1
 8001212:	60fb      	str	r3, [r7, #12]
 8001214:	f04f 0200 	mov.w	r2, #0
 8001218:	f04f 0300 	mov.w	r3, #0
 800121c:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8001220:	4659      	mov	r1, fp
 8001222:	018b      	lsls	r3, r1, #6
 8001224:	4651      	mov	r1, sl
 8001226:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800122a:	4651      	mov	r1, sl
 800122c:	018a      	lsls	r2, r1, #6
 800122e:	4651      	mov	r1, sl
 8001230:	1a54      	subs	r4, r2, r1
 8001232:	4659      	mov	r1, fp
 8001234:	eb63 0501 	sbc.w	r5, r3, r1
 8001238:	f04f 0200 	mov.w	r2, #0
 800123c:	f04f 0300 	mov.w	r3, #0
 8001240:	00eb      	lsls	r3, r5, #3
 8001242:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001246:	00e2      	lsls	r2, r4, #3
 8001248:	4614      	mov	r4, r2
 800124a:	461d      	mov	r5, r3
 800124c:	4643      	mov	r3, r8
 800124e:	18e3      	adds	r3, r4, r3
 8001250:	603b      	str	r3, [r7, #0]
 8001252:	464b      	mov	r3, r9
 8001254:	eb45 0303 	adc.w	r3, r5, r3
 8001258:	607b      	str	r3, [r7, #4]
 800125a:	f04f 0200 	mov.w	r2, #0
 800125e:	f04f 0300 	mov.w	r3, #0
 8001262:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001266:	4629      	mov	r1, r5
 8001268:	028b      	lsls	r3, r1, #10
 800126a:	4621      	mov	r1, r4
 800126c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001270:	4621      	mov	r1, r4
 8001272:	028a      	lsls	r2, r1, #10
 8001274:	4610      	mov	r0, r2
 8001276:	4619      	mov	r1, r3
 8001278:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800127c:	2200      	movs	r2, #0
 800127e:	64bb      	str	r3, [r7, #72]	; 0x48
 8001280:	64fa      	str	r2, [r7, #76]	; 0x4c
 8001282:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8001286:	f7ff f81b 	bl	80002c0 <__aeabi_uldivmod>
 800128a:	4602      	mov	r2, r0
 800128c:	460b      	mov	r3, r1
 800128e:	4613      	mov	r3, r2
 8001290:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8001294:	4b0d      	ldr	r3, [pc, #52]	; (80012cc <HAL_RCC_GetSysClockFreq+0x458>)
 8001296:	685b      	ldr	r3, [r3, #4]
 8001298:	0f1b      	lsrs	r3, r3, #28
 800129a:	f003 0307 	and.w	r3, r3, #7
 800129e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 80012a2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80012a6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80012aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80012ae:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80012b2:	e003      	b.n	80012bc <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80012b4:	4b06      	ldr	r3, [pc, #24]	; (80012d0 <HAL_RCC_GetSysClockFreq+0x45c>)
 80012b6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80012ba:	bf00      	nop
    }
  }
  return sysclockfreq;
 80012bc:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 80012c0:	4618      	mov	r0, r3
 80012c2:	37b8      	adds	r7, #184	; 0xb8
 80012c4:	46bd      	mov	sp, r7
 80012c6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80012ca:	bf00      	nop
 80012cc:	40023800 	.word	0x40023800
 80012d0:	00f42400 	.word	0x00f42400

080012d4 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	b086      	sub	sp, #24
 80012d8:	af00      	add	r7, sp, #0
 80012da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80012dc:	2300      	movs	r3, #0
 80012de:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	f003 0301 	and.w	r3, r3, #1
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	f000 8083 	beq.w	80013f4 <HAL_RCC_OscConfig+0x120>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80012ee:	4b95      	ldr	r3, [pc, #596]	; (8001544 <HAL_RCC_OscConfig+0x270>)
 80012f0:	689b      	ldr	r3, [r3, #8]
 80012f2:	f003 030c 	and.w	r3, r3, #12
 80012f6:	2b04      	cmp	r3, #4
 80012f8:	d019      	beq.n	800132e <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80012fa:	4b92      	ldr	r3, [pc, #584]	; (8001544 <HAL_RCC_OscConfig+0x270>)
 80012fc:	689b      	ldr	r3, [r3, #8]
 80012fe:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001302:	2b08      	cmp	r3, #8
 8001304:	d106      	bne.n	8001314 <HAL_RCC_OscConfig+0x40>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001306:	4b8f      	ldr	r3, [pc, #572]	; (8001544 <HAL_RCC_OscConfig+0x270>)
 8001308:	685b      	ldr	r3, [r3, #4]
 800130a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800130e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001312:	d00c      	beq.n	800132e <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001314:	4b8b      	ldr	r3, [pc, #556]	; (8001544 <HAL_RCC_OscConfig+0x270>)
 8001316:	689b      	ldr	r3, [r3, #8]
 8001318:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800131c:	2b0c      	cmp	r3, #12
 800131e:	d112      	bne.n	8001346 <HAL_RCC_OscConfig+0x72>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001320:	4b88      	ldr	r3, [pc, #544]	; (8001544 <HAL_RCC_OscConfig+0x270>)
 8001322:	685b      	ldr	r3, [r3, #4]
 8001324:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001328:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800132c:	d10b      	bne.n	8001346 <HAL_RCC_OscConfig+0x72>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800132e:	4b85      	ldr	r3, [pc, #532]	; (8001544 <HAL_RCC_OscConfig+0x270>)
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001336:	2b00      	cmp	r3, #0
 8001338:	d05b      	beq.n	80013f2 <HAL_RCC_OscConfig+0x11e>
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	685b      	ldr	r3, [r3, #4]
 800133e:	2b00      	cmp	r3, #0
 8001340:	d157      	bne.n	80013f2 <HAL_RCC_OscConfig+0x11e>
      {
        return HAL_ERROR;
 8001342:	2301      	movs	r3, #1
 8001344:	e216      	b.n	8001774 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	685b      	ldr	r3, [r3, #4]
 800134a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800134e:	d106      	bne.n	800135e <HAL_RCC_OscConfig+0x8a>
 8001350:	4b7c      	ldr	r3, [pc, #496]	; (8001544 <HAL_RCC_OscConfig+0x270>)
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	4a7b      	ldr	r2, [pc, #492]	; (8001544 <HAL_RCC_OscConfig+0x270>)
 8001356:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800135a:	6013      	str	r3, [r2, #0]
 800135c:	e01d      	b.n	800139a <HAL_RCC_OscConfig+0xc6>
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	685b      	ldr	r3, [r3, #4]
 8001362:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001366:	d10c      	bne.n	8001382 <HAL_RCC_OscConfig+0xae>
 8001368:	4b76      	ldr	r3, [pc, #472]	; (8001544 <HAL_RCC_OscConfig+0x270>)
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	4a75      	ldr	r2, [pc, #468]	; (8001544 <HAL_RCC_OscConfig+0x270>)
 800136e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001372:	6013      	str	r3, [r2, #0]
 8001374:	4b73      	ldr	r3, [pc, #460]	; (8001544 <HAL_RCC_OscConfig+0x270>)
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	4a72      	ldr	r2, [pc, #456]	; (8001544 <HAL_RCC_OscConfig+0x270>)
 800137a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800137e:	6013      	str	r3, [r2, #0]
 8001380:	e00b      	b.n	800139a <HAL_RCC_OscConfig+0xc6>
 8001382:	4b70      	ldr	r3, [pc, #448]	; (8001544 <HAL_RCC_OscConfig+0x270>)
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	4a6f      	ldr	r2, [pc, #444]	; (8001544 <HAL_RCC_OscConfig+0x270>)
 8001388:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800138c:	6013      	str	r3, [r2, #0]
 800138e:	4b6d      	ldr	r3, [pc, #436]	; (8001544 <HAL_RCC_OscConfig+0x270>)
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	4a6c      	ldr	r2, [pc, #432]	; (8001544 <HAL_RCC_OscConfig+0x270>)
 8001394:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001398:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	685b      	ldr	r3, [r3, #4]
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d013      	beq.n	80013ca <HAL_RCC_OscConfig+0xf6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013a2:	f7ff f971 	bl	8000688 <HAL_GetTick>
 80013a6:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80013a8:	e008      	b.n	80013bc <HAL_RCC_OscConfig+0xe8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80013aa:	f7ff f96d 	bl	8000688 <HAL_GetTick>
 80013ae:	4602      	mov	r2, r0
 80013b0:	693b      	ldr	r3, [r7, #16]
 80013b2:	1ad3      	subs	r3, r2, r3
 80013b4:	2b64      	cmp	r3, #100	; 0x64
 80013b6:	d901      	bls.n	80013bc <HAL_RCC_OscConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80013b8:	2303      	movs	r3, #3
 80013ba:	e1db      	b.n	8001774 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80013bc:	4b61      	ldr	r3, [pc, #388]	; (8001544 <HAL_RCC_OscConfig+0x270>)
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d0f0      	beq.n	80013aa <HAL_RCC_OscConfig+0xd6>
 80013c8:	e014      	b.n	80013f4 <HAL_RCC_OscConfig+0x120>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013ca:	f7ff f95d 	bl	8000688 <HAL_GetTick>
 80013ce:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80013d0:	e008      	b.n	80013e4 <HAL_RCC_OscConfig+0x110>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80013d2:	f7ff f959 	bl	8000688 <HAL_GetTick>
 80013d6:	4602      	mov	r2, r0
 80013d8:	693b      	ldr	r3, [r7, #16]
 80013da:	1ad3      	subs	r3, r2, r3
 80013dc:	2b64      	cmp	r3, #100	; 0x64
 80013de:	d901      	bls.n	80013e4 <HAL_RCC_OscConfig+0x110>
          {
            return HAL_TIMEOUT;
 80013e0:	2303      	movs	r3, #3
 80013e2:	e1c7      	b.n	8001774 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80013e4:	4b57      	ldr	r3, [pc, #348]	; (8001544 <HAL_RCC_OscConfig+0x270>)
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d1f0      	bne.n	80013d2 <HAL_RCC_OscConfig+0xfe>
 80013f0:	e000      	b.n	80013f4 <HAL_RCC_OscConfig+0x120>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013f2:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	f003 0302 	and.w	r3, r3, #2
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d06f      	beq.n	80014e0 <HAL_RCC_OscConfig+0x20c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001400:	4b50      	ldr	r3, [pc, #320]	; (8001544 <HAL_RCC_OscConfig+0x270>)
 8001402:	689b      	ldr	r3, [r3, #8]
 8001404:	f003 030c 	and.w	r3, r3, #12
 8001408:	2b00      	cmp	r3, #0
 800140a:	d017      	beq.n	800143c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800140c:	4b4d      	ldr	r3, [pc, #308]	; (8001544 <HAL_RCC_OscConfig+0x270>)
 800140e:	689b      	ldr	r3, [r3, #8]
 8001410:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001414:	2b08      	cmp	r3, #8
 8001416:	d105      	bne.n	8001424 <HAL_RCC_OscConfig+0x150>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001418:	4b4a      	ldr	r3, [pc, #296]	; (8001544 <HAL_RCC_OscConfig+0x270>)
 800141a:	685b      	ldr	r3, [r3, #4]
 800141c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001420:	2b00      	cmp	r3, #0
 8001422:	d00b      	beq.n	800143c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001424:	4b47      	ldr	r3, [pc, #284]	; (8001544 <HAL_RCC_OscConfig+0x270>)
 8001426:	689b      	ldr	r3, [r3, #8]
 8001428:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800142c:	2b0c      	cmp	r3, #12
 800142e:	d11c      	bne.n	800146a <HAL_RCC_OscConfig+0x196>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001430:	4b44      	ldr	r3, [pc, #272]	; (8001544 <HAL_RCC_OscConfig+0x270>)
 8001432:	685b      	ldr	r3, [r3, #4]
 8001434:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001438:	2b00      	cmp	r3, #0
 800143a:	d116      	bne.n	800146a <HAL_RCC_OscConfig+0x196>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800143c:	4b41      	ldr	r3, [pc, #260]	; (8001544 <HAL_RCC_OscConfig+0x270>)
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	f003 0302 	and.w	r3, r3, #2
 8001444:	2b00      	cmp	r3, #0
 8001446:	d005      	beq.n	8001454 <HAL_RCC_OscConfig+0x180>
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	68db      	ldr	r3, [r3, #12]
 800144c:	2b01      	cmp	r3, #1
 800144e:	d001      	beq.n	8001454 <HAL_RCC_OscConfig+0x180>
      {
        return HAL_ERROR;
 8001450:	2301      	movs	r3, #1
 8001452:	e18f      	b.n	8001774 <HAL_RCC_OscConfig+0x4a0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001454:	4b3b      	ldr	r3, [pc, #236]	; (8001544 <HAL_RCC_OscConfig+0x270>)
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	691b      	ldr	r3, [r3, #16]
 8001460:	00db      	lsls	r3, r3, #3
 8001462:	4938      	ldr	r1, [pc, #224]	; (8001544 <HAL_RCC_OscConfig+0x270>)
 8001464:	4313      	orrs	r3, r2
 8001466:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001468:	e03a      	b.n	80014e0 <HAL_RCC_OscConfig+0x20c>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	68db      	ldr	r3, [r3, #12]
 800146e:	2b00      	cmp	r3, #0
 8001470:	d020      	beq.n	80014b4 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001472:	4b35      	ldr	r3, [pc, #212]	; (8001548 <HAL_RCC_OscConfig+0x274>)
 8001474:	2201      	movs	r2, #1
 8001476:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001478:	f7ff f906 	bl	8000688 <HAL_GetTick>
 800147c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800147e:	e008      	b.n	8001492 <HAL_RCC_OscConfig+0x1be>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001480:	f7ff f902 	bl	8000688 <HAL_GetTick>
 8001484:	4602      	mov	r2, r0
 8001486:	693b      	ldr	r3, [r7, #16]
 8001488:	1ad3      	subs	r3, r2, r3
 800148a:	2b02      	cmp	r3, #2
 800148c:	d901      	bls.n	8001492 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800148e:	2303      	movs	r3, #3
 8001490:	e170      	b.n	8001774 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001492:	4b2c      	ldr	r3, [pc, #176]	; (8001544 <HAL_RCC_OscConfig+0x270>)
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	f003 0302 	and.w	r3, r3, #2
 800149a:	2b00      	cmp	r3, #0
 800149c:	d0f0      	beq.n	8001480 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800149e:	4b29      	ldr	r3, [pc, #164]	; (8001544 <HAL_RCC_OscConfig+0x270>)
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	691b      	ldr	r3, [r3, #16]
 80014aa:	00db      	lsls	r3, r3, #3
 80014ac:	4925      	ldr	r1, [pc, #148]	; (8001544 <HAL_RCC_OscConfig+0x270>)
 80014ae:	4313      	orrs	r3, r2
 80014b0:	600b      	str	r3, [r1, #0]
 80014b2:	e015      	b.n	80014e0 <HAL_RCC_OscConfig+0x20c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80014b4:	4b24      	ldr	r3, [pc, #144]	; (8001548 <HAL_RCC_OscConfig+0x274>)
 80014b6:	2200      	movs	r2, #0
 80014b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014ba:	f7ff f8e5 	bl	8000688 <HAL_GetTick>
 80014be:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80014c0:	e008      	b.n	80014d4 <HAL_RCC_OscConfig+0x200>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80014c2:	f7ff f8e1 	bl	8000688 <HAL_GetTick>
 80014c6:	4602      	mov	r2, r0
 80014c8:	693b      	ldr	r3, [r7, #16]
 80014ca:	1ad3      	subs	r3, r2, r3
 80014cc:	2b02      	cmp	r3, #2
 80014ce:	d901      	bls.n	80014d4 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 80014d0:	2303      	movs	r3, #3
 80014d2:	e14f      	b.n	8001774 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80014d4:	4b1b      	ldr	r3, [pc, #108]	; (8001544 <HAL_RCC_OscConfig+0x270>)
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	f003 0302 	and.w	r3, r3, #2
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d1f0      	bne.n	80014c2 <HAL_RCC_OscConfig+0x1ee>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	f003 0308 	and.w	r3, r3, #8
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d037      	beq.n	800155c <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	695b      	ldr	r3, [r3, #20]
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d016      	beq.n	8001522 <HAL_RCC_OscConfig+0x24e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80014f4:	4b15      	ldr	r3, [pc, #84]	; (800154c <HAL_RCC_OscConfig+0x278>)
 80014f6:	2201      	movs	r2, #1
 80014f8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80014fa:	f7ff f8c5 	bl	8000688 <HAL_GetTick>
 80014fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001500:	e008      	b.n	8001514 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001502:	f7ff f8c1 	bl	8000688 <HAL_GetTick>
 8001506:	4602      	mov	r2, r0
 8001508:	693b      	ldr	r3, [r7, #16]
 800150a:	1ad3      	subs	r3, r2, r3
 800150c:	2b02      	cmp	r3, #2
 800150e:	d901      	bls.n	8001514 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001510:	2303      	movs	r3, #3
 8001512:	e12f      	b.n	8001774 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001514:	4b0b      	ldr	r3, [pc, #44]	; (8001544 <HAL_RCC_OscConfig+0x270>)
 8001516:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001518:	f003 0302 	and.w	r3, r3, #2
 800151c:	2b00      	cmp	r3, #0
 800151e:	d0f0      	beq.n	8001502 <HAL_RCC_OscConfig+0x22e>
 8001520:	e01c      	b.n	800155c <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001522:	4b0a      	ldr	r3, [pc, #40]	; (800154c <HAL_RCC_OscConfig+0x278>)
 8001524:	2200      	movs	r2, #0
 8001526:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001528:	f7ff f8ae 	bl	8000688 <HAL_GetTick>
 800152c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800152e:	e00f      	b.n	8001550 <HAL_RCC_OscConfig+0x27c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001530:	f7ff f8aa 	bl	8000688 <HAL_GetTick>
 8001534:	4602      	mov	r2, r0
 8001536:	693b      	ldr	r3, [r7, #16]
 8001538:	1ad3      	subs	r3, r2, r3
 800153a:	2b02      	cmp	r3, #2
 800153c:	d908      	bls.n	8001550 <HAL_RCC_OscConfig+0x27c>
        {
          return HAL_TIMEOUT;
 800153e:	2303      	movs	r3, #3
 8001540:	e118      	b.n	8001774 <HAL_RCC_OscConfig+0x4a0>
 8001542:	bf00      	nop
 8001544:	40023800 	.word	0x40023800
 8001548:	42470000 	.word	0x42470000
 800154c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001550:	4b8a      	ldr	r3, [pc, #552]	; (800177c <HAL_RCC_OscConfig+0x4a8>)
 8001552:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001554:	f003 0302 	and.w	r3, r3, #2
 8001558:	2b00      	cmp	r3, #0
 800155a:	d1e9      	bne.n	8001530 <HAL_RCC_OscConfig+0x25c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	f003 0304 	and.w	r3, r3, #4
 8001564:	2b00      	cmp	r3, #0
 8001566:	f000 8097 	beq.w	8001698 <HAL_RCC_OscConfig+0x3c4>
  {
    FlagStatus       pwrclkchanged = RESET;
 800156a:	2300      	movs	r3, #0
 800156c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800156e:	4b83      	ldr	r3, [pc, #524]	; (800177c <HAL_RCC_OscConfig+0x4a8>)
 8001570:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001572:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001576:	2b00      	cmp	r3, #0
 8001578:	d10f      	bne.n	800159a <HAL_RCC_OscConfig+0x2c6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800157a:	2300      	movs	r3, #0
 800157c:	60fb      	str	r3, [r7, #12]
 800157e:	4b7f      	ldr	r3, [pc, #508]	; (800177c <HAL_RCC_OscConfig+0x4a8>)
 8001580:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001582:	4a7e      	ldr	r2, [pc, #504]	; (800177c <HAL_RCC_OscConfig+0x4a8>)
 8001584:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001588:	6413      	str	r3, [r2, #64]	; 0x40
 800158a:	4b7c      	ldr	r3, [pc, #496]	; (800177c <HAL_RCC_OscConfig+0x4a8>)
 800158c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800158e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001592:	60fb      	str	r3, [r7, #12]
 8001594:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001596:	2301      	movs	r3, #1
 8001598:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800159a:	4b79      	ldr	r3, [pc, #484]	; (8001780 <HAL_RCC_OscConfig+0x4ac>)
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d118      	bne.n	80015d8 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80015a6:	4b76      	ldr	r3, [pc, #472]	; (8001780 <HAL_RCC_OscConfig+0x4ac>)
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	4a75      	ldr	r2, [pc, #468]	; (8001780 <HAL_RCC_OscConfig+0x4ac>)
 80015ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80015b0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80015b2:	f7ff f869 	bl	8000688 <HAL_GetTick>
 80015b6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015b8:	e008      	b.n	80015cc <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80015ba:	f7ff f865 	bl	8000688 <HAL_GetTick>
 80015be:	4602      	mov	r2, r0
 80015c0:	693b      	ldr	r3, [r7, #16]
 80015c2:	1ad3      	subs	r3, r2, r3
 80015c4:	2b02      	cmp	r3, #2
 80015c6:	d901      	bls.n	80015cc <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80015c8:	2303      	movs	r3, #3
 80015ca:	e0d3      	b.n	8001774 <HAL_RCC_OscConfig+0x4a0>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015cc:	4b6c      	ldr	r3, [pc, #432]	; (8001780 <HAL_RCC_OscConfig+0x4ac>)
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d0f0      	beq.n	80015ba <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	689b      	ldr	r3, [r3, #8]
 80015dc:	2b01      	cmp	r3, #1
 80015de:	d106      	bne.n	80015ee <HAL_RCC_OscConfig+0x31a>
 80015e0:	4b66      	ldr	r3, [pc, #408]	; (800177c <HAL_RCC_OscConfig+0x4a8>)
 80015e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015e4:	4a65      	ldr	r2, [pc, #404]	; (800177c <HAL_RCC_OscConfig+0x4a8>)
 80015e6:	f043 0301 	orr.w	r3, r3, #1
 80015ea:	6713      	str	r3, [r2, #112]	; 0x70
 80015ec:	e01c      	b.n	8001628 <HAL_RCC_OscConfig+0x354>
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	689b      	ldr	r3, [r3, #8]
 80015f2:	2b05      	cmp	r3, #5
 80015f4:	d10c      	bne.n	8001610 <HAL_RCC_OscConfig+0x33c>
 80015f6:	4b61      	ldr	r3, [pc, #388]	; (800177c <HAL_RCC_OscConfig+0x4a8>)
 80015f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015fa:	4a60      	ldr	r2, [pc, #384]	; (800177c <HAL_RCC_OscConfig+0x4a8>)
 80015fc:	f043 0304 	orr.w	r3, r3, #4
 8001600:	6713      	str	r3, [r2, #112]	; 0x70
 8001602:	4b5e      	ldr	r3, [pc, #376]	; (800177c <HAL_RCC_OscConfig+0x4a8>)
 8001604:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001606:	4a5d      	ldr	r2, [pc, #372]	; (800177c <HAL_RCC_OscConfig+0x4a8>)
 8001608:	f043 0301 	orr.w	r3, r3, #1
 800160c:	6713      	str	r3, [r2, #112]	; 0x70
 800160e:	e00b      	b.n	8001628 <HAL_RCC_OscConfig+0x354>
 8001610:	4b5a      	ldr	r3, [pc, #360]	; (800177c <HAL_RCC_OscConfig+0x4a8>)
 8001612:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001614:	4a59      	ldr	r2, [pc, #356]	; (800177c <HAL_RCC_OscConfig+0x4a8>)
 8001616:	f023 0301 	bic.w	r3, r3, #1
 800161a:	6713      	str	r3, [r2, #112]	; 0x70
 800161c:	4b57      	ldr	r3, [pc, #348]	; (800177c <HAL_RCC_OscConfig+0x4a8>)
 800161e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001620:	4a56      	ldr	r2, [pc, #344]	; (800177c <HAL_RCC_OscConfig+0x4a8>)
 8001622:	f023 0304 	bic.w	r3, r3, #4
 8001626:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	689b      	ldr	r3, [r3, #8]
 800162c:	2b00      	cmp	r3, #0
 800162e:	d015      	beq.n	800165c <HAL_RCC_OscConfig+0x388>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001630:	f7ff f82a 	bl	8000688 <HAL_GetTick>
 8001634:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001636:	e00a      	b.n	800164e <HAL_RCC_OscConfig+0x37a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001638:	f7ff f826 	bl	8000688 <HAL_GetTick>
 800163c:	4602      	mov	r2, r0
 800163e:	693b      	ldr	r3, [r7, #16]
 8001640:	1ad3      	subs	r3, r2, r3
 8001642:	f241 3288 	movw	r2, #5000	; 0x1388
 8001646:	4293      	cmp	r3, r2
 8001648:	d901      	bls.n	800164e <HAL_RCC_OscConfig+0x37a>
        {
          return HAL_TIMEOUT;
 800164a:	2303      	movs	r3, #3
 800164c:	e092      	b.n	8001774 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800164e:	4b4b      	ldr	r3, [pc, #300]	; (800177c <HAL_RCC_OscConfig+0x4a8>)
 8001650:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001652:	f003 0302 	and.w	r3, r3, #2
 8001656:	2b00      	cmp	r3, #0
 8001658:	d0ee      	beq.n	8001638 <HAL_RCC_OscConfig+0x364>
 800165a:	e014      	b.n	8001686 <HAL_RCC_OscConfig+0x3b2>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800165c:	f7ff f814 	bl	8000688 <HAL_GetTick>
 8001660:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001662:	e00a      	b.n	800167a <HAL_RCC_OscConfig+0x3a6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001664:	f7ff f810 	bl	8000688 <HAL_GetTick>
 8001668:	4602      	mov	r2, r0
 800166a:	693b      	ldr	r3, [r7, #16]
 800166c:	1ad3      	subs	r3, r2, r3
 800166e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001672:	4293      	cmp	r3, r2
 8001674:	d901      	bls.n	800167a <HAL_RCC_OscConfig+0x3a6>
        {
          return HAL_TIMEOUT;
 8001676:	2303      	movs	r3, #3
 8001678:	e07c      	b.n	8001774 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800167a:	4b40      	ldr	r3, [pc, #256]	; (800177c <HAL_RCC_OscConfig+0x4a8>)
 800167c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800167e:	f003 0302 	and.w	r3, r3, #2
 8001682:	2b00      	cmp	r3, #0
 8001684:	d1ee      	bne.n	8001664 <HAL_RCC_OscConfig+0x390>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001686:	7dfb      	ldrb	r3, [r7, #23]
 8001688:	2b01      	cmp	r3, #1
 800168a:	d105      	bne.n	8001698 <HAL_RCC_OscConfig+0x3c4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800168c:	4b3b      	ldr	r3, [pc, #236]	; (800177c <HAL_RCC_OscConfig+0x4a8>)
 800168e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001690:	4a3a      	ldr	r2, [pc, #232]	; (800177c <HAL_RCC_OscConfig+0x4a8>)
 8001692:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001696:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	699b      	ldr	r3, [r3, #24]
 800169c:	2b00      	cmp	r3, #0
 800169e:	d068      	beq.n	8001772 <HAL_RCC_OscConfig+0x49e>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80016a0:	4b36      	ldr	r3, [pc, #216]	; (800177c <HAL_RCC_OscConfig+0x4a8>)
 80016a2:	689b      	ldr	r3, [r3, #8]
 80016a4:	f003 030c 	and.w	r3, r3, #12
 80016a8:	2b08      	cmp	r3, #8
 80016aa:	d060      	beq.n	800176e <HAL_RCC_OscConfig+0x49a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	699b      	ldr	r3, [r3, #24]
 80016b0:	2b02      	cmp	r3, #2
 80016b2:	d145      	bne.n	8001740 <HAL_RCC_OscConfig+0x46c>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80016b4:	4b33      	ldr	r3, [pc, #204]	; (8001784 <HAL_RCC_OscConfig+0x4b0>)
 80016b6:	2200      	movs	r2, #0
 80016b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016ba:	f7fe ffe5 	bl	8000688 <HAL_GetTick>
 80016be:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80016c0:	e008      	b.n	80016d4 <HAL_RCC_OscConfig+0x400>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80016c2:	f7fe ffe1 	bl	8000688 <HAL_GetTick>
 80016c6:	4602      	mov	r2, r0
 80016c8:	693b      	ldr	r3, [r7, #16]
 80016ca:	1ad3      	subs	r3, r2, r3
 80016cc:	2b02      	cmp	r3, #2
 80016ce:	d901      	bls.n	80016d4 <HAL_RCC_OscConfig+0x400>
          {
            return HAL_TIMEOUT;
 80016d0:	2303      	movs	r3, #3
 80016d2:	e04f      	b.n	8001774 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80016d4:	4b29      	ldr	r3, [pc, #164]	; (800177c <HAL_RCC_OscConfig+0x4a8>)
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d1f0      	bne.n	80016c2 <HAL_RCC_OscConfig+0x3ee>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	69da      	ldr	r2, [r3, #28]
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	6a1b      	ldr	r3, [r3, #32]
 80016e8:	431a      	orrs	r2, r3
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016ee:	019b      	lsls	r3, r3, #6
 80016f0:	431a      	orrs	r2, r3
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016f6:	085b      	lsrs	r3, r3, #1
 80016f8:	3b01      	subs	r3, #1
 80016fa:	041b      	lsls	r3, r3, #16
 80016fc:	431a      	orrs	r2, r3
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001702:	061b      	lsls	r3, r3, #24
 8001704:	431a      	orrs	r2, r3
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800170a:	071b      	lsls	r3, r3, #28
 800170c:	491b      	ldr	r1, [pc, #108]	; (800177c <HAL_RCC_OscConfig+0x4a8>)
 800170e:	4313      	orrs	r3, r2
 8001710:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001712:	4b1c      	ldr	r3, [pc, #112]	; (8001784 <HAL_RCC_OscConfig+0x4b0>)
 8001714:	2201      	movs	r2, #1
 8001716:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001718:	f7fe ffb6 	bl	8000688 <HAL_GetTick>
 800171c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800171e:	e008      	b.n	8001732 <HAL_RCC_OscConfig+0x45e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001720:	f7fe ffb2 	bl	8000688 <HAL_GetTick>
 8001724:	4602      	mov	r2, r0
 8001726:	693b      	ldr	r3, [r7, #16]
 8001728:	1ad3      	subs	r3, r2, r3
 800172a:	2b02      	cmp	r3, #2
 800172c:	d901      	bls.n	8001732 <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 800172e:	2303      	movs	r3, #3
 8001730:	e020      	b.n	8001774 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001732:	4b12      	ldr	r3, [pc, #72]	; (800177c <HAL_RCC_OscConfig+0x4a8>)
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800173a:	2b00      	cmp	r3, #0
 800173c:	d0f0      	beq.n	8001720 <HAL_RCC_OscConfig+0x44c>
 800173e:	e018      	b.n	8001772 <HAL_RCC_OscConfig+0x49e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001740:	4b10      	ldr	r3, [pc, #64]	; (8001784 <HAL_RCC_OscConfig+0x4b0>)
 8001742:	2200      	movs	r2, #0
 8001744:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001746:	f7fe ff9f 	bl	8000688 <HAL_GetTick>
 800174a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800174c:	e008      	b.n	8001760 <HAL_RCC_OscConfig+0x48c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800174e:	f7fe ff9b 	bl	8000688 <HAL_GetTick>
 8001752:	4602      	mov	r2, r0
 8001754:	693b      	ldr	r3, [r7, #16]
 8001756:	1ad3      	subs	r3, r2, r3
 8001758:	2b02      	cmp	r3, #2
 800175a:	d901      	bls.n	8001760 <HAL_RCC_OscConfig+0x48c>
          {
            return HAL_TIMEOUT;
 800175c:	2303      	movs	r3, #3
 800175e:	e009      	b.n	8001774 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001760:	4b06      	ldr	r3, [pc, #24]	; (800177c <HAL_RCC_OscConfig+0x4a8>)
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001768:	2b00      	cmp	r3, #0
 800176a:	d1f0      	bne.n	800174e <HAL_RCC_OscConfig+0x47a>
 800176c:	e001      	b.n	8001772 <HAL_RCC_OscConfig+0x49e>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 800176e:	2301      	movs	r3, #1
 8001770:	e000      	b.n	8001774 <HAL_RCC_OscConfig+0x4a0>
    }
  }
  return HAL_OK;
 8001772:	2300      	movs	r3, #0
}
 8001774:	4618      	mov	r0, r3
 8001776:	3718      	adds	r7, #24
 8001778:	46bd      	mov	sp, r7
 800177a:	bd80      	pop	{r7, pc}
 800177c:	40023800 	.word	0x40023800
 8001780:	40007000 	.word	0x40007000
 8001784:	42470060 	.word	0x42470060

08001788 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001788:	b580      	push	{r7, lr}
 800178a:	b082      	sub	sp, #8
 800178c:	af00      	add	r7, sp, #0
 800178e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	2b00      	cmp	r3, #0
 8001794:	d101      	bne.n	800179a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001796:	2301      	movs	r3, #1
 8001798:	e03f      	b.n	800181a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80017a0:	b2db      	uxtb	r3, r3
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d106      	bne.n	80017b4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	2200      	movs	r2, #0
 80017aa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80017ae:	6878      	ldr	r0, [r7, #4]
 80017b0:	f000 fefc 	bl	80025ac <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	2224      	movs	r2, #36	; 0x24
 80017b8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	68da      	ldr	r2, [r3, #12]
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80017ca:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80017cc:	6878      	ldr	r0, [r7, #4]
 80017ce:	f000 f90b 	bl	80019e8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	691a      	ldr	r2, [r3, #16]
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80017e0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	695a      	ldr	r2, [r3, #20]
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80017f0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	68da      	ldr	r2, [r3, #12]
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001800:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	2200      	movs	r2, #0
 8001806:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	2220      	movs	r2, #32
 800180c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	2220      	movs	r2, #32
 8001814:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8001818:	2300      	movs	r3, #0
}
 800181a:	4618      	mov	r0, r3
 800181c:	3708      	adds	r7, #8
 800181e:	46bd      	mov	sp, r7
 8001820:	bd80      	pop	{r7, pc}

08001822 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001822:	b580      	push	{r7, lr}
 8001824:	b088      	sub	sp, #32
 8001826:	af02      	add	r7, sp, #8
 8001828:	60f8      	str	r0, [r7, #12]
 800182a:	60b9      	str	r1, [r7, #8]
 800182c:	603b      	str	r3, [r7, #0]
 800182e:	4613      	mov	r3, r2
 8001830:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8001832:	2300      	movs	r3, #0
 8001834:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001836:	68fb      	ldr	r3, [r7, #12]
 8001838:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800183c:	b2db      	uxtb	r3, r3
 800183e:	2b20      	cmp	r3, #32
 8001840:	f040 8083 	bne.w	800194a <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8001844:	68bb      	ldr	r3, [r7, #8]
 8001846:	2b00      	cmp	r3, #0
 8001848:	d002      	beq.n	8001850 <HAL_UART_Transmit+0x2e>
 800184a:	88fb      	ldrh	r3, [r7, #6]
 800184c:	2b00      	cmp	r3, #0
 800184e:	d101      	bne.n	8001854 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8001850:	2301      	movs	r3, #1
 8001852:	e07b      	b.n	800194c <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001854:	68fb      	ldr	r3, [r7, #12]
 8001856:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800185a:	2b01      	cmp	r3, #1
 800185c:	d101      	bne.n	8001862 <HAL_UART_Transmit+0x40>
 800185e:	2302      	movs	r3, #2
 8001860:	e074      	b.n	800194c <HAL_UART_Transmit+0x12a>
 8001862:	68fb      	ldr	r3, [r7, #12]
 8001864:	2201      	movs	r2, #1
 8001866:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800186a:	68fb      	ldr	r3, [r7, #12]
 800186c:	2200      	movs	r2, #0
 800186e:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001870:	68fb      	ldr	r3, [r7, #12]
 8001872:	2221      	movs	r2, #33	; 0x21
 8001874:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8001878:	f7fe ff06 	bl	8000688 <HAL_GetTick>
 800187c:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800187e:	68fb      	ldr	r3, [r7, #12]
 8001880:	88fa      	ldrh	r2, [r7, #6]
 8001882:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8001884:	68fb      	ldr	r3, [r7, #12]
 8001886:	88fa      	ldrh	r2, [r7, #6]
 8001888:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800188a:	68fb      	ldr	r3, [r7, #12]
 800188c:	2200      	movs	r2, #0
 800188e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8001892:	e042      	b.n	800191a <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 8001894:	68fb      	ldr	r3, [r7, #12]
 8001896:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001898:	b29b      	uxth	r3, r3
 800189a:	3b01      	subs	r3, #1
 800189c:	b29a      	uxth	r2, r3
 800189e:	68fb      	ldr	r3, [r7, #12]
 80018a0:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80018a2:	68fb      	ldr	r3, [r7, #12]
 80018a4:	689b      	ldr	r3, [r3, #8]
 80018a6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80018aa:	d122      	bne.n	80018f2 <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80018ac:	683b      	ldr	r3, [r7, #0]
 80018ae:	9300      	str	r3, [sp, #0]
 80018b0:	697b      	ldr	r3, [r7, #20]
 80018b2:	2200      	movs	r2, #0
 80018b4:	2180      	movs	r1, #128	; 0x80
 80018b6:	68f8      	ldr	r0, [r7, #12]
 80018b8:	f000 f84c 	bl	8001954 <UART_WaitOnFlagUntilTimeout>
 80018bc:	4603      	mov	r3, r0
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d001      	beq.n	80018c6 <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 80018c2:	2303      	movs	r3, #3
 80018c4:	e042      	b.n	800194c <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 80018c6:	68bb      	ldr	r3, [r7, #8]
 80018c8:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 80018ca:	693b      	ldr	r3, [r7, #16]
 80018cc:	881b      	ldrh	r3, [r3, #0]
 80018ce:	461a      	mov	r2, r3
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80018d8:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 80018da:	68fb      	ldr	r3, [r7, #12]
 80018dc:	691b      	ldr	r3, [r3, #16]
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d103      	bne.n	80018ea <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 80018e2:	68bb      	ldr	r3, [r7, #8]
 80018e4:	3302      	adds	r3, #2
 80018e6:	60bb      	str	r3, [r7, #8]
 80018e8:	e017      	b.n	800191a <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 80018ea:	68bb      	ldr	r3, [r7, #8]
 80018ec:	3301      	adds	r3, #1
 80018ee:	60bb      	str	r3, [r7, #8]
 80018f0:	e013      	b.n	800191a <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80018f2:	683b      	ldr	r3, [r7, #0]
 80018f4:	9300      	str	r3, [sp, #0]
 80018f6:	697b      	ldr	r3, [r7, #20]
 80018f8:	2200      	movs	r2, #0
 80018fa:	2180      	movs	r1, #128	; 0x80
 80018fc:	68f8      	ldr	r0, [r7, #12]
 80018fe:	f000 f829 	bl	8001954 <UART_WaitOnFlagUntilTimeout>
 8001902:	4603      	mov	r3, r0
 8001904:	2b00      	cmp	r3, #0
 8001906:	d001      	beq.n	800190c <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 8001908:	2303      	movs	r3, #3
 800190a:	e01f      	b.n	800194c <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 800190c:	68bb      	ldr	r3, [r7, #8]
 800190e:	1c5a      	adds	r2, r3, #1
 8001910:	60ba      	str	r2, [r7, #8]
 8001912:	781a      	ldrb	r2, [r3, #0]
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 800191a:	68fb      	ldr	r3, [r7, #12]
 800191c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800191e:	b29b      	uxth	r3, r3
 8001920:	2b00      	cmp	r3, #0
 8001922:	d1b7      	bne.n	8001894 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001924:	683b      	ldr	r3, [r7, #0]
 8001926:	9300      	str	r3, [sp, #0]
 8001928:	697b      	ldr	r3, [r7, #20]
 800192a:	2200      	movs	r2, #0
 800192c:	2140      	movs	r1, #64	; 0x40
 800192e:	68f8      	ldr	r0, [r7, #12]
 8001930:	f000 f810 	bl	8001954 <UART_WaitOnFlagUntilTimeout>
 8001934:	4603      	mov	r3, r0
 8001936:	2b00      	cmp	r3, #0
 8001938:	d001      	beq.n	800193e <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 800193a:	2303      	movs	r3, #3
 800193c:	e006      	b.n	800194c <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800193e:	68fb      	ldr	r3, [r7, #12]
 8001940:	2220      	movs	r2, #32
 8001942:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8001946:	2300      	movs	r3, #0
 8001948:	e000      	b.n	800194c <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 800194a:	2302      	movs	r3, #2
  }
}
 800194c:	4618      	mov	r0, r3
 800194e:	3718      	adds	r7, #24
 8001950:	46bd      	mov	sp, r7
 8001952:	bd80      	pop	{r7, pc}

08001954 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8001954:	b580      	push	{r7, lr}
 8001956:	b084      	sub	sp, #16
 8001958:	af00      	add	r7, sp, #0
 800195a:	60f8      	str	r0, [r7, #12]
 800195c:	60b9      	str	r1, [r7, #8]
 800195e:	603b      	str	r3, [r7, #0]
 8001960:	4613      	mov	r3, r2
 8001962:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001964:	e02c      	b.n	80019c0 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001966:	69bb      	ldr	r3, [r7, #24]
 8001968:	f1b3 3fff 	cmp.w	r3, #4294967295
 800196c:	d028      	beq.n	80019c0 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800196e:	69bb      	ldr	r3, [r7, #24]
 8001970:	2b00      	cmp	r3, #0
 8001972:	d007      	beq.n	8001984 <UART_WaitOnFlagUntilTimeout+0x30>
 8001974:	f7fe fe88 	bl	8000688 <HAL_GetTick>
 8001978:	4602      	mov	r2, r0
 800197a:	683b      	ldr	r3, [r7, #0]
 800197c:	1ad3      	subs	r3, r2, r3
 800197e:	69ba      	ldr	r2, [r7, #24]
 8001980:	429a      	cmp	r2, r3
 8001982:	d21d      	bcs.n	80019c0 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	68da      	ldr	r2, [r3, #12]
 800198a:	68fb      	ldr	r3, [r7, #12]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8001992:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001994:	68fb      	ldr	r3, [r7, #12]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	695a      	ldr	r2, [r3, #20]
 800199a:	68fb      	ldr	r3, [r7, #12]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	f022 0201 	bic.w	r2, r2, #1
 80019a2:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	2220      	movs	r2, #32
 80019a8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	2220      	movs	r2, #32
 80019b0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	2200      	movs	r2, #0
 80019b8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 80019bc:	2303      	movs	r3, #3
 80019be:	e00f      	b.n	80019e0 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	681a      	ldr	r2, [r3, #0]
 80019c6:	68bb      	ldr	r3, [r7, #8]
 80019c8:	4013      	ands	r3, r2
 80019ca:	68ba      	ldr	r2, [r7, #8]
 80019cc:	429a      	cmp	r2, r3
 80019ce:	bf0c      	ite	eq
 80019d0:	2301      	moveq	r3, #1
 80019d2:	2300      	movne	r3, #0
 80019d4:	b2db      	uxtb	r3, r3
 80019d6:	461a      	mov	r2, r3
 80019d8:	79fb      	ldrb	r3, [r7, #7]
 80019da:	429a      	cmp	r2, r3
 80019dc:	d0c3      	beq.n	8001966 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80019de:	2300      	movs	r3, #0
}
 80019e0:	4618      	mov	r0, r3
 80019e2:	3710      	adds	r7, #16
 80019e4:	46bd      	mov	sp, r7
 80019e6:	bd80      	pop	{r7, pc}

080019e8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80019e8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80019ec:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	f8c7 01fc 	str.w	r0, [r7, #508]	; 0x1fc
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80019f6:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	691b      	ldr	r3, [r3, #16]
 80019fe:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8001a02:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8001a06:	68d9      	ldr	r1, [r3, #12]
 8001a08:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8001a0c:	681a      	ldr	r2, [r3, #0]
 8001a0e:	ea40 0301 	orr.w	r3, r0, r1
 8001a12:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001a14:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8001a18:	689a      	ldr	r2, [r3, #8]
 8001a1a:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8001a1e:	691b      	ldr	r3, [r3, #16]
 8001a20:	431a      	orrs	r2, r3
 8001a22:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8001a26:	695b      	ldr	r3, [r3, #20]
 8001a28:	431a      	orrs	r2, r3
 8001a2a:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8001a2e:	69db      	ldr	r3, [r3, #28]
 8001a30:	4313      	orrs	r3, r2
 8001a32:	f8c7 3204 	str.w	r3, [r7, #516]	; 0x204
  MODIFY_REG(huart->Instance->CR1,
 8001a36:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	68db      	ldr	r3, [r3, #12]
 8001a3e:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8001a42:	f021 010c 	bic.w	r1, r1, #12
 8001a46:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8001a4a:	681a      	ldr	r2, [r3, #0]
 8001a4c:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
 8001a50:	430b      	orrs	r3, r1
 8001a52:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001a54:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	695b      	ldr	r3, [r3, #20]
 8001a5c:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8001a60:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8001a64:	6999      	ldr	r1, [r3, #24]
 8001a66:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8001a6a:	681a      	ldr	r2, [r3, #0]
 8001a6c:	ea40 0301 	orr.w	r3, r0, r1
 8001a70:	6153      	str	r3, [r2, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001a72:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8001a76:	69db      	ldr	r3, [r3, #28]
 8001a78:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001a7c:	f040 824a 	bne.w	8001f14 <UART_SetConfig+0x52c>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8001a80:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8001a84:	681a      	ldr	r2, [r3, #0]
 8001a86:	4b96      	ldr	r3, [pc, #600]	; (8001ce0 <UART_SetConfig+0x2f8>)
 8001a88:	429a      	cmp	r2, r3
 8001a8a:	d006      	beq.n	8001a9a <UART_SetConfig+0xb2>
 8001a8c:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8001a90:	681a      	ldr	r2, [r3, #0]
 8001a92:	4b94      	ldr	r3, [pc, #592]	; (8001ce4 <UART_SetConfig+0x2fc>)
 8001a94:	429a      	cmp	r2, r3
 8001a96:	f040 8129 	bne.w	8001cec <UART_SetConfig+0x304>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8001a9a:	f7ff f9d7 	bl	8000e4c <HAL_RCC_GetPCLK2Freq>
 8001a9e:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8001aa2:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001aa6:	2200      	movs	r2, #0
 8001aa8:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
 8001aac:	f8c7 21f4 	str.w	r2, [r7, #500]	; 0x1f4
 8001ab0:	e9d7 457c 	ldrd	r4, r5, [r7, #496]	; 0x1f0
 8001ab4:	4622      	mov	r2, r4
 8001ab6:	462b      	mov	r3, r5
 8001ab8:	1891      	adds	r1, r2, r2
 8001aba:	f8c7 10d0 	str.w	r1, [r7, #208]	; 0xd0
 8001abe:	415b      	adcs	r3, r3
 8001ac0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8001ac4:	e9d7 2334 	ldrd	r2, r3, [r7, #208]	; 0xd0
 8001ac8:	4621      	mov	r1, r4
 8001aca:	1851      	adds	r1, r2, r1
 8001acc:	f8c7 10c8 	str.w	r1, [r7, #200]	; 0xc8
 8001ad0:	4629      	mov	r1, r5
 8001ad2:	414b      	adcs	r3, r1
 8001ad4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8001ad8:	f04f 0200 	mov.w	r2, #0
 8001adc:	f04f 0300 	mov.w	r3, #0
 8001ae0:	e9d7 8932 	ldrd	r8, r9, [r7, #200]	; 0xc8
 8001ae4:	4649      	mov	r1, r9
 8001ae6:	00cb      	lsls	r3, r1, #3
 8001ae8:	4641      	mov	r1, r8
 8001aea:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001aee:	4641      	mov	r1, r8
 8001af0:	00ca      	lsls	r2, r1, #3
 8001af2:	4610      	mov	r0, r2
 8001af4:	4619      	mov	r1, r3
 8001af6:	4603      	mov	r3, r0
 8001af8:	4622      	mov	r2, r4
 8001afa:	189b      	adds	r3, r3, r2
 8001afc:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 8001b00:	462b      	mov	r3, r5
 8001b02:	460a      	mov	r2, r1
 8001b04:	eb42 0303 	adc.w	r3, r2, r3
 8001b08:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
 8001b0c:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8001b10:	685b      	ldr	r3, [r3, #4]
 8001b12:	2200      	movs	r2, #0
 8001b14:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8001b18:	f8c7 21e4 	str.w	r2, [r7, #484]	; 0x1e4
 8001b1c:	e9d7 1278 	ldrd	r1, r2, [r7, #480]	; 0x1e0
 8001b20:	460b      	mov	r3, r1
 8001b22:	18db      	adds	r3, r3, r3
 8001b24:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8001b28:	4613      	mov	r3, r2
 8001b2a:	eb42 0303 	adc.w	r3, r2, r3
 8001b2e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8001b32:	e9d7 2330 	ldrd	r2, r3, [r7, #192]	; 0xc0
 8001b36:	e9d7 017a 	ldrd	r0, r1, [r7, #488]	; 0x1e8
 8001b3a:	f7fe fbc1 	bl	80002c0 <__aeabi_uldivmod>
 8001b3e:	4602      	mov	r2, r0
 8001b40:	460b      	mov	r3, r1
 8001b42:	4b69      	ldr	r3, [pc, #420]	; (8001ce8 <UART_SetConfig+0x300>)
 8001b44:	fba3 2302 	umull	r2, r3, r3, r2
 8001b48:	095b      	lsrs	r3, r3, #5
 8001b4a:	011c      	lsls	r4, r3, #4
 8001b4c:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001b50:	2200      	movs	r2, #0
 8001b52:	f8c7 31d8 	str.w	r3, [r7, #472]	; 0x1d8
 8001b56:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 8001b5a:	e9d7 8976 	ldrd	r8, r9, [r7, #472]	; 0x1d8
 8001b5e:	4642      	mov	r2, r8
 8001b60:	464b      	mov	r3, r9
 8001b62:	1891      	adds	r1, r2, r2
 8001b64:	f8c7 10b8 	str.w	r1, [r7, #184]	; 0xb8
 8001b68:	415b      	adcs	r3, r3
 8001b6a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8001b6e:	e9d7 232e 	ldrd	r2, r3, [r7, #184]	; 0xb8
 8001b72:	4641      	mov	r1, r8
 8001b74:	1851      	adds	r1, r2, r1
 8001b76:	f8c7 10b0 	str.w	r1, [r7, #176]	; 0xb0
 8001b7a:	4649      	mov	r1, r9
 8001b7c:	414b      	adcs	r3, r1
 8001b7e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8001b82:	f04f 0200 	mov.w	r2, #0
 8001b86:	f04f 0300 	mov.w	r3, #0
 8001b8a:	e9d7 ab2c 	ldrd	sl, fp, [r7, #176]	; 0xb0
 8001b8e:	4659      	mov	r1, fp
 8001b90:	00cb      	lsls	r3, r1, #3
 8001b92:	4651      	mov	r1, sl
 8001b94:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001b98:	4651      	mov	r1, sl
 8001b9a:	00ca      	lsls	r2, r1, #3
 8001b9c:	4610      	mov	r0, r2
 8001b9e:	4619      	mov	r1, r3
 8001ba0:	4603      	mov	r3, r0
 8001ba2:	4642      	mov	r2, r8
 8001ba4:	189b      	adds	r3, r3, r2
 8001ba6:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
 8001baa:	464b      	mov	r3, r9
 8001bac:	460a      	mov	r2, r1
 8001bae:	eb42 0303 	adc.w	r3, r2, r3
 8001bb2:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
 8001bb6:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8001bba:	685b      	ldr	r3, [r3, #4]
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 8001bc2:	f8c7 21cc 	str.w	r2, [r7, #460]	; 0x1cc
 8001bc6:	e9d7 1272 	ldrd	r1, r2, [r7, #456]	; 0x1c8
 8001bca:	460b      	mov	r3, r1
 8001bcc:	18db      	adds	r3, r3, r3
 8001bce:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8001bd2:	4613      	mov	r3, r2
 8001bd4:	eb42 0303 	adc.w	r3, r2, r3
 8001bd8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8001bdc:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	; 0xa8
 8001be0:	e9d7 0174 	ldrd	r0, r1, [r7, #464]	; 0x1d0
 8001be4:	f7fe fb6c 	bl	80002c0 <__aeabi_uldivmod>
 8001be8:	4602      	mov	r2, r0
 8001bea:	460b      	mov	r3, r1
 8001bec:	4611      	mov	r1, r2
 8001bee:	4b3e      	ldr	r3, [pc, #248]	; (8001ce8 <UART_SetConfig+0x300>)
 8001bf0:	fba3 2301 	umull	r2, r3, r3, r1
 8001bf4:	095b      	lsrs	r3, r3, #5
 8001bf6:	2264      	movs	r2, #100	; 0x64
 8001bf8:	fb02 f303 	mul.w	r3, r2, r3
 8001bfc:	1acb      	subs	r3, r1, r3
 8001bfe:	00db      	lsls	r3, r3, #3
 8001c00:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8001c04:	4b38      	ldr	r3, [pc, #224]	; (8001ce8 <UART_SetConfig+0x300>)
 8001c06:	fba3 2302 	umull	r2, r3, r3, r2
 8001c0a:	095b      	lsrs	r3, r3, #5
 8001c0c:	005b      	lsls	r3, r3, #1
 8001c0e:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8001c12:	441c      	add	r4, r3
 8001c14:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001c18:	2200      	movs	r2, #0
 8001c1a:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8001c1e:	f8c7 21c4 	str.w	r2, [r7, #452]	; 0x1c4
 8001c22:	e9d7 8970 	ldrd	r8, r9, [r7, #448]	; 0x1c0
 8001c26:	4642      	mov	r2, r8
 8001c28:	464b      	mov	r3, r9
 8001c2a:	1891      	adds	r1, r2, r2
 8001c2c:	f8c7 10a0 	str.w	r1, [r7, #160]	; 0xa0
 8001c30:	415b      	adcs	r3, r3
 8001c32:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8001c36:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	; 0xa0
 8001c3a:	4641      	mov	r1, r8
 8001c3c:	1851      	adds	r1, r2, r1
 8001c3e:	f8c7 1098 	str.w	r1, [r7, #152]	; 0x98
 8001c42:	4649      	mov	r1, r9
 8001c44:	414b      	adcs	r3, r1
 8001c46:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8001c4a:	f04f 0200 	mov.w	r2, #0
 8001c4e:	f04f 0300 	mov.w	r3, #0
 8001c52:	e9d7 ab26 	ldrd	sl, fp, [r7, #152]	; 0x98
 8001c56:	4659      	mov	r1, fp
 8001c58:	00cb      	lsls	r3, r1, #3
 8001c5a:	4651      	mov	r1, sl
 8001c5c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001c60:	4651      	mov	r1, sl
 8001c62:	00ca      	lsls	r2, r1, #3
 8001c64:	4610      	mov	r0, r2
 8001c66:	4619      	mov	r1, r3
 8001c68:	4603      	mov	r3, r0
 8001c6a:	4642      	mov	r2, r8
 8001c6c:	189b      	adds	r3, r3, r2
 8001c6e:	f8c7 31b8 	str.w	r3, [r7, #440]	; 0x1b8
 8001c72:	464b      	mov	r3, r9
 8001c74:	460a      	mov	r2, r1
 8001c76:	eb42 0303 	adc.w	r3, r2, r3
 8001c7a:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8001c7e:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8001c82:	685b      	ldr	r3, [r3, #4]
 8001c84:	2200      	movs	r2, #0
 8001c86:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
 8001c8a:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
 8001c8e:	e9d7 126c 	ldrd	r1, r2, [r7, #432]	; 0x1b0
 8001c92:	460b      	mov	r3, r1
 8001c94:	18db      	adds	r3, r3, r3
 8001c96:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8001c9a:	4613      	mov	r3, r2
 8001c9c:	eb42 0303 	adc.w	r3, r2, r3
 8001ca0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8001ca4:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	; 0x90
 8001ca8:	e9d7 016e 	ldrd	r0, r1, [r7, #440]	; 0x1b8
 8001cac:	f7fe fb08 	bl	80002c0 <__aeabi_uldivmod>
 8001cb0:	4602      	mov	r2, r0
 8001cb2:	460b      	mov	r3, r1
 8001cb4:	4b0c      	ldr	r3, [pc, #48]	; (8001ce8 <UART_SetConfig+0x300>)
 8001cb6:	fba3 1302 	umull	r1, r3, r3, r2
 8001cba:	095b      	lsrs	r3, r3, #5
 8001cbc:	2164      	movs	r1, #100	; 0x64
 8001cbe:	fb01 f303 	mul.w	r3, r1, r3
 8001cc2:	1ad3      	subs	r3, r2, r3
 8001cc4:	00db      	lsls	r3, r3, #3
 8001cc6:	3332      	adds	r3, #50	; 0x32
 8001cc8:	4a07      	ldr	r2, [pc, #28]	; (8001ce8 <UART_SetConfig+0x300>)
 8001cca:	fba2 2303 	umull	r2, r3, r2, r3
 8001cce:	095b      	lsrs	r3, r3, #5
 8001cd0:	f003 0207 	and.w	r2, r3, #7
 8001cd4:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	4422      	add	r2, r4
 8001cdc:	609a      	str	r2, [r3, #8]
 8001cde:	e34a      	b.n	8002376 <UART_SetConfig+0x98e>
 8001ce0:	40011000 	.word	0x40011000
 8001ce4:	40011400 	.word	0x40011400
 8001ce8:	51eb851f 	.word	0x51eb851f
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8001cec:	f7ff f89a 	bl	8000e24 <HAL_RCC_GetPCLK1Freq>
 8001cf0:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8001cf4:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001cf8:	2200      	movs	r2, #0
 8001cfa:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 8001cfe:	f8c7 21ac 	str.w	r2, [r7, #428]	; 0x1ac
 8001d02:	e9d7 456a 	ldrd	r4, r5, [r7, #424]	; 0x1a8
 8001d06:	4622      	mov	r2, r4
 8001d08:	462b      	mov	r3, r5
 8001d0a:	1891      	adds	r1, r2, r2
 8001d0c:	f8c7 1088 	str.w	r1, [r7, #136]	; 0x88
 8001d10:	415b      	adcs	r3, r3
 8001d12:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8001d16:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8001d1a:	4621      	mov	r1, r4
 8001d1c:	eb12 0a01 	adds.w	sl, r2, r1
 8001d20:	4629      	mov	r1, r5
 8001d22:	eb43 0b01 	adc.w	fp, r3, r1
 8001d26:	f04f 0200 	mov.w	r2, #0
 8001d2a:	f04f 0300 	mov.w	r3, #0
 8001d2e:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8001d32:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8001d36:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8001d3a:	4692      	mov	sl, r2
 8001d3c:	469b      	mov	fp, r3
 8001d3e:	4623      	mov	r3, r4
 8001d40:	eb1a 0303 	adds.w	r3, sl, r3
 8001d44:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8001d48:	462b      	mov	r3, r5
 8001d4a:	eb4b 0303 	adc.w	r3, fp, r3
 8001d4e:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8001d52:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8001d56:	685b      	ldr	r3, [r3, #4]
 8001d58:	2200      	movs	r2, #0
 8001d5a:	f8c7 3198 	str.w	r3, [r7, #408]	; 0x198
 8001d5e:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 8001d62:	e9d7 1266 	ldrd	r1, r2, [r7, #408]	; 0x198
 8001d66:	460b      	mov	r3, r1
 8001d68:	18db      	adds	r3, r3, r3
 8001d6a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8001d6e:	4613      	mov	r3, r2
 8001d70:	eb42 0303 	adc.w	r3, r2, r3
 8001d74:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8001d78:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 8001d7c:	e9d7 0168 	ldrd	r0, r1, [r7, #416]	; 0x1a0
 8001d80:	f7fe fa9e 	bl	80002c0 <__aeabi_uldivmod>
 8001d84:	4602      	mov	r2, r0
 8001d86:	460b      	mov	r3, r1
 8001d88:	4b61      	ldr	r3, [pc, #388]	; (8001f10 <UART_SetConfig+0x528>)
 8001d8a:	fba3 2302 	umull	r2, r3, r3, r2
 8001d8e:	095b      	lsrs	r3, r3, #5
 8001d90:	011c      	lsls	r4, r3, #4
 8001d92:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001d96:	2200      	movs	r2, #0
 8001d98:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
 8001d9c:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
 8001da0:	e9d7 8964 	ldrd	r8, r9, [r7, #400]	; 0x190
 8001da4:	4642      	mov	r2, r8
 8001da6:	464b      	mov	r3, r9
 8001da8:	1891      	adds	r1, r2, r2
 8001daa:	67b9      	str	r1, [r7, #120]	; 0x78
 8001dac:	415b      	adcs	r3, r3
 8001dae:	67fb      	str	r3, [r7, #124]	; 0x7c
 8001db0:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 8001db4:	4641      	mov	r1, r8
 8001db6:	1851      	adds	r1, r2, r1
 8001db8:	6739      	str	r1, [r7, #112]	; 0x70
 8001dba:	4649      	mov	r1, r9
 8001dbc:	414b      	adcs	r3, r1
 8001dbe:	677b      	str	r3, [r7, #116]	; 0x74
 8001dc0:	f04f 0200 	mov.w	r2, #0
 8001dc4:	f04f 0300 	mov.w	r3, #0
 8001dc8:	e9d7 ab1c 	ldrd	sl, fp, [r7, #112]	; 0x70
 8001dcc:	4659      	mov	r1, fp
 8001dce:	00cb      	lsls	r3, r1, #3
 8001dd0:	4651      	mov	r1, sl
 8001dd2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001dd6:	4651      	mov	r1, sl
 8001dd8:	00ca      	lsls	r2, r1, #3
 8001dda:	4610      	mov	r0, r2
 8001ddc:	4619      	mov	r1, r3
 8001dde:	4603      	mov	r3, r0
 8001de0:	4642      	mov	r2, r8
 8001de2:	189b      	adds	r3, r3, r2
 8001de4:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 8001de8:	464b      	mov	r3, r9
 8001dea:	460a      	mov	r2, r1
 8001dec:	eb42 0303 	adc.w	r3, r2, r3
 8001df0:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
 8001df4:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8001df8:	685b      	ldr	r3, [r3, #4]
 8001dfa:	2200      	movs	r2, #0
 8001dfc:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8001e00:	f8c7 2184 	str.w	r2, [r7, #388]	; 0x184
 8001e04:	e9d7 1260 	ldrd	r1, r2, [r7, #384]	; 0x180
 8001e08:	460b      	mov	r3, r1
 8001e0a:	18db      	adds	r3, r3, r3
 8001e0c:	66bb      	str	r3, [r7, #104]	; 0x68
 8001e0e:	4613      	mov	r3, r2
 8001e10:	eb42 0303 	adc.w	r3, r2, r3
 8001e14:	66fb      	str	r3, [r7, #108]	; 0x6c
 8001e16:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8001e1a:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8001e1e:	f7fe fa4f 	bl	80002c0 <__aeabi_uldivmod>
 8001e22:	4602      	mov	r2, r0
 8001e24:	460b      	mov	r3, r1
 8001e26:	4611      	mov	r1, r2
 8001e28:	4b39      	ldr	r3, [pc, #228]	; (8001f10 <UART_SetConfig+0x528>)
 8001e2a:	fba3 2301 	umull	r2, r3, r3, r1
 8001e2e:	095b      	lsrs	r3, r3, #5
 8001e30:	2264      	movs	r2, #100	; 0x64
 8001e32:	fb02 f303 	mul.w	r3, r2, r3
 8001e36:	1acb      	subs	r3, r1, r3
 8001e38:	00db      	lsls	r3, r3, #3
 8001e3a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8001e3e:	4b34      	ldr	r3, [pc, #208]	; (8001f10 <UART_SetConfig+0x528>)
 8001e40:	fba3 2302 	umull	r2, r3, r3, r2
 8001e44:	095b      	lsrs	r3, r3, #5
 8001e46:	005b      	lsls	r3, r3, #1
 8001e48:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8001e4c:	441c      	add	r4, r3
 8001e4e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001e52:	2200      	movs	r2, #0
 8001e54:	f8c7 3178 	str.w	r3, [r7, #376]	; 0x178
 8001e58:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 8001e5c:	e9d7 895e 	ldrd	r8, r9, [r7, #376]	; 0x178
 8001e60:	4642      	mov	r2, r8
 8001e62:	464b      	mov	r3, r9
 8001e64:	1891      	adds	r1, r2, r2
 8001e66:	6639      	str	r1, [r7, #96]	; 0x60
 8001e68:	415b      	adcs	r3, r3
 8001e6a:	667b      	str	r3, [r7, #100]	; 0x64
 8001e6c:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8001e70:	4641      	mov	r1, r8
 8001e72:	1851      	adds	r1, r2, r1
 8001e74:	65b9      	str	r1, [r7, #88]	; 0x58
 8001e76:	4649      	mov	r1, r9
 8001e78:	414b      	adcs	r3, r1
 8001e7a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001e7c:	f04f 0200 	mov.w	r2, #0
 8001e80:	f04f 0300 	mov.w	r3, #0
 8001e84:	e9d7 ab16 	ldrd	sl, fp, [r7, #88]	; 0x58
 8001e88:	4659      	mov	r1, fp
 8001e8a:	00cb      	lsls	r3, r1, #3
 8001e8c:	4651      	mov	r1, sl
 8001e8e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001e92:	4651      	mov	r1, sl
 8001e94:	00ca      	lsls	r2, r1, #3
 8001e96:	4610      	mov	r0, r2
 8001e98:	4619      	mov	r1, r3
 8001e9a:	4603      	mov	r3, r0
 8001e9c:	4642      	mov	r2, r8
 8001e9e:	189b      	adds	r3, r3, r2
 8001ea0:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
 8001ea4:	464b      	mov	r3, r9
 8001ea6:	460a      	mov	r2, r1
 8001ea8:	eb42 0303 	adc.w	r3, r2, r3
 8001eac:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
 8001eb0:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8001eb4:	685b      	ldr	r3, [r3, #4]
 8001eb6:	2200      	movs	r2, #0
 8001eb8:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
 8001ebc:	f8c7 216c 	str.w	r2, [r7, #364]	; 0x16c
 8001ec0:	e9d7 125a 	ldrd	r1, r2, [r7, #360]	; 0x168
 8001ec4:	460b      	mov	r3, r1
 8001ec6:	18db      	adds	r3, r3, r3
 8001ec8:	653b      	str	r3, [r7, #80]	; 0x50
 8001eca:	4613      	mov	r3, r2
 8001ecc:	eb42 0303 	adc.w	r3, r2, r3
 8001ed0:	657b      	str	r3, [r7, #84]	; 0x54
 8001ed2:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8001ed6:	e9d7 015c 	ldrd	r0, r1, [r7, #368]	; 0x170
 8001eda:	f7fe f9f1 	bl	80002c0 <__aeabi_uldivmod>
 8001ede:	4602      	mov	r2, r0
 8001ee0:	460b      	mov	r3, r1
 8001ee2:	4b0b      	ldr	r3, [pc, #44]	; (8001f10 <UART_SetConfig+0x528>)
 8001ee4:	fba3 1302 	umull	r1, r3, r3, r2
 8001ee8:	095b      	lsrs	r3, r3, #5
 8001eea:	2164      	movs	r1, #100	; 0x64
 8001eec:	fb01 f303 	mul.w	r3, r1, r3
 8001ef0:	1ad3      	subs	r3, r2, r3
 8001ef2:	00db      	lsls	r3, r3, #3
 8001ef4:	3332      	adds	r3, #50	; 0x32
 8001ef6:	4a06      	ldr	r2, [pc, #24]	; (8001f10 <UART_SetConfig+0x528>)
 8001ef8:	fba2 2303 	umull	r2, r3, r2, r3
 8001efc:	095b      	lsrs	r3, r3, #5
 8001efe:	f003 0207 	and.w	r2, r3, #7
 8001f02:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	4422      	add	r2, r4
 8001f0a:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8001f0c:	e233      	b.n	8002376 <UART_SetConfig+0x98e>
 8001f0e:	bf00      	nop
 8001f10:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8001f14:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8001f18:	681a      	ldr	r2, [r3, #0]
 8001f1a:	4b8d      	ldr	r3, [pc, #564]	; (8002150 <UART_SetConfig+0x768>)
 8001f1c:	429a      	cmp	r2, r3
 8001f1e:	d006      	beq.n	8001f2e <UART_SetConfig+0x546>
 8001f20:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8001f24:	681a      	ldr	r2, [r3, #0]
 8001f26:	4b8b      	ldr	r3, [pc, #556]	; (8002154 <UART_SetConfig+0x76c>)
 8001f28:	429a      	cmp	r2, r3
 8001f2a:	f040 8117 	bne.w	800215c <UART_SetConfig+0x774>
      pclk = HAL_RCC_GetPCLK2Freq();
 8001f2e:	f7fe ff8d 	bl	8000e4c <HAL_RCC_GetPCLK2Freq>
 8001f32:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8001f36:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001f3a:	2200      	movs	r2, #0
 8001f3c:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
 8001f40:	f8c7 2164 	str.w	r2, [r7, #356]	; 0x164
 8001f44:	e9d7 4558 	ldrd	r4, r5, [r7, #352]	; 0x160
 8001f48:	4622      	mov	r2, r4
 8001f4a:	462b      	mov	r3, r5
 8001f4c:	1891      	adds	r1, r2, r2
 8001f4e:	64b9      	str	r1, [r7, #72]	; 0x48
 8001f50:	415b      	adcs	r3, r3
 8001f52:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001f54:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8001f58:	4621      	mov	r1, r4
 8001f5a:	eb12 0801 	adds.w	r8, r2, r1
 8001f5e:	4629      	mov	r1, r5
 8001f60:	eb43 0901 	adc.w	r9, r3, r1
 8001f64:	f04f 0200 	mov.w	r2, #0
 8001f68:	f04f 0300 	mov.w	r3, #0
 8001f6c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001f70:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001f74:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001f78:	4690      	mov	r8, r2
 8001f7a:	4699      	mov	r9, r3
 8001f7c:	4623      	mov	r3, r4
 8001f7e:	eb18 0303 	adds.w	r3, r8, r3
 8001f82:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 8001f86:	462b      	mov	r3, r5
 8001f88:	eb49 0303 	adc.w	r3, r9, r3
 8001f8c:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
 8001f90:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8001f94:	685b      	ldr	r3, [r3, #4]
 8001f96:	2200      	movs	r2, #0
 8001f98:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8001f9c:	f8c7 2154 	str.w	r2, [r7, #340]	; 0x154
 8001fa0:	f04f 0200 	mov.w	r2, #0
 8001fa4:	f04f 0300 	mov.w	r3, #0
 8001fa8:	e9d7 4554 	ldrd	r4, r5, [r7, #336]	; 0x150
 8001fac:	4629      	mov	r1, r5
 8001fae:	008b      	lsls	r3, r1, #2
 8001fb0:	4621      	mov	r1, r4
 8001fb2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8001fb6:	4621      	mov	r1, r4
 8001fb8:	008a      	lsls	r2, r1, #2
 8001fba:	e9d7 0156 	ldrd	r0, r1, [r7, #344]	; 0x158
 8001fbe:	f7fe f97f 	bl	80002c0 <__aeabi_uldivmod>
 8001fc2:	4602      	mov	r2, r0
 8001fc4:	460b      	mov	r3, r1
 8001fc6:	4b64      	ldr	r3, [pc, #400]	; (8002158 <UART_SetConfig+0x770>)
 8001fc8:	fba3 2302 	umull	r2, r3, r3, r2
 8001fcc:	095b      	lsrs	r3, r3, #5
 8001fce:	011c      	lsls	r4, r3, #4
 8001fd0:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001fd4:	2200      	movs	r2, #0
 8001fd6:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
 8001fda:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 8001fde:	e9d7 8952 	ldrd	r8, r9, [r7, #328]	; 0x148
 8001fe2:	4642      	mov	r2, r8
 8001fe4:	464b      	mov	r3, r9
 8001fe6:	1891      	adds	r1, r2, r2
 8001fe8:	6439      	str	r1, [r7, #64]	; 0x40
 8001fea:	415b      	adcs	r3, r3
 8001fec:	647b      	str	r3, [r7, #68]	; 0x44
 8001fee:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8001ff2:	4641      	mov	r1, r8
 8001ff4:	1851      	adds	r1, r2, r1
 8001ff6:	63b9      	str	r1, [r7, #56]	; 0x38
 8001ff8:	4649      	mov	r1, r9
 8001ffa:	414b      	adcs	r3, r1
 8001ffc:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001ffe:	f04f 0200 	mov.w	r2, #0
 8002002:	f04f 0300 	mov.w	r3, #0
 8002006:	e9d7 ab0e 	ldrd	sl, fp, [r7, #56]	; 0x38
 800200a:	4659      	mov	r1, fp
 800200c:	00cb      	lsls	r3, r1, #3
 800200e:	4651      	mov	r1, sl
 8002010:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002014:	4651      	mov	r1, sl
 8002016:	00ca      	lsls	r2, r1, #3
 8002018:	4610      	mov	r0, r2
 800201a:	4619      	mov	r1, r3
 800201c:	4603      	mov	r3, r0
 800201e:	4642      	mov	r2, r8
 8002020:	189b      	adds	r3, r3, r2
 8002022:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
 8002026:	464b      	mov	r3, r9
 8002028:	460a      	mov	r2, r1
 800202a:	eb42 0303 	adc.w	r3, r2, r3
 800202e:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
 8002032:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8002036:	685b      	ldr	r3, [r3, #4]
 8002038:	2200      	movs	r2, #0
 800203a:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
 800203e:	f8c7 213c 	str.w	r2, [r7, #316]	; 0x13c
 8002042:	f04f 0200 	mov.w	r2, #0
 8002046:	f04f 0300 	mov.w	r3, #0
 800204a:	e9d7 894e 	ldrd	r8, r9, [r7, #312]	; 0x138
 800204e:	4649      	mov	r1, r9
 8002050:	008b      	lsls	r3, r1, #2
 8002052:	4641      	mov	r1, r8
 8002054:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002058:	4641      	mov	r1, r8
 800205a:	008a      	lsls	r2, r1, #2
 800205c:	e9d7 0150 	ldrd	r0, r1, [r7, #320]	; 0x140
 8002060:	f7fe f92e 	bl	80002c0 <__aeabi_uldivmod>
 8002064:	4602      	mov	r2, r0
 8002066:	460b      	mov	r3, r1
 8002068:	4611      	mov	r1, r2
 800206a:	4b3b      	ldr	r3, [pc, #236]	; (8002158 <UART_SetConfig+0x770>)
 800206c:	fba3 2301 	umull	r2, r3, r3, r1
 8002070:	095b      	lsrs	r3, r3, #5
 8002072:	2264      	movs	r2, #100	; 0x64
 8002074:	fb02 f303 	mul.w	r3, r2, r3
 8002078:	1acb      	subs	r3, r1, r3
 800207a:	011b      	lsls	r3, r3, #4
 800207c:	3332      	adds	r3, #50	; 0x32
 800207e:	4a36      	ldr	r2, [pc, #216]	; (8002158 <UART_SetConfig+0x770>)
 8002080:	fba2 2303 	umull	r2, r3, r2, r3
 8002084:	095b      	lsrs	r3, r3, #5
 8002086:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800208a:	441c      	add	r4, r3
 800208c:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002090:	2200      	movs	r2, #0
 8002092:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 8002096:	f8c7 2134 	str.w	r2, [r7, #308]	; 0x134
 800209a:	e9d7 894c 	ldrd	r8, r9, [r7, #304]	; 0x130
 800209e:	4642      	mov	r2, r8
 80020a0:	464b      	mov	r3, r9
 80020a2:	1891      	adds	r1, r2, r2
 80020a4:	6339      	str	r1, [r7, #48]	; 0x30
 80020a6:	415b      	adcs	r3, r3
 80020a8:	637b      	str	r3, [r7, #52]	; 0x34
 80020aa:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80020ae:	4641      	mov	r1, r8
 80020b0:	1851      	adds	r1, r2, r1
 80020b2:	62b9      	str	r1, [r7, #40]	; 0x28
 80020b4:	4649      	mov	r1, r9
 80020b6:	414b      	adcs	r3, r1
 80020b8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80020ba:	f04f 0200 	mov.w	r2, #0
 80020be:	f04f 0300 	mov.w	r3, #0
 80020c2:	e9d7 ab0a 	ldrd	sl, fp, [r7, #40]	; 0x28
 80020c6:	4659      	mov	r1, fp
 80020c8:	00cb      	lsls	r3, r1, #3
 80020ca:	4651      	mov	r1, sl
 80020cc:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80020d0:	4651      	mov	r1, sl
 80020d2:	00ca      	lsls	r2, r1, #3
 80020d4:	4610      	mov	r0, r2
 80020d6:	4619      	mov	r1, r3
 80020d8:	4603      	mov	r3, r0
 80020da:	4642      	mov	r2, r8
 80020dc:	189b      	adds	r3, r3, r2
 80020de:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80020e2:	464b      	mov	r3, r9
 80020e4:	460a      	mov	r2, r1
 80020e6:	eb42 0303 	adc.w	r3, r2, r3
 80020ea:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 80020ee:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80020f2:	685b      	ldr	r3, [r3, #4]
 80020f4:	2200      	movs	r2, #0
 80020f6:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80020fa:	f8c7 2124 	str.w	r2, [r7, #292]	; 0x124
 80020fe:	f04f 0200 	mov.w	r2, #0
 8002102:	f04f 0300 	mov.w	r3, #0
 8002106:	e9d7 8948 	ldrd	r8, r9, [r7, #288]	; 0x120
 800210a:	4649      	mov	r1, r9
 800210c:	008b      	lsls	r3, r1, #2
 800210e:	4641      	mov	r1, r8
 8002110:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002114:	4641      	mov	r1, r8
 8002116:	008a      	lsls	r2, r1, #2
 8002118:	e9d7 014a 	ldrd	r0, r1, [r7, #296]	; 0x128
 800211c:	f7fe f8d0 	bl	80002c0 <__aeabi_uldivmod>
 8002120:	4602      	mov	r2, r0
 8002122:	460b      	mov	r3, r1
 8002124:	4b0c      	ldr	r3, [pc, #48]	; (8002158 <UART_SetConfig+0x770>)
 8002126:	fba3 1302 	umull	r1, r3, r3, r2
 800212a:	095b      	lsrs	r3, r3, #5
 800212c:	2164      	movs	r1, #100	; 0x64
 800212e:	fb01 f303 	mul.w	r3, r1, r3
 8002132:	1ad3      	subs	r3, r2, r3
 8002134:	011b      	lsls	r3, r3, #4
 8002136:	3332      	adds	r3, #50	; 0x32
 8002138:	4a07      	ldr	r2, [pc, #28]	; (8002158 <UART_SetConfig+0x770>)
 800213a:	fba2 2303 	umull	r2, r3, r2, r3
 800213e:	095b      	lsrs	r3, r3, #5
 8002140:	f003 020f 	and.w	r2, r3, #15
 8002144:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	4422      	add	r2, r4
 800214c:	609a      	str	r2, [r3, #8]
 800214e:	e112      	b.n	8002376 <UART_SetConfig+0x98e>
 8002150:	40011000 	.word	0x40011000
 8002154:	40011400 	.word	0x40011400
 8002158:	51eb851f 	.word	0x51eb851f
      pclk = HAL_RCC_GetPCLK1Freq();
 800215c:	f7fe fe62 	bl	8000e24 <HAL_RCC_GetPCLK1Freq>
 8002160:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002164:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002168:	2200      	movs	r2, #0
 800216a:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 800216e:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 8002172:	e9d7 8946 	ldrd	r8, r9, [r7, #280]	; 0x118
 8002176:	4642      	mov	r2, r8
 8002178:	464b      	mov	r3, r9
 800217a:	1891      	adds	r1, r2, r2
 800217c:	6239      	str	r1, [r7, #32]
 800217e:	415b      	adcs	r3, r3
 8002180:	627b      	str	r3, [r7, #36]	; 0x24
 8002182:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002186:	4641      	mov	r1, r8
 8002188:	1854      	adds	r4, r2, r1
 800218a:	4649      	mov	r1, r9
 800218c:	eb43 0501 	adc.w	r5, r3, r1
 8002190:	f04f 0200 	mov.w	r2, #0
 8002194:	f04f 0300 	mov.w	r3, #0
 8002198:	00eb      	lsls	r3, r5, #3
 800219a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800219e:	00e2      	lsls	r2, r4, #3
 80021a0:	4614      	mov	r4, r2
 80021a2:	461d      	mov	r5, r3
 80021a4:	4643      	mov	r3, r8
 80021a6:	18e3      	adds	r3, r4, r3
 80021a8:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 80021ac:	464b      	mov	r3, r9
 80021ae:	eb45 0303 	adc.w	r3, r5, r3
 80021b2:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80021b6:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80021ba:	685b      	ldr	r3, [r3, #4]
 80021bc:	2200      	movs	r2, #0
 80021be:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80021c2:	f8c7 210c 	str.w	r2, [r7, #268]	; 0x10c
 80021c6:	f04f 0200 	mov.w	r2, #0
 80021ca:	f04f 0300 	mov.w	r3, #0
 80021ce:	e9d7 4542 	ldrd	r4, r5, [r7, #264]	; 0x108
 80021d2:	4629      	mov	r1, r5
 80021d4:	008b      	lsls	r3, r1, #2
 80021d6:	4621      	mov	r1, r4
 80021d8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80021dc:	4621      	mov	r1, r4
 80021de:	008a      	lsls	r2, r1, #2
 80021e0:	e9d7 0144 	ldrd	r0, r1, [r7, #272]	; 0x110
 80021e4:	f7fe f86c 	bl	80002c0 <__aeabi_uldivmod>
 80021e8:	4602      	mov	r2, r0
 80021ea:	460b      	mov	r3, r1
 80021ec:	4b65      	ldr	r3, [pc, #404]	; (8002384 <UART_SetConfig+0x99c>)
 80021ee:	fba3 2302 	umull	r2, r3, r3, r2
 80021f2:	095b      	lsrs	r3, r3, #5
 80021f4:	011c      	lsls	r4, r3, #4
 80021f6:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80021fa:	2200      	movs	r2, #0
 80021fc:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8002200:	f8c7 2104 	str.w	r2, [r7, #260]	; 0x104
 8002204:	e9d7 8940 	ldrd	r8, r9, [r7, #256]	; 0x100
 8002208:	4642      	mov	r2, r8
 800220a:	464b      	mov	r3, r9
 800220c:	1891      	adds	r1, r2, r2
 800220e:	61b9      	str	r1, [r7, #24]
 8002210:	415b      	adcs	r3, r3
 8002212:	61fb      	str	r3, [r7, #28]
 8002214:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002218:	4641      	mov	r1, r8
 800221a:	1851      	adds	r1, r2, r1
 800221c:	6139      	str	r1, [r7, #16]
 800221e:	4649      	mov	r1, r9
 8002220:	414b      	adcs	r3, r1
 8002222:	617b      	str	r3, [r7, #20]
 8002224:	f04f 0200 	mov.w	r2, #0
 8002228:	f04f 0300 	mov.w	r3, #0
 800222c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002230:	4659      	mov	r1, fp
 8002232:	00cb      	lsls	r3, r1, #3
 8002234:	4651      	mov	r1, sl
 8002236:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800223a:	4651      	mov	r1, sl
 800223c:	00ca      	lsls	r2, r1, #3
 800223e:	4610      	mov	r0, r2
 8002240:	4619      	mov	r1, r3
 8002242:	4603      	mov	r3, r0
 8002244:	4642      	mov	r2, r8
 8002246:	189b      	adds	r3, r3, r2
 8002248:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800224c:	464b      	mov	r3, r9
 800224e:	460a      	mov	r2, r1
 8002250:	eb42 0303 	adc.w	r3, r2, r3
 8002254:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8002258:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800225c:	685b      	ldr	r3, [r3, #4]
 800225e:	2200      	movs	r2, #0
 8002260:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8002264:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
 8002268:	f04f 0200 	mov.w	r2, #0
 800226c:	f04f 0300 	mov.w	r3, #0
 8002270:	e9d7 893c 	ldrd	r8, r9, [r7, #240]	; 0xf0
 8002274:	4649      	mov	r1, r9
 8002276:	008b      	lsls	r3, r1, #2
 8002278:	4641      	mov	r1, r8
 800227a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800227e:	4641      	mov	r1, r8
 8002280:	008a      	lsls	r2, r1, #2
 8002282:	e9d7 013e 	ldrd	r0, r1, [r7, #248]	; 0xf8
 8002286:	f7fe f81b 	bl	80002c0 <__aeabi_uldivmod>
 800228a:	4602      	mov	r2, r0
 800228c:	460b      	mov	r3, r1
 800228e:	4611      	mov	r1, r2
 8002290:	4b3c      	ldr	r3, [pc, #240]	; (8002384 <UART_SetConfig+0x99c>)
 8002292:	fba3 2301 	umull	r2, r3, r3, r1
 8002296:	095b      	lsrs	r3, r3, #5
 8002298:	2264      	movs	r2, #100	; 0x64
 800229a:	fb02 f303 	mul.w	r3, r2, r3
 800229e:	1acb      	subs	r3, r1, r3
 80022a0:	011b      	lsls	r3, r3, #4
 80022a2:	3332      	adds	r3, #50	; 0x32
 80022a4:	4a37      	ldr	r2, [pc, #220]	; (8002384 <UART_SetConfig+0x99c>)
 80022a6:	fba2 2303 	umull	r2, r3, r2, r3
 80022aa:	095b      	lsrs	r3, r3, #5
 80022ac:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80022b0:	441c      	add	r4, r3
 80022b2:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80022b6:	2200      	movs	r2, #0
 80022b8:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80022bc:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80022c0:	e9d7 893a 	ldrd	r8, r9, [r7, #232]	; 0xe8
 80022c4:	4642      	mov	r2, r8
 80022c6:	464b      	mov	r3, r9
 80022c8:	1891      	adds	r1, r2, r2
 80022ca:	60b9      	str	r1, [r7, #8]
 80022cc:	415b      	adcs	r3, r3
 80022ce:	60fb      	str	r3, [r7, #12]
 80022d0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80022d4:	4641      	mov	r1, r8
 80022d6:	1851      	adds	r1, r2, r1
 80022d8:	6039      	str	r1, [r7, #0]
 80022da:	4649      	mov	r1, r9
 80022dc:	414b      	adcs	r3, r1
 80022de:	607b      	str	r3, [r7, #4]
 80022e0:	f04f 0200 	mov.w	r2, #0
 80022e4:	f04f 0300 	mov.w	r3, #0
 80022e8:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80022ec:	4659      	mov	r1, fp
 80022ee:	00cb      	lsls	r3, r1, #3
 80022f0:	4651      	mov	r1, sl
 80022f2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80022f6:	4651      	mov	r1, sl
 80022f8:	00ca      	lsls	r2, r1, #3
 80022fa:	4610      	mov	r0, r2
 80022fc:	4619      	mov	r1, r3
 80022fe:	4603      	mov	r3, r0
 8002300:	4642      	mov	r2, r8
 8002302:	189b      	adds	r3, r3, r2
 8002304:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8002308:	464b      	mov	r3, r9
 800230a:	460a      	mov	r2, r1
 800230c:	eb42 0303 	adc.w	r3, r2, r3
 8002310:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8002314:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8002318:	685b      	ldr	r3, [r3, #4]
 800231a:	2200      	movs	r2, #0
 800231c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8002320:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8002324:	f04f 0200 	mov.w	r2, #0
 8002328:	f04f 0300 	mov.w	r3, #0
 800232c:	e9d7 8936 	ldrd	r8, r9, [r7, #216]	; 0xd8
 8002330:	4649      	mov	r1, r9
 8002332:	008b      	lsls	r3, r1, #2
 8002334:	4641      	mov	r1, r8
 8002336:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800233a:	4641      	mov	r1, r8
 800233c:	008a      	lsls	r2, r1, #2
 800233e:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8002342:	f7fd ffbd 	bl	80002c0 <__aeabi_uldivmod>
 8002346:	4602      	mov	r2, r0
 8002348:	460b      	mov	r3, r1
 800234a:	4b0e      	ldr	r3, [pc, #56]	; (8002384 <UART_SetConfig+0x99c>)
 800234c:	fba3 1302 	umull	r1, r3, r3, r2
 8002350:	095b      	lsrs	r3, r3, #5
 8002352:	2164      	movs	r1, #100	; 0x64
 8002354:	fb01 f303 	mul.w	r3, r1, r3
 8002358:	1ad3      	subs	r3, r2, r3
 800235a:	011b      	lsls	r3, r3, #4
 800235c:	3332      	adds	r3, #50	; 0x32
 800235e:	4a09      	ldr	r2, [pc, #36]	; (8002384 <UART_SetConfig+0x99c>)
 8002360:	fba2 2303 	umull	r2, r3, r2, r3
 8002364:	095b      	lsrs	r3, r3, #5
 8002366:	f003 020f 	and.w	r2, r3, #15
 800236a:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	4422      	add	r2, r4
 8002372:	609a      	str	r2, [r3, #8]
}
 8002374:	e7ff      	b.n	8002376 <UART_SetConfig+0x98e>
 8002376:	bf00      	nop
 8002378:	f507 7702 	add.w	r7, r7, #520	; 0x208
 800237c:	46bd      	mov	sp, r7
 800237e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002382:	bf00      	nop
 8002384:	51eb851f 	.word	0x51eb851f

08002388 <SysTick_Handler>:
 * @return      - none
 *
 * @Note        - Hàm này ghi đề hàm nằm trong file "startup_stm32f446retx.s"
 */
void SysTick_Handler(void)
{
 8002388:	b580      	push	{r7, lr}
 800238a:	af00      	add	r7, sp, #0
	HAL_IncTick(); 					//Sử dụng làm cơ sở thời gian ứng dụng.
 800238c:	f7fe f968 	bl	8000660 <HAL_IncTick>
	HAL_SYSTICK_IRQHandler();		//Sử dụng làm cơ sở thời gian ngắt trong ứng dụng.
 8002390:	f7fe fab4 	bl	80008fc <HAL_SYSTICK_IRQHandler>
	/* Giải thích:
	 * Tăng giá trị biến uwTick: Hàm này tăng giá trị của biến toàn cục uwTick lên 1. Biến
	 * uwTick là một biến đếm thời gian được sử dụng bởi HAL để cung cấp các hàm quản lý
	 * thời gian như HAL_Delay() và HAL_GetTick().
	 */
}
 8002394:	bf00      	nop
 8002396:	bd80      	pop	{r7, pc}

08002398 <main>:
//Biến dùng cho Interrupt
UART_HandleTypeDef huart2; 				//Biến toàn cục UART Handle


int main(void)
{
 8002398:	b580      	push	{r7, lr}
 800239a:	b0ac      	sub	sp, #176	; 0xb0
 800239c:	af00      	add	r7, sp, #0
	//1.Khai báo các biến cấu trúc liên quan đến cấu hình xung clock
	RCC_OscInitTypeDef osc_init;				//Lựa chọn HSE,HSI,LSE,LSI
	RCC_ClkInitTypeDef clk_init;				//Lựa chọn CLK cho các Bus
	char msg[100];								//Tin nhắn gửi thông số clk đã cấu hình

	HAL_Init();						//Call HAL_MspInit()
 800239e:	f7fe f90d 	bl	80005bc <HAL_Init>
	UART2_Init();					//Call HAL_UART_MspInit()
 80023a2:	f000 f8b7 	bl	8002514 <UART2_Init>

	//2.Cấu hình thông số cho các thành phần biến struct "osc_init"
	memset(&osc_init,0,sizeof(osc_init));			//Khởi tạo value thành phần cấu trúc bằng 0
 80023a6:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80023aa:	2234      	movs	r2, #52	; 0x34
 80023ac:	2100      	movs	r1, #0
 80023ae:	4618      	mov	r0, r3
 80023b0:	f000 f9a4 	bl	80026fc <memset>
	osc_init.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80023b4:	2301      	movs	r3, #1
 80023b6:	67fb      	str	r3, [r7, #124]	; 0x7c
	osc_init.HSEState = RCC_HSE_BYPASS;
 80023b8:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80023bc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
	//Call hàm OSC và cấu hình
	if(HAL_RCC_OscConfig(&osc_init) != HAL_OK)
 80023c0:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80023c4:	4618      	mov	r0, r3
 80023c6:	f7fe ff85 	bl	80012d4 <HAL_RCC_OscConfig>
 80023ca:	4603      	mov	r3, r0
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d001      	beq.n	80023d4 <main+0x3c>
	{
		Error_Handler();
 80023d0:	f000 f8c6 	bl	8002560 <Error_Handler>
	}

	//3.Cấu hình thông số cho các thành phần biến struct "clk_init"
	//Cấu hình nhiều xung clk
	clk_init.ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | \
 80023d4:	230f      	movs	r3, #15
 80023d6:	66bb      	str	r3, [r7, #104]	; 0x68
						RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	//Cấu hình nguồn lấy xung CLK là HSE
	clk_init.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;		//8MHz
 80023d8:	2301      	movs	r3, #1
 80023da:	66fb      	str	r3, [r7, #108]	; 0x6c
	//Cấu hình thông số cho bộ chia(Prescaler) của AHB,APB1,APB2 Bus
	clk_init.AHBCLKDivider = RCC_SYSCLK_DIV2;			//HSE -> AHB = 4MHz (Đề bài)
 80023dc:	2380      	movs	r3, #128	; 0x80
 80023de:	673b      	str	r3, [r7, #112]	; 0x70
	clk_init.APB1CLKDivider = RCC_HCLK_DIV2; 			//AHB -> APB1 = 2MHz (Đề bài)
 80023e0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80023e4:	677b      	str	r3, [r7, #116]	; 0x74
	clk_init.APB2CLKDivider = RCC_HCLK_DIV2; 			//AHB -> APB2 = 2MHz (Đề bài)
 80023e6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80023ea:	67bb      	str	r3, [r7, #120]	; 0x78

	//Call hàm Clock, đồng thời cấu hình clk và độ trễ(LATENCY) Flash
	if(HAL_RCC_ClockConfig(&clk_init, FLASH_ACR_LATENCY_0WS) != HAL_OK)
 80023ec:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80023f0:	2100      	movs	r1, #0
 80023f2:	4618      	mov	r0, r3
 80023f4:	f7fe fc24 	bl	8000c40 <HAL_RCC_ClockConfig>
 80023f8:	4603      	mov	r3, r0
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d001      	beq.n	8002402 <main+0x6a>
	{
		Error_Handler();
 80023fe:	f000 f8af 	bl	8002560 <Error_Handler>
	}

	//4.Tắt HSI clk để chuyển sang cấu hình Clk mới
	__HAL_RCC_HSI_DISABLE();
 8002402:	4b3d      	ldr	r3, [pc, #244]	; (80024f8 <main+0x160>)
 8002404:	2200      	movs	r2, #0
 8002406:	601a      	str	r2, [r3, #0]

	//5.Khởi tạo Bộ đếm thời gian hệ thống và ngắt của nó,
	//và khởi động Bộ đếm thời gian tích tắc hệ thống.
	HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / 1000);
 8002408:	f7fe fd00 	bl	8000e0c <HAL_RCC_GetHCLKFreq>
 800240c:	4603      	mov	r3, r0
 800240e:	4a3b      	ldr	r2, [pc, #236]	; (80024fc <main+0x164>)
 8002410:	fba2 2303 	umull	r2, r3, r2, r3
 8002414:	099b      	lsrs	r3, r3, #6
 8002416:	4618      	mov	r0, r3
 8002418:	f7fe fa47 	bl	80008aa <HAL_SYSTICK_Config>

	//6.Cấu hình nguồn clk cho bộ đồng hồ SysTick
	HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 800241c:	2004      	movs	r0, #4
 800241e:	f7fe fa51 	bl	80008c4 <HAL_SYSTICK_CLKSourceConfig>

	//7.Call lại UART
	UART2_Init();
 8002422:	f000 f877 	bl	8002514 <UART2_Init>

	//.Quan sát các thông số đã đc cấu hình
	memset(msg,0,sizeof(msg));
 8002426:	1d3b      	adds	r3, r7, #4
 8002428:	2264      	movs	r2, #100	; 0x64
 800242a:	2100      	movs	r1, #0
 800242c:	4618      	mov	r0, r3
 800242e:	f000 f965 	bl	80026fc <memset>
	sprintf(msg,"SYSCLK : %ld\r\n", HAL_RCC_GetSysClockFreq());		//SYSCLK
 8002432:	f7fe fd1f 	bl	8000e74 <HAL_RCC_GetSysClockFreq>
 8002436:	4602      	mov	r2, r0
 8002438:	1d3b      	adds	r3, r7, #4
 800243a:	4931      	ldr	r1, [pc, #196]	; (8002500 <main+0x168>)
 800243c:	4618      	mov	r0, r3
 800243e:	f000 f93d 	bl	80026bc <siprintf>
	HAL_UART_Transmit(&huart2,(uint8_t *) msg, strlen(msg), HAL_MAX_DELAY);
 8002442:	1d3b      	adds	r3, r7, #4
 8002444:	4618      	mov	r0, r3
 8002446:	f7fd fee3 	bl	8000210 <strlen>
 800244a:	4603      	mov	r3, r0
 800244c:	b29a      	uxth	r2, r3
 800244e:	1d39      	adds	r1, r7, #4
 8002450:	f04f 33ff 	mov.w	r3, #4294967295
 8002454:	482b      	ldr	r0, [pc, #172]	; (8002504 <main+0x16c>)
 8002456:	f7ff f9e4 	bl	8001822 <HAL_UART_Transmit>

	memset(msg,0,sizeof(msg));
 800245a:	1d3b      	adds	r3, r7, #4
 800245c:	2264      	movs	r2, #100	; 0x64
 800245e:	2100      	movs	r1, #0
 8002460:	4618      	mov	r0, r3
 8002462:	f000 f94b 	bl	80026fc <memset>
	sprintf(msg,"HCLK : %ld\r\n", HAL_RCC_GetHCLKFreq());			//HCLK
 8002466:	f7fe fcd1 	bl	8000e0c <HAL_RCC_GetHCLKFreq>
 800246a:	4602      	mov	r2, r0
 800246c:	1d3b      	adds	r3, r7, #4
 800246e:	4926      	ldr	r1, [pc, #152]	; (8002508 <main+0x170>)
 8002470:	4618      	mov	r0, r3
 8002472:	f000 f923 	bl	80026bc <siprintf>
	HAL_UART_Transmit(&huart2,(uint8_t *) msg, strlen(msg), HAL_MAX_DELAY);
 8002476:	1d3b      	adds	r3, r7, #4
 8002478:	4618      	mov	r0, r3
 800247a:	f7fd fec9 	bl	8000210 <strlen>
 800247e:	4603      	mov	r3, r0
 8002480:	b29a      	uxth	r2, r3
 8002482:	1d39      	adds	r1, r7, #4
 8002484:	f04f 33ff 	mov.w	r3, #4294967295
 8002488:	481e      	ldr	r0, [pc, #120]	; (8002504 <main+0x16c>)
 800248a:	f7ff f9ca 	bl	8001822 <HAL_UART_Transmit>

	memset(msg,0,sizeof(msg));
 800248e:	1d3b      	adds	r3, r7, #4
 8002490:	2264      	movs	r2, #100	; 0x64
 8002492:	2100      	movs	r1, #0
 8002494:	4618      	mov	r0, r3
 8002496:	f000 f931 	bl	80026fc <memset>
	sprintf(msg,"APB1 : %ld\r\n", HAL_RCC_GetPCLK1Freq());			//APB1
 800249a:	f7fe fcc3 	bl	8000e24 <HAL_RCC_GetPCLK1Freq>
 800249e:	4602      	mov	r2, r0
 80024a0:	1d3b      	adds	r3, r7, #4
 80024a2:	491a      	ldr	r1, [pc, #104]	; (800250c <main+0x174>)
 80024a4:	4618      	mov	r0, r3
 80024a6:	f000 f909 	bl	80026bc <siprintf>
	HAL_UART_Transmit(&huart2,(uint8_t *) msg, strlen(msg), HAL_MAX_DELAY);
 80024aa:	1d3b      	adds	r3, r7, #4
 80024ac:	4618      	mov	r0, r3
 80024ae:	f7fd feaf 	bl	8000210 <strlen>
 80024b2:	4603      	mov	r3, r0
 80024b4:	b29a      	uxth	r2, r3
 80024b6:	1d39      	adds	r1, r7, #4
 80024b8:	f04f 33ff 	mov.w	r3, #4294967295
 80024bc:	4811      	ldr	r0, [pc, #68]	; (8002504 <main+0x16c>)
 80024be:	f7ff f9b0 	bl	8001822 <HAL_UART_Transmit>

	memset(msg,0,sizeof(msg));
 80024c2:	1d3b      	adds	r3, r7, #4
 80024c4:	2264      	movs	r2, #100	; 0x64
 80024c6:	2100      	movs	r1, #0
 80024c8:	4618      	mov	r0, r3
 80024ca:	f000 f917 	bl	80026fc <memset>
	sprintf(msg,"APB2 : %ld\r\n", HAL_RCC_GetPCLK2Freq());			//APB2
 80024ce:	f7fe fcbd 	bl	8000e4c <HAL_RCC_GetPCLK2Freq>
 80024d2:	4602      	mov	r2, r0
 80024d4:	1d3b      	adds	r3, r7, #4
 80024d6:	490e      	ldr	r1, [pc, #56]	; (8002510 <main+0x178>)
 80024d8:	4618      	mov	r0, r3
 80024da:	f000 f8ef 	bl	80026bc <siprintf>
	HAL_UART_Transmit(&huart2,(uint8_t *) msg, strlen(msg), HAL_MAX_DELAY);
 80024de:	1d3b      	adds	r3, r7, #4
 80024e0:	4618      	mov	r0, r3
 80024e2:	f7fd fe95 	bl	8000210 <strlen>
 80024e6:	4603      	mov	r3, r0
 80024e8:	b29a      	uxth	r2, r3
 80024ea:	1d39      	adds	r1, r7, #4
 80024ec:	f04f 33ff 	mov.w	r3, #4294967295
 80024f0:	4804      	ldr	r0, [pc, #16]	; (8002504 <main+0x16c>)
 80024f2:	f7ff f996 	bl	8001822 <HAL_UART_Transmit>

	while(1);
 80024f6:	e7fe      	b.n	80024f6 <main+0x15e>
 80024f8:	42470000 	.word	0x42470000
 80024fc:	10624dd3 	.word	0x10624dd3
 8002500:	0800302c 	.word	0x0800302c
 8002504:	2000007c 	.word	0x2000007c
 8002508:	0800303c 	.word	0x0800303c
 800250c:	0800304c 	.word	0x0800304c
 8002510:	0800305c 	.word	0x0800305c

08002514 <UART2_Init>:
 * @return      - none
 *
 * @Note        - none
 */
void UART2_Init(void)
{
 8002514:	b580      	push	{r7, lr}
 8002516:	af00      	add	r7, sp, #0
	//Cài đặt từng thông số USARTx
	huart2.Instance = USART2;
 8002518:	4b0f      	ldr	r3, [pc, #60]	; (8002558 <UART2_Init+0x44>)
 800251a:	4a10      	ldr	r2, [pc, #64]	; (800255c <UART2_Init+0x48>)
 800251c:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 800251e:	4b0e      	ldr	r3, [pc, #56]	; (8002558 <UART2_Init+0x44>)
 8002520:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002524:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002526:	4b0c      	ldr	r3, [pc, #48]	; (8002558 <UART2_Init+0x44>)
 8002528:	2200      	movs	r2, #0
 800252a:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 800252c:	4b0a      	ldr	r3, [pc, #40]	; (8002558 <UART2_Init+0x44>)
 800252e:	2200      	movs	r2, #0
 8002530:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 8002532:	4b09      	ldr	r3, [pc, #36]	; (8002558 <UART2_Init+0x44>)
 8002534:	2200      	movs	r2, #0
 8002536:	611a      	str	r2, [r3, #16]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002538:	4b07      	ldr	r3, [pc, #28]	; (8002558 <UART2_Init+0x44>)
 800253a:	2200      	movs	r2, #0
 800253c:	619a      	str	r2, [r3, #24]
	huart2.Init.Mode = UART_MODE_TX_RX;
 800253e:	4b06      	ldr	r3, [pc, #24]	; (8002558 <UART2_Init+0x44>)
 8002540:	220c      	movs	r2, #12
 8002542:	615a      	str	r2, [r3, #20]

	//Cấu hình USARTx
	if(HAL_UART_Init(&huart2) != HAL_OK)
 8002544:	4804      	ldr	r0, [pc, #16]	; (8002558 <UART2_Init+0x44>)
 8002546:	f7ff f91f 	bl	8001788 <HAL_UART_Init>
 800254a:	4603      	mov	r3, r0
 800254c:	2b00      	cmp	r3, #0
 800254e:	d001      	beq.n	8002554 <UART2_Init+0x40>
	{
		//This is a Problem
		Error_Handler();
 8002550:	f000 f806 	bl	8002560 <Error_Handler>
		/* Giải thích:
		 * Kiểu biến của hàm HAL_UART_Init là một kiểu "Enum" "HAL_StatusTypeDef"
		 * mà "Enum" "HAL_StatusTypeDef" là gồm các lựa chọn trạng thái kết quả hàm
		 */
	}
}
 8002554:	bf00      	nop
 8002556:	bd80      	pop	{r7, pc}
 8002558:	2000007c 	.word	0x2000007c
 800255c:	40004400 	.word	0x40004400

08002560 <Error_Handler>:
 * @return      - none
 *
 * @Note        - none
 */
void Error_Handler(void)
{
 8002560:	b480      	push	{r7}
 8002562:	af00      	add	r7, sp, #0
	while(1); //chương trình lặp lại vô hạn
 8002564:	e7fe      	b.n	8002564 <Error_Handler+0x4>
	...

08002568 <HAL_MspInit>:
 *
 * @Note        - Thiết lập các cấu hình ban đầu cho hệ thống, bao gồm các
 * cấu hình liên quan đến ngắt (interrupt) và xử lý lỗi trên bộ xử lý ARM Cortex-M4.
 */
void HAL_MspInit(void)
{
 8002568:	b580      	push	{r7, lr}
 800256a:	af00      	add	r7, sp, #0
	/* Khởi tạo các khai báo cụ thể liên quan Low Level Processor */
	//1.Setup the priority grouping of the arm cortex mx processor - "stm32f4xx_hal_cortex.h"
	HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800256c:	2003      	movs	r0, #3
 800256e:	f7fe f967 	bl	8000840 <HAL_NVIC_SetPriorityGrouping>

	//2.Enable the required system exception of the arm cortex mx processor
	//usg fault, memory fault and bus fault of system exception
	SCB->SHCSR |= (0x7 << 16);		//0x7=111 -> Set 3 bit cùng lúc bắt đầu từ bit 16
 8002572:	4b0d      	ldr	r3, [pc, #52]	; (80025a8 <HAL_MspInit+0x40>)
 8002574:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002576:	4a0c      	ldr	r2, [pc, #48]	; (80025a8 <HAL_MspInit+0x40>)
 8002578:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
 800257c:	6253      	str	r3, [r2, #36]	; 0x24

	//3.Configure the priority for the "system exception"
	HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 800257e:	2200      	movs	r2, #0
 8002580:	2100      	movs	r1, #0
 8002582:	f06f 000b 	mvn.w	r0, #11
 8002586:	f7fe f966 	bl	8000856 <HAL_NVIC_SetPriority>
	HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 800258a:	2200      	movs	r2, #0
 800258c:	2100      	movs	r1, #0
 800258e:	f06f 000a 	mvn.w	r0, #10
 8002592:	f7fe f960 	bl	8000856 <HAL_NVIC_SetPriority>
	HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 8002596:	2200      	movs	r2, #0
 8002598:	2100      	movs	r1, #0
 800259a:	f06f 0009 	mvn.w	r0, #9
 800259e:	f7fe f95a 	bl	8000856 <HAL_NVIC_SetPriority>
	/*
	 * 0,0 : Ưu tiên mức cao nhất và mức phụ cao nhất, nghĩa là khi có System Exception
	 * thì sẽ ưu tiên mức cao nhất đc NVIC kích hoạt.
	 * SCB: System Control Block(CortexM4_UserGuide->4.3)
	 */
}
 80025a2:	bf00      	nop
 80025a4:	bd80      	pop	{r7, pc}
 80025a6:	bf00      	nop
 80025a8:	e000ed00 	.word	0xe000ed00

080025ac <HAL_UART_MspInit>:
 * @return      - none
 *
 * @Note        - none
 */
void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 80025ac:	b580      	push	{r7, lr}
 80025ae:	b08a      	sub	sp, #40	; 0x28
 80025b0:	af00      	add	r7, sp, #0
 80025b2:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef gpio_uart;

	/* Khởi tạo Low Level Processor of UART Peripheral */
	//1.Enable the clock for the USART2 and GPIOA peripheral
	__HAL_RCC_USART2_CLK_ENABLE();
 80025b4:	2300      	movs	r3, #0
 80025b6:	613b      	str	r3, [r7, #16]
 80025b8:	4b1e      	ldr	r3, [pc, #120]	; (8002634 <HAL_UART_MspInit+0x88>)
 80025ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025bc:	4a1d      	ldr	r2, [pc, #116]	; (8002634 <HAL_UART_MspInit+0x88>)
 80025be:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80025c2:	6413      	str	r3, [r2, #64]	; 0x40
 80025c4:	4b1b      	ldr	r3, [pc, #108]	; (8002634 <HAL_UART_MspInit+0x88>)
 80025c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025cc:	613b      	str	r3, [r7, #16]
 80025ce:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80025d0:	2300      	movs	r3, #0
 80025d2:	60fb      	str	r3, [r7, #12]
 80025d4:	4b17      	ldr	r3, [pc, #92]	; (8002634 <HAL_UART_MspInit+0x88>)
 80025d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025d8:	4a16      	ldr	r2, [pc, #88]	; (8002634 <HAL_UART_MspInit+0x88>)
 80025da:	f043 0301 	orr.w	r3, r3, #1
 80025de:	6313      	str	r3, [r2, #48]	; 0x30
 80025e0:	4b14      	ldr	r3, [pc, #80]	; (8002634 <HAL_UART_MspInit+0x88>)
 80025e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025e4:	f003 0301 	and.w	r3, r3, #1
 80025e8:	60fb      	str	r3, [r7, #12]
 80025ea:	68fb      	ldr	r3, [r7, #12]

	//2.Do the pin GPIO configurations for USART
	//UART_Tx
	gpio_uart.Pin = GPIO_PIN_2;
 80025ec:	2304      	movs	r3, #4
 80025ee:	617b      	str	r3, [r7, #20]
	gpio_uart.Mode = GPIO_MODE_AF_PP;
 80025f0:	2302      	movs	r3, #2
 80025f2:	61bb      	str	r3, [r7, #24]
	gpio_uart.Pull = GPIO_PULLUP;
 80025f4:	2301      	movs	r3, #1
 80025f6:	61fb      	str	r3, [r7, #28]
	gpio_uart.Speed = GPIO_SPEED_FREQ_LOW;
 80025f8:	2300      	movs	r3, #0
 80025fa:	623b      	str	r3, [r7, #32]
	gpio_uart.Alternate = GPIO_AF7_USART2;
 80025fc:	2307      	movs	r3, #7
 80025fe:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(GPIOA, &gpio_uart);
 8002600:	f107 0314 	add.w	r3, r7, #20
 8002604:	4619      	mov	r1, r3
 8002606:	480c      	ldr	r0, [pc, #48]	; (8002638 <HAL_UART_MspInit+0x8c>)
 8002608:	f7fe f986 	bl	8000918 <HAL_GPIO_Init>
	//UART_Rx
	gpio_uart.Pin = GPIO_PIN_3;
 800260c:	2308      	movs	r3, #8
 800260e:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOA, &gpio_uart);
 8002610:	f107 0314 	add.w	r3, r7, #20
 8002614:	4619      	mov	r1, r3
 8002616:	4808      	ldr	r0, [pc, #32]	; (8002638 <HAL_UART_MspInit+0x8c>)
 8002618:	f7fe f97e 	bl	8000918 <HAL_GPIO_Init>

	//3.Enable the IRQ and setup the priority(NVIC settings)
	HAL_NVIC_EnableIRQ(USART2_IRQn);
 800261c:	2026      	movs	r0, #38	; 0x26
 800261e:	f7fe f936 	bl	800088e <HAL_NVIC_EnableIRQ>
	HAL_NVIC_SetPriority(USART2_IRQn, 15, 0);
 8002622:	2200      	movs	r2, #0
 8002624:	210f      	movs	r1, #15
 8002626:	2026      	movs	r0, #38	; 0x26
 8002628:	f7fe f915 	bl	8000856 <HAL_NVIC_SetPriority>

}
 800262c:	bf00      	nop
 800262e:	3728      	adds	r7, #40	; 0x28
 8002630:	46bd      	mov	sp, r7
 8002632:	bd80      	pop	{r7, pc}
 8002634:	40023800 	.word	0x40023800
 8002638:	40020000 	.word	0x40020000

0800263c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800263c:	b480      	push	{r7}
 800263e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002640:	4b08      	ldr	r3, [pc, #32]	; (8002664 <SystemInit+0x28>)
 8002642:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002646:	4a07      	ldr	r2, [pc, #28]	; (8002664 <SystemInit+0x28>)
 8002648:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800264c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002650:	4b04      	ldr	r3, [pc, #16]	; (8002664 <SystemInit+0x28>)
 8002652:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002656:	609a      	str	r2, [r3, #8]
#endif
}
 8002658:	bf00      	nop
 800265a:	46bd      	mov	sp, r7
 800265c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002660:	4770      	bx	lr
 8002662:	bf00      	nop
 8002664:	e000ed00 	.word	0xe000ed00

08002668 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002668:	f8df d034 	ldr.w	sp, [pc, #52]	; 80026a0 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800266c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800266e:	e003      	b.n	8002678 <LoopCopyDataInit>

08002670 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002670:	4b0c      	ldr	r3, [pc, #48]	; (80026a4 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8002672:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002674:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8002676:	3104      	adds	r1, #4

08002678 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002678:	480b      	ldr	r0, [pc, #44]	; (80026a8 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800267a:	4b0c      	ldr	r3, [pc, #48]	; (80026ac <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800267c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800267e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002680:	d3f6      	bcc.n	8002670 <CopyDataInit>
  ldr  r2, =_sbss
 8002682:	4a0b      	ldr	r2, [pc, #44]	; (80026b0 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8002684:	e002      	b.n	800268c <LoopFillZerobss>

08002686 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8002686:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002688:	f842 3b04 	str.w	r3, [r2], #4

0800268c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800268c:	4b09      	ldr	r3, [pc, #36]	; (80026b4 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800268e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002690:	d3f9      	bcc.n	8002686 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002692:	f7ff ffd3 	bl	800263c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002696:	f000 f839 	bl	800270c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800269a:	f7ff fe7d 	bl	8002398 <main>
  bx  lr    
 800269e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80026a0:	2001ffff 	.word	0x2001ffff
  ldr  r3, =_sidata
 80026a4:	080030c8 	.word	0x080030c8
  ldr  r0, =_sdata
 80026a8:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80026ac:	2000005c 	.word	0x2000005c
  ldr  r2, =_sbss
 80026b0:	2000005c 	.word	0x2000005c
  ldr  r3, = _ebss
 80026b4:	20000208 	.word	0x20000208

080026b8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80026b8:	e7fe      	b.n	80026b8 <ADC_IRQHandler>
	...

080026bc <siprintf>:
 80026bc:	b40e      	push	{r1, r2, r3}
 80026be:	b500      	push	{lr}
 80026c0:	b09c      	sub	sp, #112	; 0x70
 80026c2:	ab1d      	add	r3, sp, #116	; 0x74
 80026c4:	9002      	str	r0, [sp, #8]
 80026c6:	9006      	str	r0, [sp, #24]
 80026c8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80026cc:	4809      	ldr	r0, [pc, #36]	; (80026f4 <siprintf+0x38>)
 80026ce:	9107      	str	r1, [sp, #28]
 80026d0:	9104      	str	r1, [sp, #16]
 80026d2:	4909      	ldr	r1, [pc, #36]	; (80026f8 <siprintf+0x3c>)
 80026d4:	f853 2b04 	ldr.w	r2, [r3], #4
 80026d8:	9105      	str	r1, [sp, #20]
 80026da:	6800      	ldr	r0, [r0, #0]
 80026dc:	9301      	str	r3, [sp, #4]
 80026de:	a902      	add	r1, sp, #8
 80026e0:	f000 f98c 	bl	80029fc <_svfiprintf_r>
 80026e4:	9b02      	ldr	r3, [sp, #8]
 80026e6:	2200      	movs	r2, #0
 80026e8:	701a      	strb	r2, [r3, #0]
 80026ea:	b01c      	add	sp, #112	; 0x70
 80026ec:	f85d eb04 	ldr.w	lr, [sp], #4
 80026f0:	b003      	add	sp, #12
 80026f2:	4770      	bx	lr
 80026f4:	20000058 	.word	0x20000058
 80026f8:	ffff0208 	.word	0xffff0208

080026fc <memset>:
 80026fc:	4402      	add	r2, r0
 80026fe:	4603      	mov	r3, r0
 8002700:	4293      	cmp	r3, r2
 8002702:	d100      	bne.n	8002706 <memset+0xa>
 8002704:	4770      	bx	lr
 8002706:	f803 1b01 	strb.w	r1, [r3], #1
 800270a:	e7f9      	b.n	8002700 <memset+0x4>

0800270c <__libc_init_array>:
 800270c:	b570      	push	{r4, r5, r6, lr}
 800270e:	4d0d      	ldr	r5, [pc, #52]	; (8002744 <__libc_init_array+0x38>)
 8002710:	4c0d      	ldr	r4, [pc, #52]	; (8002748 <__libc_init_array+0x3c>)
 8002712:	1b64      	subs	r4, r4, r5
 8002714:	10a4      	asrs	r4, r4, #2
 8002716:	2600      	movs	r6, #0
 8002718:	42a6      	cmp	r6, r4
 800271a:	d109      	bne.n	8002730 <__libc_init_array+0x24>
 800271c:	4d0b      	ldr	r5, [pc, #44]	; (800274c <__libc_init_array+0x40>)
 800271e:	4c0c      	ldr	r4, [pc, #48]	; (8002750 <__libc_init_array+0x44>)
 8002720:	f000 fc78 	bl	8003014 <_init>
 8002724:	1b64      	subs	r4, r4, r5
 8002726:	10a4      	asrs	r4, r4, #2
 8002728:	2600      	movs	r6, #0
 800272a:	42a6      	cmp	r6, r4
 800272c:	d105      	bne.n	800273a <__libc_init_array+0x2e>
 800272e:	bd70      	pop	{r4, r5, r6, pc}
 8002730:	f855 3b04 	ldr.w	r3, [r5], #4
 8002734:	4798      	blx	r3
 8002736:	3601      	adds	r6, #1
 8002738:	e7ee      	b.n	8002718 <__libc_init_array+0xc>
 800273a:	f855 3b04 	ldr.w	r3, [r5], #4
 800273e:	4798      	blx	r3
 8002740:	3601      	adds	r6, #1
 8002742:	e7f2      	b.n	800272a <__libc_init_array+0x1e>
 8002744:	080030c0 	.word	0x080030c0
 8002748:	080030c0 	.word	0x080030c0
 800274c:	080030c0 	.word	0x080030c0
 8002750:	080030c4 	.word	0x080030c4

08002754 <__retarget_lock_acquire_recursive>:
 8002754:	4770      	bx	lr

08002756 <__retarget_lock_release_recursive>:
 8002756:	4770      	bx	lr

08002758 <_free_r>:
 8002758:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800275a:	2900      	cmp	r1, #0
 800275c:	d044      	beq.n	80027e8 <_free_r+0x90>
 800275e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002762:	9001      	str	r0, [sp, #4]
 8002764:	2b00      	cmp	r3, #0
 8002766:	f1a1 0404 	sub.w	r4, r1, #4
 800276a:	bfb8      	it	lt
 800276c:	18e4      	addlt	r4, r4, r3
 800276e:	f000 f8df 	bl	8002930 <__malloc_lock>
 8002772:	4a1e      	ldr	r2, [pc, #120]	; (80027ec <_free_r+0x94>)
 8002774:	9801      	ldr	r0, [sp, #4]
 8002776:	6813      	ldr	r3, [r2, #0]
 8002778:	b933      	cbnz	r3, 8002788 <_free_r+0x30>
 800277a:	6063      	str	r3, [r4, #4]
 800277c:	6014      	str	r4, [r2, #0]
 800277e:	b003      	add	sp, #12
 8002780:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8002784:	f000 b8da 	b.w	800293c <__malloc_unlock>
 8002788:	42a3      	cmp	r3, r4
 800278a:	d908      	bls.n	800279e <_free_r+0x46>
 800278c:	6825      	ldr	r5, [r4, #0]
 800278e:	1961      	adds	r1, r4, r5
 8002790:	428b      	cmp	r3, r1
 8002792:	bf01      	itttt	eq
 8002794:	6819      	ldreq	r1, [r3, #0]
 8002796:	685b      	ldreq	r3, [r3, #4]
 8002798:	1949      	addeq	r1, r1, r5
 800279a:	6021      	streq	r1, [r4, #0]
 800279c:	e7ed      	b.n	800277a <_free_r+0x22>
 800279e:	461a      	mov	r2, r3
 80027a0:	685b      	ldr	r3, [r3, #4]
 80027a2:	b10b      	cbz	r3, 80027a8 <_free_r+0x50>
 80027a4:	42a3      	cmp	r3, r4
 80027a6:	d9fa      	bls.n	800279e <_free_r+0x46>
 80027a8:	6811      	ldr	r1, [r2, #0]
 80027aa:	1855      	adds	r5, r2, r1
 80027ac:	42a5      	cmp	r5, r4
 80027ae:	d10b      	bne.n	80027c8 <_free_r+0x70>
 80027b0:	6824      	ldr	r4, [r4, #0]
 80027b2:	4421      	add	r1, r4
 80027b4:	1854      	adds	r4, r2, r1
 80027b6:	42a3      	cmp	r3, r4
 80027b8:	6011      	str	r1, [r2, #0]
 80027ba:	d1e0      	bne.n	800277e <_free_r+0x26>
 80027bc:	681c      	ldr	r4, [r3, #0]
 80027be:	685b      	ldr	r3, [r3, #4]
 80027c0:	6053      	str	r3, [r2, #4]
 80027c2:	440c      	add	r4, r1
 80027c4:	6014      	str	r4, [r2, #0]
 80027c6:	e7da      	b.n	800277e <_free_r+0x26>
 80027c8:	d902      	bls.n	80027d0 <_free_r+0x78>
 80027ca:	230c      	movs	r3, #12
 80027cc:	6003      	str	r3, [r0, #0]
 80027ce:	e7d6      	b.n	800277e <_free_r+0x26>
 80027d0:	6825      	ldr	r5, [r4, #0]
 80027d2:	1961      	adds	r1, r4, r5
 80027d4:	428b      	cmp	r3, r1
 80027d6:	bf04      	itt	eq
 80027d8:	6819      	ldreq	r1, [r3, #0]
 80027da:	685b      	ldreq	r3, [r3, #4]
 80027dc:	6063      	str	r3, [r4, #4]
 80027de:	bf04      	itt	eq
 80027e0:	1949      	addeq	r1, r1, r5
 80027e2:	6021      	streq	r1, [r4, #0]
 80027e4:	6054      	str	r4, [r2, #4]
 80027e6:	e7ca      	b.n	800277e <_free_r+0x26>
 80027e8:	b003      	add	sp, #12
 80027ea:	bd30      	pop	{r4, r5, pc}
 80027ec:	200001fc 	.word	0x200001fc

080027f0 <sbrk_aligned>:
 80027f0:	b570      	push	{r4, r5, r6, lr}
 80027f2:	4e0e      	ldr	r6, [pc, #56]	; (800282c <sbrk_aligned+0x3c>)
 80027f4:	460c      	mov	r4, r1
 80027f6:	6831      	ldr	r1, [r6, #0]
 80027f8:	4605      	mov	r5, r0
 80027fa:	b911      	cbnz	r1, 8002802 <sbrk_aligned+0x12>
 80027fc:	f000 fba6 	bl	8002f4c <_sbrk_r>
 8002800:	6030      	str	r0, [r6, #0]
 8002802:	4621      	mov	r1, r4
 8002804:	4628      	mov	r0, r5
 8002806:	f000 fba1 	bl	8002f4c <_sbrk_r>
 800280a:	1c43      	adds	r3, r0, #1
 800280c:	d00a      	beq.n	8002824 <sbrk_aligned+0x34>
 800280e:	1cc4      	adds	r4, r0, #3
 8002810:	f024 0403 	bic.w	r4, r4, #3
 8002814:	42a0      	cmp	r0, r4
 8002816:	d007      	beq.n	8002828 <sbrk_aligned+0x38>
 8002818:	1a21      	subs	r1, r4, r0
 800281a:	4628      	mov	r0, r5
 800281c:	f000 fb96 	bl	8002f4c <_sbrk_r>
 8002820:	3001      	adds	r0, #1
 8002822:	d101      	bne.n	8002828 <sbrk_aligned+0x38>
 8002824:	f04f 34ff 	mov.w	r4, #4294967295
 8002828:	4620      	mov	r0, r4
 800282a:	bd70      	pop	{r4, r5, r6, pc}
 800282c:	20000200 	.word	0x20000200

08002830 <_malloc_r>:
 8002830:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002834:	1ccd      	adds	r5, r1, #3
 8002836:	f025 0503 	bic.w	r5, r5, #3
 800283a:	3508      	adds	r5, #8
 800283c:	2d0c      	cmp	r5, #12
 800283e:	bf38      	it	cc
 8002840:	250c      	movcc	r5, #12
 8002842:	2d00      	cmp	r5, #0
 8002844:	4607      	mov	r7, r0
 8002846:	db01      	blt.n	800284c <_malloc_r+0x1c>
 8002848:	42a9      	cmp	r1, r5
 800284a:	d905      	bls.n	8002858 <_malloc_r+0x28>
 800284c:	230c      	movs	r3, #12
 800284e:	603b      	str	r3, [r7, #0]
 8002850:	2600      	movs	r6, #0
 8002852:	4630      	mov	r0, r6
 8002854:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002858:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800292c <_malloc_r+0xfc>
 800285c:	f000 f868 	bl	8002930 <__malloc_lock>
 8002860:	f8d8 3000 	ldr.w	r3, [r8]
 8002864:	461c      	mov	r4, r3
 8002866:	bb5c      	cbnz	r4, 80028c0 <_malloc_r+0x90>
 8002868:	4629      	mov	r1, r5
 800286a:	4638      	mov	r0, r7
 800286c:	f7ff ffc0 	bl	80027f0 <sbrk_aligned>
 8002870:	1c43      	adds	r3, r0, #1
 8002872:	4604      	mov	r4, r0
 8002874:	d155      	bne.n	8002922 <_malloc_r+0xf2>
 8002876:	f8d8 4000 	ldr.w	r4, [r8]
 800287a:	4626      	mov	r6, r4
 800287c:	2e00      	cmp	r6, #0
 800287e:	d145      	bne.n	800290c <_malloc_r+0xdc>
 8002880:	2c00      	cmp	r4, #0
 8002882:	d048      	beq.n	8002916 <_malloc_r+0xe6>
 8002884:	6823      	ldr	r3, [r4, #0]
 8002886:	4631      	mov	r1, r6
 8002888:	4638      	mov	r0, r7
 800288a:	eb04 0903 	add.w	r9, r4, r3
 800288e:	f000 fb5d 	bl	8002f4c <_sbrk_r>
 8002892:	4581      	cmp	r9, r0
 8002894:	d13f      	bne.n	8002916 <_malloc_r+0xe6>
 8002896:	6821      	ldr	r1, [r4, #0]
 8002898:	1a6d      	subs	r5, r5, r1
 800289a:	4629      	mov	r1, r5
 800289c:	4638      	mov	r0, r7
 800289e:	f7ff ffa7 	bl	80027f0 <sbrk_aligned>
 80028a2:	3001      	adds	r0, #1
 80028a4:	d037      	beq.n	8002916 <_malloc_r+0xe6>
 80028a6:	6823      	ldr	r3, [r4, #0]
 80028a8:	442b      	add	r3, r5
 80028aa:	6023      	str	r3, [r4, #0]
 80028ac:	f8d8 3000 	ldr.w	r3, [r8]
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d038      	beq.n	8002926 <_malloc_r+0xf6>
 80028b4:	685a      	ldr	r2, [r3, #4]
 80028b6:	42a2      	cmp	r2, r4
 80028b8:	d12b      	bne.n	8002912 <_malloc_r+0xe2>
 80028ba:	2200      	movs	r2, #0
 80028bc:	605a      	str	r2, [r3, #4]
 80028be:	e00f      	b.n	80028e0 <_malloc_r+0xb0>
 80028c0:	6822      	ldr	r2, [r4, #0]
 80028c2:	1b52      	subs	r2, r2, r5
 80028c4:	d41f      	bmi.n	8002906 <_malloc_r+0xd6>
 80028c6:	2a0b      	cmp	r2, #11
 80028c8:	d917      	bls.n	80028fa <_malloc_r+0xca>
 80028ca:	1961      	adds	r1, r4, r5
 80028cc:	42a3      	cmp	r3, r4
 80028ce:	6025      	str	r5, [r4, #0]
 80028d0:	bf18      	it	ne
 80028d2:	6059      	strne	r1, [r3, #4]
 80028d4:	6863      	ldr	r3, [r4, #4]
 80028d6:	bf08      	it	eq
 80028d8:	f8c8 1000 	streq.w	r1, [r8]
 80028dc:	5162      	str	r2, [r4, r5]
 80028de:	604b      	str	r3, [r1, #4]
 80028e0:	4638      	mov	r0, r7
 80028e2:	f104 060b 	add.w	r6, r4, #11
 80028e6:	f000 f829 	bl	800293c <__malloc_unlock>
 80028ea:	f026 0607 	bic.w	r6, r6, #7
 80028ee:	1d23      	adds	r3, r4, #4
 80028f0:	1af2      	subs	r2, r6, r3
 80028f2:	d0ae      	beq.n	8002852 <_malloc_r+0x22>
 80028f4:	1b9b      	subs	r3, r3, r6
 80028f6:	50a3      	str	r3, [r4, r2]
 80028f8:	e7ab      	b.n	8002852 <_malloc_r+0x22>
 80028fa:	42a3      	cmp	r3, r4
 80028fc:	6862      	ldr	r2, [r4, #4]
 80028fe:	d1dd      	bne.n	80028bc <_malloc_r+0x8c>
 8002900:	f8c8 2000 	str.w	r2, [r8]
 8002904:	e7ec      	b.n	80028e0 <_malloc_r+0xb0>
 8002906:	4623      	mov	r3, r4
 8002908:	6864      	ldr	r4, [r4, #4]
 800290a:	e7ac      	b.n	8002866 <_malloc_r+0x36>
 800290c:	4634      	mov	r4, r6
 800290e:	6876      	ldr	r6, [r6, #4]
 8002910:	e7b4      	b.n	800287c <_malloc_r+0x4c>
 8002912:	4613      	mov	r3, r2
 8002914:	e7cc      	b.n	80028b0 <_malloc_r+0x80>
 8002916:	230c      	movs	r3, #12
 8002918:	603b      	str	r3, [r7, #0]
 800291a:	4638      	mov	r0, r7
 800291c:	f000 f80e 	bl	800293c <__malloc_unlock>
 8002920:	e797      	b.n	8002852 <_malloc_r+0x22>
 8002922:	6025      	str	r5, [r4, #0]
 8002924:	e7dc      	b.n	80028e0 <_malloc_r+0xb0>
 8002926:	605b      	str	r3, [r3, #4]
 8002928:	deff      	udf	#255	; 0xff
 800292a:	bf00      	nop
 800292c:	200001fc 	.word	0x200001fc

08002930 <__malloc_lock>:
 8002930:	4801      	ldr	r0, [pc, #4]	; (8002938 <__malloc_lock+0x8>)
 8002932:	f7ff bf0f 	b.w	8002754 <__retarget_lock_acquire_recursive>
 8002936:	bf00      	nop
 8002938:	200001f8 	.word	0x200001f8

0800293c <__malloc_unlock>:
 800293c:	4801      	ldr	r0, [pc, #4]	; (8002944 <__malloc_unlock+0x8>)
 800293e:	f7ff bf0a 	b.w	8002756 <__retarget_lock_release_recursive>
 8002942:	bf00      	nop
 8002944:	200001f8 	.word	0x200001f8

08002948 <__ssputs_r>:
 8002948:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800294c:	688e      	ldr	r6, [r1, #8]
 800294e:	461f      	mov	r7, r3
 8002950:	42be      	cmp	r6, r7
 8002952:	680b      	ldr	r3, [r1, #0]
 8002954:	4682      	mov	sl, r0
 8002956:	460c      	mov	r4, r1
 8002958:	4690      	mov	r8, r2
 800295a:	d82c      	bhi.n	80029b6 <__ssputs_r+0x6e>
 800295c:	898a      	ldrh	r2, [r1, #12]
 800295e:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8002962:	d026      	beq.n	80029b2 <__ssputs_r+0x6a>
 8002964:	6965      	ldr	r5, [r4, #20]
 8002966:	6909      	ldr	r1, [r1, #16]
 8002968:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800296c:	eba3 0901 	sub.w	r9, r3, r1
 8002970:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8002974:	1c7b      	adds	r3, r7, #1
 8002976:	444b      	add	r3, r9
 8002978:	106d      	asrs	r5, r5, #1
 800297a:	429d      	cmp	r5, r3
 800297c:	bf38      	it	cc
 800297e:	461d      	movcc	r5, r3
 8002980:	0553      	lsls	r3, r2, #21
 8002982:	d527      	bpl.n	80029d4 <__ssputs_r+0x8c>
 8002984:	4629      	mov	r1, r5
 8002986:	f7ff ff53 	bl	8002830 <_malloc_r>
 800298a:	4606      	mov	r6, r0
 800298c:	b360      	cbz	r0, 80029e8 <__ssputs_r+0xa0>
 800298e:	6921      	ldr	r1, [r4, #16]
 8002990:	464a      	mov	r2, r9
 8002992:	f000 faeb 	bl	8002f6c <memcpy>
 8002996:	89a3      	ldrh	r3, [r4, #12]
 8002998:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800299c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80029a0:	81a3      	strh	r3, [r4, #12]
 80029a2:	6126      	str	r6, [r4, #16]
 80029a4:	6165      	str	r5, [r4, #20]
 80029a6:	444e      	add	r6, r9
 80029a8:	eba5 0509 	sub.w	r5, r5, r9
 80029ac:	6026      	str	r6, [r4, #0]
 80029ae:	60a5      	str	r5, [r4, #8]
 80029b0:	463e      	mov	r6, r7
 80029b2:	42be      	cmp	r6, r7
 80029b4:	d900      	bls.n	80029b8 <__ssputs_r+0x70>
 80029b6:	463e      	mov	r6, r7
 80029b8:	6820      	ldr	r0, [r4, #0]
 80029ba:	4632      	mov	r2, r6
 80029bc:	4641      	mov	r1, r8
 80029be:	f000 faab 	bl	8002f18 <memmove>
 80029c2:	68a3      	ldr	r3, [r4, #8]
 80029c4:	1b9b      	subs	r3, r3, r6
 80029c6:	60a3      	str	r3, [r4, #8]
 80029c8:	6823      	ldr	r3, [r4, #0]
 80029ca:	4433      	add	r3, r6
 80029cc:	6023      	str	r3, [r4, #0]
 80029ce:	2000      	movs	r0, #0
 80029d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80029d4:	462a      	mov	r2, r5
 80029d6:	f000 fad7 	bl	8002f88 <_realloc_r>
 80029da:	4606      	mov	r6, r0
 80029dc:	2800      	cmp	r0, #0
 80029de:	d1e0      	bne.n	80029a2 <__ssputs_r+0x5a>
 80029e0:	6921      	ldr	r1, [r4, #16]
 80029e2:	4650      	mov	r0, sl
 80029e4:	f7ff feb8 	bl	8002758 <_free_r>
 80029e8:	230c      	movs	r3, #12
 80029ea:	f8ca 3000 	str.w	r3, [sl]
 80029ee:	89a3      	ldrh	r3, [r4, #12]
 80029f0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80029f4:	81a3      	strh	r3, [r4, #12]
 80029f6:	f04f 30ff 	mov.w	r0, #4294967295
 80029fa:	e7e9      	b.n	80029d0 <__ssputs_r+0x88>

080029fc <_svfiprintf_r>:
 80029fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002a00:	4698      	mov	r8, r3
 8002a02:	898b      	ldrh	r3, [r1, #12]
 8002a04:	061b      	lsls	r3, r3, #24
 8002a06:	b09d      	sub	sp, #116	; 0x74
 8002a08:	4607      	mov	r7, r0
 8002a0a:	460d      	mov	r5, r1
 8002a0c:	4614      	mov	r4, r2
 8002a0e:	d50e      	bpl.n	8002a2e <_svfiprintf_r+0x32>
 8002a10:	690b      	ldr	r3, [r1, #16]
 8002a12:	b963      	cbnz	r3, 8002a2e <_svfiprintf_r+0x32>
 8002a14:	2140      	movs	r1, #64	; 0x40
 8002a16:	f7ff ff0b 	bl	8002830 <_malloc_r>
 8002a1a:	6028      	str	r0, [r5, #0]
 8002a1c:	6128      	str	r0, [r5, #16]
 8002a1e:	b920      	cbnz	r0, 8002a2a <_svfiprintf_r+0x2e>
 8002a20:	230c      	movs	r3, #12
 8002a22:	603b      	str	r3, [r7, #0]
 8002a24:	f04f 30ff 	mov.w	r0, #4294967295
 8002a28:	e0d0      	b.n	8002bcc <_svfiprintf_r+0x1d0>
 8002a2a:	2340      	movs	r3, #64	; 0x40
 8002a2c:	616b      	str	r3, [r5, #20]
 8002a2e:	2300      	movs	r3, #0
 8002a30:	9309      	str	r3, [sp, #36]	; 0x24
 8002a32:	2320      	movs	r3, #32
 8002a34:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8002a38:	f8cd 800c 	str.w	r8, [sp, #12]
 8002a3c:	2330      	movs	r3, #48	; 0x30
 8002a3e:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8002be4 <_svfiprintf_r+0x1e8>
 8002a42:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002a46:	f04f 0901 	mov.w	r9, #1
 8002a4a:	4623      	mov	r3, r4
 8002a4c:	469a      	mov	sl, r3
 8002a4e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002a52:	b10a      	cbz	r2, 8002a58 <_svfiprintf_r+0x5c>
 8002a54:	2a25      	cmp	r2, #37	; 0x25
 8002a56:	d1f9      	bne.n	8002a4c <_svfiprintf_r+0x50>
 8002a58:	ebba 0b04 	subs.w	fp, sl, r4
 8002a5c:	d00b      	beq.n	8002a76 <_svfiprintf_r+0x7a>
 8002a5e:	465b      	mov	r3, fp
 8002a60:	4622      	mov	r2, r4
 8002a62:	4629      	mov	r1, r5
 8002a64:	4638      	mov	r0, r7
 8002a66:	f7ff ff6f 	bl	8002948 <__ssputs_r>
 8002a6a:	3001      	adds	r0, #1
 8002a6c:	f000 80a9 	beq.w	8002bc2 <_svfiprintf_r+0x1c6>
 8002a70:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002a72:	445a      	add	r2, fp
 8002a74:	9209      	str	r2, [sp, #36]	; 0x24
 8002a76:	f89a 3000 	ldrb.w	r3, [sl]
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	f000 80a1 	beq.w	8002bc2 <_svfiprintf_r+0x1c6>
 8002a80:	2300      	movs	r3, #0
 8002a82:	f04f 32ff 	mov.w	r2, #4294967295
 8002a86:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002a8a:	f10a 0a01 	add.w	sl, sl, #1
 8002a8e:	9304      	str	r3, [sp, #16]
 8002a90:	9307      	str	r3, [sp, #28]
 8002a92:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8002a96:	931a      	str	r3, [sp, #104]	; 0x68
 8002a98:	4654      	mov	r4, sl
 8002a9a:	2205      	movs	r2, #5
 8002a9c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002aa0:	4850      	ldr	r0, [pc, #320]	; (8002be4 <_svfiprintf_r+0x1e8>)
 8002aa2:	f7fd fbbd 	bl	8000220 <memchr>
 8002aa6:	9a04      	ldr	r2, [sp, #16]
 8002aa8:	b9d8      	cbnz	r0, 8002ae2 <_svfiprintf_r+0xe6>
 8002aaa:	06d0      	lsls	r0, r2, #27
 8002aac:	bf44      	itt	mi
 8002aae:	2320      	movmi	r3, #32
 8002ab0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002ab4:	0711      	lsls	r1, r2, #28
 8002ab6:	bf44      	itt	mi
 8002ab8:	232b      	movmi	r3, #43	; 0x2b
 8002aba:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002abe:	f89a 3000 	ldrb.w	r3, [sl]
 8002ac2:	2b2a      	cmp	r3, #42	; 0x2a
 8002ac4:	d015      	beq.n	8002af2 <_svfiprintf_r+0xf6>
 8002ac6:	9a07      	ldr	r2, [sp, #28]
 8002ac8:	4654      	mov	r4, sl
 8002aca:	2000      	movs	r0, #0
 8002acc:	f04f 0c0a 	mov.w	ip, #10
 8002ad0:	4621      	mov	r1, r4
 8002ad2:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002ad6:	3b30      	subs	r3, #48	; 0x30
 8002ad8:	2b09      	cmp	r3, #9
 8002ada:	d94d      	bls.n	8002b78 <_svfiprintf_r+0x17c>
 8002adc:	b1b0      	cbz	r0, 8002b0c <_svfiprintf_r+0x110>
 8002ade:	9207      	str	r2, [sp, #28]
 8002ae0:	e014      	b.n	8002b0c <_svfiprintf_r+0x110>
 8002ae2:	eba0 0308 	sub.w	r3, r0, r8
 8002ae6:	fa09 f303 	lsl.w	r3, r9, r3
 8002aea:	4313      	orrs	r3, r2
 8002aec:	9304      	str	r3, [sp, #16]
 8002aee:	46a2      	mov	sl, r4
 8002af0:	e7d2      	b.n	8002a98 <_svfiprintf_r+0x9c>
 8002af2:	9b03      	ldr	r3, [sp, #12]
 8002af4:	1d19      	adds	r1, r3, #4
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	9103      	str	r1, [sp, #12]
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	bfbb      	ittet	lt
 8002afe:	425b      	neglt	r3, r3
 8002b00:	f042 0202 	orrlt.w	r2, r2, #2
 8002b04:	9307      	strge	r3, [sp, #28]
 8002b06:	9307      	strlt	r3, [sp, #28]
 8002b08:	bfb8      	it	lt
 8002b0a:	9204      	strlt	r2, [sp, #16]
 8002b0c:	7823      	ldrb	r3, [r4, #0]
 8002b0e:	2b2e      	cmp	r3, #46	; 0x2e
 8002b10:	d10c      	bne.n	8002b2c <_svfiprintf_r+0x130>
 8002b12:	7863      	ldrb	r3, [r4, #1]
 8002b14:	2b2a      	cmp	r3, #42	; 0x2a
 8002b16:	d134      	bne.n	8002b82 <_svfiprintf_r+0x186>
 8002b18:	9b03      	ldr	r3, [sp, #12]
 8002b1a:	1d1a      	adds	r2, r3, #4
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	9203      	str	r2, [sp, #12]
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	bfb8      	it	lt
 8002b24:	f04f 33ff 	movlt.w	r3, #4294967295
 8002b28:	3402      	adds	r4, #2
 8002b2a:	9305      	str	r3, [sp, #20]
 8002b2c:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8002bf4 <_svfiprintf_r+0x1f8>
 8002b30:	7821      	ldrb	r1, [r4, #0]
 8002b32:	2203      	movs	r2, #3
 8002b34:	4650      	mov	r0, sl
 8002b36:	f7fd fb73 	bl	8000220 <memchr>
 8002b3a:	b138      	cbz	r0, 8002b4c <_svfiprintf_r+0x150>
 8002b3c:	9b04      	ldr	r3, [sp, #16]
 8002b3e:	eba0 000a 	sub.w	r0, r0, sl
 8002b42:	2240      	movs	r2, #64	; 0x40
 8002b44:	4082      	lsls	r2, r0
 8002b46:	4313      	orrs	r3, r2
 8002b48:	3401      	adds	r4, #1
 8002b4a:	9304      	str	r3, [sp, #16]
 8002b4c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002b50:	4825      	ldr	r0, [pc, #148]	; (8002be8 <_svfiprintf_r+0x1ec>)
 8002b52:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8002b56:	2206      	movs	r2, #6
 8002b58:	f7fd fb62 	bl	8000220 <memchr>
 8002b5c:	2800      	cmp	r0, #0
 8002b5e:	d038      	beq.n	8002bd2 <_svfiprintf_r+0x1d6>
 8002b60:	4b22      	ldr	r3, [pc, #136]	; (8002bec <_svfiprintf_r+0x1f0>)
 8002b62:	bb1b      	cbnz	r3, 8002bac <_svfiprintf_r+0x1b0>
 8002b64:	9b03      	ldr	r3, [sp, #12]
 8002b66:	3307      	adds	r3, #7
 8002b68:	f023 0307 	bic.w	r3, r3, #7
 8002b6c:	3308      	adds	r3, #8
 8002b6e:	9303      	str	r3, [sp, #12]
 8002b70:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002b72:	4433      	add	r3, r6
 8002b74:	9309      	str	r3, [sp, #36]	; 0x24
 8002b76:	e768      	b.n	8002a4a <_svfiprintf_r+0x4e>
 8002b78:	fb0c 3202 	mla	r2, ip, r2, r3
 8002b7c:	460c      	mov	r4, r1
 8002b7e:	2001      	movs	r0, #1
 8002b80:	e7a6      	b.n	8002ad0 <_svfiprintf_r+0xd4>
 8002b82:	2300      	movs	r3, #0
 8002b84:	3401      	adds	r4, #1
 8002b86:	9305      	str	r3, [sp, #20]
 8002b88:	4619      	mov	r1, r3
 8002b8a:	f04f 0c0a 	mov.w	ip, #10
 8002b8e:	4620      	mov	r0, r4
 8002b90:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002b94:	3a30      	subs	r2, #48	; 0x30
 8002b96:	2a09      	cmp	r2, #9
 8002b98:	d903      	bls.n	8002ba2 <_svfiprintf_r+0x1a6>
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d0c6      	beq.n	8002b2c <_svfiprintf_r+0x130>
 8002b9e:	9105      	str	r1, [sp, #20]
 8002ba0:	e7c4      	b.n	8002b2c <_svfiprintf_r+0x130>
 8002ba2:	fb0c 2101 	mla	r1, ip, r1, r2
 8002ba6:	4604      	mov	r4, r0
 8002ba8:	2301      	movs	r3, #1
 8002baa:	e7f0      	b.n	8002b8e <_svfiprintf_r+0x192>
 8002bac:	ab03      	add	r3, sp, #12
 8002bae:	9300      	str	r3, [sp, #0]
 8002bb0:	462a      	mov	r2, r5
 8002bb2:	4b0f      	ldr	r3, [pc, #60]	; (8002bf0 <_svfiprintf_r+0x1f4>)
 8002bb4:	a904      	add	r1, sp, #16
 8002bb6:	4638      	mov	r0, r7
 8002bb8:	f3af 8000 	nop.w
 8002bbc:	1c42      	adds	r2, r0, #1
 8002bbe:	4606      	mov	r6, r0
 8002bc0:	d1d6      	bne.n	8002b70 <_svfiprintf_r+0x174>
 8002bc2:	89ab      	ldrh	r3, [r5, #12]
 8002bc4:	065b      	lsls	r3, r3, #25
 8002bc6:	f53f af2d 	bmi.w	8002a24 <_svfiprintf_r+0x28>
 8002bca:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002bcc:	b01d      	add	sp, #116	; 0x74
 8002bce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002bd2:	ab03      	add	r3, sp, #12
 8002bd4:	9300      	str	r3, [sp, #0]
 8002bd6:	462a      	mov	r2, r5
 8002bd8:	4b05      	ldr	r3, [pc, #20]	; (8002bf0 <_svfiprintf_r+0x1f4>)
 8002bda:	a904      	add	r1, sp, #16
 8002bdc:	4638      	mov	r0, r7
 8002bde:	f000 f879 	bl	8002cd4 <_printf_i>
 8002be2:	e7eb      	b.n	8002bbc <_svfiprintf_r+0x1c0>
 8002be4:	08003084 	.word	0x08003084
 8002be8:	0800308e 	.word	0x0800308e
 8002bec:	00000000 	.word	0x00000000
 8002bf0:	08002949 	.word	0x08002949
 8002bf4:	0800308a 	.word	0x0800308a

08002bf8 <_printf_common>:
 8002bf8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002bfc:	4616      	mov	r6, r2
 8002bfe:	4699      	mov	r9, r3
 8002c00:	688a      	ldr	r2, [r1, #8]
 8002c02:	690b      	ldr	r3, [r1, #16]
 8002c04:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002c08:	4293      	cmp	r3, r2
 8002c0a:	bfb8      	it	lt
 8002c0c:	4613      	movlt	r3, r2
 8002c0e:	6033      	str	r3, [r6, #0]
 8002c10:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002c14:	4607      	mov	r7, r0
 8002c16:	460c      	mov	r4, r1
 8002c18:	b10a      	cbz	r2, 8002c1e <_printf_common+0x26>
 8002c1a:	3301      	adds	r3, #1
 8002c1c:	6033      	str	r3, [r6, #0]
 8002c1e:	6823      	ldr	r3, [r4, #0]
 8002c20:	0699      	lsls	r1, r3, #26
 8002c22:	bf42      	ittt	mi
 8002c24:	6833      	ldrmi	r3, [r6, #0]
 8002c26:	3302      	addmi	r3, #2
 8002c28:	6033      	strmi	r3, [r6, #0]
 8002c2a:	6825      	ldr	r5, [r4, #0]
 8002c2c:	f015 0506 	ands.w	r5, r5, #6
 8002c30:	d106      	bne.n	8002c40 <_printf_common+0x48>
 8002c32:	f104 0a19 	add.w	sl, r4, #25
 8002c36:	68e3      	ldr	r3, [r4, #12]
 8002c38:	6832      	ldr	r2, [r6, #0]
 8002c3a:	1a9b      	subs	r3, r3, r2
 8002c3c:	42ab      	cmp	r3, r5
 8002c3e:	dc26      	bgt.n	8002c8e <_printf_common+0x96>
 8002c40:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8002c44:	1e13      	subs	r3, r2, #0
 8002c46:	6822      	ldr	r2, [r4, #0]
 8002c48:	bf18      	it	ne
 8002c4a:	2301      	movne	r3, #1
 8002c4c:	0692      	lsls	r2, r2, #26
 8002c4e:	d42b      	bmi.n	8002ca8 <_printf_common+0xb0>
 8002c50:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002c54:	4649      	mov	r1, r9
 8002c56:	4638      	mov	r0, r7
 8002c58:	47c0      	blx	r8
 8002c5a:	3001      	adds	r0, #1
 8002c5c:	d01e      	beq.n	8002c9c <_printf_common+0xa4>
 8002c5e:	6823      	ldr	r3, [r4, #0]
 8002c60:	6922      	ldr	r2, [r4, #16]
 8002c62:	f003 0306 	and.w	r3, r3, #6
 8002c66:	2b04      	cmp	r3, #4
 8002c68:	bf02      	ittt	eq
 8002c6a:	68e5      	ldreq	r5, [r4, #12]
 8002c6c:	6833      	ldreq	r3, [r6, #0]
 8002c6e:	1aed      	subeq	r5, r5, r3
 8002c70:	68a3      	ldr	r3, [r4, #8]
 8002c72:	bf0c      	ite	eq
 8002c74:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002c78:	2500      	movne	r5, #0
 8002c7a:	4293      	cmp	r3, r2
 8002c7c:	bfc4      	itt	gt
 8002c7e:	1a9b      	subgt	r3, r3, r2
 8002c80:	18ed      	addgt	r5, r5, r3
 8002c82:	2600      	movs	r6, #0
 8002c84:	341a      	adds	r4, #26
 8002c86:	42b5      	cmp	r5, r6
 8002c88:	d11a      	bne.n	8002cc0 <_printf_common+0xc8>
 8002c8a:	2000      	movs	r0, #0
 8002c8c:	e008      	b.n	8002ca0 <_printf_common+0xa8>
 8002c8e:	2301      	movs	r3, #1
 8002c90:	4652      	mov	r2, sl
 8002c92:	4649      	mov	r1, r9
 8002c94:	4638      	mov	r0, r7
 8002c96:	47c0      	blx	r8
 8002c98:	3001      	adds	r0, #1
 8002c9a:	d103      	bne.n	8002ca4 <_printf_common+0xac>
 8002c9c:	f04f 30ff 	mov.w	r0, #4294967295
 8002ca0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002ca4:	3501      	adds	r5, #1
 8002ca6:	e7c6      	b.n	8002c36 <_printf_common+0x3e>
 8002ca8:	18e1      	adds	r1, r4, r3
 8002caa:	1c5a      	adds	r2, r3, #1
 8002cac:	2030      	movs	r0, #48	; 0x30
 8002cae:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002cb2:	4422      	add	r2, r4
 8002cb4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002cb8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002cbc:	3302      	adds	r3, #2
 8002cbe:	e7c7      	b.n	8002c50 <_printf_common+0x58>
 8002cc0:	2301      	movs	r3, #1
 8002cc2:	4622      	mov	r2, r4
 8002cc4:	4649      	mov	r1, r9
 8002cc6:	4638      	mov	r0, r7
 8002cc8:	47c0      	blx	r8
 8002cca:	3001      	adds	r0, #1
 8002ccc:	d0e6      	beq.n	8002c9c <_printf_common+0xa4>
 8002cce:	3601      	adds	r6, #1
 8002cd0:	e7d9      	b.n	8002c86 <_printf_common+0x8e>
	...

08002cd4 <_printf_i>:
 8002cd4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002cd8:	7e0f      	ldrb	r7, [r1, #24]
 8002cda:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8002cdc:	2f78      	cmp	r7, #120	; 0x78
 8002cde:	4691      	mov	r9, r2
 8002ce0:	4680      	mov	r8, r0
 8002ce2:	460c      	mov	r4, r1
 8002ce4:	469a      	mov	sl, r3
 8002ce6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8002cea:	d807      	bhi.n	8002cfc <_printf_i+0x28>
 8002cec:	2f62      	cmp	r7, #98	; 0x62
 8002cee:	d80a      	bhi.n	8002d06 <_printf_i+0x32>
 8002cf0:	2f00      	cmp	r7, #0
 8002cf2:	f000 80d4 	beq.w	8002e9e <_printf_i+0x1ca>
 8002cf6:	2f58      	cmp	r7, #88	; 0x58
 8002cf8:	f000 80c0 	beq.w	8002e7c <_printf_i+0x1a8>
 8002cfc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002d00:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8002d04:	e03a      	b.n	8002d7c <_printf_i+0xa8>
 8002d06:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8002d0a:	2b15      	cmp	r3, #21
 8002d0c:	d8f6      	bhi.n	8002cfc <_printf_i+0x28>
 8002d0e:	a101      	add	r1, pc, #4	; (adr r1, 8002d14 <_printf_i+0x40>)
 8002d10:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8002d14:	08002d6d 	.word	0x08002d6d
 8002d18:	08002d81 	.word	0x08002d81
 8002d1c:	08002cfd 	.word	0x08002cfd
 8002d20:	08002cfd 	.word	0x08002cfd
 8002d24:	08002cfd 	.word	0x08002cfd
 8002d28:	08002cfd 	.word	0x08002cfd
 8002d2c:	08002d81 	.word	0x08002d81
 8002d30:	08002cfd 	.word	0x08002cfd
 8002d34:	08002cfd 	.word	0x08002cfd
 8002d38:	08002cfd 	.word	0x08002cfd
 8002d3c:	08002cfd 	.word	0x08002cfd
 8002d40:	08002e85 	.word	0x08002e85
 8002d44:	08002dad 	.word	0x08002dad
 8002d48:	08002e3f 	.word	0x08002e3f
 8002d4c:	08002cfd 	.word	0x08002cfd
 8002d50:	08002cfd 	.word	0x08002cfd
 8002d54:	08002ea7 	.word	0x08002ea7
 8002d58:	08002cfd 	.word	0x08002cfd
 8002d5c:	08002dad 	.word	0x08002dad
 8002d60:	08002cfd 	.word	0x08002cfd
 8002d64:	08002cfd 	.word	0x08002cfd
 8002d68:	08002e47 	.word	0x08002e47
 8002d6c:	682b      	ldr	r3, [r5, #0]
 8002d6e:	1d1a      	adds	r2, r3, #4
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	602a      	str	r2, [r5, #0]
 8002d74:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002d78:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002d7c:	2301      	movs	r3, #1
 8002d7e:	e09f      	b.n	8002ec0 <_printf_i+0x1ec>
 8002d80:	6820      	ldr	r0, [r4, #0]
 8002d82:	682b      	ldr	r3, [r5, #0]
 8002d84:	0607      	lsls	r7, r0, #24
 8002d86:	f103 0104 	add.w	r1, r3, #4
 8002d8a:	6029      	str	r1, [r5, #0]
 8002d8c:	d501      	bpl.n	8002d92 <_printf_i+0xbe>
 8002d8e:	681e      	ldr	r6, [r3, #0]
 8002d90:	e003      	b.n	8002d9a <_printf_i+0xc6>
 8002d92:	0646      	lsls	r6, r0, #25
 8002d94:	d5fb      	bpl.n	8002d8e <_printf_i+0xba>
 8002d96:	f9b3 6000 	ldrsh.w	r6, [r3]
 8002d9a:	2e00      	cmp	r6, #0
 8002d9c:	da03      	bge.n	8002da6 <_printf_i+0xd2>
 8002d9e:	232d      	movs	r3, #45	; 0x2d
 8002da0:	4276      	negs	r6, r6
 8002da2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002da6:	485a      	ldr	r0, [pc, #360]	; (8002f10 <_printf_i+0x23c>)
 8002da8:	230a      	movs	r3, #10
 8002daa:	e012      	b.n	8002dd2 <_printf_i+0xfe>
 8002dac:	682b      	ldr	r3, [r5, #0]
 8002dae:	6820      	ldr	r0, [r4, #0]
 8002db0:	1d19      	adds	r1, r3, #4
 8002db2:	6029      	str	r1, [r5, #0]
 8002db4:	0605      	lsls	r5, r0, #24
 8002db6:	d501      	bpl.n	8002dbc <_printf_i+0xe8>
 8002db8:	681e      	ldr	r6, [r3, #0]
 8002dba:	e002      	b.n	8002dc2 <_printf_i+0xee>
 8002dbc:	0641      	lsls	r1, r0, #25
 8002dbe:	d5fb      	bpl.n	8002db8 <_printf_i+0xe4>
 8002dc0:	881e      	ldrh	r6, [r3, #0]
 8002dc2:	4853      	ldr	r0, [pc, #332]	; (8002f10 <_printf_i+0x23c>)
 8002dc4:	2f6f      	cmp	r7, #111	; 0x6f
 8002dc6:	bf0c      	ite	eq
 8002dc8:	2308      	moveq	r3, #8
 8002dca:	230a      	movne	r3, #10
 8002dcc:	2100      	movs	r1, #0
 8002dce:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8002dd2:	6865      	ldr	r5, [r4, #4]
 8002dd4:	60a5      	str	r5, [r4, #8]
 8002dd6:	2d00      	cmp	r5, #0
 8002dd8:	bfa2      	ittt	ge
 8002dda:	6821      	ldrge	r1, [r4, #0]
 8002ddc:	f021 0104 	bicge.w	r1, r1, #4
 8002de0:	6021      	strge	r1, [r4, #0]
 8002de2:	b90e      	cbnz	r6, 8002de8 <_printf_i+0x114>
 8002de4:	2d00      	cmp	r5, #0
 8002de6:	d04b      	beq.n	8002e80 <_printf_i+0x1ac>
 8002de8:	4615      	mov	r5, r2
 8002dea:	fbb6 f1f3 	udiv	r1, r6, r3
 8002dee:	fb03 6711 	mls	r7, r3, r1, r6
 8002df2:	5dc7      	ldrb	r7, [r0, r7]
 8002df4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8002df8:	4637      	mov	r7, r6
 8002dfa:	42bb      	cmp	r3, r7
 8002dfc:	460e      	mov	r6, r1
 8002dfe:	d9f4      	bls.n	8002dea <_printf_i+0x116>
 8002e00:	2b08      	cmp	r3, #8
 8002e02:	d10b      	bne.n	8002e1c <_printf_i+0x148>
 8002e04:	6823      	ldr	r3, [r4, #0]
 8002e06:	07de      	lsls	r6, r3, #31
 8002e08:	d508      	bpl.n	8002e1c <_printf_i+0x148>
 8002e0a:	6923      	ldr	r3, [r4, #16]
 8002e0c:	6861      	ldr	r1, [r4, #4]
 8002e0e:	4299      	cmp	r1, r3
 8002e10:	bfde      	ittt	le
 8002e12:	2330      	movle	r3, #48	; 0x30
 8002e14:	f805 3c01 	strble.w	r3, [r5, #-1]
 8002e18:	f105 35ff 	addle.w	r5, r5, #4294967295
 8002e1c:	1b52      	subs	r2, r2, r5
 8002e1e:	6122      	str	r2, [r4, #16]
 8002e20:	f8cd a000 	str.w	sl, [sp]
 8002e24:	464b      	mov	r3, r9
 8002e26:	aa03      	add	r2, sp, #12
 8002e28:	4621      	mov	r1, r4
 8002e2a:	4640      	mov	r0, r8
 8002e2c:	f7ff fee4 	bl	8002bf8 <_printf_common>
 8002e30:	3001      	adds	r0, #1
 8002e32:	d14a      	bne.n	8002eca <_printf_i+0x1f6>
 8002e34:	f04f 30ff 	mov.w	r0, #4294967295
 8002e38:	b004      	add	sp, #16
 8002e3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002e3e:	6823      	ldr	r3, [r4, #0]
 8002e40:	f043 0320 	orr.w	r3, r3, #32
 8002e44:	6023      	str	r3, [r4, #0]
 8002e46:	4833      	ldr	r0, [pc, #204]	; (8002f14 <_printf_i+0x240>)
 8002e48:	2778      	movs	r7, #120	; 0x78
 8002e4a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8002e4e:	6823      	ldr	r3, [r4, #0]
 8002e50:	6829      	ldr	r1, [r5, #0]
 8002e52:	061f      	lsls	r7, r3, #24
 8002e54:	f851 6b04 	ldr.w	r6, [r1], #4
 8002e58:	d402      	bmi.n	8002e60 <_printf_i+0x18c>
 8002e5a:	065f      	lsls	r7, r3, #25
 8002e5c:	bf48      	it	mi
 8002e5e:	b2b6      	uxthmi	r6, r6
 8002e60:	07df      	lsls	r7, r3, #31
 8002e62:	bf48      	it	mi
 8002e64:	f043 0320 	orrmi.w	r3, r3, #32
 8002e68:	6029      	str	r1, [r5, #0]
 8002e6a:	bf48      	it	mi
 8002e6c:	6023      	strmi	r3, [r4, #0]
 8002e6e:	b91e      	cbnz	r6, 8002e78 <_printf_i+0x1a4>
 8002e70:	6823      	ldr	r3, [r4, #0]
 8002e72:	f023 0320 	bic.w	r3, r3, #32
 8002e76:	6023      	str	r3, [r4, #0]
 8002e78:	2310      	movs	r3, #16
 8002e7a:	e7a7      	b.n	8002dcc <_printf_i+0xf8>
 8002e7c:	4824      	ldr	r0, [pc, #144]	; (8002f10 <_printf_i+0x23c>)
 8002e7e:	e7e4      	b.n	8002e4a <_printf_i+0x176>
 8002e80:	4615      	mov	r5, r2
 8002e82:	e7bd      	b.n	8002e00 <_printf_i+0x12c>
 8002e84:	682b      	ldr	r3, [r5, #0]
 8002e86:	6826      	ldr	r6, [r4, #0]
 8002e88:	6961      	ldr	r1, [r4, #20]
 8002e8a:	1d18      	adds	r0, r3, #4
 8002e8c:	6028      	str	r0, [r5, #0]
 8002e8e:	0635      	lsls	r5, r6, #24
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	d501      	bpl.n	8002e98 <_printf_i+0x1c4>
 8002e94:	6019      	str	r1, [r3, #0]
 8002e96:	e002      	b.n	8002e9e <_printf_i+0x1ca>
 8002e98:	0670      	lsls	r0, r6, #25
 8002e9a:	d5fb      	bpl.n	8002e94 <_printf_i+0x1c0>
 8002e9c:	8019      	strh	r1, [r3, #0]
 8002e9e:	2300      	movs	r3, #0
 8002ea0:	6123      	str	r3, [r4, #16]
 8002ea2:	4615      	mov	r5, r2
 8002ea4:	e7bc      	b.n	8002e20 <_printf_i+0x14c>
 8002ea6:	682b      	ldr	r3, [r5, #0]
 8002ea8:	1d1a      	adds	r2, r3, #4
 8002eaa:	602a      	str	r2, [r5, #0]
 8002eac:	681d      	ldr	r5, [r3, #0]
 8002eae:	6862      	ldr	r2, [r4, #4]
 8002eb0:	2100      	movs	r1, #0
 8002eb2:	4628      	mov	r0, r5
 8002eb4:	f7fd f9b4 	bl	8000220 <memchr>
 8002eb8:	b108      	cbz	r0, 8002ebe <_printf_i+0x1ea>
 8002eba:	1b40      	subs	r0, r0, r5
 8002ebc:	6060      	str	r0, [r4, #4]
 8002ebe:	6863      	ldr	r3, [r4, #4]
 8002ec0:	6123      	str	r3, [r4, #16]
 8002ec2:	2300      	movs	r3, #0
 8002ec4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002ec8:	e7aa      	b.n	8002e20 <_printf_i+0x14c>
 8002eca:	6923      	ldr	r3, [r4, #16]
 8002ecc:	462a      	mov	r2, r5
 8002ece:	4649      	mov	r1, r9
 8002ed0:	4640      	mov	r0, r8
 8002ed2:	47d0      	blx	sl
 8002ed4:	3001      	adds	r0, #1
 8002ed6:	d0ad      	beq.n	8002e34 <_printf_i+0x160>
 8002ed8:	6823      	ldr	r3, [r4, #0]
 8002eda:	079b      	lsls	r3, r3, #30
 8002edc:	d413      	bmi.n	8002f06 <_printf_i+0x232>
 8002ede:	68e0      	ldr	r0, [r4, #12]
 8002ee0:	9b03      	ldr	r3, [sp, #12]
 8002ee2:	4298      	cmp	r0, r3
 8002ee4:	bfb8      	it	lt
 8002ee6:	4618      	movlt	r0, r3
 8002ee8:	e7a6      	b.n	8002e38 <_printf_i+0x164>
 8002eea:	2301      	movs	r3, #1
 8002eec:	4632      	mov	r2, r6
 8002eee:	4649      	mov	r1, r9
 8002ef0:	4640      	mov	r0, r8
 8002ef2:	47d0      	blx	sl
 8002ef4:	3001      	adds	r0, #1
 8002ef6:	d09d      	beq.n	8002e34 <_printf_i+0x160>
 8002ef8:	3501      	adds	r5, #1
 8002efa:	68e3      	ldr	r3, [r4, #12]
 8002efc:	9903      	ldr	r1, [sp, #12]
 8002efe:	1a5b      	subs	r3, r3, r1
 8002f00:	42ab      	cmp	r3, r5
 8002f02:	dcf2      	bgt.n	8002eea <_printf_i+0x216>
 8002f04:	e7eb      	b.n	8002ede <_printf_i+0x20a>
 8002f06:	2500      	movs	r5, #0
 8002f08:	f104 0619 	add.w	r6, r4, #25
 8002f0c:	e7f5      	b.n	8002efa <_printf_i+0x226>
 8002f0e:	bf00      	nop
 8002f10:	08003095 	.word	0x08003095
 8002f14:	080030a6 	.word	0x080030a6

08002f18 <memmove>:
 8002f18:	4288      	cmp	r0, r1
 8002f1a:	b510      	push	{r4, lr}
 8002f1c:	eb01 0402 	add.w	r4, r1, r2
 8002f20:	d902      	bls.n	8002f28 <memmove+0x10>
 8002f22:	4284      	cmp	r4, r0
 8002f24:	4623      	mov	r3, r4
 8002f26:	d807      	bhi.n	8002f38 <memmove+0x20>
 8002f28:	1e43      	subs	r3, r0, #1
 8002f2a:	42a1      	cmp	r1, r4
 8002f2c:	d008      	beq.n	8002f40 <memmove+0x28>
 8002f2e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8002f32:	f803 2f01 	strb.w	r2, [r3, #1]!
 8002f36:	e7f8      	b.n	8002f2a <memmove+0x12>
 8002f38:	4402      	add	r2, r0
 8002f3a:	4601      	mov	r1, r0
 8002f3c:	428a      	cmp	r2, r1
 8002f3e:	d100      	bne.n	8002f42 <memmove+0x2a>
 8002f40:	bd10      	pop	{r4, pc}
 8002f42:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8002f46:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8002f4a:	e7f7      	b.n	8002f3c <memmove+0x24>

08002f4c <_sbrk_r>:
 8002f4c:	b538      	push	{r3, r4, r5, lr}
 8002f4e:	4d06      	ldr	r5, [pc, #24]	; (8002f68 <_sbrk_r+0x1c>)
 8002f50:	2300      	movs	r3, #0
 8002f52:	4604      	mov	r4, r0
 8002f54:	4608      	mov	r0, r1
 8002f56:	602b      	str	r3, [r5, #0]
 8002f58:	f000 f84e 	bl	8002ff8 <_sbrk>
 8002f5c:	1c43      	adds	r3, r0, #1
 8002f5e:	d102      	bne.n	8002f66 <_sbrk_r+0x1a>
 8002f60:	682b      	ldr	r3, [r5, #0]
 8002f62:	b103      	cbz	r3, 8002f66 <_sbrk_r+0x1a>
 8002f64:	6023      	str	r3, [r4, #0]
 8002f66:	bd38      	pop	{r3, r4, r5, pc}
 8002f68:	200001f4 	.word	0x200001f4

08002f6c <memcpy>:
 8002f6c:	440a      	add	r2, r1
 8002f6e:	4291      	cmp	r1, r2
 8002f70:	f100 33ff 	add.w	r3, r0, #4294967295
 8002f74:	d100      	bne.n	8002f78 <memcpy+0xc>
 8002f76:	4770      	bx	lr
 8002f78:	b510      	push	{r4, lr}
 8002f7a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002f7e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002f82:	4291      	cmp	r1, r2
 8002f84:	d1f9      	bne.n	8002f7a <memcpy+0xe>
 8002f86:	bd10      	pop	{r4, pc}

08002f88 <_realloc_r>:
 8002f88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002f8c:	4680      	mov	r8, r0
 8002f8e:	4614      	mov	r4, r2
 8002f90:	460e      	mov	r6, r1
 8002f92:	b921      	cbnz	r1, 8002f9e <_realloc_r+0x16>
 8002f94:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002f98:	4611      	mov	r1, r2
 8002f9a:	f7ff bc49 	b.w	8002830 <_malloc_r>
 8002f9e:	b92a      	cbnz	r2, 8002fac <_realloc_r+0x24>
 8002fa0:	f7ff fbda 	bl	8002758 <_free_r>
 8002fa4:	4625      	mov	r5, r4
 8002fa6:	4628      	mov	r0, r5
 8002fa8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002fac:	f000 f81b 	bl	8002fe6 <_malloc_usable_size_r>
 8002fb0:	4284      	cmp	r4, r0
 8002fb2:	4607      	mov	r7, r0
 8002fb4:	d802      	bhi.n	8002fbc <_realloc_r+0x34>
 8002fb6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8002fba:	d812      	bhi.n	8002fe2 <_realloc_r+0x5a>
 8002fbc:	4621      	mov	r1, r4
 8002fbe:	4640      	mov	r0, r8
 8002fc0:	f7ff fc36 	bl	8002830 <_malloc_r>
 8002fc4:	4605      	mov	r5, r0
 8002fc6:	2800      	cmp	r0, #0
 8002fc8:	d0ed      	beq.n	8002fa6 <_realloc_r+0x1e>
 8002fca:	42bc      	cmp	r4, r7
 8002fcc:	4622      	mov	r2, r4
 8002fce:	4631      	mov	r1, r6
 8002fd0:	bf28      	it	cs
 8002fd2:	463a      	movcs	r2, r7
 8002fd4:	f7ff ffca 	bl	8002f6c <memcpy>
 8002fd8:	4631      	mov	r1, r6
 8002fda:	4640      	mov	r0, r8
 8002fdc:	f7ff fbbc 	bl	8002758 <_free_r>
 8002fe0:	e7e1      	b.n	8002fa6 <_realloc_r+0x1e>
 8002fe2:	4635      	mov	r5, r6
 8002fe4:	e7df      	b.n	8002fa6 <_realloc_r+0x1e>

08002fe6 <_malloc_usable_size_r>:
 8002fe6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002fea:	1f18      	subs	r0, r3, #4
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	bfbc      	itt	lt
 8002ff0:	580b      	ldrlt	r3, [r1, r0]
 8002ff2:	18c0      	addlt	r0, r0, r3
 8002ff4:	4770      	bx	lr
	...

08002ff8 <_sbrk>:
 8002ff8:	4a04      	ldr	r2, [pc, #16]	; (800300c <_sbrk+0x14>)
 8002ffa:	6811      	ldr	r1, [r2, #0]
 8002ffc:	4603      	mov	r3, r0
 8002ffe:	b909      	cbnz	r1, 8003004 <_sbrk+0xc>
 8003000:	4903      	ldr	r1, [pc, #12]	; (8003010 <_sbrk+0x18>)
 8003002:	6011      	str	r1, [r2, #0]
 8003004:	6810      	ldr	r0, [r2, #0]
 8003006:	4403      	add	r3, r0
 8003008:	6013      	str	r3, [r2, #0]
 800300a:	4770      	bx	lr
 800300c:	20000204 	.word	0x20000204
 8003010:	20000208 	.word	0x20000208

08003014 <_init>:
 8003014:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003016:	bf00      	nop
 8003018:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800301a:	bc08      	pop	{r3}
 800301c:	469e      	mov	lr, r3
 800301e:	4770      	bx	lr

08003020 <_fini>:
 8003020:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003022:	bf00      	nop
 8003024:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003026:	bc08      	pop	{r3}
 8003028:	469e      	mov	lr, r3
 800302a:	4770      	bx	lr
