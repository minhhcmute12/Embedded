
25_M_STM32F4xx_GPIO_But.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001a8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000008dc  080001a8  080001a8  000101a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000a84  08000a8c  00010a8c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000a84  08000a84  00010a8c  2**0
                  CONTENTS
  4 .ARM          00000000  08000a84  08000a84  00010a8c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000a84  08000a8c  00010a8c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000a84  08000a84  00010a84  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000a88  08000a88  00010a88  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010a8c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00010a8c  2**0
                  CONTENTS
 10 .bss          0000001c  20000000  20000000  00020000  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000001c  2000001c  00020000  2**0
                  ALLOC
 12 .ARM.attributes 0000002a  00000000  00000000  00010a8c  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00010ab6  2**0
                  CONTENTS, READONLY
 14 .debug_info   00000a97  00000000  00000000  00010af9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 0000031c  00000000  00000000  00011590  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000000d0  00000000  00000000  000118b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000092  00000000  00000000  00011980  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00002240  00000000  00000000  00011a12  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00001119  00000000  00000000  00013c52  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    00008b23  00000000  00000000  00014d6b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  000002b0  00000000  00000000  0001d890  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000061  00000000  00000000  0001db40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a8 <__do_global_dtors_aux>:
 80001a8:	b510      	push	{r4, lr}
 80001aa:	4c05      	ldr	r4, [pc, #20]	; (80001c0 <__do_global_dtors_aux+0x18>)
 80001ac:	7823      	ldrb	r3, [r4, #0]
 80001ae:	b933      	cbnz	r3, 80001be <__do_global_dtors_aux+0x16>
 80001b0:	4b04      	ldr	r3, [pc, #16]	; (80001c4 <__do_global_dtors_aux+0x1c>)
 80001b2:	b113      	cbz	r3, 80001ba <__do_global_dtors_aux+0x12>
 80001b4:	4804      	ldr	r0, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x20>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	2301      	movs	r3, #1
 80001bc:	7023      	strb	r3, [r4, #0]
 80001be:	bd10      	pop	{r4, pc}
 80001c0:	20000000 	.word	0x20000000
 80001c4:	00000000 	.word	0x00000000
 80001c8:	08000a6c 	.word	0x08000a6c

080001cc <frame_dummy>:
 80001cc:	b508      	push	{r3, lr}
 80001ce:	4b03      	ldr	r3, [pc, #12]	; (80001dc <frame_dummy+0x10>)
 80001d0:	b11b      	cbz	r3, 80001da <frame_dummy+0xe>
 80001d2:	4903      	ldr	r1, [pc, #12]	; (80001e0 <frame_dummy+0x14>)
 80001d4:	4803      	ldr	r0, [pc, #12]	; (80001e4 <frame_dummy+0x18>)
 80001d6:	f3af 8000 	nop.w
 80001da:	bd08      	pop	{r3, pc}
 80001dc:	00000000 	.word	0x00000000
 80001e0:	20000004 	.word	0x20000004
 80001e4:	08000a6c 	.word	0x08000a6c

080001e8 <GPIO_PeriClockControl>:
 * @return		- none
 *
 * @Note 		- none
 */
void GPIO_PeriClockControl(GPIO_RegDef_t *pGPIOx, uint8_t EnorDI)
{
 80001e8:	b480      	push	{r7}
 80001ea:	b083      	sub	sp, #12
 80001ec:	af00      	add	r7, sp, #0
 80001ee:	6078      	str	r0, [r7, #4]
 80001f0:	460b      	mov	r3, r1
 80001f2:	70fb      	strb	r3, [r7, #3]
	if(EnorDI == ENABLE)
 80001f4:	78fb      	ldrb	r3, [r7, #3]
 80001f6:	2b01      	cmp	r3, #1
 80001f8:	d162      	bne.n	80002c0 <GPIO_PeriClockControl+0xd8>
	{
		if(pGPIOx == GPIOA)
 80001fa:	687b      	ldr	r3, [r7, #4]
 80001fc:	4a64      	ldr	r2, [pc, #400]	; (8000390 <GPIO_PeriClockControl+0x1a8>)
 80001fe:	4293      	cmp	r3, r2
 8000200:	d106      	bne.n	8000210 <GPIO_PeriClockControl+0x28>
		{
			GPIOA_PCLK_EN();			//Hàm đã đc define trong file stm32f407xx.h
 8000202:	4b64      	ldr	r3, [pc, #400]	; (8000394 <GPIO_PeriClockControl+0x1ac>)
 8000204:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000206:	4a63      	ldr	r2, [pc, #396]	; (8000394 <GPIO_PeriClockControl+0x1ac>)
 8000208:	f043 0301 	orr.w	r3, r3, #1
 800020c:	6313      	str	r3, [r2, #48]	; 0x30
		else if(pGPIOx == GPIOI)
		{
			GPIOI_PCLK_DI();
		}
	}
}
 800020e:	e0b9      	b.n	8000384 <GPIO_PeriClockControl+0x19c>
		else if(pGPIOx == GPIOB)
 8000210:	687b      	ldr	r3, [r7, #4]
 8000212:	4a61      	ldr	r2, [pc, #388]	; (8000398 <GPIO_PeriClockControl+0x1b0>)
 8000214:	4293      	cmp	r3, r2
 8000216:	d106      	bne.n	8000226 <GPIO_PeriClockControl+0x3e>
			GPIOB_PCLK_EN();
 8000218:	4b5e      	ldr	r3, [pc, #376]	; (8000394 <GPIO_PeriClockControl+0x1ac>)
 800021a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800021c:	4a5d      	ldr	r2, [pc, #372]	; (8000394 <GPIO_PeriClockControl+0x1ac>)
 800021e:	f043 0302 	orr.w	r3, r3, #2
 8000222:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000224:	e0ae      	b.n	8000384 <GPIO_PeriClockControl+0x19c>
		else if(pGPIOx == GPIOC)
 8000226:	687b      	ldr	r3, [r7, #4]
 8000228:	4a5c      	ldr	r2, [pc, #368]	; (800039c <GPIO_PeriClockControl+0x1b4>)
 800022a:	4293      	cmp	r3, r2
 800022c:	d106      	bne.n	800023c <GPIO_PeriClockControl+0x54>
			GPIOC_PCLK_EN();
 800022e:	4b59      	ldr	r3, [pc, #356]	; (8000394 <GPIO_PeriClockControl+0x1ac>)
 8000230:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000232:	4a58      	ldr	r2, [pc, #352]	; (8000394 <GPIO_PeriClockControl+0x1ac>)
 8000234:	f043 0304 	orr.w	r3, r3, #4
 8000238:	6313      	str	r3, [r2, #48]	; 0x30
}
 800023a:	e0a3      	b.n	8000384 <GPIO_PeriClockControl+0x19c>
		else if(pGPIOx == GPIOD)
 800023c:	687b      	ldr	r3, [r7, #4]
 800023e:	4a58      	ldr	r2, [pc, #352]	; (80003a0 <GPIO_PeriClockControl+0x1b8>)
 8000240:	4293      	cmp	r3, r2
 8000242:	d106      	bne.n	8000252 <GPIO_PeriClockControl+0x6a>
			GPIOD_PCLK_EN();
 8000244:	4b53      	ldr	r3, [pc, #332]	; (8000394 <GPIO_PeriClockControl+0x1ac>)
 8000246:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000248:	4a52      	ldr	r2, [pc, #328]	; (8000394 <GPIO_PeriClockControl+0x1ac>)
 800024a:	f043 0308 	orr.w	r3, r3, #8
 800024e:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000250:	e098      	b.n	8000384 <GPIO_PeriClockControl+0x19c>
		else if(pGPIOx == GPIOE)
 8000252:	687b      	ldr	r3, [r7, #4]
 8000254:	4a53      	ldr	r2, [pc, #332]	; (80003a4 <GPIO_PeriClockControl+0x1bc>)
 8000256:	4293      	cmp	r3, r2
 8000258:	d106      	bne.n	8000268 <GPIO_PeriClockControl+0x80>
			GPIOE_PCLK_EN();
 800025a:	4b4e      	ldr	r3, [pc, #312]	; (8000394 <GPIO_PeriClockControl+0x1ac>)
 800025c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800025e:	4a4d      	ldr	r2, [pc, #308]	; (8000394 <GPIO_PeriClockControl+0x1ac>)
 8000260:	f043 0310 	orr.w	r3, r3, #16
 8000264:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000266:	e08d      	b.n	8000384 <GPIO_PeriClockControl+0x19c>
		else if(pGPIOx == GPIOF)
 8000268:	687b      	ldr	r3, [r7, #4]
 800026a:	4a4f      	ldr	r2, [pc, #316]	; (80003a8 <GPIO_PeriClockControl+0x1c0>)
 800026c:	4293      	cmp	r3, r2
 800026e:	d106      	bne.n	800027e <GPIO_PeriClockControl+0x96>
			GPIOF_PCLK_EN();
 8000270:	4b48      	ldr	r3, [pc, #288]	; (8000394 <GPIO_PeriClockControl+0x1ac>)
 8000272:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000274:	4a47      	ldr	r2, [pc, #284]	; (8000394 <GPIO_PeriClockControl+0x1ac>)
 8000276:	f043 0320 	orr.w	r3, r3, #32
 800027a:	6313      	str	r3, [r2, #48]	; 0x30
}
 800027c:	e082      	b.n	8000384 <GPIO_PeriClockControl+0x19c>
		else if(pGPIOx == GPIOG)
 800027e:	687b      	ldr	r3, [r7, #4]
 8000280:	4a4a      	ldr	r2, [pc, #296]	; (80003ac <GPIO_PeriClockControl+0x1c4>)
 8000282:	4293      	cmp	r3, r2
 8000284:	d106      	bne.n	8000294 <GPIO_PeriClockControl+0xac>
			GPIOG_PCLK_EN();
 8000286:	4b43      	ldr	r3, [pc, #268]	; (8000394 <GPIO_PeriClockControl+0x1ac>)
 8000288:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800028a:	4a42      	ldr	r2, [pc, #264]	; (8000394 <GPIO_PeriClockControl+0x1ac>)
 800028c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000290:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000292:	e077      	b.n	8000384 <GPIO_PeriClockControl+0x19c>
		else if(pGPIOx == GPIOH)
 8000294:	687b      	ldr	r3, [r7, #4]
 8000296:	4a46      	ldr	r2, [pc, #280]	; (80003b0 <GPIO_PeriClockControl+0x1c8>)
 8000298:	4293      	cmp	r3, r2
 800029a:	d106      	bne.n	80002aa <GPIO_PeriClockControl+0xc2>
			GPIOH_PCLK_EN();
 800029c:	4b3d      	ldr	r3, [pc, #244]	; (8000394 <GPIO_PeriClockControl+0x1ac>)
 800029e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80002a0:	4a3c      	ldr	r2, [pc, #240]	; (8000394 <GPIO_PeriClockControl+0x1ac>)
 80002a2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80002a6:	6313      	str	r3, [r2, #48]	; 0x30
}
 80002a8:	e06c      	b.n	8000384 <GPIO_PeriClockControl+0x19c>
		else if(pGPIOx == GPIOI)
 80002aa:	687b      	ldr	r3, [r7, #4]
 80002ac:	4a41      	ldr	r2, [pc, #260]	; (80003b4 <GPIO_PeriClockControl+0x1cc>)
 80002ae:	4293      	cmp	r3, r2
 80002b0:	d168      	bne.n	8000384 <GPIO_PeriClockControl+0x19c>
			GPIOI_PCLK_EN();
 80002b2:	4b38      	ldr	r3, [pc, #224]	; (8000394 <GPIO_PeriClockControl+0x1ac>)
 80002b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80002b6:	4a37      	ldr	r2, [pc, #220]	; (8000394 <GPIO_PeriClockControl+0x1ac>)
 80002b8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80002bc:	6313      	str	r3, [r2, #48]	; 0x30
}
 80002be:	e061      	b.n	8000384 <GPIO_PeriClockControl+0x19c>
		if(pGPIOx == GPIOA)
 80002c0:	687b      	ldr	r3, [r7, #4]
 80002c2:	4a33      	ldr	r2, [pc, #204]	; (8000390 <GPIO_PeriClockControl+0x1a8>)
 80002c4:	4293      	cmp	r3, r2
 80002c6:	d106      	bne.n	80002d6 <GPIO_PeriClockControl+0xee>
			GPIOA_PCLK_DI();			//Hàm đã đc define trong file stm32f407xx.h
 80002c8:	4b32      	ldr	r3, [pc, #200]	; (8000394 <GPIO_PeriClockControl+0x1ac>)
 80002ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80002cc:	4a31      	ldr	r2, [pc, #196]	; (8000394 <GPIO_PeriClockControl+0x1ac>)
 80002ce:	f023 0301 	bic.w	r3, r3, #1
 80002d2:	6313      	str	r3, [r2, #48]	; 0x30
}
 80002d4:	e056      	b.n	8000384 <GPIO_PeriClockControl+0x19c>
		else if(pGPIOx == GPIOB)
 80002d6:	687b      	ldr	r3, [r7, #4]
 80002d8:	4a2f      	ldr	r2, [pc, #188]	; (8000398 <GPIO_PeriClockControl+0x1b0>)
 80002da:	4293      	cmp	r3, r2
 80002dc:	d106      	bne.n	80002ec <GPIO_PeriClockControl+0x104>
			GPIOB_PCLK_DI();
 80002de:	4b2d      	ldr	r3, [pc, #180]	; (8000394 <GPIO_PeriClockControl+0x1ac>)
 80002e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80002e2:	4a2c      	ldr	r2, [pc, #176]	; (8000394 <GPIO_PeriClockControl+0x1ac>)
 80002e4:	f023 0302 	bic.w	r3, r3, #2
 80002e8:	6313      	str	r3, [r2, #48]	; 0x30
}
 80002ea:	e04b      	b.n	8000384 <GPIO_PeriClockControl+0x19c>
		else if(pGPIOx == GPIOC)
 80002ec:	687b      	ldr	r3, [r7, #4]
 80002ee:	4a2b      	ldr	r2, [pc, #172]	; (800039c <GPIO_PeriClockControl+0x1b4>)
 80002f0:	4293      	cmp	r3, r2
 80002f2:	d106      	bne.n	8000302 <GPIO_PeriClockControl+0x11a>
			GPIOC_PCLK_DI();
 80002f4:	4b27      	ldr	r3, [pc, #156]	; (8000394 <GPIO_PeriClockControl+0x1ac>)
 80002f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80002f8:	4a26      	ldr	r2, [pc, #152]	; (8000394 <GPIO_PeriClockControl+0x1ac>)
 80002fa:	f023 0304 	bic.w	r3, r3, #4
 80002fe:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000300:	e040      	b.n	8000384 <GPIO_PeriClockControl+0x19c>
		else if(pGPIOx == GPIOD)
 8000302:	687b      	ldr	r3, [r7, #4]
 8000304:	4a26      	ldr	r2, [pc, #152]	; (80003a0 <GPIO_PeriClockControl+0x1b8>)
 8000306:	4293      	cmp	r3, r2
 8000308:	d106      	bne.n	8000318 <GPIO_PeriClockControl+0x130>
			GPIOD_PCLK_DI();
 800030a:	4b22      	ldr	r3, [pc, #136]	; (8000394 <GPIO_PeriClockControl+0x1ac>)
 800030c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800030e:	4a21      	ldr	r2, [pc, #132]	; (8000394 <GPIO_PeriClockControl+0x1ac>)
 8000310:	f023 0308 	bic.w	r3, r3, #8
 8000314:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000316:	e035      	b.n	8000384 <GPIO_PeriClockControl+0x19c>
		else if(pGPIOx == GPIOE)
 8000318:	687b      	ldr	r3, [r7, #4]
 800031a:	4a22      	ldr	r2, [pc, #136]	; (80003a4 <GPIO_PeriClockControl+0x1bc>)
 800031c:	4293      	cmp	r3, r2
 800031e:	d106      	bne.n	800032e <GPIO_PeriClockControl+0x146>
			GPIOE_PCLK_DI();
 8000320:	4b1c      	ldr	r3, [pc, #112]	; (8000394 <GPIO_PeriClockControl+0x1ac>)
 8000322:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000324:	4a1b      	ldr	r2, [pc, #108]	; (8000394 <GPIO_PeriClockControl+0x1ac>)
 8000326:	f023 0310 	bic.w	r3, r3, #16
 800032a:	6313      	str	r3, [r2, #48]	; 0x30
}
 800032c:	e02a      	b.n	8000384 <GPIO_PeriClockControl+0x19c>
		else if(pGPIOx == GPIOF)
 800032e:	687b      	ldr	r3, [r7, #4]
 8000330:	4a1d      	ldr	r2, [pc, #116]	; (80003a8 <GPIO_PeriClockControl+0x1c0>)
 8000332:	4293      	cmp	r3, r2
 8000334:	d106      	bne.n	8000344 <GPIO_PeriClockControl+0x15c>
			GPIOF_PCLK_DI();
 8000336:	4b17      	ldr	r3, [pc, #92]	; (8000394 <GPIO_PeriClockControl+0x1ac>)
 8000338:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800033a:	4a16      	ldr	r2, [pc, #88]	; (8000394 <GPIO_PeriClockControl+0x1ac>)
 800033c:	f023 0320 	bic.w	r3, r3, #32
 8000340:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000342:	e01f      	b.n	8000384 <GPIO_PeriClockControl+0x19c>
		else if(pGPIOx == GPIOG)
 8000344:	687b      	ldr	r3, [r7, #4]
 8000346:	4a19      	ldr	r2, [pc, #100]	; (80003ac <GPIO_PeriClockControl+0x1c4>)
 8000348:	4293      	cmp	r3, r2
 800034a:	d106      	bne.n	800035a <GPIO_PeriClockControl+0x172>
			GPIOG_PCLK_DI();
 800034c:	4b11      	ldr	r3, [pc, #68]	; (8000394 <GPIO_PeriClockControl+0x1ac>)
 800034e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000350:	4a10      	ldr	r2, [pc, #64]	; (8000394 <GPIO_PeriClockControl+0x1ac>)
 8000352:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000356:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000358:	e014      	b.n	8000384 <GPIO_PeriClockControl+0x19c>
		else if(pGPIOx == GPIOH)
 800035a:	687b      	ldr	r3, [r7, #4]
 800035c:	4a14      	ldr	r2, [pc, #80]	; (80003b0 <GPIO_PeriClockControl+0x1c8>)
 800035e:	4293      	cmp	r3, r2
 8000360:	d106      	bne.n	8000370 <GPIO_PeriClockControl+0x188>
			GPIOH_PCLK_DI();
 8000362:	4b0c      	ldr	r3, [pc, #48]	; (8000394 <GPIO_PeriClockControl+0x1ac>)
 8000364:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000366:	4a0b      	ldr	r2, [pc, #44]	; (8000394 <GPIO_PeriClockControl+0x1ac>)
 8000368:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800036c:	6313      	str	r3, [r2, #48]	; 0x30
}
 800036e:	e009      	b.n	8000384 <GPIO_PeriClockControl+0x19c>
		else if(pGPIOx == GPIOI)
 8000370:	687b      	ldr	r3, [r7, #4]
 8000372:	4a10      	ldr	r2, [pc, #64]	; (80003b4 <GPIO_PeriClockControl+0x1cc>)
 8000374:	4293      	cmp	r3, r2
 8000376:	d105      	bne.n	8000384 <GPIO_PeriClockControl+0x19c>
			GPIOI_PCLK_DI();
 8000378:	4b06      	ldr	r3, [pc, #24]	; (8000394 <GPIO_PeriClockControl+0x1ac>)
 800037a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800037c:	4a05      	ldr	r2, [pc, #20]	; (8000394 <GPIO_PeriClockControl+0x1ac>)
 800037e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000382:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000384:	bf00      	nop
 8000386:	370c      	adds	r7, #12
 8000388:	46bd      	mov	sp, r7
 800038a:	bc80      	pop	{r7}
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop
 8000390:	40020000 	.word	0x40020000
 8000394:	40023800 	.word	0x40023800
 8000398:	40020400 	.word	0x40020400
 800039c:	40020800 	.word	0x40020800
 80003a0:	40020c00 	.word	0x40020c00
 80003a4:	40021000 	.word	0x40021000
 80003a8:	40021400 	.word	0x40021400
 80003ac:	40021800 	.word	0x40021800
 80003b0:	40021c00 	.word	0x40021c00
 80003b4:	40022000 	.word	0x40022000

080003b8 <GPIO_Init>:
 * @return		- none
 *
 * @Note 		- none
 */
void GPIO_Init(GPIOx_Handle_t *pGPIOHandle)
{
 80003b8:	b480      	push	{r7}
 80003ba:	b087      	sub	sp, #28
 80003bc:	af00      	add	r7, sp, #0
 80003be:	6078      	str	r0, [r7, #4]
	uint32_t temp = 0;		//value temp of register
 80003c0:	2300      	movs	r3, #0
 80003c2:	617b      	str	r3, [r7, #20]

	//1. Configure(cấu hình) the mode of gpio pin (RM407 -> 8.4.1)
	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_ANALOG)
 80003c4:	687b      	ldr	r3, [r7, #4]
 80003c6:	795b      	ldrb	r3, [r3, #5]
 80003c8:	2b03      	cmp	r3, #3
 80003ca:	d81f      	bhi.n	800040c <GPIO_Init+0x54>
	{
		//--->Đây là trường hợp giá trị GPIO_PinMode thuộc 0 trong 3 trường hợp bit của Mode Register
		//Và cũng là trường hợp cho dạng non-interrupt mode

		//1.1_Xác định vị trí và gán value MODERx cần điều khiển dựa vào số chân Pin_Number và lưu vào biến temp
		temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 80003cc:	687b      	ldr	r3, [r7, #4]
 80003ce:	795b      	ldrb	r3, [r3, #5]
 80003d0:	461a      	mov	r2, r3
 80003d2:	687b      	ldr	r3, [r7, #4]
 80003d4:	791b      	ldrb	r3, [r3, #4]
 80003d6:	005b      	lsls	r3, r3, #1
 80003d8:	fa02 f303 	lsl.w	r3, r2, r3
 80003dc:	617b      	str	r3, [r7, #20]

		//Vd ta chọn PinMode là Output=1 thì và Pin_Number=0 ta sẽ có biểu thức:
		//temp = (1 << 0) => Set bit 0 lên 1 => Hai bit 0 và 1 có cấu hình là 01 -> Cấu hình pin0 là output mode

		//1.2_Xóa(clear) value bit tại vị trí 2 bit muốn thiết lập từ cấu hình PinConfig
		pGPIOHandle->pGPIOx->MODER &= ~(0x3 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80003de:	687b      	ldr	r3, [r7, #4]
 80003e0:	681b      	ldr	r3, [r3, #0]
 80003e2:	681a      	ldr	r2, [r3, #0]
 80003e4:	687b      	ldr	r3, [r7, #4]
 80003e6:	791b      	ldrb	r3, [r3, #4]
 80003e8:	4619      	mov	r1, r3
 80003ea:	2303      	movs	r3, #3
 80003ec:	408b      	lsls	r3, r1
 80003ee:	43db      	mvns	r3, r3
 80003f0:	4619      	mov	r1, r3
 80003f2:	687b      	ldr	r3, [r7, #4]
 80003f4:	681b      	ldr	r3, [r3, #0]
 80003f6:	400a      	ands	r2, r1
 80003f8:	601a      	str	r2, [r3, #0]
		 * trị của chân PinNumber đc thiết lập
		 */

		//1.3_Tiến hành cấu hình 2bit theo giá trị biến temp(đã đc thiết lập giá trị bit theo vị trí mong muốn)
		//vào trong thanh ghi MODER của biến pGPIOHandle
		pGPIOHandle->pGPIOx->MODER |= temp;
 80003fa:	687b      	ldr	r3, [r7, #4]
 80003fc:	681b      	ldr	r3, [r3, #0]
 80003fe:	6819      	ldr	r1, [r3, #0]
 8000400:	687b      	ldr	r3, [r7, #4]
 8000402:	681b      	ldr	r3, [r3, #0]
 8000404:	697a      	ldr	r2, [r7, #20]
 8000406:	430a      	orrs	r2, r1
 8000408:	601a      	str	r2, [r3, #0]
 800040a:	e0c2      	b.n	8000592 <GPIO_Init+0x1da>
		//--->Phần này sẽ đc sử dụng cho Interrupt mode từ 4 đến 6
		/* Chú ý: Nếu thiết lập Interrup thì phần GPIOx->MODER sẽ không đc thiết lập
		* Việc quản lý ngắt sẽ do EXTIx Register và NVIC Register thực hiện            */

		//1.1 Kiểm tra xem xung ngắt có phải là đc cấu hình cạnh lên, cạnh xuống hay cả hai
		if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_FT)
 800040c:	687b      	ldr	r3, [r7, #4]
 800040e:	795b      	ldrb	r3, [r3, #5]
 8000410:	2b04      	cmp	r3, #4
 8000412:	d117      	bne.n	8000444 <GPIO_Init+0x8c>
		{
			//1.1.1 Set cấu hình đã chọn vào thanh ghi FTSR(Falling(xuống) Trigger Select Register)
			EXTI->FTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000414:	4b47      	ldr	r3, [pc, #284]	; (8000534 <GPIO_Init+0x17c>)
 8000416:	68db      	ldr	r3, [r3, #12]
 8000418:	687a      	ldr	r2, [r7, #4]
 800041a:	7912      	ldrb	r2, [r2, #4]
 800041c:	4611      	mov	r1, r2
 800041e:	2201      	movs	r2, #1
 8000420:	408a      	lsls	r2, r1
 8000422:	4611      	mov	r1, r2
 8000424:	4a43      	ldr	r2, [pc, #268]	; (8000534 <GPIO_Init+0x17c>)
 8000426:	430b      	orrs	r3, r1
 8000428:	60d3      	str	r3, [r2, #12]

			//1.1.2 Clear the corresponding(tương ứng) RTSR, việc này phòng ngừa cho tình huống sử dụng RTSR trước đó
			//và có thể gây xung đột cho lần cấu hình hiện tại
			EXTI->RTSR &= ~(1 <<pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800042a:	4b42      	ldr	r3, [pc, #264]	; (8000534 <GPIO_Init+0x17c>)
 800042c:	689b      	ldr	r3, [r3, #8]
 800042e:	687a      	ldr	r2, [r7, #4]
 8000430:	7912      	ldrb	r2, [r2, #4]
 8000432:	4611      	mov	r1, r2
 8000434:	2201      	movs	r2, #1
 8000436:	408a      	lsls	r2, r1
 8000438:	43d2      	mvns	r2, r2
 800043a:	4611      	mov	r1, r2
 800043c:	4a3d      	ldr	r2, [pc, #244]	; (8000534 <GPIO_Init+0x17c>)
 800043e:	400b      	ands	r3, r1
 8000440:	6093      	str	r3, [r2, #8]
 8000442:	e035      	b.n	80004b0 <GPIO_Init+0xf8>
		}
		else if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RT)
 8000444:	687b      	ldr	r3, [r7, #4]
 8000446:	795b      	ldrb	r3, [r3, #5]
 8000448:	2b05      	cmp	r3, #5
 800044a:	d117      	bne.n	800047c <GPIO_Init+0xc4>
		{
			//1.1.1 Set cấu hình đã chọn vào thanh ghi RTSR(Rising(lên) Trigger Select Register)
			EXTI->RTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800044c:	4b39      	ldr	r3, [pc, #228]	; (8000534 <GPIO_Init+0x17c>)
 800044e:	689b      	ldr	r3, [r3, #8]
 8000450:	687a      	ldr	r2, [r7, #4]
 8000452:	7912      	ldrb	r2, [r2, #4]
 8000454:	4611      	mov	r1, r2
 8000456:	2201      	movs	r2, #1
 8000458:	408a      	lsls	r2, r1
 800045a:	4611      	mov	r1, r2
 800045c:	4a35      	ldr	r2, [pc, #212]	; (8000534 <GPIO_Init+0x17c>)
 800045e:	430b      	orrs	r3, r1
 8000460:	6093      	str	r3, [r2, #8]

			//1.1.2 Clear the corresponding(tương ứng) FTSR, việc này phòng ngừa cho tình huống sử dụng FTSR trước đó
			//và có thể gây xung đột cho lần cấu hình hiện tại
			EXTI->FTSR &= ~(1 <<pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000462:	4b34      	ldr	r3, [pc, #208]	; (8000534 <GPIO_Init+0x17c>)
 8000464:	68db      	ldr	r3, [r3, #12]
 8000466:	687a      	ldr	r2, [r7, #4]
 8000468:	7912      	ldrb	r2, [r2, #4]
 800046a:	4611      	mov	r1, r2
 800046c:	2201      	movs	r2, #1
 800046e:	408a      	lsls	r2, r1
 8000470:	43d2      	mvns	r2, r2
 8000472:	4611      	mov	r1, r2
 8000474:	4a2f      	ldr	r2, [pc, #188]	; (8000534 <GPIO_Init+0x17c>)
 8000476:	400b      	ands	r3, r1
 8000478:	60d3      	str	r3, [r2, #12]
 800047a:	e019      	b.n	80004b0 <GPIO_Init+0xf8>
		}
		else if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RFT)
 800047c:	687b      	ldr	r3, [r7, #4]
 800047e:	795b      	ldrb	r3, [r3, #5]
 8000480:	2b06      	cmp	r3, #6
 8000482:	d115      	bne.n	80004b0 <GPIO_Init+0xf8>
		{
			//1.1.1 Set cấu hình đã chọn vào thanh ghi RTSR(Rising(lên) Trigger Select Register)
			EXTI->RTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000484:	4b2b      	ldr	r3, [pc, #172]	; (8000534 <GPIO_Init+0x17c>)
 8000486:	689b      	ldr	r3, [r3, #8]
 8000488:	687a      	ldr	r2, [r7, #4]
 800048a:	7912      	ldrb	r2, [r2, #4]
 800048c:	4611      	mov	r1, r2
 800048e:	2201      	movs	r2, #1
 8000490:	408a      	lsls	r2, r1
 8000492:	4611      	mov	r1, r2
 8000494:	4a27      	ldr	r2, [pc, #156]	; (8000534 <GPIO_Init+0x17c>)
 8000496:	430b      	orrs	r3, r1
 8000498:	6093      	str	r3, [r2, #8]

			//1.1.2 Set cấu hình đã chọn vào thanh ghi FTSR(Falling(xuống) Trigger Select Register)
			EXTI->FTSR |= (1 <<pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800049a:	4b26      	ldr	r3, [pc, #152]	; (8000534 <GPIO_Init+0x17c>)
 800049c:	68db      	ldr	r3, [r3, #12]
 800049e:	687a      	ldr	r2, [r7, #4]
 80004a0:	7912      	ldrb	r2, [r2, #4]
 80004a2:	4611      	mov	r1, r2
 80004a4:	2201      	movs	r2, #1
 80004a6:	408a      	lsls	r2, r1
 80004a8:	4611      	mov	r1, r2
 80004aa:	4a22      	ldr	r2, [pc, #136]	; (8000534 <GPIO_Init+0x17c>)
 80004ac:	430b      	orrs	r3, r1
 80004ae:	60d3      	str	r3, [r2, #12]
		}

		//1.2. Configure the GPIO port selection in SYSCFG_EXTICR - Cấu hình cấp nguồn xung khi có Interrupt
		//1.2.1 Tính toán thanh ghi SYSCFG_EXTICRx(x từ 1->4) và nhóm 4bit nào đc sử dụng
		uint8_t temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 4;
 80004b0:	687b      	ldr	r3, [r7, #4]
 80004b2:	791b      	ldrb	r3, [r3, #4]
 80004b4:	089b      	lsrs	r3, r3, #2
 80004b6:	74fb      	strb	r3, [r7, #19]
		uint8_t temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 4;
 80004b8:	687b      	ldr	r3, [r7, #4]
 80004ba:	791b      	ldrb	r3, [r3, #4]
 80004bc:	f003 0303 	and.w	r3, r3, #3
 80004c0:	74bb      	strb	r3, [r7, #18]

		//1.2.2 Xác định GPIO port nào đc sử dụng để làm ngắt
		uint8_t portcode = GPIO_BASEADDR_TO_CODE(pGPIOHandle->pGPIOx);
 80004c2:	687b      	ldr	r3, [r7, #4]
 80004c4:	681b      	ldr	r3, [r3, #0]
 80004c6:	4a1c      	ldr	r2, [pc, #112]	; (8000538 <GPIO_Init+0x180>)
 80004c8:	4293      	cmp	r3, r2
 80004ca:	d045      	beq.n	8000558 <GPIO_Init+0x1a0>
 80004cc:	687b      	ldr	r3, [r7, #4]
 80004ce:	681b      	ldr	r3, [r3, #0]
 80004d0:	4a1a      	ldr	r2, [pc, #104]	; (800053c <GPIO_Init+0x184>)
 80004d2:	4293      	cmp	r3, r2
 80004d4:	d02b      	beq.n	800052e <GPIO_Init+0x176>
 80004d6:	687b      	ldr	r3, [r7, #4]
 80004d8:	681b      	ldr	r3, [r3, #0]
 80004da:	4a19      	ldr	r2, [pc, #100]	; (8000540 <GPIO_Init+0x188>)
 80004dc:	4293      	cmp	r3, r2
 80004de:	d024      	beq.n	800052a <GPIO_Init+0x172>
 80004e0:	687b      	ldr	r3, [r7, #4]
 80004e2:	681b      	ldr	r3, [r3, #0]
 80004e4:	4a17      	ldr	r2, [pc, #92]	; (8000544 <GPIO_Init+0x18c>)
 80004e6:	4293      	cmp	r3, r2
 80004e8:	d01d      	beq.n	8000526 <GPIO_Init+0x16e>
 80004ea:	687b      	ldr	r3, [r7, #4]
 80004ec:	681b      	ldr	r3, [r3, #0]
 80004ee:	4a16      	ldr	r2, [pc, #88]	; (8000548 <GPIO_Init+0x190>)
 80004f0:	4293      	cmp	r3, r2
 80004f2:	d016      	beq.n	8000522 <GPIO_Init+0x16a>
 80004f4:	687b      	ldr	r3, [r7, #4]
 80004f6:	681b      	ldr	r3, [r3, #0]
 80004f8:	4a14      	ldr	r2, [pc, #80]	; (800054c <GPIO_Init+0x194>)
 80004fa:	4293      	cmp	r3, r2
 80004fc:	d00f      	beq.n	800051e <GPIO_Init+0x166>
 80004fe:	687b      	ldr	r3, [r7, #4]
 8000500:	681b      	ldr	r3, [r3, #0]
 8000502:	4a13      	ldr	r2, [pc, #76]	; (8000550 <GPIO_Init+0x198>)
 8000504:	4293      	cmp	r3, r2
 8000506:	d008      	beq.n	800051a <GPIO_Init+0x162>
 8000508:	687b      	ldr	r3, [r7, #4]
 800050a:	681b      	ldr	r3, [r3, #0]
 800050c:	4a11      	ldr	r2, [pc, #68]	; (8000554 <GPIO_Init+0x19c>)
 800050e:	4293      	cmp	r3, r2
 8000510:	d101      	bne.n	8000516 <GPIO_Init+0x15e>
 8000512:	2307      	movs	r3, #7
 8000514:	e021      	b.n	800055a <GPIO_Init+0x1a2>
 8000516:	2300      	movs	r3, #0
 8000518:	e01f      	b.n	800055a <GPIO_Init+0x1a2>
 800051a:	2306      	movs	r3, #6
 800051c:	e01d      	b.n	800055a <GPIO_Init+0x1a2>
 800051e:	2305      	movs	r3, #5
 8000520:	e01b      	b.n	800055a <GPIO_Init+0x1a2>
 8000522:	2304      	movs	r3, #4
 8000524:	e019      	b.n	800055a <GPIO_Init+0x1a2>
 8000526:	2303      	movs	r3, #3
 8000528:	e017      	b.n	800055a <GPIO_Init+0x1a2>
 800052a:	2302      	movs	r3, #2
 800052c:	e015      	b.n	800055a <GPIO_Init+0x1a2>
 800052e:	2301      	movs	r3, #1
 8000530:	e013      	b.n	800055a <GPIO_Init+0x1a2>
 8000532:	bf00      	nop
 8000534:	40013c00 	.word	0x40013c00
 8000538:	40020000 	.word	0x40020000
 800053c:	40020400 	.word	0x40020400
 8000540:	40020800 	.word	0x40020800
 8000544:	40020c00 	.word	0x40020c00
 8000548:	40021000 	.word	0x40021000
 800054c:	40021400 	.word	0x40021400
 8000550:	40021800 	.word	0x40021800
 8000554:	40021c00 	.word	0x40021c00
 8000558:	2300      	movs	r3, #0
 800055a:	747b      	strb	r3, [r7, #17]

		//1.2.3 Kích hoạt xung clock cho Interrupt
		SYSCFG_PCLK_EN();
 800055c:	4b5a      	ldr	r3, [pc, #360]	; (80006c8 <GPIO_Init+0x310>)
 800055e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000560:	4a59      	ldr	r2, [pc, #356]	; (80006c8 <GPIO_Init+0x310>)
 8000562:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000566:	6453      	str	r3, [r2, #68]	; 0x44

		//1.2.4 Cấu hình thanh ghi SYSCFG_EXTICRx với x là thanh ghi số temp1 và nhóm bit temp2
		SYSCFG->EXTICR[temp1] = portcode << (temp2 *4);
 8000568:	7c7a      	ldrb	r2, [r7, #17]
 800056a:	7cbb      	ldrb	r3, [r7, #18]
 800056c:	009b      	lsls	r3, r3, #2
 800056e:	fa02 f103 	lsl.w	r1, r2, r3
 8000572:	4a56      	ldr	r2, [pc, #344]	; (80006cc <GPIO_Init+0x314>)
 8000574:	7cfb      	ldrb	r3, [r7, #19]
 8000576:	3302      	adds	r3, #2
 8000578:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		 * -> Cấu hình tại thanh ghi SYSCFG->EXTICR[0] bắt đầu từ bit 4 với value nhóm bit [7:4] = 0010
		 */

		//1.2.5 Eanble the EXTI interrupt delivery(chuyển, sử dụng) by using IMR(Interrupt Masking Register)
		//Thanh ghi có chức năng kích hoạt hoặc vô hiệu hóa ngắt
		EXTI->IMR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800057c:	4b54      	ldr	r3, [pc, #336]	; (80006d0 <GPIO_Init+0x318>)
 800057e:	681b      	ldr	r3, [r3, #0]
 8000580:	687a      	ldr	r2, [r7, #4]
 8000582:	7912      	ldrb	r2, [r2, #4]
 8000584:	4611      	mov	r1, r2
 8000586:	2201      	movs	r2, #1
 8000588:	408a      	lsls	r2, r1
 800058a:	4611      	mov	r1, r2
 800058c:	4a50      	ldr	r2, [pc, #320]	; (80006d0 <GPIO_Init+0x318>)
 800058e:	430b      	orrs	r3, r1
 8000590:	6013      	str	r3, [r2, #0]

	//Reset biến temp để sử dụng cho các lệnh khác trong hàm

	//2. Configure the speed (RM407->8.4.3)
	//2.1_Xác định vị trí và gán value OSPEEDx cần điều khiển dựa vào số chân Pin_Number và lưu vào biến temp
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinSpeed << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000592:	687b      	ldr	r3, [r7, #4]
 8000594:	799b      	ldrb	r3, [r3, #6]
 8000596:	461a      	mov	r2, r3
 8000598:	687b      	ldr	r3, [r7, #4]
 800059a:	791b      	ldrb	r3, [r3, #4]
 800059c:	005b      	lsls	r3, r3, #1
 800059e:	fa02 f303 	lsl.w	r3, r2, r3
 80005a2:	617b      	str	r3, [r7, #20]

	//2.2_Xóa bit thanh ghi chip
	pGPIOHandle->pGPIOx->OSPEEDR &= ~(0x3 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80005a4:	687b      	ldr	r3, [r7, #4]
 80005a6:	681b      	ldr	r3, [r3, #0]
 80005a8:	689a      	ldr	r2, [r3, #8]
 80005aa:	687b      	ldr	r3, [r7, #4]
 80005ac:	791b      	ldrb	r3, [r3, #4]
 80005ae:	4619      	mov	r1, r3
 80005b0:	2303      	movs	r3, #3
 80005b2:	408b      	lsls	r3, r1
 80005b4:	43db      	mvns	r3, r3
 80005b6:	4619      	mov	r1, r3
 80005b8:	687b      	ldr	r3, [r7, #4]
 80005ba:	681b      	ldr	r3, [r3, #0]
 80005bc:	400a      	ands	r2, r1
 80005be:	609a      	str	r2, [r3, #8]

	//2.3_Set bit thanh ghi chip
	pGPIOHandle->pGPIOx->OSPEEDR |= temp;
 80005c0:	687b      	ldr	r3, [r7, #4]
 80005c2:	681b      	ldr	r3, [r3, #0]
 80005c4:	6899      	ldr	r1, [r3, #8]
 80005c6:	687b      	ldr	r3, [r7, #4]
 80005c8:	681b      	ldr	r3, [r3, #0]
 80005ca:	697a      	ldr	r2, [r7, #20]
 80005cc:	430a      	orrs	r2, r1
 80005ce:	609a      	str	r2, [r3, #8]

	temp = 0;
 80005d0:	2300      	movs	r3, #0
 80005d2:	617b      	str	r3, [r7, #20]
	//3. Configure the pullup-pulldown settings (RM407 -> 8.4.4)
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinPuPdControl << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 80005d4:	687b      	ldr	r3, [r7, #4]
 80005d6:	79db      	ldrb	r3, [r3, #7]
 80005d8:	461a      	mov	r2, r3
 80005da:	687b      	ldr	r3, [r7, #4]
 80005dc:	791b      	ldrb	r3, [r3, #4]
 80005de:	005b      	lsls	r3, r3, #1
 80005e0:	fa02 f303 	lsl.w	r3, r2, r3
 80005e4:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->PUPDR &= ~(0x3 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80005e6:	687b      	ldr	r3, [r7, #4]
 80005e8:	681b      	ldr	r3, [r3, #0]
 80005ea:	68da      	ldr	r2, [r3, #12]
 80005ec:	687b      	ldr	r3, [r7, #4]
 80005ee:	791b      	ldrb	r3, [r3, #4]
 80005f0:	4619      	mov	r1, r3
 80005f2:	2303      	movs	r3, #3
 80005f4:	408b      	lsls	r3, r1
 80005f6:	43db      	mvns	r3, r3
 80005f8:	4619      	mov	r1, r3
 80005fa:	687b      	ldr	r3, [r7, #4]
 80005fc:	681b      	ldr	r3, [r3, #0]
 80005fe:	400a      	ands	r2, r1
 8000600:	60da      	str	r2, [r3, #12]
	pGPIOHandle->pGPIOx->PUPDR |= temp;
 8000602:	687b      	ldr	r3, [r7, #4]
 8000604:	681b      	ldr	r3, [r3, #0]
 8000606:	68d9      	ldr	r1, [r3, #12]
 8000608:	687b      	ldr	r3, [r7, #4]
 800060a:	681b      	ldr	r3, [r3, #0]
 800060c:	697a      	ldr	r2, [r7, #20]
 800060e:	430a      	orrs	r2, r1
 8000610:	60da      	str	r2, [r3, #12]

	temp = 0;
 8000612:	2300      	movs	r3, #0
 8000614:	617b      	str	r3, [r7, #20]
	//4. Configure the optype (RM407 -> 8.4.2)
	//Trong thanh ghi OPTYPE thì mỗi một bit chỉ quản lý một pin nghĩa là chỉ sử dụng 16 bit
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinOPType << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000616:	687b      	ldr	r3, [r7, #4]
 8000618:	7a1b      	ldrb	r3, [r3, #8]
 800061a:	461a      	mov	r2, r3
 800061c:	687b      	ldr	r3, [r7, #4]
 800061e:	791b      	ldrb	r3, [r3, #4]
 8000620:	fa02 f303 	lsl.w	r3, r2, r3
 8000624:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OTYPER &= ~(0x1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000626:	687b      	ldr	r3, [r7, #4]
 8000628:	681b      	ldr	r3, [r3, #0]
 800062a:	685a      	ldr	r2, [r3, #4]
 800062c:	687b      	ldr	r3, [r7, #4]
 800062e:	791b      	ldrb	r3, [r3, #4]
 8000630:	4619      	mov	r1, r3
 8000632:	2301      	movs	r3, #1
 8000634:	408b      	lsls	r3, r1
 8000636:	43db      	mvns	r3, r3
 8000638:	4619      	mov	r1, r3
 800063a:	687b      	ldr	r3, [r7, #4]
 800063c:	681b      	ldr	r3, [r3, #0]
 800063e:	400a      	ands	r2, r1
 8000640:	605a      	str	r2, [r3, #4]
	pGPIOHandle->pGPIOx->OTYPER = temp;
 8000642:	687b      	ldr	r3, [r7, #4]
 8000644:	681b      	ldr	r3, [r3, #0]
 8000646:	697a      	ldr	r2, [r7, #20]
 8000648:	605a      	str	r2, [r3, #4]
	temp = 0;
 800064a:	2300      	movs	r3, #0
 800064c:	617b      	str	r3, [r7, #20]

	//5. Configure the alt functionality mode (RM407 -> 8.4.9 and 8.4.10)
	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_ALTFN)
 800064e:	687b      	ldr	r3, [r7, #4]
 8000650:	795b      	ldrb	r3, [r3, #5]
 8000652:	2b02      	cmp	r3, #2
 8000654:	d133      	bne.n	80006be <GPIO_Init+0x306>
		//Trong thanh ghi AFRx thì mỗi 4 bit quản lý 1 AFx

		uint32_t temp1,temp2;

		//Xác định thanh ghi cần sử dụng là GPIOx_AFRH[1] hay GPIOx_AFRL[0] dựa vào số chân Pin_Number
		temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 8;
 8000656:	687b      	ldr	r3, [r7, #4]
 8000658:	791b      	ldrb	r3, [r3, #4]
 800065a:	08db      	lsrs	r3, r3, #3
 800065c:	b2db      	uxtb	r3, r3
 800065e:	60fb      	str	r3, [r7, #12]

		//Xác định vị trí cụm 4 bit cần sử dụng ở vị trí nào trong thanh ghi dựa vào số chân Pin_Number
		temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 8;
 8000660:	687b      	ldr	r3, [r7, #4]
 8000662:	791b      	ldrb	r3, [r3, #4]
 8000664:	f003 0307 	and.w	r3, r3, #7
 8000668:	60bb      	str	r3, [r7, #8]

		//Xác định value AFx cần điều khiển dựa vào số chân Pin_Number và lưu vào biến temp
		temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFunMode << (4*temp2));
 800066a:	687b      	ldr	r3, [r7, #4]
 800066c:	7a5b      	ldrb	r3, [r3, #9]
 800066e:	461a      	mov	r2, r3
 8000670:	68bb      	ldr	r3, [r7, #8]
 8000672:	009b      	lsls	r3, r3, #2
 8000674:	fa02 f303 	lsl.w	r3, r2, r3
 8000678:	617b      	str	r3, [r7, #20]

		//Clearing bit field of chip register - 0xF=1111(sử dụng 4bit cùng lúc)
		pGPIOHandle->pGPIOx->AFR[temp1] &= ~(0xF << (4 * temp2));	//đảo xxxx->0000 tại các bit bắt đầu từ 4*temp2
 800067a:	687b      	ldr	r3, [r7, #4]
 800067c:	681b      	ldr	r3, [r3, #0]
 800067e:	68fa      	ldr	r2, [r7, #12]
 8000680:	3208      	adds	r2, #8
 8000682:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000686:	68bb      	ldr	r3, [r7, #8]
 8000688:	009b      	lsls	r3, r3, #2
 800068a:	210f      	movs	r1, #15
 800068c:	fa01 f303 	lsl.w	r3, r1, r3
 8000690:	43db      	mvns	r3, r3
 8000692:	4619      	mov	r1, r3
 8000694:	687b      	ldr	r3, [r7, #4]
 8000696:	681b      	ldr	r3, [r3, #0]
 8000698:	4011      	ands	r1, r2
 800069a:	68fa      	ldr	r2, [r7, #12]
 800069c:	3208      	adds	r2, #8
 800069e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

		//Thiết lập cấu hình AFRx vào trong thanh ghi của chip điều khiển
		pGPIOHandle->pGPIOx->AFR[temp1] |= temp;
 80006a2:	687b      	ldr	r3, [r7, #4]
 80006a4:	681b      	ldr	r3, [r3, #0]
 80006a6:	68fa      	ldr	r2, [r7, #12]
 80006a8:	3208      	adds	r2, #8
 80006aa:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80006ae:	687b      	ldr	r3, [r7, #4]
 80006b0:	681b      	ldr	r3, [r3, #0]
 80006b2:	697a      	ldr	r2, [r7, #20]
 80006b4:	4311      	orrs	r1, r2
 80006b6:	68fa      	ldr	r2, [r7, #12]
 80006b8:	3208      	adds	r2, #8
 80006ba:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

		//Lưu ý: Mỗi chân Pin thuộc GPIOx chỉ có(hoặc không) mặc định 1 chức năng khác khi thiết lập ALT
		//Nghĩa là khi thiết lập Pin là ALT thì chương trình cũng sẽ tự động chuyển từ GPIOx sang ngoại vi khác
		//Vd: chân PA1(pin1) có ALT mode là ngoại vi TIM2_CH2. Xem thêm: Datasheet_stm32f407x -> Table 9
	}
}
 80006be:	bf00      	nop
 80006c0:	371c      	adds	r7, #28
 80006c2:	46bd      	mov	sp, r7
 80006c4:	bc80      	pop	{r7}
 80006c6:	4770      	bx	lr
 80006c8:	40023800 	.word	0x40023800
 80006cc:	40013800 	.word	0x40013800
 80006d0:	40013c00 	.word	0x40013c00

080006d4 <GPIO_ToggleOutputPin>:
 * @return		- none
 *
 * @Note 		- none
 */
void GPIO_ToggleOutputPin(GPIO_RegDef_t *pGPIOx, uint8_t PinNumber)
{
 80006d4:	b480      	push	{r7}
 80006d6:	b083      	sub	sp, #12
 80006d8:	af00      	add	r7, sp, #0
 80006da:	6078      	str	r0, [r7, #4]
 80006dc:	460b      	mov	r3, r1
 80006de:	70fb      	strb	r3, [r7, #3]
	pGPIOx->ODR ^= (1 << PinNumber);
 80006e0:	687b      	ldr	r3, [r7, #4]
 80006e2:	695b      	ldr	r3, [r3, #20]
 80006e4:	78fa      	ldrb	r2, [r7, #3]
 80006e6:	2101      	movs	r1, #1
 80006e8:	fa01 f202 	lsl.w	r2, r1, r2
 80006ec:	405a      	eors	r2, r3
 80006ee:	687b      	ldr	r3, [r7, #4]
 80006f0:	615a      	str	r2, [r3, #20]
	/* Cách viết đày đủ: pGPIOx->ODR = pGPIOx->ODR ^ (1 << PinNumber);
	 * Nghĩa là: Đảo trạng thái bit (toán tử XOR) tại vị trí PinNumber của pGPIOx->ODR
	 * '^':Hoạt động XOR đảo ngược bit ở pin đc chỉ định, chuyển đổi trạng thái đầu ra của nó
	 * sau đó sẽ gán value trỏ vào thanh ghi pGPIOx->ODR
	 */
}
 80006f2:	bf00      	nop
 80006f4:	370c      	adds	r7, #12
 80006f6:	46bd      	mov	sp, r7
 80006f8:	bc80      	pop	{r7}
 80006fa:	4770      	bx	lr

080006fc <GPIO_IRQInterruptConfig>:
 * @return		- none
 *
 * @Note 		- none
 */
void GPIO_IRQInterruptConfig(uint8_t IRQNumber, uint8_t EnorDi)
{
 80006fc:	b480      	push	{r7}
 80006fe:	b083      	sub	sp, #12
 8000700:	af00      	add	r7, sp, #0
 8000702:	4603      	mov	r3, r0
 8000704:	460a      	mov	r2, r1
 8000706:	71fb      	strb	r3, [r7, #7]
 8000708:	4613      	mov	r3, r2
 800070a:	71bb      	strb	r3, [r7, #6]
	if(EnorDi == ENABLE)		//Cho phép kích hoạt interrupt
 800070c:	79bb      	ldrb	r3, [r7, #6]
 800070e:	2b01      	cmp	r3, #1
 8000710:	d133      	bne.n	800077a <GPIO_IRQInterruptConfig+0x7e>
	{
		if(IRQNumber <= 31)
 8000712:	79fb      	ldrb	r3, [r7, #7]
 8000714:	2b1f      	cmp	r3, #31
 8000716:	d80a      	bhi.n	800072e <GPIO_IRQInterruptConfig+0x32>
		{
			//Set ISER0 register
			*NVIC_ISER0 |= (1 << IRQNumber);
 8000718:	4b34      	ldr	r3, [pc, #208]	; (80007ec <GPIO_IRQInterruptConfig+0xf0>)
 800071a:	681b      	ldr	r3, [r3, #0]
 800071c:	79fa      	ldrb	r2, [r7, #7]
 800071e:	2101      	movs	r1, #1
 8000720:	fa01 f202 	lsl.w	r2, r1, r2
 8000724:	4611      	mov	r1, r2
 8000726:	4a31      	ldr	r2, [pc, #196]	; (80007ec <GPIO_IRQInterruptConfig+0xf0>)
 8000728:	430b      	orrs	r3, r1
 800072a:	6013      	str	r3, [r2, #0]
		{
			//Set ICER2 register
			*NVIC_ICER2 |= (1 << IRQNumber % 64);		//Vd: IRQNumber=65 % 64 = 1 -> Set bit1 của ICER2 lên 1
		}
	}
}
 800072c:	e059      	b.n	80007e2 <GPIO_IRQInterruptConfig+0xe6>
		else if(IRQNumber > 31 && IRQNumber < 64)
 800072e:	79fb      	ldrb	r3, [r7, #7]
 8000730:	2b1f      	cmp	r3, #31
 8000732:	d90f      	bls.n	8000754 <GPIO_IRQInterruptConfig+0x58>
 8000734:	79fb      	ldrb	r3, [r7, #7]
 8000736:	2b3f      	cmp	r3, #63	; 0x3f
 8000738:	d80c      	bhi.n	8000754 <GPIO_IRQInterruptConfig+0x58>
			*NVIC_ISER1 |= (1 << IRQNumber % 32);		//Vd: IRQNumber=33 % 32 = 1 -> Set bit1 của ISER1 lên 1
 800073a:	4b2d      	ldr	r3, [pc, #180]	; (80007f0 <GPIO_IRQInterruptConfig+0xf4>)
 800073c:	681b      	ldr	r3, [r3, #0]
 800073e:	79fa      	ldrb	r2, [r7, #7]
 8000740:	f002 021f 	and.w	r2, r2, #31
 8000744:	2101      	movs	r1, #1
 8000746:	fa01 f202 	lsl.w	r2, r1, r2
 800074a:	4611      	mov	r1, r2
 800074c:	4a28      	ldr	r2, [pc, #160]	; (80007f0 <GPIO_IRQInterruptConfig+0xf4>)
 800074e:	430b      	orrs	r3, r1
 8000750:	6013      	str	r3, [r2, #0]
 8000752:	e046      	b.n	80007e2 <GPIO_IRQInterruptConfig+0xe6>
		else if(IRQNumber >= 64 && IRQNumber < 96)
 8000754:	79fb      	ldrb	r3, [r7, #7]
 8000756:	2b3f      	cmp	r3, #63	; 0x3f
 8000758:	d943      	bls.n	80007e2 <GPIO_IRQInterruptConfig+0xe6>
 800075a:	79fb      	ldrb	r3, [r7, #7]
 800075c:	2b5f      	cmp	r3, #95	; 0x5f
 800075e:	d840      	bhi.n	80007e2 <GPIO_IRQInterruptConfig+0xe6>
			*NVIC_ISER2 |= (1 << IRQNumber % 64);		//Vd: IRQNumber=65 % 64 = 1 -> Set bit1 của ISER2 lên 1
 8000760:	4b24      	ldr	r3, [pc, #144]	; (80007f4 <GPIO_IRQInterruptConfig+0xf8>)
 8000762:	681b      	ldr	r3, [r3, #0]
 8000764:	79fa      	ldrb	r2, [r7, #7]
 8000766:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 800076a:	2101      	movs	r1, #1
 800076c:	fa01 f202 	lsl.w	r2, r1, r2
 8000770:	4611      	mov	r1, r2
 8000772:	4a20      	ldr	r2, [pc, #128]	; (80007f4 <GPIO_IRQInterruptConfig+0xf8>)
 8000774:	430b      	orrs	r3, r1
 8000776:	6013      	str	r3, [r2, #0]
}
 8000778:	e033      	b.n	80007e2 <GPIO_IRQInterruptConfig+0xe6>
		if(IRQNumber <= 31)
 800077a:	79fb      	ldrb	r3, [r7, #7]
 800077c:	2b1f      	cmp	r3, #31
 800077e:	d80a      	bhi.n	8000796 <GPIO_IRQInterruptConfig+0x9a>
			*NVIC_ICER0 |= (1 << IRQNumber);
 8000780:	4b1d      	ldr	r3, [pc, #116]	; (80007f8 <GPIO_IRQInterruptConfig+0xfc>)
 8000782:	681b      	ldr	r3, [r3, #0]
 8000784:	79fa      	ldrb	r2, [r7, #7]
 8000786:	2101      	movs	r1, #1
 8000788:	fa01 f202 	lsl.w	r2, r1, r2
 800078c:	4611      	mov	r1, r2
 800078e:	4a1a      	ldr	r2, [pc, #104]	; (80007f8 <GPIO_IRQInterruptConfig+0xfc>)
 8000790:	430b      	orrs	r3, r1
 8000792:	6013      	str	r3, [r2, #0]
}
 8000794:	e025      	b.n	80007e2 <GPIO_IRQInterruptConfig+0xe6>
		else if(IRQNumber > 31 && IRQNumber < 64)
 8000796:	79fb      	ldrb	r3, [r7, #7]
 8000798:	2b1f      	cmp	r3, #31
 800079a:	d90f      	bls.n	80007bc <GPIO_IRQInterruptConfig+0xc0>
 800079c:	79fb      	ldrb	r3, [r7, #7]
 800079e:	2b3f      	cmp	r3, #63	; 0x3f
 80007a0:	d80c      	bhi.n	80007bc <GPIO_IRQInterruptConfig+0xc0>
			*NVIC_ICER1 |= (1 << IRQNumber % 32);		//Vd: IRQNumber=33 % 32 = 1 -> Set bit1 của ICER1 lên 1
 80007a2:	4b16      	ldr	r3, [pc, #88]	; (80007fc <GPIO_IRQInterruptConfig+0x100>)
 80007a4:	681b      	ldr	r3, [r3, #0]
 80007a6:	79fa      	ldrb	r2, [r7, #7]
 80007a8:	f002 021f 	and.w	r2, r2, #31
 80007ac:	2101      	movs	r1, #1
 80007ae:	fa01 f202 	lsl.w	r2, r1, r2
 80007b2:	4611      	mov	r1, r2
 80007b4:	4a11      	ldr	r2, [pc, #68]	; (80007fc <GPIO_IRQInterruptConfig+0x100>)
 80007b6:	430b      	orrs	r3, r1
 80007b8:	6013      	str	r3, [r2, #0]
 80007ba:	e012      	b.n	80007e2 <GPIO_IRQInterruptConfig+0xe6>
		else if(IRQNumber >= 64 && IRQNumber < 96)
 80007bc:	79fb      	ldrb	r3, [r7, #7]
 80007be:	2b3f      	cmp	r3, #63	; 0x3f
 80007c0:	d90f      	bls.n	80007e2 <GPIO_IRQInterruptConfig+0xe6>
 80007c2:	79fb      	ldrb	r3, [r7, #7]
 80007c4:	2b5f      	cmp	r3, #95	; 0x5f
 80007c6:	d80c      	bhi.n	80007e2 <GPIO_IRQInterruptConfig+0xe6>
			*NVIC_ICER2 |= (1 << IRQNumber % 64);		//Vd: IRQNumber=65 % 64 = 1 -> Set bit1 của ICER2 lên 1
 80007c8:	4b0d      	ldr	r3, [pc, #52]	; (8000800 <GPIO_IRQInterruptConfig+0x104>)
 80007ca:	681b      	ldr	r3, [r3, #0]
 80007cc:	79fa      	ldrb	r2, [r7, #7]
 80007ce:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 80007d2:	2101      	movs	r1, #1
 80007d4:	fa01 f202 	lsl.w	r2, r1, r2
 80007d8:	4611      	mov	r1, r2
 80007da:	4a09      	ldr	r2, [pc, #36]	; (8000800 <GPIO_IRQInterruptConfig+0x104>)
 80007dc:	430b      	orrs	r3, r1
 80007de:	6013      	str	r3, [r2, #0]
}
 80007e0:	e7ff      	b.n	80007e2 <GPIO_IRQInterruptConfig+0xe6>
 80007e2:	bf00      	nop
 80007e4:	370c      	adds	r7, #12
 80007e6:	46bd      	mov	sp, r7
 80007e8:	bc80      	pop	{r7}
 80007ea:	4770      	bx	lr
 80007ec:	e000e100 	.word	0xe000e100
 80007f0:	e000e104 	.word	0xe000e104
 80007f4:	e000e108 	.word	0xe000e108
 80007f8:	e000e180 	.word	0xe000e180
 80007fc:	e000e184 	.word	0xe000e184
 8000800:	e000e188 	.word	0xe000e188

08000804 <GPIO_IRQPriorityConfig>:
 * @return		- none
 *
 * @Note 		- Cấu hình mức ưu tiên cho mỗi ngắt
 */
void GPIO_IRQPriorityConfig(uint8_t IRQNumber, uint8_t IRQPriority)
{
 8000804:	b480      	push	{r7}
 8000806:	b085      	sub	sp, #20
 8000808:	af00      	add	r7, sp, #0
 800080a:	4603      	mov	r3, r0
 800080c:	460a      	mov	r2, r1
 800080e:	71fb      	strb	r3, [r7, #7]
 8000810:	4613      	mov	r3, r2
 8000812:	71bb      	strb	r3, [r7, #6]
	//1. first lets find out the ipr register
	uint8_t iprx = IRQNumber / 4;			//Xác định sử dụng thanh ghi nào
 8000814:	79fb      	ldrb	r3, [r7, #7]
 8000816:	089b      	lsrs	r3, r3, #2
 8000818:	73fb      	strb	r3, [r7, #15]
	uint8_t iprx_section = IRQNumber % 4;	//Xác định phần 8bit nào đc sử dụng(mỗi thanh ghi có 4 phần 8 bit)
 800081a:	79fb      	ldrb	r3, [r7, #7]
 800081c:	f003 0303 	and.w	r3, r3, #3
 8000820:	73bb      	strb	r3, [r7, #14]

	//2. Mỗi phần 8bit(PRI_x) thì chỉ lấy 4bit cao làm priority, 4bit thấp ko sử dụng
	uint8_t shift_amount = (8 * iprx_section) + (8 - NO_PR_BITS_IMPLEMENTED);
 8000822:	7bbb      	ldrb	r3, [r7, #14]
 8000824:	00db      	lsls	r3, r3, #3
 8000826:	b2db      	uxtb	r3, r3
 8000828:	3304      	adds	r3, #4
 800082a:	737b      	strb	r3, [r7, #13]

	*(NVIC_PR_BASEADDR + (iprx * 4)) |= (IRQPriority << shift_amount);
 800082c:	7bfb      	ldrb	r3, [r7, #15]
 800082e:	011b      	lsls	r3, r3, #4
 8000830:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 8000834:	f503 4364 	add.w	r3, r3, #58368	; 0xe400
 8000838:	681a      	ldr	r2, [r3, #0]
 800083a:	79b9      	ldrb	r1, [r7, #6]
 800083c:	7b7b      	ldrb	r3, [r7, #13]
 800083e:	fa01 f303 	lsl.w	r3, r1, r3
 8000842:	4619      	mov	r1, r3
 8000844:	7bfb      	ldrb	r3, [r7, #15]
 8000846:	011b      	lsls	r3, r3, #4
 8000848:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 800084c:	f503 4364 	add.w	r3, r3, #58368	; 0xe400
 8000850:	430a      	orrs	r2, r1
 8000852:	601a      	str	r2, [r3, #0]
	 * Xử lý ngắt: Sau khi xử lý xong ngắt có mức ưu tiên cao nhất, NVIC sẽ tiếp tục xử lý các ngắt còn lại theo thứ tự ưu tiên giảm dần.
	 *
	 * Lưu ý: mức ưu tiên đã được quy định theo bảng trong datasheet RM407->12->Table61
	 * Tuy nhiên ta có thể dùng hàm này để set mức ưu tiên của interrupt
	 */
}
 8000854:	bf00      	nop
 8000856:	3714      	adds	r7, #20
 8000858:	46bd      	mov	sp, r7
 800085a:	bc80      	pop	{r7}
 800085c:	4770      	bx	lr
	...

08000860 <GPIO_IRQHangling>:
 * @return		- none
 *
 * @Note 		- none
 */
void GPIO_IRQHangling(uint8_t PinNumber)
{
 8000860:	b480      	push	{r7}
 8000862:	b083      	sub	sp, #12
 8000864:	af00      	add	r7, sp, #0
 8000866:	4603      	mov	r3, r0
 8000868:	71fb      	strb	r3, [r7, #7]
	//Clear the exti PR register corresponding(tương ứng) to the pin number
	if(EXTI->PR & (1 << PinNumber))		//kiểm tra bit có đc set 1 hay không
 800086a:	4b0c      	ldr	r3, [pc, #48]	; (800089c <GPIO_IRQHangling+0x3c>)
 800086c:	695b      	ldr	r3, [r3, #20]
 800086e:	79fa      	ldrb	r2, [r7, #7]
 8000870:	2101      	movs	r1, #1
 8000872:	fa01 f202 	lsl.w	r2, r1, r2
 8000876:	4013      	ands	r3, r2
 8000878:	2b00      	cmp	r3, #0
 800087a:	d009      	beq.n	8000890 <GPIO_IRQHangling+0x30>
	{
		EXTI->PR |= (1 << PinNumber); 		//Clear bit trong PR(Pending Register EXTI)
 800087c:	4b07      	ldr	r3, [pc, #28]	; (800089c <GPIO_IRQHangling+0x3c>)
 800087e:	695b      	ldr	r3, [r3, #20]
 8000880:	79fa      	ldrb	r2, [r7, #7]
 8000882:	2101      	movs	r1, #1
 8000884:	fa01 f202 	lsl.w	r2, r1, r2
 8000888:	4611      	mov	r1, r2
 800088a:	4a04      	ldr	r2, [pc, #16]	; (800089c <GPIO_IRQHangling+0x3c>)
 800088c:	430b      	orrs	r3, r1
 800088e:	6153      	str	r3, [r2, #20]
	}

	//Giải thích: Khi ngắt đc phát hiện thì bit tương ứng trong thanh ghi PR(Peding Register)thuộc EXTIx sẽ đc tự động set 1
	//Xóa bit đang chờ ở thanh ghi PR(Pending Register) của NVIC, và ngắt sẽ đc đăng ký với Processor
	//Theo Rm407->12.3.6: bit đc xóa khi đc set 1
}
 8000890:	bf00      	nop
 8000892:	370c      	adds	r7, #12
 8000894:	46bd      	mov	sp, r7
 8000896:	bc80      	pop	{r7}
 8000898:	4770      	bx	lr
 800089a:	bf00      	nop
 800089c:	40013c00 	.word	0x40013c00

080008a0 <delay>:

/*
 * Hàm Delay thời gian
 */
void delay(void)
{
 80008a0:	b480      	push	{r7}
 80008a2:	b083      	sub	sp, #12
 80008a4:	af00      	add	r7, sp, #0
	//for(uint32_t i = 0; i< 500000; i++);
	for(uint32_t i = 0; i< 500000/2; i++);		//giảm thời gian delay
 80008a6:	2300      	movs	r3, #0
 80008a8:	607b      	str	r3, [r7, #4]
 80008aa:	e002      	b.n	80008b2 <delay+0x12>
 80008ac:	687b      	ldr	r3, [r7, #4]
 80008ae:	3301      	adds	r3, #1
 80008b0:	607b      	str	r3, [r7, #4]
 80008b2:	687b      	ldr	r3, [r7, #4]
 80008b4:	4a04      	ldr	r2, [pc, #16]	; (80008c8 <delay+0x28>)
 80008b6:	4293      	cmp	r3, r2
 80008b8:	d9f8      	bls.n	80008ac <delay+0xc>
}
 80008ba:	bf00      	nop
 80008bc:	bf00      	nop
 80008be:	370c      	adds	r7, #12
 80008c0:	46bd      	mov	sp, r7
 80008c2:	bc80      	pop	{r7}
 80008c4:	4770      	bx	lr
 80008c6:	bf00      	nop
 80008c8:	0003d08f 	.word	0x0003d08f

080008cc <main>:
	for(uint32_t i = 0; i< 500000; i++);
	//for(uint32_t i = 0; i< 500000/2; i++);		//giảm thời gian delay
}

int main(void)
{
 80008cc:	b580      	push	{r7, lr}
 80008ce:	b08a      	sub	sp, #40	; 0x28
 80008d0:	af00      	add	r7, sp, #0
	GPIOx_Handle_t Gpio_Led; 		//Khai báo biến struct chứa thông tin port và pin muốn điều khiển
	GPIOx_Handle_t Gpio_Led2; 		//Khai báo biến struct chứa thông tin port và pin muốn điều khiển
	GPIOx_Handle_t GPIOBtn;			//Khai báo biến struct chứa thông tin port và pin(input button) muốn điều khiển

	//Tách riêng 2 biến có thành phần cấu trúc giống nhau ra làm hai biến có địa chỉ riêng biệt
	memset(&Gpio_Led,0,sizeof(Gpio_Led)); 	memset(&Gpio_Led2,0,sizeof(Gpio_Led2));
 80008d2:	f107 031c 	add.w	r3, r7, #28
 80008d6:	220c      	movs	r2, #12
 80008d8:	2100      	movs	r1, #0
 80008da:	4618      	mov	r0, r3
 80008dc:	f000 f899 	bl	8000a12 <memset>
 80008e0:	f107 0310 	add.w	r3, r7, #16
 80008e4:	220c      	movs	r2, #12
 80008e6:	2100      	movs	r1, #0
 80008e8:	4618      	mov	r0, r3
 80008ea:	f000 f892 	bl	8000a12 <memset>
	memset(&GPIOBtn,0,sizeof(GPIOBtn));
 80008ee:	1d3b      	adds	r3, r7, #4
 80008f0:	220c      	movs	r2, #12
 80008f2:	2100      	movs	r1, #0
 80008f4:	4618      	mov	r0, r3
 80008f6:	f000 f88c 	bl	8000a12 <memset>

	//Cấu hình thông tin hoạt động của LED muốn điều khiển (led2)
	Gpio_Led.pGPIOx = GPIOD;										//Thiết lập port muốn điều khiển
 80008fa:	4b27      	ldr	r3, [pc, #156]	; (8000998 <main+0xcc>)
 80008fc:	61fb      	str	r3, [r7, #28]
	Gpio_Led.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_0;			//Chân pin của port muốn điều khiển
 80008fe:	2300      	movs	r3, #0
 8000900:	f887 3020 	strb.w	r3, [r7, #32]
	Gpio_Led.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_OUT;			//Chế độ xuất tín hiệu output
 8000904:	2301      	movs	r3, #1
 8000906:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
	Gpio_Led.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST; 		//Tốc độ xuất tín hiệu
 800090a:	2302      	movs	r3, #2
 800090c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
	Gpio_Led.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_PP;		//Chuẩn xuất Push_Pull
 8000910:	2300      	movs	r3, #0
 8000912:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24

	//Gpio_Led.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;		//Đầu ra ko cần điện trở kéo(dùng led nội của board)
	Gpio_Led.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PIN_PU;			//Chọn pull-up(kéo lên) vì đầu ra của mạch led là GND
 8000916:	2301      	movs	r3, #1
 8000918:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

	//Cấu hình xung Clock cho Peripheral Port Led
	GPIO_PeriClockControl(GPIOD, ENABLE);		//Port D và Enalbe=1
 800091c:	2101      	movs	r1, #1
 800091e:	481e      	ldr	r0, [pc, #120]	; (8000998 <main+0xcc>)
 8000920:	f7ff fc62 	bl	80001e8 <GPIO_PeriClockControl>

	//Gọi hàm khởi tạo hoạt động cấu hình muốn điều khiển(ở đây muốn điều khiển Output Gpio_Led)
	GPIO_Init(&Gpio_Led);
 8000924:	f107 031c 	add.w	r3, r7, #28
 8000928:	4618      	mov	r0, r3
 800092a:	f7ff fd45 	bl	80003b8 <GPIO_Init>

	//Cấu hình thông tin hoạt động của LED muốn điều khiển (led1)
	Gpio_Led2.pGPIOx = GPIOD;										//Thiết lập port muốn điều khiển
 800092e:	4b1a      	ldr	r3, [pc, #104]	; (8000998 <main+0xcc>)
 8000930:	613b      	str	r3, [r7, #16]
	Gpio_Led2.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_2;			//Chân pin của port muốn điều khiển
 8000932:	2302      	movs	r3, #2
 8000934:	753b      	strb	r3, [r7, #20]
	Gpio_Led2.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_OUT;			//Chế độ xuất tín hiệu output
 8000936:	2301      	movs	r3, #1
 8000938:	757b      	strb	r3, [r7, #21]
	Gpio_Led2.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST; 		//Tốc độ xuất tín hiệu
 800093a:	2302      	movs	r3, #2
 800093c:	75bb      	strb	r3, [r7, #22]
	Gpio_Led2.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_PP;		//Chuẩn xuất Push_Pull
 800093e:	2300      	movs	r3, #0
 8000940:	763b      	strb	r3, [r7, #24]

	//Gpio_Led.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;		//Đầu ra ko cần điện trở kéo(dùng led nội của board)
	Gpio_Led2.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PIN_PU;			//Chọn pull-up(kéo lên) vì đầu ra của mạch led là GND
 8000942:	2301      	movs	r3, #1
 8000944:	75fb      	strb	r3, [r7, #23]

	//Cấu hình xung Clock cho Peripheral Port Led
	GPIO_PeriClockControl(GPIOD, ENABLE);		//Port D và Enalbe=1
 8000946:	2101      	movs	r1, #1
 8000948:	4813      	ldr	r0, [pc, #76]	; (8000998 <main+0xcc>)
 800094a:	f7ff fc4d 	bl	80001e8 <GPIO_PeriClockControl>

	//Gọi hàm khởi tạo hoạt động cấu hình muốn điều khiển(ở đây muốn điều khiển Output Gpio_Led)
	GPIO_Init(&Gpio_Led2);
 800094e:	f107 0310 	add.w	r3, r7, #16
 8000952:	4618      	mov	r0, r3
 8000954:	f7ff fd30 	bl	80003b8 <GPIO_Init>

	/*
	 * Vd3 Button of Interrupt
	 * Chương trình chính là một led sáng tắt(led2), nút nhấn sẽ điều khiển một đèn khác(led)
	 */
	GPIOBtn.pGPIOx = GPIOB;											//Thiết lập port muốn điều khiển
 8000958:	4b10      	ldr	r3, [pc, #64]	; (800099c <main+0xd0>)
 800095a:	607b      	str	r3, [r7, #4]
	GPIOBtn.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_12;			//Chân pin của port muốn điều khiển
 800095c:	230c      	movs	r3, #12
 800095e:	723b      	strb	r3, [r7, #8]
	GPIOBtn.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_IT_FT;			//Chế độ xuất tín hiệu input(cạnh xuống Low)
 8000960:	2304      	movs	r3, #4
 8000962:	727b      	strb	r3, [r7, #9]
	GPIOBtn.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST; 		//Tốc độ xuất tín hiệu
 8000964:	2302      	movs	r3, #2
 8000966:	72bb      	strb	r3, [r7, #10]

	//GPIOBtn.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;		//Đầu vào ko cần điện trở kéo
	//Gpio_Led.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PIN_PU;			//Chọn pull-up(kéo lên) thông mạch nút nhấn

	//Cấu hình xung Clock cho Peripheral Port Button
	GPIO_PeriClockControl(GPIOB, ENABLE);		//Port B và Enalbe=1
 8000968:	2101      	movs	r1, #1
 800096a:	480c      	ldr	r0, [pc, #48]	; (800099c <main+0xd0>)
 800096c:	f7ff fc3c 	bl	80001e8 <GPIO_PeriClockControl>

	//Gọi hàm khởi tạo hoạt động cấu hình muốn điều khiển(ở đây muốn điều khiển Input Button)
	GPIO_Init(&GPIOBtn);
 8000970:	1d3b      	adds	r3, r7, #4
 8000972:	4618      	mov	r0, r3
 8000974:	f7ff fd20 	bl	80003b8 <GPIO_Init>
	//Cấu hình IRQ15_10 configurations
	GPIO_IRQPriorityConfig(IRQ_NO_EXTI15_10, NVIC_IRQ_PRI15);			//Cấu hình mức ưu tiên
 8000978:	210f      	movs	r1, #15
 800097a:	2028      	movs	r0, #40	; 0x28
 800097c:	f7ff ff42 	bl	8000804 <GPIO_IRQPriorityConfig>
	GPIO_IRQInterruptConfig(IRQ_NO_EXTI15_10, ENABLE);					//Cấu hình interrupt NVIC
 8000980:	2101      	movs	r1, #1
 8000982:	2028      	movs	r0, #40	; 0x28
 8000984:	f7ff feba 	bl	80006fc <GPIO_IRQInterruptConfig>
		{
			delay();	//hàm chống dội, ngăn ngừa button de-bouncing
			GPIO_ToggleOutputPin(GPIOD, GPIO_PIN_NO_0); 	//Thiết lập việc sáng tắt chân pin 12 port D peripheral
		}*/

		delay();
 8000988:	f7ff ff8a 	bl	80008a0 <delay>
		GPIO_ToggleOutputPin(GPIOD, GPIO_PIN_NO_2);
 800098c:	2102      	movs	r1, #2
 800098e:	4802      	ldr	r0, [pc, #8]	; (8000998 <main+0xcc>)
 8000990:	f7ff fea0 	bl	80006d4 <GPIO_ToggleOutputPin>
		delay();
 8000994:	e7f8      	b.n	8000988 <main+0xbc>
 8000996:	bf00      	nop
 8000998:	40020c00 	.word	0x40020c00
 800099c:	40020400 	.word	0x40020400

080009a0 <EXTI15_10_IRQHandler>:

/**
 * Hàm xử lý IRQ liên quan đến ngắt EXTI15_10
 */
void EXTI15_10_IRQHandler()
{
 80009a0:	b580      	push	{r7, lr}
 80009a2:	af00      	add	r7, sp, #0
	delay();											//200ms, chống dội phím ngắt
 80009a4:	f7ff ff7c 	bl	80008a0 <delay>
	GPIO_IRQHangling(GPIO_PIN_NO_12);					//thiết lập ngắt(xóa cờ bit trong PR register) nếu có tín hiệu tại vị trí pin
 80009a8:	200c      	movs	r0, #12
 80009aa:	f7ff ff59 	bl	8000860 <GPIO_IRQHangling>
	GPIO_ToggleOutputPin(GPIOD, GPIO_PIN_NO_0);			//thực hiện hàm công việc khi có ngắt xảy ra
 80009ae:	2100      	movs	r1, #0
 80009b0:	4802      	ldr	r0, [pc, #8]	; (80009bc <EXTI15_10_IRQHandler+0x1c>)
 80009b2:	f7ff fe8f 	bl	80006d4 <GPIO_ToggleOutputPin>
}
 80009b6:	bf00      	nop
 80009b8:	bd80      	pop	{r7, pc}
 80009ba:	bf00      	nop
 80009bc:	40020c00 	.word	0x40020c00

080009c0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80009c0:	480d      	ldr	r0, [pc, #52]	; (80009f8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80009c2:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80009c4:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80009c8:	480c      	ldr	r0, [pc, #48]	; (80009fc <LoopForever+0x6>)
  ldr r1, =_edata
 80009ca:	490d      	ldr	r1, [pc, #52]	; (8000a00 <LoopForever+0xa>)
  ldr r2, =_sidata
 80009cc:	4a0d      	ldr	r2, [pc, #52]	; (8000a04 <LoopForever+0xe>)
  movs r3, #0
 80009ce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80009d0:	e002      	b.n	80009d8 <LoopCopyDataInit>

080009d2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80009d2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80009d4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80009d6:	3304      	adds	r3, #4

080009d8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80009d8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80009da:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80009dc:	d3f9      	bcc.n	80009d2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80009de:	4a0a      	ldr	r2, [pc, #40]	; (8000a08 <LoopForever+0x12>)
  ldr r4, =_ebss
 80009e0:	4c0a      	ldr	r4, [pc, #40]	; (8000a0c <LoopForever+0x16>)
  movs r3, #0
 80009e2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80009e4:	e001      	b.n	80009ea <LoopFillZerobss>

080009e6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80009e6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80009e8:	3204      	adds	r2, #4

080009ea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80009ea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80009ec:	d3fb      	bcc.n	80009e6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80009ee:	f000 f819 	bl	8000a24 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80009f2:	f7ff ff6b 	bl	80008cc <main>

080009f6 <LoopForever>:

LoopForever:
  b LoopForever
 80009f6:	e7fe      	b.n	80009f6 <LoopForever>
  ldr   r0, =_estack
 80009f8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80009fc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a00:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000a04:	08000a8c 	.word	0x08000a8c
  ldr r2, =_sbss
 8000a08:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000a0c:	2000001c 	.word	0x2000001c

08000a10 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000a10:	e7fe      	b.n	8000a10 <ADC_IRQHandler>

08000a12 <memset>:
 8000a12:	4402      	add	r2, r0
 8000a14:	4603      	mov	r3, r0
 8000a16:	4293      	cmp	r3, r2
 8000a18:	d100      	bne.n	8000a1c <memset+0xa>
 8000a1a:	4770      	bx	lr
 8000a1c:	f803 1b01 	strb.w	r1, [r3], #1
 8000a20:	e7f9      	b.n	8000a16 <memset+0x4>
	...

08000a24 <__libc_init_array>:
 8000a24:	b570      	push	{r4, r5, r6, lr}
 8000a26:	4d0d      	ldr	r5, [pc, #52]	; (8000a5c <__libc_init_array+0x38>)
 8000a28:	4c0d      	ldr	r4, [pc, #52]	; (8000a60 <__libc_init_array+0x3c>)
 8000a2a:	1b64      	subs	r4, r4, r5
 8000a2c:	10a4      	asrs	r4, r4, #2
 8000a2e:	2600      	movs	r6, #0
 8000a30:	42a6      	cmp	r6, r4
 8000a32:	d109      	bne.n	8000a48 <__libc_init_array+0x24>
 8000a34:	4d0b      	ldr	r5, [pc, #44]	; (8000a64 <__libc_init_array+0x40>)
 8000a36:	4c0c      	ldr	r4, [pc, #48]	; (8000a68 <__libc_init_array+0x44>)
 8000a38:	f000 f818 	bl	8000a6c <_init>
 8000a3c:	1b64      	subs	r4, r4, r5
 8000a3e:	10a4      	asrs	r4, r4, #2
 8000a40:	2600      	movs	r6, #0
 8000a42:	42a6      	cmp	r6, r4
 8000a44:	d105      	bne.n	8000a52 <__libc_init_array+0x2e>
 8000a46:	bd70      	pop	{r4, r5, r6, pc}
 8000a48:	f855 3b04 	ldr.w	r3, [r5], #4
 8000a4c:	4798      	blx	r3
 8000a4e:	3601      	adds	r6, #1
 8000a50:	e7ee      	b.n	8000a30 <__libc_init_array+0xc>
 8000a52:	f855 3b04 	ldr.w	r3, [r5], #4
 8000a56:	4798      	blx	r3
 8000a58:	3601      	adds	r6, #1
 8000a5a:	e7f2      	b.n	8000a42 <__libc_init_array+0x1e>
 8000a5c:	08000a84 	.word	0x08000a84
 8000a60:	08000a84 	.word	0x08000a84
 8000a64:	08000a84 	.word	0x08000a84
 8000a68:	08000a88 	.word	0x08000a88

08000a6c <_init>:
 8000a6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000a6e:	bf00      	nop
 8000a70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000a72:	bc08      	pop	{r3}
 8000a74:	469e      	mov	lr, r3
 8000a76:	4770      	bx	lr

08000a78 <_fini>:
 8000a78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000a7a:	bf00      	nop
 8000a7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000a7e:	bc08      	pop	{r3}
 8000a80:	469e      	mov	lr, r3
 8000a82:	4770      	bx	lr
