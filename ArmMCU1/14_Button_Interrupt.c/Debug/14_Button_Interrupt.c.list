
14_Button_Interrupt.c.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001a8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000007b0  080001a8  080001a8  000101a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000958  08000960  00010960  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000958  08000958  00010960  2**0
                  CONTENTS
  4 .ARM          00000000  08000958  08000958  00010960  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000958  08000960  00010960  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000958  08000958  00010958  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800095c  0800095c  0001095c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010960  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00010960  2**0
                  CONTENTS
 10 .bss          0000001c  20000000  20000000  00020000  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000001c  2000001c  00020000  2**0
                  ALLOC
 12 .ARM.attributes 0000002a  00000000  00000000  00010960  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  0001098a  2**0
                  CONTENTS, READONLY
 14 .debug_info   00000a5e  00000000  00000000  000109cd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000002b9  00000000  00000000  0001142b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000000c8  00000000  00000000  000116e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 0000008c  00000000  00000000  000117b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00001f3a  00000000  00000000  0001183c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00001050  00000000  00000000  00013776  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000089a0  00000000  00000000  000147c6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00000288  00000000  00000000  0001d168  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000005f  00000000  00000000  0001d3f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a8 <__do_global_dtors_aux>:
 80001a8:	b510      	push	{r4, lr}
 80001aa:	4c05      	ldr	r4, [pc, #20]	; (80001c0 <__do_global_dtors_aux+0x18>)
 80001ac:	7823      	ldrb	r3, [r4, #0]
 80001ae:	b933      	cbnz	r3, 80001be <__do_global_dtors_aux+0x16>
 80001b0:	4b04      	ldr	r3, [pc, #16]	; (80001c4 <__do_global_dtors_aux+0x1c>)
 80001b2:	b113      	cbz	r3, 80001ba <__do_global_dtors_aux+0x12>
 80001b4:	4804      	ldr	r0, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x20>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	2301      	movs	r3, #1
 80001bc:	7023      	strb	r3, [r4, #0]
 80001be:	bd10      	pop	{r4, pc}
 80001c0:	20000000 	.word	0x20000000
 80001c4:	00000000 	.word	0x00000000
 80001c8:	08000940 	.word	0x08000940

080001cc <frame_dummy>:
 80001cc:	b508      	push	{r3, lr}
 80001ce:	4b03      	ldr	r3, [pc, #12]	; (80001dc <frame_dummy+0x10>)
 80001d0:	b11b      	cbz	r3, 80001da <frame_dummy+0xe>
 80001d2:	4903      	ldr	r1, [pc, #12]	; (80001e0 <frame_dummy+0x14>)
 80001d4:	4803      	ldr	r0, [pc, #12]	; (80001e4 <frame_dummy+0x18>)
 80001d6:	f3af 8000 	nop.w
 80001da:	bd08      	pop	{r3, pc}
 80001dc:	00000000 	.word	0x00000000
 80001e0:	20000004 	.word	0x20000004
 80001e4:	08000940 	.word	0x08000940

080001e8 <delay>:
#define BTN_RELEASED	LOW
/*
 * Hàm Delay thời gian
 */
void delay(void)
{
 80001e8:	b480      	push	{r7}
 80001ea:	b083      	sub	sp, #12
 80001ec:	af00      	add	r7, sp, #0
	//for(uint32_t i = 0; i< 500000; i++);

	//this will introduce ~200ms delay when system clock 16Mhz
	for(uint32_t i = 0; i< 500000/2; i++);		//giảm thời gian delay
 80001ee:	2300      	movs	r3, #0
 80001f0:	607b      	str	r3, [r7, #4]
 80001f2:	e002      	b.n	80001fa <delay+0x12>
 80001f4:	687b      	ldr	r3, [r7, #4]
 80001f6:	3301      	adds	r3, #1
 80001f8:	607b      	str	r3, [r7, #4]
 80001fa:	687b      	ldr	r3, [r7, #4]
 80001fc:	4a04      	ldr	r2, [pc, #16]	; (8000210 <delay+0x28>)
 80001fe:	4293      	cmp	r3, r2
 8000200:	d9f8      	bls.n	80001f4 <delay+0xc>
}
 8000202:	bf00      	nop
 8000204:	bf00      	nop
 8000206:	370c      	adds	r7, #12
 8000208:	46bd      	mov	sp, r7
 800020a:	bc80      	pop	{r7}
 800020c:	4770      	bx	lr
 800020e:	bf00      	nop
 8000210:	0003d08f 	.word	0x0003d08f

08000214 <main>:

int main(void)
{
 8000214:	b580      	push	{r7, lr}
 8000216:	b086      	sub	sp, #24
 8000218:	af00      	add	r7, sp, #0
	GPIOx_Handle_t Gpio_Led; 		//Khai báo biến struct chứa thông tin port và pin muốn điều khiển
	GPIOx_Handle_t GPIOBtn;			//Khai báo biến struct chứa thông tin port và pin(input button) muốn điều khiển

	//Tách riêng 2 biến có thành phần cấu trúc giống nhau ra làm hai biến có địa chỉ riêng biệt
	memset(&Gpio_Led,0,sizeof(Gpio_Led));
 800021a:	f107 030c 	add.w	r3, r7, #12
 800021e:	220c      	movs	r2, #12
 8000220:	2100      	movs	r1, #0
 8000222:	4618      	mov	r0, r3
 8000224:	f000 fb60 	bl	80008e8 <memset>
	memset(&GPIOBtn,0,sizeof(GPIOBtn));
 8000228:	463b      	mov	r3, r7
 800022a:	220c      	movs	r2, #12
 800022c:	2100      	movs	r1, #0
 800022e:	4618      	mov	r0, r3
 8000230:	f000 fb5a 	bl	80008e8 <memset>

	/*******************************Cấu hình thông tin hoạt động của LED muốn điều khiển************************/
	Gpio_Led.pGPIOx = GPIOD;										//Thiết lập port muốn điều khiển
 8000234:	4b17      	ldr	r3, [pc, #92]	; (8000294 <main+0x80>)
 8000236:	60fb      	str	r3, [r7, #12]
	Gpio_Led.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_12;		//Chân pin của port muốn điều khiển
 8000238:	230c      	movs	r3, #12
 800023a:	743b      	strb	r3, [r7, #16]
	Gpio_Led.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_OUT;			//Chế độ xuất tín hiệu output
 800023c:	2301      	movs	r3, #1
 800023e:	747b      	strb	r3, [r7, #17]
	Gpio_Led.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST; 		//Tốc độ xuất tín hiệu
 8000240:	2302      	movs	r3, #2
 8000242:	74bb      	strb	r3, [r7, #18]
	Gpio_Led.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_PP;		//Chuẩn xuất Push_Pull
 8000244:	2300      	movs	r3, #0
 8000246:	753b      	strb	r3, [r7, #20]

	Gpio_Led.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;		//Đầu ra ko cần điện trở kéo
 8000248:	2300      	movs	r3, #0
 800024a:	74fb      	strb	r3, [r7, #19]
	//Gpio_Led.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PIN_PU;	//Chọn pull-up(kéo lên) vì đầu ra của mạch led là GND

	//Cấu hình xung Clock cho Peripheral Port Led
	GPIO_PeriClockControl(GPIOD, ENABLE);		//Port D và Enalbe=1
 800024c:	2101      	movs	r1, #1
 800024e:	4811      	ldr	r0, [pc, #68]	; (8000294 <main+0x80>)
 8000250:	f000 f85c 	bl	800030c <GPIO_PeriClockControl>

	//Gọi hàm khởi tạo hoạt động cấu hình muốn điều khiển(ở đây muốn điều khiển Output Gpio_Led)
	GPIO_Init(&Gpio_Led);
 8000254:	f107 030c 	add.w	r3, r7, #12
 8000258:	4618      	mov	r0, r3
 800025a:	f000 f8d9 	bl	8000410 <GPIO_Init>


	/*******************************Cấu hình thông tin hoạt động của Button muốn điều khiển**********************/
	GPIOBtn.pGPIOx = GPIOD;											//Thiết lập port muốn điều khiển
 800025e:	4b0d      	ldr	r3, [pc, #52]	; (8000294 <main+0x80>)
 8000260:	603b      	str	r3, [r7, #0]
	GPIOBtn.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_5;			//Chân pin của port muốn điều khiển
 8000262:	2305      	movs	r3, #5
 8000264:	713b      	strb	r3, [r7, #4]
	GPIOBtn.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_IT_FT;			//Chế độ xuất tín hiệu input, "interrupt Flow Trigger"
 8000266:	2304      	movs	r3, #4
 8000268:	717b      	strb	r3, [r7, #5]
	GPIOBtn.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST; 		//Tốc độ xuất tín hiệu
 800026a:	2302      	movs	r3, #2
 800026c:	71bb      	strb	r3, [r7, #6]

	//GPIOBtn.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;		//Đầu vào ko cần điện trở kéo
	Gpio_Led.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PIN_PU;			//Chọn pull-up(kéo lên) thông mạch nút nhấn
 800026e:	2301      	movs	r3, #1
 8000270:	74fb      	strb	r3, [r7, #19]

	//Cấu hình xung Clock cho Peripheral Port Button
	GPIO_PeriClockControl(GPIOD, ENABLE);		//Port D và Enalbe=1
 8000272:	2101      	movs	r1, #1
 8000274:	4807      	ldr	r0, [pc, #28]	; (8000294 <main+0x80>)
 8000276:	f000 f849 	bl	800030c <GPIO_PeriClockControl>

	//Gọi hàm khởi tạo hoạt động cấu hình muốn điều khiển(ở đây muốn điều khiển Input Button)
	GPIO_Init(&GPIOBtn);
 800027a:	463b      	mov	r3, r7
 800027c:	4618      	mov	r0, r3
 800027e:	f000 f8c7 	bl	8000410 <GPIO_Init>


	/******************************Cấu hình IRQ configurations****************************/
	GPIO_IRQPriorityConfig(IRQ_NO_EXTI9_5, NVIC_IRQ_PRI15);
 8000282:	210f      	movs	r1, #15
 8000284:	2017      	movs	r0, #23
 8000286:	f000 fae5 	bl	8000854 <GPIO_IRQPriorityConfig>
	GPIO_IRQInterruptConfig(IRQ_NO_EXTI9_5, ENABLE);
 800028a:	2101      	movs	r1, #1
 800028c:	2017      	movs	r0, #23
 800028e:	f000 fa5d 	bl	800074c <GPIO_IRQInterruptConfig>

	while(1);
 8000292:	e7fe      	b.n	8000292 <main+0x7e>
 8000294:	40020c00 	.word	0x40020c00

08000298 <EXTI9_5_IRQHandler>:

/**
 * Hàm xử lý IRQ liên quan đến ngắt EXTI9_5
 */
void EXTI9_5_IRQHandler()
{
 8000298:	b580      	push	{r7, lr}
 800029a:	af00      	add	r7, sp, #0
	delay();								//200ms, chống dội phím ngắt
 800029c:	f7ff ffa4 	bl	80001e8 <delay>
	GPIO_IRQHangling(GPIO_PIN_NO_5);					//thiết lập ngắt nếu có tín hiệu tại vị trí pin
 80002a0:	2005      	movs	r0, #5
 80002a2:	f000 fb01 	bl	80008a8 <GPIO_IRQHangling>
	GPIO_ToggleOutputPin(GPIOD, GPIO_PIN_NO_12);		//thực hiện hàm công việc khi có ngắt xảy ra
 80002a6:	210c      	movs	r1, #12
 80002a8:	4802      	ldr	r0, [pc, #8]	; (80002b4 <EXTI9_5_IRQHandler+0x1c>)
 80002aa:	f000 fa3b 	bl	8000724 <GPIO_ToggleOutputPin>
}
 80002ae:	bf00      	nop
 80002b0:	bd80      	pop	{r7, pc}
 80002b2:	bf00      	nop
 80002b4:	40020c00 	.word	0x40020c00

080002b8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80002b8:	480d      	ldr	r0, [pc, #52]	; (80002f0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80002ba:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80002bc:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80002c0:	480c      	ldr	r0, [pc, #48]	; (80002f4 <LoopForever+0x6>)
  ldr r1, =_edata
 80002c2:	490d      	ldr	r1, [pc, #52]	; (80002f8 <LoopForever+0xa>)
  ldr r2, =_sidata
 80002c4:	4a0d      	ldr	r2, [pc, #52]	; (80002fc <LoopForever+0xe>)
  movs r3, #0
 80002c6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80002c8:	e002      	b.n	80002d0 <LoopCopyDataInit>

080002ca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80002ca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80002cc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80002ce:	3304      	adds	r3, #4

080002d0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80002d0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80002d2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80002d4:	d3f9      	bcc.n	80002ca <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80002d6:	4a0a      	ldr	r2, [pc, #40]	; (8000300 <LoopForever+0x12>)
  ldr r4, =_ebss
 80002d8:	4c0a      	ldr	r4, [pc, #40]	; (8000304 <LoopForever+0x16>)
  movs r3, #0
 80002da:	2300      	movs	r3, #0
  b LoopFillZerobss
 80002dc:	e001      	b.n	80002e2 <LoopFillZerobss>

080002de <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80002de:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80002e0:	3204      	adds	r2, #4

080002e2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80002e2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80002e4:	d3fb      	bcc.n	80002de <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80002e6:	f000 fb07 	bl	80008f8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80002ea:	f7ff ff93 	bl	8000214 <main>

080002ee <LoopForever>:

LoopForever:
  b LoopForever
 80002ee:	e7fe      	b.n	80002ee <LoopForever>
  ldr   r0, =_estack
 80002f0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80002f4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80002f8:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80002fc:	08000960 	.word	0x08000960
  ldr r2, =_sbss
 8000300:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000304:	2000001c 	.word	0x2000001c

08000308 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000308:	e7fe      	b.n	8000308 <ADC_IRQHandler>
	...

0800030c <GPIO_PeriClockControl>:
 * @return		- none
 *
 * @Note 		- none
 */
void GPIO_PeriClockControl(GPIO_RegDef_t *pGPIOx, uint8_t EnorDi)
{
 800030c:	b480      	push	{r7}
 800030e:	b083      	sub	sp, #12
 8000310:	af00      	add	r7, sp, #0
 8000312:	6078      	str	r0, [r7, #4]
 8000314:	460b      	mov	r3, r1
 8000316:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE)
 8000318:	78fb      	ldrb	r3, [r7, #3]
 800031a:	2b01      	cmp	r3, #1
 800031c:	d161      	bne.n	80003e2 <GPIO_PeriClockControl+0xd6>
	{
		if(pGPIOx == GPIOA)
 800031e:	687b      	ldr	r3, [r7, #4]
 8000320:	4a32      	ldr	r2, [pc, #200]	; (80003ec <GPIO_PeriClockControl+0xe0>)
 8000322:	4293      	cmp	r3, r2
 8000324:	d106      	bne.n	8000334 <GPIO_PeriClockControl+0x28>
		{
			GPIOA_PCLK_EN();		//hàm đã đc define trong stm32f407xx.h(lớp Driver)
 8000326:	4b32      	ldr	r3, [pc, #200]	; (80003f0 <GPIO_PeriClockControl+0xe4>)
 8000328:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800032a:	4a31      	ldr	r2, [pc, #196]	; (80003f0 <GPIO_PeriClockControl+0xe4>)
 800032c:	f043 0301 	orr.w	r3, r3, #1
 8000330:	6313      	str	r3, [r2, #48]	; 0x30
	else
	{
		//Todo: (Interrupt Status)

	}
}
 8000332:	e056      	b.n	80003e2 <GPIO_PeriClockControl+0xd6>
		else if(pGPIOx == GPIOB)
 8000334:	687b      	ldr	r3, [r7, #4]
 8000336:	4a2f      	ldr	r2, [pc, #188]	; (80003f4 <GPIO_PeriClockControl+0xe8>)
 8000338:	4293      	cmp	r3, r2
 800033a:	d106      	bne.n	800034a <GPIO_PeriClockControl+0x3e>
			GPIOB_PCLK_EN();
 800033c:	4b2c      	ldr	r3, [pc, #176]	; (80003f0 <GPIO_PeriClockControl+0xe4>)
 800033e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000340:	4a2b      	ldr	r2, [pc, #172]	; (80003f0 <GPIO_PeriClockControl+0xe4>)
 8000342:	f043 0302 	orr.w	r3, r3, #2
 8000346:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000348:	e04b      	b.n	80003e2 <GPIO_PeriClockControl+0xd6>
		else if(pGPIOx == GPIOC)
 800034a:	687b      	ldr	r3, [r7, #4]
 800034c:	4a2a      	ldr	r2, [pc, #168]	; (80003f8 <GPIO_PeriClockControl+0xec>)
 800034e:	4293      	cmp	r3, r2
 8000350:	d106      	bne.n	8000360 <GPIO_PeriClockControl+0x54>
			GPIOC_PCLK_EN();
 8000352:	4b27      	ldr	r3, [pc, #156]	; (80003f0 <GPIO_PeriClockControl+0xe4>)
 8000354:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000356:	4a26      	ldr	r2, [pc, #152]	; (80003f0 <GPIO_PeriClockControl+0xe4>)
 8000358:	f043 0304 	orr.w	r3, r3, #4
 800035c:	6313      	str	r3, [r2, #48]	; 0x30
}
 800035e:	e040      	b.n	80003e2 <GPIO_PeriClockControl+0xd6>
		else if(pGPIOx == GPIOD)
 8000360:	687b      	ldr	r3, [r7, #4]
 8000362:	4a26      	ldr	r2, [pc, #152]	; (80003fc <GPIO_PeriClockControl+0xf0>)
 8000364:	4293      	cmp	r3, r2
 8000366:	d106      	bne.n	8000376 <GPIO_PeriClockControl+0x6a>
			GPIOD_PCLK_EN();
 8000368:	4b21      	ldr	r3, [pc, #132]	; (80003f0 <GPIO_PeriClockControl+0xe4>)
 800036a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800036c:	4a20      	ldr	r2, [pc, #128]	; (80003f0 <GPIO_PeriClockControl+0xe4>)
 800036e:	f043 0308 	orr.w	r3, r3, #8
 8000372:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000374:	e035      	b.n	80003e2 <GPIO_PeriClockControl+0xd6>
		else if(pGPIOx == GPIOE)
 8000376:	687b      	ldr	r3, [r7, #4]
 8000378:	4a21      	ldr	r2, [pc, #132]	; (8000400 <GPIO_PeriClockControl+0xf4>)
 800037a:	4293      	cmp	r3, r2
 800037c:	d106      	bne.n	800038c <GPIO_PeriClockControl+0x80>
			GPIOE_PCLK_EN();
 800037e:	4b1c      	ldr	r3, [pc, #112]	; (80003f0 <GPIO_PeriClockControl+0xe4>)
 8000380:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000382:	4a1b      	ldr	r2, [pc, #108]	; (80003f0 <GPIO_PeriClockControl+0xe4>)
 8000384:	f043 0310 	orr.w	r3, r3, #16
 8000388:	6313      	str	r3, [r2, #48]	; 0x30
}
 800038a:	e02a      	b.n	80003e2 <GPIO_PeriClockControl+0xd6>
		else if(pGPIOx == GPIOF)
 800038c:	687b      	ldr	r3, [r7, #4]
 800038e:	4a1d      	ldr	r2, [pc, #116]	; (8000404 <GPIO_PeriClockControl+0xf8>)
 8000390:	4293      	cmp	r3, r2
 8000392:	d106      	bne.n	80003a2 <GPIO_PeriClockControl+0x96>
			GPIOF_PCLK_EN();
 8000394:	4b16      	ldr	r3, [pc, #88]	; (80003f0 <GPIO_PeriClockControl+0xe4>)
 8000396:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000398:	4a15      	ldr	r2, [pc, #84]	; (80003f0 <GPIO_PeriClockControl+0xe4>)
 800039a:	f043 0320 	orr.w	r3, r3, #32
 800039e:	6313      	str	r3, [r2, #48]	; 0x30
}
 80003a0:	e01f      	b.n	80003e2 <GPIO_PeriClockControl+0xd6>
		else if(pGPIOx == GPIOG)
 80003a2:	687b      	ldr	r3, [r7, #4]
 80003a4:	4a18      	ldr	r2, [pc, #96]	; (8000408 <GPIO_PeriClockControl+0xfc>)
 80003a6:	4293      	cmp	r3, r2
 80003a8:	d106      	bne.n	80003b8 <GPIO_PeriClockControl+0xac>
			GPIOG_PCLK_EN();
 80003aa:	4b11      	ldr	r3, [pc, #68]	; (80003f0 <GPIO_PeriClockControl+0xe4>)
 80003ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003ae:	4a10      	ldr	r2, [pc, #64]	; (80003f0 <GPIO_PeriClockControl+0xe4>)
 80003b0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80003b4:	6313      	str	r3, [r2, #48]	; 0x30
}
 80003b6:	e014      	b.n	80003e2 <GPIO_PeriClockControl+0xd6>
		else if(pGPIOx == GPIOH)
 80003b8:	687b      	ldr	r3, [r7, #4]
 80003ba:	4a13      	ldr	r2, [pc, #76]	; (8000408 <GPIO_PeriClockControl+0xfc>)
 80003bc:	4293      	cmp	r3, r2
 80003be:	d106      	bne.n	80003ce <GPIO_PeriClockControl+0xc2>
			GPIOH_PCLK_EN();
 80003c0:	4b0b      	ldr	r3, [pc, #44]	; (80003f0 <GPIO_PeriClockControl+0xe4>)
 80003c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003c4:	4a0a      	ldr	r2, [pc, #40]	; (80003f0 <GPIO_PeriClockControl+0xe4>)
 80003c6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80003ca:	6313      	str	r3, [r2, #48]	; 0x30
}
 80003cc:	e009      	b.n	80003e2 <GPIO_PeriClockControl+0xd6>
		else if(pGPIOx == GPIOI)
 80003ce:	687b      	ldr	r3, [r7, #4]
 80003d0:	4a0e      	ldr	r2, [pc, #56]	; (800040c <GPIO_PeriClockControl+0x100>)
 80003d2:	4293      	cmp	r3, r2
 80003d4:	d105      	bne.n	80003e2 <GPIO_PeriClockControl+0xd6>
			GPIOI_PCLK_EN();
 80003d6:	4b06      	ldr	r3, [pc, #24]	; (80003f0 <GPIO_PeriClockControl+0xe4>)
 80003d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003da:	4a05      	ldr	r2, [pc, #20]	; (80003f0 <GPIO_PeriClockControl+0xe4>)
 80003dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80003e0:	6313      	str	r3, [r2, #48]	; 0x30
}
 80003e2:	bf00      	nop
 80003e4:	370c      	adds	r7, #12
 80003e6:	46bd      	mov	sp, r7
 80003e8:	bc80      	pop	{r7}
 80003ea:	4770      	bx	lr
 80003ec:	40020000 	.word	0x40020000
 80003f0:	40023800 	.word	0x40023800
 80003f4:	40020400 	.word	0x40020400
 80003f8:	40020800 	.word	0x40020800
 80003fc:	40020c00 	.word	0x40020c00
 8000400:	40021000 	.word	0x40021000
 8000404:	40021400 	.word	0x40021400
 8000408:	40021800 	.word	0x40021800
 800040c:	40022000 	.word	0x40022000

08000410 <GPIO_Init>:
 * @return		- none
 *
 * @Note 		- none
 */
void GPIO_Init(GPIOx_Handle_t *pGPIOHandle)
{
 8000410:	b480      	push	{r7}
 8000412:	b087      	sub	sp, #28
 8000414:	af00      	add	r7, sp, #0
 8000416:	6078      	str	r0, [r7, #4]
	uint32_t temp = 0; 	//temp. registerr
 8000418:	2300      	movs	r3, #0
 800041a:	617b      	str	r3, [r7, #20]

	//1. configure(cấu hình) the mode of gpio pin(Datasheet 8.4.1)
	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_ANALOG)
 800041c:	687b      	ldr	r3, [r7, #4]
 800041e:	795b      	ldrb	r3, [r3, #5]
 8000420:	2b03      	cmp	r3, #3
 8000422:	d81f      	bhi.n	8000464 <GPIO_Init+0x54>
	{
		//Giá trị GPIO_PinMode thuộc 1 trong 4 trường hợp bit của Mode Register
		//this is part non-interrupt mode

		//Xác định lấy vị trí MODERx cần điều khiển dựa vào số chân Pin_Number và lưu vào biến temp
		temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000424:	687b      	ldr	r3, [r7, #4]
 8000426:	795b      	ldrb	r3, [r3, #5]
 8000428:	461a      	mov	r2, r3
 800042a:	687b      	ldr	r3, [r7, #4]
 800042c:	791b      	ldrb	r3, [r3, #4]
 800042e:	005b      	lsls	r3, r3, #1
 8000430:	fa02 f303 	lsl.w	r3, r2, r3
 8000434:	617b      	str	r3, [r7, #20]
		//Dịch 2 bit vì theo datasheet, mỗi 2 bit quản lý một pin number của GPIO port mode register
		//vd: GPIO_PinNumber=Pin0 thì sẽ kích hoạt MODER0(2*0=0->bắt đầu từ bit0)
		//GPIO_PinNumber=Pin1 thì sẽ kích hoạt MODER1(2*1=2->bắt đầu từ bit2)

		//Xóa(clear) value bit tại vị trí 2 bit muốn cấu hình
		pGPIOHandle->pGPIOx->MODER &= ~(0x3 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000436:	687b      	ldr	r3, [r7, #4]
 8000438:	681b      	ldr	r3, [r3, #0]
 800043a:	681a      	ldr	r2, [r3, #0]
 800043c:	687b      	ldr	r3, [r7, #4]
 800043e:	791b      	ldrb	r3, [r3, #4]
 8000440:	4619      	mov	r1, r3
 8000442:	2303      	movs	r3, #3
 8000444:	408b      	lsls	r3, r1
 8000446:	43db      	mvns	r3, r3
 8000448:	4619      	mov	r1, r3
 800044a:	687b      	ldr	r3, [r7, #4]
 800044c:	681b      	ldr	r3, [r3, #0]
 800044e:	400a      	ands	r2, r1
 8000450:	601a      	str	r2, [r3, #0]
		//Theo datasheet thì để reset MODERx thì ta cần thiết lập value bit là 00, Ta có: 0x3 = 11
		//~(0x3 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber); nghĩa là tiến hành đảo trạng thái 11 thành 00
		//vị trí chân Pin_Number

		//Lưu value temp vào trong thanh ghi MODER của biến pGPIOHandle
		pGPIOHandle->pGPIOx->MODER |= temp;
 8000452:	687b      	ldr	r3, [r7, #4]
 8000454:	681b      	ldr	r3, [r3, #0]
 8000456:	6819      	ldr	r1, [r3, #0]
 8000458:	687b      	ldr	r3, [r7, #4]
 800045a:	681b      	ldr	r3, [r3, #0]
 800045c:	697a      	ldr	r2, [r7, #20]
 800045e:	430a      	orrs	r2, r1
 8000460:	601a      	str	r2, [r3, #0]
 8000462:	e0b8      	b.n	80005d6 <GPIO_Init+0x1c6>
	}
	else
	{
		//This is part(phần) will code later (Interrupt mode) //các trường hợp khác từ 4->6

		if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_FT)
 8000464:	687b      	ldr	r3, [r7, #4]
 8000466:	795b      	ldrb	r3, [r3, #5]
 8000468:	2b04      	cmp	r3, #4
 800046a:	d117      	bne.n	800049c <GPIO_Init+0x8c>
		{
			//1. configure the FTSR(Falling(xuống) Trigger Select Register)
			EXTI->FTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800046c:	4b43      	ldr	r3, [pc, #268]	; (800057c <GPIO_Init+0x16c>)
 800046e:	68db      	ldr	r3, [r3, #12]
 8000470:	687a      	ldr	r2, [r7, #4]
 8000472:	7912      	ldrb	r2, [r2, #4]
 8000474:	4611      	mov	r1, r2
 8000476:	2201      	movs	r2, #1
 8000478:	408a      	lsls	r2, r1
 800047a:	4611      	mov	r1, r2
 800047c:	4a3f      	ldr	r2, [pc, #252]	; (800057c <GPIO_Init+0x16c>)
 800047e:	430b      	orrs	r3, r1
 8000480:	60d3      	str	r3, [r2, #12]

			//1.2 Clear the corresponding(tương ứng) RTSR, việc này phòng ngừa cho tình huống sử dụng RTSR trước đó
			//và có thể gây xung đột cho lần cấu hình hiện tại
			EXTI->RTSR &= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000482:	4b3e      	ldr	r3, [pc, #248]	; (800057c <GPIO_Init+0x16c>)
 8000484:	689b      	ldr	r3, [r3, #8]
 8000486:	687a      	ldr	r2, [r7, #4]
 8000488:	7912      	ldrb	r2, [r2, #4]
 800048a:	4611      	mov	r1, r2
 800048c:	2201      	movs	r2, #1
 800048e:	408a      	lsls	r2, r1
 8000490:	43d2      	mvns	r2, r2
 8000492:	4611      	mov	r1, r2
 8000494:	4a39      	ldr	r2, [pc, #228]	; (800057c <GPIO_Init+0x16c>)
 8000496:	400b      	ands	r3, r1
 8000498:	6093      	str	r3, [r2, #8]
 800049a:	e035      	b.n	8000508 <GPIO_Init+0xf8>
		}
		else if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RT)
 800049c:	687b      	ldr	r3, [r7, #4]
 800049e:	795b      	ldrb	r3, [r3, #5]
 80004a0:	2b05      	cmp	r3, #5
 80004a2:	d117      	bne.n	80004d4 <GPIO_Init+0xc4>
		{
			//1. configure the RTSR(Rising(lên) Trigger Select Register)
			EXTI->RTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80004a4:	4b35      	ldr	r3, [pc, #212]	; (800057c <GPIO_Init+0x16c>)
 80004a6:	689b      	ldr	r3, [r3, #8]
 80004a8:	687a      	ldr	r2, [r7, #4]
 80004aa:	7912      	ldrb	r2, [r2, #4]
 80004ac:	4611      	mov	r1, r2
 80004ae:	2201      	movs	r2, #1
 80004b0:	408a      	lsls	r2, r1
 80004b2:	4611      	mov	r1, r2
 80004b4:	4a31      	ldr	r2, [pc, #196]	; (800057c <GPIO_Init+0x16c>)
 80004b6:	430b      	orrs	r3, r1
 80004b8:	6093      	str	r3, [r2, #8]

			//1.2 Clear the corresponding(tương ứng) FTSR, việc này phòng ngừa cho tình huống sử dụng FTSR trước đó
			//và có thể gây xung đột cho lần cấu hình hiện tại
			EXTI->FTSR &= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80004ba:	4b30      	ldr	r3, [pc, #192]	; (800057c <GPIO_Init+0x16c>)
 80004bc:	68db      	ldr	r3, [r3, #12]
 80004be:	687a      	ldr	r2, [r7, #4]
 80004c0:	7912      	ldrb	r2, [r2, #4]
 80004c2:	4611      	mov	r1, r2
 80004c4:	2201      	movs	r2, #1
 80004c6:	408a      	lsls	r2, r1
 80004c8:	43d2      	mvns	r2, r2
 80004ca:	4611      	mov	r1, r2
 80004cc:	4a2b      	ldr	r2, [pc, #172]	; (800057c <GPIO_Init+0x16c>)
 80004ce:	400b      	ands	r3, r1
 80004d0:	60d3      	str	r3, [r2, #12]
 80004d2:	e019      	b.n	8000508 <GPIO_Init+0xf8>
		}
		else if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RFT)
 80004d4:	687b      	ldr	r3, [r7, #4]
 80004d6:	795b      	ldrb	r3, [r3, #5]
 80004d8:	2b06      	cmp	r3, #6
 80004da:	d115      	bne.n	8000508 <GPIO_Init+0xf8>
		{
			//1. configure the FTSR and RTSR
			EXTI->FTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80004dc:	4b27      	ldr	r3, [pc, #156]	; (800057c <GPIO_Init+0x16c>)
 80004de:	68db      	ldr	r3, [r3, #12]
 80004e0:	687a      	ldr	r2, [r7, #4]
 80004e2:	7912      	ldrb	r2, [r2, #4]
 80004e4:	4611      	mov	r1, r2
 80004e6:	2201      	movs	r2, #1
 80004e8:	408a      	lsls	r2, r1
 80004ea:	4611      	mov	r1, r2
 80004ec:	4a23      	ldr	r2, [pc, #140]	; (800057c <GPIO_Init+0x16c>)
 80004ee:	430b      	orrs	r3, r1
 80004f0:	60d3      	str	r3, [r2, #12]
			EXTI->RTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80004f2:	4b22      	ldr	r3, [pc, #136]	; (800057c <GPIO_Init+0x16c>)
 80004f4:	689b      	ldr	r3, [r3, #8]
 80004f6:	687a      	ldr	r2, [r7, #4]
 80004f8:	7912      	ldrb	r2, [r2, #4]
 80004fa:	4611      	mov	r1, r2
 80004fc:	2201      	movs	r2, #1
 80004fe:	408a      	lsls	r2, r1
 8000500:	4611      	mov	r1, r2
 8000502:	4a1e      	ldr	r2, [pc, #120]	; (800057c <GPIO_Init+0x16c>)
 8000504:	430b      	orrs	r3, r1
 8000506:	6093      	str	r3, [r2, #8]
		}

		//2. Configure the GPIO port selection in SYSCFG_EXTICR
		uint8_t temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 4;		//xác định SYSCFG_EXTICR_temp1 register
 8000508:	687b      	ldr	r3, [r7, #4]
 800050a:	791b      	ldrb	r3, [r3, #4]
 800050c:	089b      	lsrs	r3, r3, #2
 800050e:	74fb      	strb	r3, [r7, #19]
		uint8_t temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 4;		//xác định 4bit EXTI_temp2 trong SYSCFG_EXTICR_temp1
 8000510:	687b      	ldr	r3, [r7, #4]
 8000512:	791b      	ldrb	r3, [r3, #4]
 8000514:	f003 0303 	and.w	r3, r3, #3
 8000518:	74bb      	strb	r3, [r7, #18]
		uint8_t portcode = GPIO_BASEADDR_TO_CODE(pGPIOHandle->pGPIOx);		//xác định mã nhị phân xxxx để xác định GPIO port sử dụng
 800051a:	687b      	ldr	r3, [r7, #4]
 800051c:	681b      	ldr	r3, [r3, #0]
 800051e:	4a18      	ldr	r2, [pc, #96]	; (8000580 <GPIO_Init+0x170>)
 8000520:	4293      	cmp	r3, r2
 8000522:	d03b      	beq.n	800059c <GPIO_Init+0x18c>
 8000524:	687b      	ldr	r3, [r7, #4]
 8000526:	681b      	ldr	r3, [r3, #0]
 8000528:	4a16      	ldr	r2, [pc, #88]	; (8000584 <GPIO_Init+0x174>)
 800052a:	4293      	cmp	r3, r2
 800052c:	d024      	beq.n	8000578 <GPIO_Init+0x168>
 800052e:	687b      	ldr	r3, [r7, #4]
 8000530:	681b      	ldr	r3, [r3, #0]
 8000532:	4a15      	ldr	r2, [pc, #84]	; (8000588 <GPIO_Init+0x178>)
 8000534:	4293      	cmp	r3, r2
 8000536:	d01d      	beq.n	8000574 <GPIO_Init+0x164>
 8000538:	687b      	ldr	r3, [r7, #4]
 800053a:	681b      	ldr	r3, [r3, #0]
 800053c:	4a13      	ldr	r2, [pc, #76]	; (800058c <GPIO_Init+0x17c>)
 800053e:	4293      	cmp	r3, r2
 8000540:	d016      	beq.n	8000570 <GPIO_Init+0x160>
 8000542:	687b      	ldr	r3, [r7, #4]
 8000544:	681b      	ldr	r3, [r3, #0]
 8000546:	4a12      	ldr	r2, [pc, #72]	; (8000590 <GPIO_Init+0x180>)
 8000548:	4293      	cmp	r3, r2
 800054a:	d00f      	beq.n	800056c <GPIO_Init+0x15c>
 800054c:	687b      	ldr	r3, [r7, #4]
 800054e:	681b      	ldr	r3, [r3, #0]
 8000550:	4a10      	ldr	r2, [pc, #64]	; (8000594 <GPIO_Init+0x184>)
 8000552:	4293      	cmp	r3, r2
 8000554:	d008      	beq.n	8000568 <GPIO_Init+0x158>
 8000556:	687b      	ldr	r3, [r7, #4]
 8000558:	681b      	ldr	r3, [r3, #0]
 800055a:	4a0f      	ldr	r2, [pc, #60]	; (8000598 <GPIO_Init+0x188>)
 800055c:	4293      	cmp	r3, r2
 800055e:	d101      	bne.n	8000564 <GPIO_Init+0x154>
 8000560:	2306      	movs	r3, #6
 8000562:	e01c      	b.n	800059e <GPIO_Init+0x18e>
 8000564:	2300      	movs	r3, #0
 8000566:	e01a      	b.n	800059e <GPIO_Init+0x18e>
 8000568:	2305      	movs	r3, #5
 800056a:	e018      	b.n	800059e <GPIO_Init+0x18e>
 800056c:	2304      	movs	r3, #4
 800056e:	e016      	b.n	800059e <GPIO_Init+0x18e>
 8000570:	2303      	movs	r3, #3
 8000572:	e014      	b.n	800059e <GPIO_Init+0x18e>
 8000574:	2302      	movs	r3, #2
 8000576:	e012      	b.n	800059e <GPIO_Init+0x18e>
 8000578:	2301      	movs	r3, #1
 800057a:	e010      	b.n	800059e <GPIO_Init+0x18e>
 800057c:	40013c00 	.word	0x40013c00
 8000580:	40020000 	.word	0x40020000
 8000584:	40020400 	.word	0x40020400
 8000588:	40020800 	.word	0x40020800
 800058c:	40020c00 	.word	0x40020c00
 8000590:	40021000 	.word	0x40021000
 8000594:	40021400 	.word	0x40021400
 8000598:	40021800 	.word	0x40021800
 800059c:	2300      	movs	r3, #0
 800059e:	747b      	strb	r3, [r7, #17]
		SYSCFG_PCLK_EN();													//Kích hoạt xung clock để cấu hình
 80005a0:	4b5d      	ldr	r3, [pc, #372]	; (8000718 <GPIO_Init+0x308>)
 80005a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80005a4:	4a5c      	ldr	r2, [pc, #368]	; (8000718 <GPIO_Init+0x308>)
 80005a6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80005aa:	6453      	str	r3, [r2, #68]	; 0x44
		SYSCFG->EXTICR[temp1] = portcode << (temp2 * 4);					//Cấu hình thanh ghi SYSCFG_EXTICR_temp1
 80005ac:	7c7a      	ldrb	r2, [r7, #17]
 80005ae:	7cbb      	ldrb	r3, [r7, #18]
 80005b0:	009b      	lsls	r3, r3, #2
 80005b2:	fa02 f103 	lsl.w	r1, r2, r3
 80005b6:	4a59      	ldr	r2, [pc, #356]	; (800071c <GPIO_Init+0x30c>)
 80005b8:	7cfb      	ldrb	r3, [r7, #19]
 80005ba:	3302      	adds	r3, #2
 80005bc:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

		//3. Eanble the exti interrupt delivery(chuyển, sử dụng) by using IMR(Interrupt Masking Register)
		EXTI->IMR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80005c0:	4b57      	ldr	r3, [pc, #348]	; (8000720 <GPIO_Init+0x310>)
 80005c2:	681b      	ldr	r3, [r3, #0]
 80005c4:	687a      	ldr	r2, [r7, #4]
 80005c6:	7912      	ldrb	r2, [r2, #4]
 80005c8:	4611      	mov	r1, r2
 80005ca:	2201      	movs	r2, #1
 80005cc:	408a      	lsls	r2, r1
 80005ce:	4611      	mov	r1, r2
 80005d0:	4a53      	ldr	r2, [pc, #332]	; (8000720 <GPIO_Init+0x310>)
 80005d2:	430b      	orrs	r3, r1
 80005d4:	6013      	str	r3, [r2, #0]

	}
	//Reset biến temp để sử dụng cho các lệnh khác trong hàm
	temp = 0;
 80005d6:	2300      	movs	r3, #0
 80005d8:	617b      	str	r3, [r7, #20]

	//2. configure the speed (Datasheet 8.4.3)
	//Xác định lấy vị trí OSPEEDRx cần điều khiển dựa vào số chân Pin_Number và lưu vào biến temp
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinSpeed << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 80005da:	687b      	ldr	r3, [r7, #4]
 80005dc:	799b      	ldrb	r3, [r3, #6]
 80005de:	461a      	mov	r2, r3
 80005e0:	687b      	ldr	r3, [r7, #4]
 80005e2:	791b      	ldrb	r3, [r3, #4]
 80005e4:	005b      	lsls	r3, r3, #1
 80005e6:	fa02 f303 	lsl.w	r3, r2, r3
 80005ea:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OSPEEDR &=  ~(0x3 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);	//Clearing bit field
 80005ec:	687b      	ldr	r3, [r7, #4]
 80005ee:	681b      	ldr	r3, [r3, #0]
 80005f0:	689a      	ldr	r2, [r3, #8]
 80005f2:	687b      	ldr	r3, [r7, #4]
 80005f4:	791b      	ldrb	r3, [r3, #4]
 80005f6:	4619      	mov	r1, r3
 80005f8:	2303      	movs	r3, #3
 80005fa:	408b      	lsls	r3, r1
 80005fc:	43db      	mvns	r3, r3
 80005fe:	4619      	mov	r1, r3
 8000600:	687b      	ldr	r3, [r7, #4]
 8000602:	681b      	ldr	r3, [r3, #0]
 8000604:	400a      	ands	r2, r1
 8000606:	609a      	str	r2, [r3, #8]
	pGPIOHandle->pGPIOx->OSPEEDR |= temp;
 8000608:	687b      	ldr	r3, [r7, #4]
 800060a:	681b      	ldr	r3, [r3, #0]
 800060c:	6899      	ldr	r1, [r3, #8]
 800060e:	687b      	ldr	r3, [r7, #4]
 8000610:	681b      	ldr	r3, [r3, #0]
 8000612:	697a      	ldr	r2, [r7, #20]
 8000614:	430a      	orrs	r2, r1
 8000616:	609a      	str	r2, [r3, #8]
	//=> Lúc này ta đã xác định(cấu hình) đc speed(OSPEEDRx) của GPIO tùy thuộc vào pin_number bạn muốn control
	temp = 0;
 8000618:	2300      	movs	r3, #0
 800061a:	617b      	str	r3, [r7, #20]

	//3. configure the pullup-pulldown settings (Datasheet 8.4.4)
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinPuPdControl << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 800061c:	687b      	ldr	r3, [r7, #4]
 800061e:	79db      	ldrb	r3, [r3, #7]
 8000620:	461a      	mov	r2, r3
 8000622:	687b      	ldr	r3, [r7, #4]
 8000624:	791b      	ldrb	r3, [r3, #4]
 8000626:	005b      	lsls	r3, r3, #1
 8000628:	fa02 f303 	lsl.w	r3, r2, r3
 800062c:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->PUPDR &=  ~(0x3 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800062e:	687b      	ldr	r3, [r7, #4]
 8000630:	681b      	ldr	r3, [r3, #0]
 8000632:	68da      	ldr	r2, [r3, #12]
 8000634:	687b      	ldr	r3, [r7, #4]
 8000636:	791b      	ldrb	r3, [r3, #4]
 8000638:	4619      	mov	r1, r3
 800063a:	2303      	movs	r3, #3
 800063c:	408b      	lsls	r3, r1
 800063e:	43db      	mvns	r3, r3
 8000640:	4619      	mov	r1, r3
 8000642:	687b      	ldr	r3, [r7, #4]
 8000644:	681b      	ldr	r3, [r3, #0]
 8000646:	400a      	ands	r2, r1
 8000648:	60da      	str	r2, [r3, #12]
	pGPIOHandle->pGPIOx->PUPDR |= temp;
 800064a:	687b      	ldr	r3, [r7, #4]
 800064c:	681b      	ldr	r3, [r3, #0]
 800064e:	68d9      	ldr	r1, [r3, #12]
 8000650:	687b      	ldr	r3, [r7, #4]
 8000652:	681b      	ldr	r3, [r3, #0]
 8000654:	697a      	ldr	r2, [r7, #20]
 8000656:	430a      	orrs	r2, r1
 8000658:	60da      	str	r2, [r3, #12]
	temp = 0;
 800065a:	2300      	movs	r3, #0
 800065c:	617b      	str	r3, [r7, #20]

	//4. configure the optype (Datasheet 8.4.2)
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinOPType << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800065e:	687b      	ldr	r3, [r7, #4]
 8000660:	7a1b      	ldrb	r3, [r3, #8]
 8000662:	461a      	mov	r2, r3
 8000664:	687b      	ldr	r3, [r7, #4]
 8000666:	791b      	ldrb	r3, [r3, #4]
 8000668:	fa02 f303 	lsl.w	r3, r2, r3
 800066c:	617b      	str	r3, [r7, #20]
	//Dịch 1 bit vì theo datasheet, mỗi 1 bit quản lý một pin number của GPIO port mode register
	pGPIOHandle->pGPIOx->OTYPER &=  ~(0x1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber); //Clearing bit field
 800066e:	687b      	ldr	r3, [r7, #4]
 8000670:	681b      	ldr	r3, [r3, #0]
 8000672:	685a      	ldr	r2, [r3, #4]
 8000674:	687b      	ldr	r3, [r7, #4]
 8000676:	791b      	ldrb	r3, [r3, #4]
 8000678:	4619      	mov	r1, r3
 800067a:	2301      	movs	r3, #1
 800067c:	408b      	lsls	r3, r1
 800067e:	43db      	mvns	r3, r3
 8000680:	4619      	mov	r1, r3
 8000682:	687b      	ldr	r3, [r7, #4]
 8000684:	681b      	ldr	r3, [r3, #0]
 8000686:	400a      	ands	r2, r1
 8000688:	605a      	str	r2, [r3, #4]
	//~(0x1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber); nghĩa là tiến hành đảo trạng thái 1 thành 0
	//vị trí chân Pin_Number
	pGPIOHandle->pGPIOx->OTYPER |= temp;
 800068a:	687b      	ldr	r3, [r7, #4]
 800068c:	681b      	ldr	r3, [r3, #0]
 800068e:	6859      	ldr	r1, [r3, #4]
 8000690:	687b      	ldr	r3, [r7, #4]
 8000692:	681b      	ldr	r3, [r3, #0]
 8000694:	697a      	ldr	r2, [r7, #20]
 8000696:	430a      	orrs	r2, r1
 8000698:	605a      	str	r2, [r3, #4]
	temp = 0;
 800069a:	2300      	movs	r3, #0
 800069c:	617b      	str	r3, [r7, #20]

	//5. configure the alt functionality
	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_ALTFN)
 800069e:	687b      	ldr	r3, [r7, #4]
 80006a0:	795b      	ldrb	r3, [r3, #5]
 80006a2:	2b02      	cmp	r3, #2
 80006a4:	d132      	bne.n	800070c <GPIO_Init+0x2fc>
		//Chế độ này đc thực thi khi và chỉ khi bit MODERx đc thiết lập GPIO_MODE_ALTFN

		uint32_t temp1,temp2;

		//Xác định thanh ghi cần sử dụng là GPIOx_AFRH ->AFR[1] hay GPIOx_AFRL ->AFR[0]
		temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 8;
 80006a6:	687b      	ldr	r3, [r7, #4]
 80006a8:	791b      	ldrb	r3, [r3, #4]
 80006aa:	08db      	lsrs	r3, r3, #3
 80006ac:	b2db      	uxtb	r3, r3
 80006ae:	60fb      	str	r3, [r7, #12]

		//Xác định vị trí cụm 4bit cần sử dụng ở vị trí nào trong thanh ghi
		temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 8;
 80006b0:	687b      	ldr	r3, [r7, #4]
 80006b2:	791b      	ldrb	r3, [r3, #4]
 80006b4:	f003 0307 	and.w	r3, r3, #7
 80006b8:	60bb      	str	r3, [r7, #8]

		//Clearing bit field
		pGPIOHandle->pGPIOx->AFR[temp1] &= ~(0xF << (4* temp2));   //0xF = 1111, đảo 1111->0000 tại vị trí 4*temp2
 80006ba:	687b      	ldr	r3, [r7, #4]
 80006bc:	681b      	ldr	r3, [r3, #0]
 80006be:	68fa      	ldr	r2, [r7, #12]
 80006c0:	3208      	adds	r2, #8
 80006c2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80006c6:	68bb      	ldr	r3, [r7, #8]
 80006c8:	009b      	lsls	r3, r3, #2
 80006ca:	210f      	movs	r1, #15
 80006cc:	fa01 f303 	lsl.w	r3, r1, r3
 80006d0:	43db      	mvns	r3, r3
 80006d2:	4619      	mov	r1, r3
 80006d4:	687b      	ldr	r3, [r7, #4]
 80006d6:	681b      	ldr	r3, [r3, #0]
 80006d8:	4011      	ands	r1, r2
 80006da:	68fa      	ldr	r2, [r7, #12]
 80006dc:	3208      	adds	r2, #8
 80006de:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

		//Lưu cấu hình AFR vào trong con trỏ pGPIOHandle
		pGPIOHandle->pGPIOx->AFR[temp1] |= (pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFunMode << (4* temp2));
 80006e2:	687b      	ldr	r3, [r7, #4]
 80006e4:	681b      	ldr	r3, [r3, #0]
 80006e6:	68fa      	ldr	r2, [r7, #12]
 80006e8:	3208      	adds	r2, #8
 80006ea:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80006ee:	687b      	ldr	r3, [r7, #4]
 80006f0:	7a5b      	ldrb	r3, [r3, #9]
 80006f2:	4619      	mov	r1, r3
 80006f4:	68bb      	ldr	r3, [r7, #8]
 80006f6:	009b      	lsls	r3, r3, #2
 80006f8:	fa01 f303 	lsl.w	r3, r1, r3
 80006fc:	4619      	mov	r1, r3
 80006fe:	687b      	ldr	r3, [r7, #4]
 8000700:	681b      	ldr	r3, [r3, #0]
 8000702:	4311      	orrs	r1, r2
 8000704:	68fa      	ldr	r2, [r7, #12]
 8000706:	3208      	adds	r2, #8
 8000708:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	}
}
 800070c:	bf00      	nop
 800070e:	371c      	adds	r7, #28
 8000710:	46bd      	mov	sp, r7
 8000712:	bc80      	pop	{r7}
 8000714:	4770      	bx	lr
 8000716:	bf00      	nop
 8000718:	40023800 	.word	0x40023800
 800071c:	40013800 	.word	0x40013800
 8000720:	40013c00 	.word	0x40013c00

08000724 <GPIO_ToggleOutputPin>:
 * @return		- none
 *
 * @Note 		- none
 */
void GPIO_ToggleOutputPin(GPIO_RegDef_t *pGPIOx, uint8_t PinNumber)
{
 8000724:	b480      	push	{r7}
 8000726:	b083      	sub	sp, #12
 8000728:	af00      	add	r7, sp, #0
 800072a:	6078      	str	r0, [r7, #4]
 800072c:	460b      	mov	r3, r1
 800072e:	70fb      	strb	r3, [r7, #3]
	//pGPIOx->ODR = pGPIOx->ODR ^ (1 << PinNumber);   //Đảo trạng thái bit(toán tử XOR) tại vị trí pin number của pGPIOx->ODR
	//'^' : Hoạt động XOR đảo ngược bit ở chân được chỉ định, chuyển đổi trạng thái đầu ra của nó
	//Sau đó sẽ gán trỏ vào thanh ghi "pGPIOx->ODR"

	pGPIOx->ODR ^= (1 << PinNumber);
 8000730:	687b      	ldr	r3, [r7, #4]
 8000732:	695b      	ldr	r3, [r3, #20]
 8000734:	78fa      	ldrb	r2, [r7, #3]
 8000736:	2101      	movs	r1, #1
 8000738:	fa01 f202 	lsl.w	r2, r1, r2
 800073c:	405a      	eors	r2, r3
 800073e:	687b      	ldr	r3, [r7, #4]
 8000740:	615a      	str	r2, [r3, #20]
}
 8000742:	bf00      	nop
 8000744:	370c      	adds	r7, #12
 8000746:	46bd      	mov	sp, r7
 8000748:	bc80      	pop	{r7}
 800074a:	4770      	bx	lr

0800074c <GPIO_IRQInterruptConfig>:
 * @return		- none
 *
 * @Note 		- none
 */
void GPIO_IRQInterruptConfig(uint8_t IRQNumber, uint8_t EnorDi)
{
 800074c:	b480      	push	{r7}
 800074e:	b083      	sub	sp, #12
 8000750:	af00      	add	r7, sp, #0
 8000752:	4603      	mov	r3, r0
 8000754:	460a      	mov	r2, r1
 8000756:	71fb      	strb	r3, [r7, #7]
 8000758:	4613      	mov	r3, r2
 800075a:	71bb      	strb	r3, [r7, #6]
	if(EnorDi == ENABLE)	//cho phép kích hoạt interrupt
 800075c:	79bb      	ldrb	r3, [r7, #6]
 800075e:	2b01      	cmp	r3, #1
 8000760:	d133      	bne.n	80007ca <GPIO_IRQInterruptConfig+0x7e>
	{
		if(IRQNumber <= 31)
 8000762:	79fb      	ldrb	r3, [r7, #7]
 8000764:	2b1f      	cmp	r3, #31
 8000766:	d80a      	bhi.n	800077e <GPIO_IRQInterruptConfig+0x32>
		{
			//program ISER0 register
			*NVIC_ISER0 |= (1 << IRQNumber);
 8000768:	4b34      	ldr	r3, [pc, #208]	; (800083c <GPIO_IRQInterruptConfig+0xf0>)
 800076a:	681b      	ldr	r3, [r3, #0]
 800076c:	79fa      	ldrb	r2, [r7, #7]
 800076e:	2101      	movs	r1, #1
 8000770:	fa01 f202 	lsl.w	r2, r1, r2
 8000774:	4611      	mov	r1, r2
 8000776:	4a31      	ldr	r2, [pc, #196]	; (800083c <GPIO_IRQInterruptConfig+0xf0>)
 8000778:	430b      	orrs	r3, r1
 800077a:	6013      	str	r3, [r2, #0]
		{
			//program ICER2 register
			*NVIC_ICER2 |= (1 << IRQNumber % 64);
		}
	}
}
 800077c:	e059      	b.n	8000832 <GPIO_IRQInterruptConfig+0xe6>
		else if(IRQNumber > 31 && IRQNumber < 64)
 800077e:	79fb      	ldrb	r3, [r7, #7]
 8000780:	2b1f      	cmp	r3, #31
 8000782:	d90f      	bls.n	80007a4 <GPIO_IRQInterruptConfig+0x58>
 8000784:	79fb      	ldrb	r3, [r7, #7]
 8000786:	2b3f      	cmp	r3, #63	; 0x3f
 8000788:	d80c      	bhi.n	80007a4 <GPIO_IRQInterruptConfig+0x58>
			*NVIC_ISER1 |= (1 << IRQNumber % 32);   //vd 32%32=0, lấy bit 0 của ISER1
 800078a:	4b2d      	ldr	r3, [pc, #180]	; (8000840 <GPIO_IRQInterruptConfig+0xf4>)
 800078c:	681b      	ldr	r3, [r3, #0]
 800078e:	79fa      	ldrb	r2, [r7, #7]
 8000790:	f002 021f 	and.w	r2, r2, #31
 8000794:	2101      	movs	r1, #1
 8000796:	fa01 f202 	lsl.w	r2, r1, r2
 800079a:	4611      	mov	r1, r2
 800079c:	4a28      	ldr	r2, [pc, #160]	; (8000840 <GPIO_IRQInterruptConfig+0xf4>)
 800079e:	430b      	orrs	r3, r1
 80007a0:	6013      	str	r3, [r2, #0]
 80007a2:	e046      	b.n	8000832 <GPIO_IRQInterruptConfig+0xe6>
		else if(IRQNumber >= 64 && IRQNumber < 96)
 80007a4:	79fb      	ldrb	r3, [r7, #7]
 80007a6:	2b3f      	cmp	r3, #63	; 0x3f
 80007a8:	d943      	bls.n	8000832 <GPIO_IRQInterruptConfig+0xe6>
 80007aa:	79fb      	ldrb	r3, [r7, #7]
 80007ac:	2b5f      	cmp	r3, #95	; 0x5f
 80007ae:	d840      	bhi.n	8000832 <GPIO_IRQInterruptConfig+0xe6>
			*NVIC_ISER2 |= (1 << IRQNumber % 64);
 80007b0:	4b24      	ldr	r3, [pc, #144]	; (8000844 <GPIO_IRQInterruptConfig+0xf8>)
 80007b2:	681b      	ldr	r3, [r3, #0]
 80007b4:	79fa      	ldrb	r2, [r7, #7]
 80007b6:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 80007ba:	2101      	movs	r1, #1
 80007bc:	fa01 f202 	lsl.w	r2, r1, r2
 80007c0:	4611      	mov	r1, r2
 80007c2:	4a20      	ldr	r2, [pc, #128]	; (8000844 <GPIO_IRQInterruptConfig+0xf8>)
 80007c4:	430b      	orrs	r3, r1
 80007c6:	6013      	str	r3, [r2, #0]
}
 80007c8:	e033      	b.n	8000832 <GPIO_IRQInterruptConfig+0xe6>
		if(IRQNumber <= 31)
 80007ca:	79fb      	ldrb	r3, [r7, #7]
 80007cc:	2b1f      	cmp	r3, #31
 80007ce:	d80a      	bhi.n	80007e6 <GPIO_IRQInterruptConfig+0x9a>
			*NVIC_ICER0 |= (1 << IRQNumber);
 80007d0:	4b1d      	ldr	r3, [pc, #116]	; (8000848 <GPIO_IRQInterruptConfig+0xfc>)
 80007d2:	681b      	ldr	r3, [r3, #0]
 80007d4:	79fa      	ldrb	r2, [r7, #7]
 80007d6:	2101      	movs	r1, #1
 80007d8:	fa01 f202 	lsl.w	r2, r1, r2
 80007dc:	4611      	mov	r1, r2
 80007de:	4a1a      	ldr	r2, [pc, #104]	; (8000848 <GPIO_IRQInterruptConfig+0xfc>)
 80007e0:	430b      	orrs	r3, r1
 80007e2:	6013      	str	r3, [r2, #0]
}
 80007e4:	e025      	b.n	8000832 <GPIO_IRQInterruptConfig+0xe6>
		else if(IRQNumber > 31 && IRQNumber < 64)
 80007e6:	79fb      	ldrb	r3, [r7, #7]
 80007e8:	2b1f      	cmp	r3, #31
 80007ea:	d90f      	bls.n	800080c <GPIO_IRQInterruptConfig+0xc0>
 80007ec:	79fb      	ldrb	r3, [r7, #7]
 80007ee:	2b3f      	cmp	r3, #63	; 0x3f
 80007f0:	d80c      	bhi.n	800080c <GPIO_IRQInterruptConfig+0xc0>
			*NVIC_ICER1 |= (1 << IRQNumber % 32);
 80007f2:	4b16      	ldr	r3, [pc, #88]	; (800084c <GPIO_IRQInterruptConfig+0x100>)
 80007f4:	681b      	ldr	r3, [r3, #0]
 80007f6:	79fa      	ldrb	r2, [r7, #7]
 80007f8:	f002 021f 	and.w	r2, r2, #31
 80007fc:	2101      	movs	r1, #1
 80007fe:	fa01 f202 	lsl.w	r2, r1, r2
 8000802:	4611      	mov	r1, r2
 8000804:	4a11      	ldr	r2, [pc, #68]	; (800084c <GPIO_IRQInterruptConfig+0x100>)
 8000806:	430b      	orrs	r3, r1
 8000808:	6013      	str	r3, [r2, #0]
 800080a:	e012      	b.n	8000832 <GPIO_IRQInterruptConfig+0xe6>
		else if(IRQNumber >= 64 && IRQNumber < 96)
 800080c:	79fb      	ldrb	r3, [r7, #7]
 800080e:	2b3f      	cmp	r3, #63	; 0x3f
 8000810:	d90f      	bls.n	8000832 <GPIO_IRQInterruptConfig+0xe6>
 8000812:	79fb      	ldrb	r3, [r7, #7]
 8000814:	2b5f      	cmp	r3, #95	; 0x5f
 8000816:	d80c      	bhi.n	8000832 <GPIO_IRQInterruptConfig+0xe6>
			*NVIC_ICER2 |= (1 << IRQNumber % 64);
 8000818:	4b0d      	ldr	r3, [pc, #52]	; (8000850 <GPIO_IRQInterruptConfig+0x104>)
 800081a:	681b      	ldr	r3, [r3, #0]
 800081c:	79fa      	ldrb	r2, [r7, #7]
 800081e:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8000822:	2101      	movs	r1, #1
 8000824:	fa01 f202 	lsl.w	r2, r1, r2
 8000828:	4611      	mov	r1, r2
 800082a:	4a09      	ldr	r2, [pc, #36]	; (8000850 <GPIO_IRQInterruptConfig+0x104>)
 800082c:	430b      	orrs	r3, r1
 800082e:	6013      	str	r3, [r2, #0]
}
 8000830:	e7ff      	b.n	8000832 <GPIO_IRQInterruptConfig+0xe6>
 8000832:	bf00      	nop
 8000834:	370c      	adds	r7, #12
 8000836:	46bd      	mov	sp, r7
 8000838:	bc80      	pop	{r7}
 800083a:	4770      	bx	lr
 800083c:	e000e100 	.word	0xe000e100
 8000840:	e000e104 	.word	0xe000e104
 8000844:	e000e108 	.word	0xe000e108
 8000848:	e000e180 	.word	0xe000e180
 800084c:	e000e184 	.word	0xe000e184
 8000850:	e000e188 	.word	0xe000e188

08000854 <GPIO_IRQPriorityConfig>:
 * @return		- none
 *
 * @Note 		- none
 */
void GPIO_IRQPriorityConfig(uint8_t IRQNumber, uint32_t IRQPriority)
{
 8000854:	b480      	push	{r7}
 8000856:	b085      	sub	sp, #20
 8000858:	af00      	add	r7, sp, #0
 800085a:	4603      	mov	r3, r0
 800085c:	6039      	str	r1, [r7, #0]
 800085e:	71fb      	strb	r3, [r7, #7]
	//1. first lets find out the ipr register
	uint8_t iprx = IRQNumber / 4;			//Xác định sử dụng thanh ghi nào
 8000860:	79fb      	ldrb	r3, [r7, #7]
 8000862:	089b      	lsrs	r3, r3, #2
 8000864:	73fb      	strb	r3, [r7, #15]
	uint8_t iprx_section = IRQNumber % 4;	//Xác định phần 8bit nào đc sử dụng(mỗi thanh ghi có 4 phần 8 bit)
 8000866:	79fb      	ldrb	r3, [r7, #7]
 8000868:	f003 0303 	and.w	r3, r3, #3
 800086c:	73bb      	strb	r3, [r7, #14]

	//Mỗi phần 8bit thì chỉ lấy 4bit cao làm priority, 4bit thấp ko sử dụng
	uint8_t shift_amount = (8 * iprx_section) + (8 - NO_PR_BITS_IMPLEMENTED);
 800086e:	7bbb      	ldrb	r3, [r7, #14]
 8000870:	00db      	lsls	r3, r3, #3
 8000872:	b2db      	uxtb	r3, r3
 8000874:	3304      	adds	r3, #4
 8000876:	737b      	strb	r3, [r7, #13]

	//*(NVIC_PR_BASEADDR + (iprx * 4 ) |= (IRQPriority << shift_amount);	//lỗi
	//lỗi công thức xác định địa chỉ iprx chưa chính xác

	*(NVIC_PR_BASEADDR + iprx ) |= (IRQPriority << shift_amount);
 8000878:	7bfb      	ldrb	r3, [r7, #15]
 800087a:	009b      	lsls	r3, r3, #2
 800087c:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 8000880:	f503 4364 	add.w	r3, r3, #58368	; 0xe400
 8000884:	6819      	ldr	r1, [r3, #0]
 8000886:	7b7b      	ldrb	r3, [r7, #13]
 8000888:	683a      	ldr	r2, [r7, #0]
 800088a:	409a      	lsls	r2, r3
 800088c:	7bfb      	ldrb	r3, [r7, #15]
 800088e:	009b      	lsls	r3, r3, #2
 8000890:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 8000894:	f503 4364 	add.w	r3, r3, #58368	; 0xe400
 8000898:	430a      	orrs	r2, r1
 800089a:	601a      	str	r2, [r3, #0]
	//iprx : địa chỉ thanh ghi iprx

	//Vd: IRQNumber =  23(IRQ_NO_EXTI9_5)-> 23 / 4 = 5 -> thanh ghi IPR5
	//									 -> 23 % 4 = 3 -> phần section thứ tư[3:0]
}
 800089c:	bf00      	nop
 800089e:	3714      	adds	r7, #20
 80008a0:	46bd      	mov	sp, r7
 80008a2:	bc80      	pop	{r7}
 80008a4:	4770      	bx	lr
	...

080008a8 <GPIO_IRQHangling>:
 * @return		- none
 *
 * @Note 		- none
 */
void GPIO_IRQHangling(uint8_t PinNumber)
{
 80008a8:	b480      	push	{r7}
 80008aa:	b083      	sub	sp, #12
 80008ac:	af00      	add	r7, sp, #0
 80008ae:	4603      	mov	r3, r0
 80008b0:	71fb      	strb	r3, [r7, #7]
	//Clear the exti pr register corresponding(tương ứng) to the pin number
	if(EXTI->PR & (1 << PinNumber))
 80008b2:	4b0c      	ldr	r3, [pc, #48]	; (80008e4 <GPIO_IRQHangling+0x3c>)
 80008b4:	695b      	ldr	r3, [r3, #20]
 80008b6:	79fa      	ldrb	r2, [r7, #7]
 80008b8:	2101      	movs	r1, #1
 80008ba:	fa01 f202 	lsl.w	r2, r1, r2
 80008be:	4013      	ands	r3, r2
 80008c0:	2b00      	cmp	r3, #0
 80008c2:	d00a      	beq.n	80008da <GPIO_IRQHangling+0x32>
	{
		EXTI->PR &= ~(1 << PinNumber); 		//Clear bit trong PR(Pending Register EXTI)
 80008c4:	4b07      	ldr	r3, [pc, #28]	; (80008e4 <GPIO_IRQHangling+0x3c>)
 80008c6:	695b      	ldr	r3, [r3, #20]
 80008c8:	79fa      	ldrb	r2, [r7, #7]
 80008ca:	2101      	movs	r1, #1
 80008cc:	fa01 f202 	lsl.w	r2, r1, r2
 80008d0:	43d2      	mvns	r2, r2
 80008d2:	4611      	mov	r1, r2
 80008d4:	4a03      	ldr	r2, [pc, #12]	; (80008e4 <GPIO_IRQHangling+0x3c>)
 80008d6:	400b      	ands	r3, r1
 80008d8:	6153      	str	r3, [r2, #20]
	}
}
 80008da:	bf00      	nop
 80008dc:	370c      	adds	r7, #12
 80008de:	46bd      	mov	sp, r7
 80008e0:	bc80      	pop	{r7}
 80008e2:	4770      	bx	lr
 80008e4:	40013c00 	.word	0x40013c00

080008e8 <memset>:
 80008e8:	4402      	add	r2, r0
 80008ea:	4603      	mov	r3, r0
 80008ec:	4293      	cmp	r3, r2
 80008ee:	d100      	bne.n	80008f2 <memset+0xa>
 80008f0:	4770      	bx	lr
 80008f2:	f803 1b01 	strb.w	r1, [r3], #1
 80008f6:	e7f9      	b.n	80008ec <memset+0x4>

080008f8 <__libc_init_array>:
 80008f8:	b570      	push	{r4, r5, r6, lr}
 80008fa:	4d0d      	ldr	r5, [pc, #52]	; (8000930 <__libc_init_array+0x38>)
 80008fc:	4c0d      	ldr	r4, [pc, #52]	; (8000934 <__libc_init_array+0x3c>)
 80008fe:	1b64      	subs	r4, r4, r5
 8000900:	10a4      	asrs	r4, r4, #2
 8000902:	2600      	movs	r6, #0
 8000904:	42a6      	cmp	r6, r4
 8000906:	d109      	bne.n	800091c <__libc_init_array+0x24>
 8000908:	4d0b      	ldr	r5, [pc, #44]	; (8000938 <__libc_init_array+0x40>)
 800090a:	4c0c      	ldr	r4, [pc, #48]	; (800093c <__libc_init_array+0x44>)
 800090c:	f000 f818 	bl	8000940 <_init>
 8000910:	1b64      	subs	r4, r4, r5
 8000912:	10a4      	asrs	r4, r4, #2
 8000914:	2600      	movs	r6, #0
 8000916:	42a6      	cmp	r6, r4
 8000918:	d105      	bne.n	8000926 <__libc_init_array+0x2e>
 800091a:	bd70      	pop	{r4, r5, r6, pc}
 800091c:	f855 3b04 	ldr.w	r3, [r5], #4
 8000920:	4798      	blx	r3
 8000922:	3601      	adds	r6, #1
 8000924:	e7ee      	b.n	8000904 <__libc_init_array+0xc>
 8000926:	f855 3b04 	ldr.w	r3, [r5], #4
 800092a:	4798      	blx	r3
 800092c:	3601      	adds	r6, #1
 800092e:	e7f2      	b.n	8000916 <__libc_init_array+0x1e>
 8000930:	08000958 	.word	0x08000958
 8000934:	08000958 	.word	0x08000958
 8000938:	08000958 	.word	0x08000958
 800093c:	0800095c 	.word	0x0800095c

08000940 <_init>:
 8000940:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000942:	bf00      	nop
 8000944:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000946:	bc08      	pop	{r3}
 8000948:	469e      	mov	lr, r3
 800094a:	4770      	bx	lr

0800094c <_fini>:
 800094c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800094e:	bf00      	nop
 8000950:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000952:	bc08      	pop	{r3}
 8000954:	469e      	mov	lr, r3
 8000956:	4770      	bx	lr
