
22_STM32Fxx_Driver_USART.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001a8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001aac  080001a8  080001a8  000101a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000050  08001c54  08001c54  00011c54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001ca4  08001ca4  00020080  2**0
                  CONTENTS
  4 .ARM          00000000  08001ca4  08001ca4  00020080  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001ca4  08001ca4  00020080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001ca4  08001ca4  00011ca4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001ca8  08001ca8  00011ca8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000080  20000000  08001cac  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020080  2**0
                  CONTENTS
 10 .bss          00000594  20000080  20000080  00020080  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000614  20000614  00020080  2**0
                  ALLOC
 12 .ARM.attributes 0000002a  00000000  00000000  00020080  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  000200aa  2**0
                  CONTENTS, READONLY
 14 .debug_info   0000209c  00000000  00000000  000200ed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00000908  00000000  00000000  00022189  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000268  00000000  00000000  00022a98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 000001b9  00000000  00000000  00022d00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  000039dc  00000000  00000000  00022eb9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0000302f  00000000  00000000  00026895  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    0000c9ab  00000000  00000000  000298c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00000ee8  00000000  00000000  00036270  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000062  00000000  00000000  00037158  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a8 <__do_global_dtors_aux>:
 80001a8:	b510      	push	{r4, lr}
 80001aa:	4c05      	ldr	r4, [pc, #20]	; (80001c0 <__do_global_dtors_aux+0x18>)
 80001ac:	7823      	ldrb	r3, [r4, #0]
 80001ae:	b933      	cbnz	r3, 80001be <__do_global_dtors_aux+0x16>
 80001b0:	4b04      	ldr	r3, [pc, #16]	; (80001c4 <__do_global_dtors_aux+0x1c>)
 80001b2:	b113      	cbz	r3, 80001ba <__do_global_dtors_aux+0x12>
 80001b4:	4804      	ldr	r0, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x20>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	2301      	movs	r3, #1
 80001bc:	7023      	strb	r3, [r4, #0]
 80001be:	bd10      	pop	{r4, pc}
 80001c0:	20000080 	.word	0x20000080
 80001c4:	00000000 	.word	0x00000000
 80001c8:	08001c3c 	.word	0x08001c3c

080001cc <frame_dummy>:
 80001cc:	b508      	push	{r3, lr}
 80001ce:	4b03      	ldr	r3, [pc, #12]	; (80001dc <frame_dummy+0x10>)
 80001d0:	b11b      	cbz	r3, 80001da <frame_dummy+0xe>
 80001d2:	4903      	ldr	r1, [pc, #12]	; (80001e0 <frame_dummy+0x14>)
 80001d4:	4803      	ldr	r0, [pc, #12]	; (80001e4 <frame_dummy+0x18>)
 80001d6:	f3af 8000 	nop.w
 80001da:	bd08      	pop	{r3, pc}
 80001dc:	00000000 	.word	0x00000000
 80001e0:	20000084 	.word	0x20000084
 80001e4:	08001c3c 	.word	0x08001c3c

080001e8 <strlen>:
 80001e8:	4603      	mov	r3, r0
 80001ea:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ee:	2a00      	cmp	r2, #0
 80001f0:	d1fb      	bne.n	80001ea <strlen+0x2>
 80001f2:	1a18      	subs	r0, r3, r0
 80001f4:	3801      	subs	r0, #1
 80001f6:	4770      	bx	lr

080001f8 <USART2_Init>:

extern void initialise_monitor_handles();

//Cấu hình USART2 do thông số user cài đặt
void USART2_Init(void)
{
 80001f8:	b580      	push	{r7, lr}
 80001fa:	af00      	add	r7, sp, #0
	usart2_handle.pUSARTx = USART2;
 80001fc:	4b0d      	ldr	r3, [pc, #52]	; (8000234 <USART2_Init+0x3c>)
 80001fe:	4a0e      	ldr	r2, [pc, #56]	; (8000238 <USART2_Init+0x40>)
 8000200:	601a      	str	r2, [r3, #0]
	usart2_handle.USART_Config.USART_Baud = USART_STD_BAUD_115200;
 8000202:	4b0c      	ldr	r3, [pc, #48]	; (8000234 <USART2_Init+0x3c>)
 8000204:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000208:	609a      	str	r2, [r3, #8]
	usart2_handle.USART_Config.USART_HWFlowControl = USART_HW_FLOW_CTRL_NONE;
 800020a:	4b0a      	ldr	r3, [pc, #40]	; (8000234 <USART2_Init+0x3c>)
 800020c:	2200      	movs	r2, #0
 800020e:	73da      	strb	r2, [r3, #15]
	usart2_handle.USART_Config.USART_Mode = USART_MODE_TXRX;
 8000210:	4b08      	ldr	r3, [pc, #32]	; (8000234 <USART2_Init+0x3c>)
 8000212:	2202      	movs	r2, #2
 8000214:	711a      	strb	r2, [r3, #4]
	usart2_handle.USART_Config.USART_NoOfStopBits = USART_STOPBITS_1;
 8000216:	4b07      	ldr	r3, [pc, #28]	; (8000234 <USART2_Init+0x3c>)
 8000218:	2200      	movs	r2, #0
 800021a:	731a      	strb	r2, [r3, #12]
	usart2_handle.USART_Config.USART_WordLength = USART_WORDLEN_8BITS;
 800021c:	4b05      	ldr	r3, [pc, #20]	; (8000234 <USART2_Init+0x3c>)
 800021e:	2200      	movs	r2, #0
 8000220:	735a      	strb	r2, [r3, #13]
	usart2_handle.USART_Config.USART_ParityControl = USART_PARITY_DISABLE;
 8000222:	4b04      	ldr	r3, [pc, #16]	; (8000234 <USART2_Init+0x3c>)
 8000224:	2200      	movs	r2, #0
 8000226:	739a      	strb	r2, [r3, #14]
	USART_Init(&usart2_handle);
 8000228:	4802      	ldr	r0, [pc, #8]	; (8000234 <USART2_Init+0x3c>)
 800022a:	f000 fd27 	bl	8000c7c <USART_Init>
}
 800022e:	bf00      	nop
 8000230:	bd80      	pop	{r7, pc}
 8000232:	bf00      	nop
 8000234:	2000049c 	.word	0x2000049c
 8000238:	40004400 	.word	0x40004400

0800023c <USART2_GPIOInit>:

//Cấu hình USART Alternate Functione
void USART2_GPIOInit(void)
{
 800023c:	b580      	push	{r7, lr}
 800023e:	b084      	sub	sp, #16
 8000240:	af00      	add	r7, sp, #0
	GPIOx_Handle_t usart_gpios;

	usart_gpios.pGPIOx = GPIOA;
 8000242:	4b0e      	ldr	r3, [pc, #56]	; (800027c <USART2_GPIOInit+0x40>)
 8000244:	607b      	str	r3, [r7, #4]
	usart_gpios.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALTFN;
 8000246:	2302      	movs	r3, #2
 8000248:	727b      	strb	r3, [r7, #9]
	usart_gpios.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_PP;
 800024a:	2300      	movs	r3, #0
 800024c:	733b      	strb	r3, [r7, #12]
	usart_gpios.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PIN_PU;
 800024e:	2301      	movs	r3, #1
 8000250:	72fb      	strb	r3, [r7, #11]
	usart_gpios.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 8000252:	2302      	movs	r3, #2
 8000254:	72bb      	strb	r3, [r7, #10]
	usart_gpios.GPIO_PinConfig.GPIO_PinAltFunMode =7;
 8000256:	2307      	movs	r3, #7
 8000258:	737b      	strb	r3, [r7, #13]

	usart_gpios.GPIO_PinConfig.GPIO_PinNumber  = GPIO_PIN_NO_2;
 800025a:	2302      	movs	r3, #2
 800025c:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&usart_gpios);
 800025e:	1d3b      	adds	r3, r7, #4
 8000260:	4618      	mov	r0, r3
 8000262:	f000 f9ff 	bl	8000664 <GPIO_Init>

	usart_gpios.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_3;
 8000266:	2303      	movs	r3, #3
 8000268:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&usart_gpios);
 800026a:	1d3b      	adds	r3, r7, #4
 800026c:	4618      	mov	r0, r3
 800026e:	f000 f9f9 	bl	8000664 <GPIO_Init>

}
 8000272:	bf00      	nop
 8000274:	3710      	adds	r7, #16
 8000276:	46bd      	mov	sp, r7
 8000278:	bd80      	pop	{r7, pc}
 800027a:	bf00      	nop
 800027c:	40020000 	.word	0x40020000

08000280 <delay>:
	GPIO_Init(&GpioLed);

}

void delay(void)
{
 8000280:	b480      	push	{r7}
 8000282:	b083      	sub	sp, #12
 8000284:	af00      	add	r7, sp, #0
	for(uint32_t i = 0 ; i < 500000/2 ; i ++);
 8000286:	2300      	movs	r3, #0
 8000288:	607b      	str	r3, [r7, #4]
 800028a:	e002      	b.n	8000292 <delay+0x12>
 800028c:	687b      	ldr	r3, [r7, #4]
 800028e:	3301      	adds	r3, #1
 8000290:	607b      	str	r3, [r7, #4]
 8000292:	687b      	ldr	r3, [r7, #4]
 8000294:	4a04      	ldr	r2, [pc, #16]	; (80002a8 <delay+0x28>)
 8000296:	4293      	cmp	r3, r2
 8000298:	d9f8      	bls.n	800028c <delay+0xc>
}
 800029a:	bf00      	nop
 800029c:	bf00      	nop
 800029e:	370c      	adds	r7, #12
 80002a0:	46bd      	mov	sp, r7
 80002a2:	bc80      	pop	{r7}
 80002a4:	4770      	bx	lr
 80002a6:	bf00      	nop
 80002a8:	0003d08f 	.word	0x0003d08f

080002ac <main>:

int main(void)
{
 80002ac:	b590      	push	{r4, r7, lr}
 80002ae:	b083      	sub	sp, #12
 80002b0:	af00      	add	r7, sp, #0
	uint32_t cnt = 0;
 80002b2:	2300      	movs	r3, #0
 80002b4:	607b      	str	r3, [r7, #4]

	//initialise_monitor_handles();

	USART2_GPIOInit();
 80002b6:	f7ff ffc1 	bl	800023c <USART2_GPIOInit>
    USART2_Init();
 80002ba:	f7ff ff9d 	bl	80001f8 <USART2_Init>

    USART_IRQInterruptConfig(IRQ_NO_USART2,ENABLE);
 80002be:	2101      	movs	r1, #1
 80002c0:	2026      	movs	r0, #38	; 0x26
 80002c2:	f000 fe03 	bl	8000ecc <USART_IRQInterruptConfig>

    USART_PeripheralControl(USART2,ENABLE);
 80002c6:	2101      	movs	r1, #1
 80002c8:	4829      	ldr	r0, [pc, #164]	; (8000370 <main+0xc4>)
 80002ca:	f000 fdd0 	bl	8000e6e <USART_PeripheralControl>

    printf("Application is running\n");
 80002ce:	4829      	ldr	r0, [pc, #164]	; (8000374 <main+0xc8>)
 80002d0:	f001 f926 	bl	8001520 <puts>

    //do forever
    while(1)
    {
		//wait till button is pressed
		while( ! GPIO_ReadFromInputPin(GPIOA,GPIO_PIN_NO_0) );
 80002d4:	bf00      	nop
 80002d6:	2100      	movs	r1, #0
 80002d8:	4827      	ldr	r0, [pc, #156]	; (8000378 <main+0xcc>)
 80002da:	f000 fb51 	bl	8000980 <GPIO_ReadFromInputPin>
 80002de:	4603      	mov	r3, r0
 80002e0:	2b00      	cmp	r3, #0
 80002e2:	d0f8      	beq.n	80002d6 <main+0x2a>

		//to avoid button de-bouncing related issues 200ms of delay
		delay();
 80002e4:	f7ff ffcc 	bl	8000280 <delay>

		// Next message index ; make sure that cnt value doesn't cross 2
		cnt = cnt % 3;
 80002e8:	687a      	ldr	r2, [r7, #4]
 80002ea:	4b24      	ldr	r3, [pc, #144]	; (800037c <main+0xd0>)
 80002ec:	fba3 1302 	umull	r1, r3, r3, r2
 80002f0:	0859      	lsrs	r1, r3, #1
 80002f2:	460b      	mov	r3, r1
 80002f4:	005b      	lsls	r3, r3, #1
 80002f6:	440b      	add	r3, r1
 80002f8:	1ad3      	subs	r3, r2, r3
 80002fa:	607b      	str	r3, [r7, #4]

		//First lets enable the reception in interrupt mode
		//this code enables the receive interrupt
		while ( USART_ReceiveDataIT(&usart2_handle,rx_buf,strlen(msg[cnt])) != USART_READY );
 80002fc:	bf00      	nop
 80002fe:	4a20      	ldr	r2, [pc, #128]	; (8000380 <main+0xd4>)
 8000300:	687b      	ldr	r3, [r7, #4]
 8000302:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000306:	4618      	mov	r0, r3
 8000308:	f7ff ff6e 	bl	80001e8 <strlen>
 800030c:	4603      	mov	r3, r0
 800030e:	461a      	mov	r2, r3
 8000310:	491c      	ldr	r1, [pc, #112]	; (8000384 <main+0xd8>)
 8000312:	481d      	ldr	r0, [pc, #116]	; (8000388 <main+0xdc>)
 8000314:	f000 fd83 	bl	8000e1e <USART_ReceiveDataIT>
 8000318:	4603      	mov	r3, r0
 800031a:	2b00      	cmp	r3, #0
 800031c:	d1ef      	bne.n	80002fe <main+0x52>

		//Send the msg indexed by cnt in blocking mode
    	USART_SendData(&usart2_handle,(uint8_t*)msg[cnt],strlen(msg[cnt]));
 800031e:	4a18      	ldr	r2, [pc, #96]	; (8000380 <main+0xd4>)
 8000320:	687b      	ldr	r3, [r7, #4]
 8000322:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8000326:	4a16      	ldr	r2, [pc, #88]	; (8000380 <main+0xd4>)
 8000328:	687b      	ldr	r3, [r7, #4]
 800032a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800032e:	4618      	mov	r0, r3
 8000330:	f7ff ff5a 	bl	80001e8 <strlen>
 8000334:	4603      	mov	r3, r0
 8000336:	461a      	mov	r2, r3
 8000338:	4621      	mov	r1, r4
 800033a:	4813      	ldr	r0, [pc, #76]	; (8000388 <main+0xdc>)
 800033c:	f000 fd21 	bl	8000d82 <USART_SendData>
    	//printf("Transmitted : %s\n",msg[cnt]);


    	//Now lets wait until all the bytes are received from the arduino .
    	//When all the bytes are received rxCmplt will be SET in application callback
    	while(rxCmplt != SET);
 8000340:	bf00      	nop
 8000342:	4b12      	ldr	r3, [pc, #72]	; (800038c <main+0xe0>)
 8000344:	781b      	ldrb	r3, [r3, #0]
 8000346:	2b01      	cmp	r3, #1
 8000348:	d1fb      	bne.n	8000342 <main+0x96>

    	//just make sure that last byte should be null otherwise %s fails while printing
    	rx_buf[strlen(msg[cnt])+ 1] = '\0';
 800034a:	4a0d      	ldr	r2, [pc, #52]	; (8000380 <main+0xd4>)
 800034c:	687b      	ldr	r3, [r7, #4]
 800034e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000352:	4618      	mov	r0, r3
 8000354:	f7ff ff48 	bl	80001e8 <strlen>
 8000358:	4603      	mov	r3, r0
 800035a:	3301      	adds	r3, #1
 800035c:	4a09      	ldr	r2, [pc, #36]	; (8000384 <main+0xd8>)
 800035e:	2100      	movs	r1, #0
 8000360:	54d1      	strb	r1, [r2, r3]

    	//Print what we received from the arduino
    	//printf("Received    : %s\n",rx_buf);

    	//invalidate the flag
    	rxCmplt = RESET;
 8000362:	4b0a      	ldr	r3, [pc, #40]	; (800038c <main+0xe0>)
 8000364:	2200      	movs	r2, #0
 8000366:	701a      	strb	r2, [r3, #0]

    	//move on to next message indexed in msg[]
    	cnt ++;
 8000368:	687b      	ldr	r3, [r7, #4]
 800036a:	3301      	adds	r3, #1
 800036c:	607b      	str	r3, [r7, #4]
		while( ! GPIO_ReadFromInputPin(GPIOA,GPIO_PIN_NO_0) );
 800036e:	e7b1      	b.n	80002d4 <main+0x28>
 8000370:	40004400 	.word	0x40004400
 8000374:	08001c8c 	.word	0x08001c8c
 8000378:	40020000 	.word	0x40020000
 800037c:	aaaaaaab 	.word	0xaaaaaaab
 8000380:	20000000 	.word	0x20000000
 8000384:	2000009c 	.word	0x2000009c
 8000388:	2000049c 	.word	0x2000049c
 800038c:	200004c0 	.word	0x200004c0

08000390 <USART2_IRQHandler>:
	return 0;
}

//Hàm lấy mẫu từ file startup_stm32f407
void USART2_IRQHandler(void)
{
 8000390:	b580      	push	{r7, lr}
 8000392:	af00      	add	r7, sp, #0
	USART_IRQHandling(&usart2_handle);
 8000394:	4802      	ldr	r0, [pc, #8]	; (80003a0 <USART2_IRQHandler+0x10>)
 8000396:	f000 fe1d 	bl	8000fd4 <USART_IRQHandling>
}
 800039a:	bf00      	nop
 800039c:	bd80      	pop	{r7, pc}
 800039e:	bf00      	nop
 80003a0:	2000049c 	.word	0x2000049c

080003a4 <USART_ApplicationEventCallback>:


void USART_ApplicationEventCallback( USART_Handle_t *pUSARTHandle,uint8_t ApEv)
{
 80003a4:	b480      	push	{r7}
 80003a6:	b083      	sub	sp, #12
 80003a8:	af00      	add	r7, sp, #0
 80003aa:	6078      	str	r0, [r7, #4]
 80003ac:	460b      	mov	r3, r1
 80003ae:	70fb      	strb	r3, [r7, #3]
   if(ApEv == USART_EVENT_RX_CMPLT)
 80003b0:	78fb      	ldrb	r3, [r7, #3]
 80003b2:	2b01      	cmp	r3, #1
 80003b4:	d102      	bne.n	80003bc <USART_ApplicationEventCallback+0x18>
   {
		rxCmplt = SET;
 80003b6:	4b04      	ldr	r3, [pc, #16]	; (80003c8 <USART_ApplicationEventCallback+0x24>)
 80003b8:	2201      	movs	r2, #1
 80003ba:	701a      	strb	r2, [r3, #0]
   }
   else if (ApEv == USART_EVENT_TX_CMPLT)
   {
	   ;
   }
}
 80003bc:	bf00      	nop
 80003be:	370c      	adds	r7, #12
 80003c0:	46bd      	mov	sp, r7
 80003c2:	bc80      	pop	{r7}
 80003c4:	4770      	bx	lr
 80003c6:	bf00      	nop
 80003c8:	200004c0 	.word	0x200004c0

080003cc <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80003cc:	b580      	push	{r7, lr}
 80003ce:	b086      	sub	sp, #24
 80003d0:	af00      	add	r7, sp, #0
 80003d2:	60f8      	str	r0, [r7, #12]
 80003d4:	60b9      	str	r1, [r7, #8]
 80003d6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80003d8:	2300      	movs	r3, #0
 80003da:	617b      	str	r3, [r7, #20]
 80003dc:	e00a      	b.n	80003f4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80003de:	f3af 8000 	nop.w
 80003e2:	4601      	mov	r1, r0
 80003e4:	68bb      	ldr	r3, [r7, #8]
 80003e6:	1c5a      	adds	r2, r3, #1
 80003e8:	60ba      	str	r2, [r7, #8]
 80003ea:	b2ca      	uxtb	r2, r1
 80003ec:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80003ee:	697b      	ldr	r3, [r7, #20]
 80003f0:	3301      	adds	r3, #1
 80003f2:	617b      	str	r3, [r7, #20]
 80003f4:	697a      	ldr	r2, [r7, #20]
 80003f6:	687b      	ldr	r3, [r7, #4]
 80003f8:	429a      	cmp	r2, r3
 80003fa:	dbf0      	blt.n	80003de <_read+0x12>
  }

  return len;
 80003fc:	687b      	ldr	r3, [r7, #4]
}
 80003fe:	4618      	mov	r0, r3
 8000400:	3718      	adds	r7, #24
 8000402:	46bd      	mov	sp, r7
 8000404:	bd80      	pop	{r7, pc}

08000406 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000406:	b580      	push	{r7, lr}
 8000408:	b086      	sub	sp, #24
 800040a:	af00      	add	r7, sp, #0
 800040c:	60f8      	str	r0, [r7, #12]
 800040e:	60b9      	str	r1, [r7, #8]
 8000410:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000412:	2300      	movs	r3, #0
 8000414:	617b      	str	r3, [r7, #20]
 8000416:	e009      	b.n	800042c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000418:	68bb      	ldr	r3, [r7, #8]
 800041a:	1c5a      	adds	r2, r3, #1
 800041c:	60ba      	str	r2, [r7, #8]
 800041e:	781b      	ldrb	r3, [r3, #0]
 8000420:	4618      	mov	r0, r3
 8000422:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000426:	697b      	ldr	r3, [r7, #20]
 8000428:	3301      	adds	r3, #1
 800042a:	617b      	str	r3, [r7, #20]
 800042c:	697a      	ldr	r2, [r7, #20]
 800042e:	687b      	ldr	r3, [r7, #4]
 8000430:	429a      	cmp	r2, r3
 8000432:	dbf1      	blt.n	8000418 <_write+0x12>
  }
  return len;
 8000434:	687b      	ldr	r3, [r7, #4]
}
 8000436:	4618      	mov	r0, r3
 8000438:	3718      	adds	r7, #24
 800043a:	46bd      	mov	sp, r7
 800043c:	bd80      	pop	{r7, pc}

0800043e <_close>:

int _close(int file)
{
 800043e:	b480      	push	{r7}
 8000440:	b083      	sub	sp, #12
 8000442:	af00      	add	r7, sp, #0
 8000444:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000446:	f04f 33ff 	mov.w	r3, #4294967295
}
 800044a:	4618      	mov	r0, r3
 800044c:	370c      	adds	r7, #12
 800044e:	46bd      	mov	sp, r7
 8000450:	bc80      	pop	{r7}
 8000452:	4770      	bx	lr

08000454 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000454:	b480      	push	{r7}
 8000456:	b083      	sub	sp, #12
 8000458:	af00      	add	r7, sp, #0
 800045a:	6078      	str	r0, [r7, #4]
 800045c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800045e:	683b      	ldr	r3, [r7, #0]
 8000460:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000464:	605a      	str	r2, [r3, #4]
  return 0;
 8000466:	2300      	movs	r3, #0
}
 8000468:	4618      	mov	r0, r3
 800046a:	370c      	adds	r7, #12
 800046c:	46bd      	mov	sp, r7
 800046e:	bc80      	pop	{r7}
 8000470:	4770      	bx	lr

08000472 <_isatty>:

int _isatty(int file)
{
 8000472:	b480      	push	{r7}
 8000474:	b083      	sub	sp, #12
 8000476:	af00      	add	r7, sp, #0
 8000478:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800047a:	2301      	movs	r3, #1
}
 800047c:	4618      	mov	r0, r3
 800047e:	370c      	adds	r7, #12
 8000480:	46bd      	mov	sp, r7
 8000482:	bc80      	pop	{r7}
 8000484:	4770      	bx	lr

08000486 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000486:	b480      	push	{r7}
 8000488:	b085      	sub	sp, #20
 800048a:	af00      	add	r7, sp, #0
 800048c:	60f8      	str	r0, [r7, #12]
 800048e:	60b9      	str	r1, [r7, #8]
 8000490:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000492:	2300      	movs	r3, #0
}
 8000494:	4618      	mov	r0, r3
 8000496:	3714      	adds	r7, #20
 8000498:	46bd      	mov	sp, r7
 800049a:	bc80      	pop	{r7}
 800049c:	4770      	bx	lr
	...

080004a0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80004a0:	b580      	push	{r7, lr}
 80004a2:	b086      	sub	sp, #24
 80004a4:	af00      	add	r7, sp, #0
 80004a6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80004a8:	4a14      	ldr	r2, [pc, #80]	; (80004fc <_sbrk+0x5c>)
 80004aa:	4b15      	ldr	r3, [pc, #84]	; (8000500 <_sbrk+0x60>)
 80004ac:	1ad3      	subs	r3, r2, r3
 80004ae:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80004b0:	697b      	ldr	r3, [r7, #20]
 80004b2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80004b4:	4b13      	ldr	r3, [pc, #76]	; (8000504 <_sbrk+0x64>)
 80004b6:	681b      	ldr	r3, [r3, #0]
 80004b8:	2b00      	cmp	r3, #0
 80004ba:	d102      	bne.n	80004c2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80004bc:	4b11      	ldr	r3, [pc, #68]	; (8000504 <_sbrk+0x64>)
 80004be:	4a12      	ldr	r2, [pc, #72]	; (8000508 <_sbrk+0x68>)
 80004c0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80004c2:	4b10      	ldr	r3, [pc, #64]	; (8000504 <_sbrk+0x64>)
 80004c4:	681a      	ldr	r2, [r3, #0]
 80004c6:	687b      	ldr	r3, [r7, #4]
 80004c8:	4413      	add	r3, r2
 80004ca:	693a      	ldr	r2, [r7, #16]
 80004cc:	429a      	cmp	r2, r3
 80004ce:	d207      	bcs.n	80004e0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80004d0:	f001 f954 	bl	800177c <__errno>
 80004d4:	4603      	mov	r3, r0
 80004d6:	220c      	movs	r2, #12
 80004d8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80004da:	f04f 33ff 	mov.w	r3, #4294967295
 80004de:	e009      	b.n	80004f4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80004e0:	4b08      	ldr	r3, [pc, #32]	; (8000504 <_sbrk+0x64>)
 80004e2:	681b      	ldr	r3, [r3, #0]
 80004e4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80004e6:	4b07      	ldr	r3, [pc, #28]	; (8000504 <_sbrk+0x64>)
 80004e8:	681a      	ldr	r2, [r3, #0]
 80004ea:	687b      	ldr	r3, [r7, #4]
 80004ec:	4413      	add	r3, r2
 80004ee:	4a05      	ldr	r2, [pc, #20]	; (8000504 <_sbrk+0x64>)
 80004f0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80004f2:	68fb      	ldr	r3, [r7, #12]
}
 80004f4:	4618      	mov	r0, r3
 80004f6:	3718      	adds	r7, #24
 80004f8:	46bd      	mov	sp, r7
 80004fa:	bd80      	pop	{r7, pc}
 80004fc:	20020000 	.word	0x20020000
 8000500:	00000400 	.word	0x00000400
 8000504:	200004c4 	.word	0x200004c4
 8000508:	20000618 	.word	0x20000618

0800050c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800050c:	480d      	ldr	r0, [pc, #52]	; (8000544 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800050e:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000510:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000514:	480c      	ldr	r0, [pc, #48]	; (8000548 <LoopForever+0x6>)
  ldr r1, =_edata
 8000516:	490d      	ldr	r1, [pc, #52]	; (800054c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000518:	4a0d      	ldr	r2, [pc, #52]	; (8000550 <LoopForever+0xe>)
  movs r3, #0
 800051a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800051c:	e002      	b.n	8000524 <LoopCopyDataInit>

0800051e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800051e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000520:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000522:	3304      	adds	r3, #4

08000524 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000524:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000526:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000528:	d3f9      	bcc.n	800051e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800052a:	4a0a      	ldr	r2, [pc, #40]	; (8000554 <LoopForever+0x12>)
  ldr r4, =_ebss
 800052c:	4c0a      	ldr	r4, [pc, #40]	; (8000558 <LoopForever+0x16>)
  movs r3, #0
 800052e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000530:	e001      	b.n	8000536 <LoopFillZerobss>

08000532 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000532:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000534:	3204      	adds	r2, #4

08000536 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000536:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000538:	d3fb      	bcc.n	8000532 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800053a:	f001 f925 	bl	8001788 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800053e:	f7ff feb5 	bl	80002ac <main>

08000542 <LoopForever>:

LoopForever:
  b LoopForever
 8000542:	e7fe      	b.n	8000542 <LoopForever>
  ldr   r0, =_estack
 8000544:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000548:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800054c:	20000080 	.word	0x20000080
  ldr r2, =_sidata
 8000550:	08001cac 	.word	0x08001cac
  ldr r2, =_sbss
 8000554:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 8000558:	20000614 	.word	0x20000614

0800055c <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800055c:	e7fe      	b.n	800055c <ADC_IRQHandler>
	...

08000560 <GPIO_PeriClockControl>:
 * @return		- none
 *
 * @Note 		- none
 */
void GPIO_PeriClockControl(GPIO_RegDef_t *pGPIOx, uint8_t EnorDi)
{
 8000560:	b480      	push	{r7}
 8000562:	b083      	sub	sp, #12
 8000564:	af00      	add	r7, sp, #0
 8000566:	6078      	str	r0, [r7, #4]
 8000568:	460b      	mov	r3, r1
 800056a:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE)
 800056c:	78fb      	ldrb	r3, [r7, #3]
 800056e:	2b01      	cmp	r3, #1
 8000570:	d161      	bne.n	8000636 <GPIO_PeriClockControl+0xd6>
	{
		if(pGPIOx == GPIOA)
 8000572:	687b      	ldr	r3, [r7, #4]
 8000574:	4a32      	ldr	r2, [pc, #200]	; (8000640 <GPIO_PeriClockControl+0xe0>)
 8000576:	4293      	cmp	r3, r2
 8000578:	d106      	bne.n	8000588 <GPIO_PeriClockControl+0x28>
		{
			GPIOA_PCLK_EN();		//hàm đã đc define trong stm32f407xx.h(lớp Driver)
 800057a:	4b32      	ldr	r3, [pc, #200]	; (8000644 <GPIO_PeriClockControl+0xe4>)
 800057c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800057e:	4a31      	ldr	r2, [pc, #196]	; (8000644 <GPIO_PeriClockControl+0xe4>)
 8000580:	f043 0301 	orr.w	r3, r3, #1
 8000584:	6313      	str	r3, [r2, #48]	; 0x30
	else
	{
		//Todo: (Disable Status)

	}
}
 8000586:	e056      	b.n	8000636 <GPIO_PeriClockControl+0xd6>
		else if(pGPIOx == GPIOB)
 8000588:	687b      	ldr	r3, [r7, #4]
 800058a:	4a2f      	ldr	r2, [pc, #188]	; (8000648 <GPIO_PeriClockControl+0xe8>)
 800058c:	4293      	cmp	r3, r2
 800058e:	d106      	bne.n	800059e <GPIO_PeriClockControl+0x3e>
			GPIOB_PCLK_EN();
 8000590:	4b2c      	ldr	r3, [pc, #176]	; (8000644 <GPIO_PeriClockControl+0xe4>)
 8000592:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000594:	4a2b      	ldr	r2, [pc, #172]	; (8000644 <GPIO_PeriClockControl+0xe4>)
 8000596:	f043 0302 	orr.w	r3, r3, #2
 800059a:	6313      	str	r3, [r2, #48]	; 0x30
}
 800059c:	e04b      	b.n	8000636 <GPIO_PeriClockControl+0xd6>
		else if(pGPIOx == GPIOC)
 800059e:	687b      	ldr	r3, [r7, #4]
 80005a0:	4a2a      	ldr	r2, [pc, #168]	; (800064c <GPIO_PeriClockControl+0xec>)
 80005a2:	4293      	cmp	r3, r2
 80005a4:	d106      	bne.n	80005b4 <GPIO_PeriClockControl+0x54>
			GPIOC_PCLK_EN();
 80005a6:	4b27      	ldr	r3, [pc, #156]	; (8000644 <GPIO_PeriClockControl+0xe4>)
 80005a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005aa:	4a26      	ldr	r2, [pc, #152]	; (8000644 <GPIO_PeriClockControl+0xe4>)
 80005ac:	f043 0304 	orr.w	r3, r3, #4
 80005b0:	6313      	str	r3, [r2, #48]	; 0x30
}
 80005b2:	e040      	b.n	8000636 <GPIO_PeriClockControl+0xd6>
		else if(pGPIOx == GPIOD)
 80005b4:	687b      	ldr	r3, [r7, #4]
 80005b6:	4a26      	ldr	r2, [pc, #152]	; (8000650 <GPIO_PeriClockControl+0xf0>)
 80005b8:	4293      	cmp	r3, r2
 80005ba:	d106      	bne.n	80005ca <GPIO_PeriClockControl+0x6a>
			GPIOD_PCLK_EN();
 80005bc:	4b21      	ldr	r3, [pc, #132]	; (8000644 <GPIO_PeriClockControl+0xe4>)
 80005be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005c0:	4a20      	ldr	r2, [pc, #128]	; (8000644 <GPIO_PeriClockControl+0xe4>)
 80005c2:	f043 0308 	orr.w	r3, r3, #8
 80005c6:	6313      	str	r3, [r2, #48]	; 0x30
}
 80005c8:	e035      	b.n	8000636 <GPIO_PeriClockControl+0xd6>
		else if(pGPIOx == GPIOE)
 80005ca:	687b      	ldr	r3, [r7, #4]
 80005cc:	4a21      	ldr	r2, [pc, #132]	; (8000654 <GPIO_PeriClockControl+0xf4>)
 80005ce:	4293      	cmp	r3, r2
 80005d0:	d106      	bne.n	80005e0 <GPIO_PeriClockControl+0x80>
			GPIOE_PCLK_EN();
 80005d2:	4b1c      	ldr	r3, [pc, #112]	; (8000644 <GPIO_PeriClockControl+0xe4>)
 80005d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005d6:	4a1b      	ldr	r2, [pc, #108]	; (8000644 <GPIO_PeriClockControl+0xe4>)
 80005d8:	f043 0310 	orr.w	r3, r3, #16
 80005dc:	6313      	str	r3, [r2, #48]	; 0x30
}
 80005de:	e02a      	b.n	8000636 <GPIO_PeriClockControl+0xd6>
		else if(pGPIOx == GPIOF)
 80005e0:	687b      	ldr	r3, [r7, #4]
 80005e2:	4a1d      	ldr	r2, [pc, #116]	; (8000658 <GPIO_PeriClockControl+0xf8>)
 80005e4:	4293      	cmp	r3, r2
 80005e6:	d106      	bne.n	80005f6 <GPIO_PeriClockControl+0x96>
			GPIOF_PCLK_EN();
 80005e8:	4b16      	ldr	r3, [pc, #88]	; (8000644 <GPIO_PeriClockControl+0xe4>)
 80005ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ec:	4a15      	ldr	r2, [pc, #84]	; (8000644 <GPIO_PeriClockControl+0xe4>)
 80005ee:	f043 0320 	orr.w	r3, r3, #32
 80005f2:	6313      	str	r3, [r2, #48]	; 0x30
}
 80005f4:	e01f      	b.n	8000636 <GPIO_PeriClockControl+0xd6>
		else if(pGPIOx == GPIOG)
 80005f6:	687b      	ldr	r3, [r7, #4]
 80005f8:	4a18      	ldr	r2, [pc, #96]	; (800065c <GPIO_PeriClockControl+0xfc>)
 80005fa:	4293      	cmp	r3, r2
 80005fc:	d106      	bne.n	800060c <GPIO_PeriClockControl+0xac>
			GPIOG_PCLK_EN();
 80005fe:	4b11      	ldr	r3, [pc, #68]	; (8000644 <GPIO_PeriClockControl+0xe4>)
 8000600:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000602:	4a10      	ldr	r2, [pc, #64]	; (8000644 <GPIO_PeriClockControl+0xe4>)
 8000604:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000608:	6313      	str	r3, [r2, #48]	; 0x30
}
 800060a:	e014      	b.n	8000636 <GPIO_PeriClockControl+0xd6>
		else if(pGPIOx == GPIOH)
 800060c:	687b      	ldr	r3, [r7, #4]
 800060e:	4a13      	ldr	r2, [pc, #76]	; (800065c <GPIO_PeriClockControl+0xfc>)
 8000610:	4293      	cmp	r3, r2
 8000612:	d106      	bne.n	8000622 <GPIO_PeriClockControl+0xc2>
			GPIOH_PCLK_EN();
 8000614:	4b0b      	ldr	r3, [pc, #44]	; (8000644 <GPIO_PeriClockControl+0xe4>)
 8000616:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000618:	4a0a      	ldr	r2, [pc, #40]	; (8000644 <GPIO_PeriClockControl+0xe4>)
 800061a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800061e:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000620:	e009      	b.n	8000636 <GPIO_PeriClockControl+0xd6>
		else if(pGPIOx == GPIOI)
 8000622:	687b      	ldr	r3, [r7, #4]
 8000624:	4a0e      	ldr	r2, [pc, #56]	; (8000660 <GPIO_PeriClockControl+0x100>)
 8000626:	4293      	cmp	r3, r2
 8000628:	d105      	bne.n	8000636 <GPIO_PeriClockControl+0xd6>
			GPIOI_PCLK_EN();
 800062a:	4b06      	ldr	r3, [pc, #24]	; (8000644 <GPIO_PeriClockControl+0xe4>)
 800062c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800062e:	4a05      	ldr	r2, [pc, #20]	; (8000644 <GPIO_PeriClockControl+0xe4>)
 8000630:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000634:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000636:	bf00      	nop
 8000638:	370c      	adds	r7, #12
 800063a:	46bd      	mov	sp, r7
 800063c:	bc80      	pop	{r7}
 800063e:	4770      	bx	lr
 8000640:	40020000 	.word	0x40020000
 8000644:	40023800 	.word	0x40023800
 8000648:	40020400 	.word	0x40020400
 800064c:	40020800 	.word	0x40020800
 8000650:	40020c00 	.word	0x40020c00
 8000654:	40021000 	.word	0x40021000
 8000658:	40021400 	.word	0x40021400
 800065c:	40021800 	.word	0x40021800
 8000660:	40022000 	.word	0x40022000

08000664 <GPIO_Init>:
 * @return		- none
 *
 * @Note 		- none
 */
void GPIO_Init(GPIOx_Handle_t *pGPIOHandle)
{
 8000664:	b580      	push	{r7, lr}
 8000666:	b086      	sub	sp, #24
 8000668:	af00      	add	r7, sp, #0
 800066a:	6078      	str	r0, [r7, #4]
	uint32_t temp = 0; 	//temp. registerr
 800066c:	2300      	movs	r3, #0
 800066e:	617b      	str	r3, [r7, #20]

	//0. Enable the Peripheral Clock
	GPIO_PeriClockControl(pGPIOHandle->pGPIOx, ENABLE);
 8000670:	687b      	ldr	r3, [r7, #4]
 8000672:	681b      	ldr	r3, [r3, #0]
 8000674:	2101      	movs	r1, #1
 8000676:	4618      	mov	r0, r3
 8000678:	f7ff ff72 	bl	8000560 <GPIO_PeriClockControl>

	//1. configure(cấu hình) the mode of gpio pin(Datasheet 8.4.1)
	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_ANALOG)
 800067c:	687b      	ldr	r3, [r7, #4]
 800067e:	795b      	ldrb	r3, [r3, #5]
 8000680:	2b03      	cmp	r3, #3
 8000682:	d81f      	bhi.n	80006c4 <GPIO_Init+0x60>
	{
		//Giá trị GPIO_PinMode thuộc 1 trong 4 trường hợp bit của Mode Register
		//this is part non-interrupt mode

		//Xác định lấy vị trí MODERx cần điều khiển dựa vào số chân Pin_Number và lưu vào biến temp
		temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000684:	687b      	ldr	r3, [r7, #4]
 8000686:	795b      	ldrb	r3, [r3, #5]
 8000688:	461a      	mov	r2, r3
 800068a:	687b      	ldr	r3, [r7, #4]
 800068c:	791b      	ldrb	r3, [r3, #4]
 800068e:	005b      	lsls	r3, r3, #1
 8000690:	fa02 f303 	lsl.w	r3, r2, r3
 8000694:	617b      	str	r3, [r7, #20]
		//Dịch 2 bit vì theo datasheet, mỗi 2 bit quản lý một pin number của GPIO port mode register
		//vd: GPIO_PinNumber=Pin0 thì sẽ kích hoạt MODER0(2*0=0->bắt đầu từ bit0)
		//GPIO_PinNumber=Pin1 thì sẽ kích hoạt MODER1(2*1=2->bắt đầu từ bit2)

		//Xóa(clear) value bit tại vị trí 2 bit muốn cấu hình
		pGPIOHandle->pGPIOx->MODER &= ~(0x3 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000696:	687b      	ldr	r3, [r7, #4]
 8000698:	681b      	ldr	r3, [r3, #0]
 800069a:	681a      	ldr	r2, [r3, #0]
 800069c:	687b      	ldr	r3, [r7, #4]
 800069e:	791b      	ldrb	r3, [r3, #4]
 80006a0:	4619      	mov	r1, r3
 80006a2:	2303      	movs	r3, #3
 80006a4:	408b      	lsls	r3, r1
 80006a6:	43db      	mvns	r3, r3
 80006a8:	4619      	mov	r1, r3
 80006aa:	687b      	ldr	r3, [r7, #4]
 80006ac:	681b      	ldr	r3, [r3, #0]
 80006ae:	400a      	ands	r2, r1
 80006b0:	601a      	str	r2, [r3, #0]
		//Theo datasheet thì để reset MODERx thì ta cần thiết lập value bit là 00, Ta có: 0x3 = 11
		//~(0x3 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber); nghĩa là tiến hành đảo trạng thái 11 thành 00
		//vị trí chân Pin_Number

		//Lưu value temp vào trong thanh ghi MODER của biến pGPIOHandle
		pGPIOHandle->pGPIOx->MODER |= temp;
 80006b2:	687b      	ldr	r3, [r7, #4]
 80006b4:	681b      	ldr	r3, [r3, #0]
 80006b6:	6819      	ldr	r1, [r3, #0]
 80006b8:	687b      	ldr	r3, [r7, #4]
 80006ba:	681b      	ldr	r3, [r3, #0]
 80006bc:	697a      	ldr	r2, [r7, #20]
 80006be:	430a      	orrs	r2, r1
 80006c0:	601a      	str	r2, [r3, #0]
 80006c2:	e0b8      	b.n	8000836 <GPIO_Init+0x1d2>
	}
	else
	{
		//This is part(phần) will code later (Interrupt mode) //các trường hợp khác từ 4->6

		if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_FT)
 80006c4:	687b      	ldr	r3, [r7, #4]
 80006c6:	795b      	ldrb	r3, [r3, #5]
 80006c8:	2b04      	cmp	r3, #4
 80006ca:	d117      	bne.n	80006fc <GPIO_Init+0x98>
		{
			//1. configure the FTSR(Falling(xuống) Trigger Select Register)
			EXTI->FTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80006cc:	4b43      	ldr	r3, [pc, #268]	; (80007dc <GPIO_Init+0x178>)
 80006ce:	68db      	ldr	r3, [r3, #12]
 80006d0:	687a      	ldr	r2, [r7, #4]
 80006d2:	7912      	ldrb	r2, [r2, #4]
 80006d4:	4611      	mov	r1, r2
 80006d6:	2201      	movs	r2, #1
 80006d8:	408a      	lsls	r2, r1
 80006da:	4611      	mov	r1, r2
 80006dc:	4a3f      	ldr	r2, [pc, #252]	; (80007dc <GPIO_Init+0x178>)
 80006de:	430b      	orrs	r3, r1
 80006e0:	60d3      	str	r3, [r2, #12]

			//1.2 Clear the corresponding(tương ứng) RTSR, việc này phòng ngừa cho tình huống sử dụng RTSR trước đó
			//và có thể gây xung đột cho lần cấu hình hiện tại
			EXTI->RTSR &= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80006e2:	4b3e      	ldr	r3, [pc, #248]	; (80007dc <GPIO_Init+0x178>)
 80006e4:	689b      	ldr	r3, [r3, #8]
 80006e6:	687a      	ldr	r2, [r7, #4]
 80006e8:	7912      	ldrb	r2, [r2, #4]
 80006ea:	4611      	mov	r1, r2
 80006ec:	2201      	movs	r2, #1
 80006ee:	408a      	lsls	r2, r1
 80006f0:	43d2      	mvns	r2, r2
 80006f2:	4611      	mov	r1, r2
 80006f4:	4a39      	ldr	r2, [pc, #228]	; (80007dc <GPIO_Init+0x178>)
 80006f6:	400b      	ands	r3, r1
 80006f8:	6093      	str	r3, [r2, #8]
 80006fa:	e035      	b.n	8000768 <GPIO_Init+0x104>
		}
		else if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RT)
 80006fc:	687b      	ldr	r3, [r7, #4]
 80006fe:	795b      	ldrb	r3, [r3, #5]
 8000700:	2b05      	cmp	r3, #5
 8000702:	d117      	bne.n	8000734 <GPIO_Init+0xd0>
		{
			//1. configure the RTSR(Rising(lên) Trigger Select Register)
			EXTI->RTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000704:	4b35      	ldr	r3, [pc, #212]	; (80007dc <GPIO_Init+0x178>)
 8000706:	689b      	ldr	r3, [r3, #8]
 8000708:	687a      	ldr	r2, [r7, #4]
 800070a:	7912      	ldrb	r2, [r2, #4]
 800070c:	4611      	mov	r1, r2
 800070e:	2201      	movs	r2, #1
 8000710:	408a      	lsls	r2, r1
 8000712:	4611      	mov	r1, r2
 8000714:	4a31      	ldr	r2, [pc, #196]	; (80007dc <GPIO_Init+0x178>)
 8000716:	430b      	orrs	r3, r1
 8000718:	6093      	str	r3, [r2, #8]

			//1.2 Clear the corresponding(tương ứng) FTSR, việc này phòng ngừa cho tình huống sử dụng FTSR trước đó
			//và có thể gây xung đột cho lần cấu hình hiện tại
			EXTI->FTSR &= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800071a:	4b30      	ldr	r3, [pc, #192]	; (80007dc <GPIO_Init+0x178>)
 800071c:	68db      	ldr	r3, [r3, #12]
 800071e:	687a      	ldr	r2, [r7, #4]
 8000720:	7912      	ldrb	r2, [r2, #4]
 8000722:	4611      	mov	r1, r2
 8000724:	2201      	movs	r2, #1
 8000726:	408a      	lsls	r2, r1
 8000728:	43d2      	mvns	r2, r2
 800072a:	4611      	mov	r1, r2
 800072c:	4a2b      	ldr	r2, [pc, #172]	; (80007dc <GPIO_Init+0x178>)
 800072e:	400b      	ands	r3, r1
 8000730:	60d3      	str	r3, [r2, #12]
 8000732:	e019      	b.n	8000768 <GPIO_Init+0x104>
		}
		else if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RFT)
 8000734:	687b      	ldr	r3, [r7, #4]
 8000736:	795b      	ldrb	r3, [r3, #5]
 8000738:	2b06      	cmp	r3, #6
 800073a:	d115      	bne.n	8000768 <GPIO_Init+0x104>
		{
			//1. configure the FTSR and RTSR
			EXTI->FTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800073c:	4b27      	ldr	r3, [pc, #156]	; (80007dc <GPIO_Init+0x178>)
 800073e:	68db      	ldr	r3, [r3, #12]
 8000740:	687a      	ldr	r2, [r7, #4]
 8000742:	7912      	ldrb	r2, [r2, #4]
 8000744:	4611      	mov	r1, r2
 8000746:	2201      	movs	r2, #1
 8000748:	408a      	lsls	r2, r1
 800074a:	4611      	mov	r1, r2
 800074c:	4a23      	ldr	r2, [pc, #140]	; (80007dc <GPIO_Init+0x178>)
 800074e:	430b      	orrs	r3, r1
 8000750:	60d3      	str	r3, [r2, #12]
			EXTI->RTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000752:	4b22      	ldr	r3, [pc, #136]	; (80007dc <GPIO_Init+0x178>)
 8000754:	689b      	ldr	r3, [r3, #8]
 8000756:	687a      	ldr	r2, [r7, #4]
 8000758:	7912      	ldrb	r2, [r2, #4]
 800075a:	4611      	mov	r1, r2
 800075c:	2201      	movs	r2, #1
 800075e:	408a      	lsls	r2, r1
 8000760:	4611      	mov	r1, r2
 8000762:	4a1e      	ldr	r2, [pc, #120]	; (80007dc <GPIO_Init+0x178>)
 8000764:	430b      	orrs	r3, r1
 8000766:	6093      	str	r3, [r2, #8]
		}

		//2. Configure the GPIO port selection in SYSCFG_EXTICR
		uint8_t temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 4;		//xác định SYSCFG_EXTICR_temp1 register
 8000768:	687b      	ldr	r3, [r7, #4]
 800076a:	791b      	ldrb	r3, [r3, #4]
 800076c:	089b      	lsrs	r3, r3, #2
 800076e:	74fb      	strb	r3, [r7, #19]
		uint8_t temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 4;		//xác định 4bit EXTI_temp2 trong SYSCFG_EXTICR_temp1
 8000770:	687b      	ldr	r3, [r7, #4]
 8000772:	791b      	ldrb	r3, [r3, #4]
 8000774:	f003 0303 	and.w	r3, r3, #3
 8000778:	74bb      	strb	r3, [r7, #18]
		uint8_t portcode = GPIO_BASEADDR_TO_CODE(pGPIOHandle->pGPIOx);		//xác định mã nhị phân xxxx để xác định GPIO port sử dụng
 800077a:	687b      	ldr	r3, [r7, #4]
 800077c:	681b      	ldr	r3, [r3, #0]
 800077e:	4a18      	ldr	r2, [pc, #96]	; (80007e0 <GPIO_Init+0x17c>)
 8000780:	4293      	cmp	r3, r2
 8000782:	d03b      	beq.n	80007fc <GPIO_Init+0x198>
 8000784:	687b      	ldr	r3, [r7, #4]
 8000786:	681b      	ldr	r3, [r3, #0]
 8000788:	4a16      	ldr	r2, [pc, #88]	; (80007e4 <GPIO_Init+0x180>)
 800078a:	4293      	cmp	r3, r2
 800078c:	d024      	beq.n	80007d8 <GPIO_Init+0x174>
 800078e:	687b      	ldr	r3, [r7, #4]
 8000790:	681b      	ldr	r3, [r3, #0]
 8000792:	4a15      	ldr	r2, [pc, #84]	; (80007e8 <GPIO_Init+0x184>)
 8000794:	4293      	cmp	r3, r2
 8000796:	d01d      	beq.n	80007d4 <GPIO_Init+0x170>
 8000798:	687b      	ldr	r3, [r7, #4]
 800079a:	681b      	ldr	r3, [r3, #0]
 800079c:	4a13      	ldr	r2, [pc, #76]	; (80007ec <GPIO_Init+0x188>)
 800079e:	4293      	cmp	r3, r2
 80007a0:	d016      	beq.n	80007d0 <GPIO_Init+0x16c>
 80007a2:	687b      	ldr	r3, [r7, #4]
 80007a4:	681b      	ldr	r3, [r3, #0]
 80007a6:	4a12      	ldr	r2, [pc, #72]	; (80007f0 <GPIO_Init+0x18c>)
 80007a8:	4293      	cmp	r3, r2
 80007aa:	d00f      	beq.n	80007cc <GPIO_Init+0x168>
 80007ac:	687b      	ldr	r3, [r7, #4]
 80007ae:	681b      	ldr	r3, [r3, #0]
 80007b0:	4a10      	ldr	r2, [pc, #64]	; (80007f4 <GPIO_Init+0x190>)
 80007b2:	4293      	cmp	r3, r2
 80007b4:	d008      	beq.n	80007c8 <GPIO_Init+0x164>
 80007b6:	687b      	ldr	r3, [r7, #4]
 80007b8:	681b      	ldr	r3, [r3, #0]
 80007ba:	4a0f      	ldr	r2, [pc, #60]	; (80007f8 <GPIO_Init+0x194>)
 80007bc:	4293      	cmp	r3, r2
 80007be:	d101      	bne.n	80007c4 <GPIO_Init+0x160>
 80007c0:	2306      	movs	r3, #6
 80007c2:	e01c      	b.n	80007fe <GPIO_Init+0x19a>
 80007c4:	2300      	movs	r3, #0
 80007c6:	e01a      	b.n	80007fe <GPIO_Init+0x19a>
 80007c8:	2305      	movs	r3, #5
 80007ca:	e018      	b.n	80007fe <GPIO_Init+0x19a>
 80007cc:	2304      	movs	r3, #4
 80007ce:	e016      	b.n	80007fe <GPIO_Init+0x19a>
 80007d0:	2303      	movs	r3, #3
 80007d2:	e014      	b.n	80007fe <GPIO_Init+0x19a>
 80007d4:	2302      	movs	r3, #2
 80007d6:	e012      	b.n	80007fe <GPIO_Init+0x19a>
 80007d8:	2301      	movs	r3, #1
 80007da:	e010      	b.n	80007fe <GPIO_Init+0x19a>
 80007dc:	40013c00 	.word	0x40013c00
 80007e0:	40020000 	.word	0x40020000
 80007e4:	40020400 	.word	0x40020400
 80007e8:	40020800 	.word	0x40020800
 80007ec:	40020c00 	.word	0x40020c00
 80007f0:	40021000 	.word	0x40021000
 80007f4:	40021400 	.word	0x40021400
 80007f8:	40021800 	.word	0x40021800
 80007fc:	2300      	movs	r3, #0
 80007fe:	747b      	strb	r3, [r7, #17]
		SYSCFG_PCLK_EN();													//Kích hoạt xung clock để cấu hình
 8000800:	4b5c      	ldr	r3, [pc, #368]	; (8000974 <GPIO_Init+0x310>)
 8000802:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000804:	4a5b      	ldr	r2, [pc, #364]	; (8000974 <GPIO_Init+0x310>)
 8000806:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800080a:	6453      	str	r3, [r2, #68]	; 0x44
		SYSCFG->EXTICR[temp1] = portcode << (temp2 * 4);					//Cấu hình thanh ghi SYSCFG_EXTICR_temp1
 800080c:	7c7a      	ldrb	r2, [r7, #17]
 800080e:	7cbb      	ldrb	r3, [r7, #18]
 8000810:	009b      	lsls	r3, r3, #2
 8000812:	fa02 f103 	lsl.w	r1, r2, r3
 8000816:	4a58      	ldr	r2, [pc, #352]	; (8000978 <GPIO_Init+0x314>)
 8000818:	7cfb      	ldrb	r3, [r7, #19]
 800081a:	3302      	adds	r3, #2
 800081c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

		//3. Eanble the exti interrupt delivery(chuyển, sử dụng) by using IMR(Interrupt Masking Register)
		EXTI->IMR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000820:	4b56      	ldr	r3, [pc, #344]	; (800097c <GPIO_Init+0x318>)
 8000822:	681b      	ldr	r3, [r3, #0]
 8000824:	687a      	ldr	r2, [r7, #4]
 8000826:	7912      	ldrb	r2, [r2, #4]
 8000828:	4611      	mov	r1, r2
 800082a:	2201      	movs	r2, #1
 800082c:	408a      	lsls	r2, r1
 800082e:	4611      	mov	r1, r2
 8000830:	4a52      	ldr	r2, [pc, #328]	; (800097c <GPIO_Init+0x318>)
 8000832:	430b      	orrs	r3, r1
 8000834:	6013      	str	r3, [r2, #0]

	}
	//Reset biến temp để sử dụng cho các lệnh khác trong hàm
	temp = 0;
 8000836:	2300      	movs	r3, #0
 8000838:	617b      	str	r3, [r7, #20]

	//2. configure the speed (Datasheet 8.4.3)
	//Xác định lấy vị trí OSPEEDRx cần điều khiển dựa vào số chân Pin_Number và lưu vào biến temp
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinSpeed << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 800083a:	687b      	ldr	r3, [r7, #4]
 800083c:	799b      	ldrb	r3, [r3, #6]
 800083e:	461a      	mov	r2, r3
 8000840:	687b      	ldr	r3, [r7, #4]
 8000842:	791b      	ldrb	r3, [r3, #4]
 8000844:	005b      	lsls	r3, r3, #1
 8000846:	fa02 f303 	lsl.w	r3, r2, r3
 800084a:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OSPEEDR &=  ~(0x3 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);	//Clearing bit field
 800084c:	687b      	ldr	r3, [r7, #4]
 800084e:	681b      	ldr	r3, [r3, #0]
 8000850:	689a      	ldr	r2, [r3, #8]
 8000852:	687b      	ldr	r3, [r7, #4]
 8000854:	791b      	ldrb	r3, [r3, #4]
 8000856:	4619      	mov	r1, r3
 8000858:	2303      	movs	r3, #3
 800085a:	408b      	lsls	r3, r1
 800085c:	43db      	mvns	r3, r3
 800085e:	4619      	mov	r1, r3
 8000860:	687b      	ldr	r3, [r7, #4]
 8000862:	681b      	ldr	r3, [r3, #0]
 8000864:	400a      	ands	r2, r1
 8000866:	609a      	str	r2, [r3, #8]
	pGPIOHandle->pGPIOx->OSPEEDR |= temp;
 8000868:	687b      	ldr	r3, [r7, #4]
 800086a:	681b      	ldr	r3, [r3, #0]
 800086c:	6899      	ldr	r1, [r3, #8]
 800086e:	687b      	ldr	r3, [r7, #4]
 8000870:	681b      	ldr	r3, [r3, #0]
 8000872:	697a      	ldr	r2, [r7, #20]
 8000874:	430a      	orrs	r2, r1
 8000876:	609a      	str	r2, [r3, #8]
	//=> Lúc này ta đã xác định(cấu hình) đc speed(OSPEEDRx) của GPIO tùy thuộc vào pin_number bạn muốn control
	temp = 0;
 8000878:	2300      	movs	r3, #0
 800087a:	617b      	str	r3, [r7, #20]

	//3. configure the pullup-pulldown settings (Datasheet 8.4.4)
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinPuPdControl << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	79db      	ldrb	r3, [r3, #7]
 8000880:	461a      	mov	r2, r3
 8000882:	687b      	ldr	r3, [r7, #4]
 8000884:	791b      	ldrb	r3, [r3, #4]
 8000886:	005b      	lsls	r3, r3, #1
 8000888:	fa02 f303 	lsl.w	r3, r2, r3
 800088c:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->PUPDR &=  ~(0x3 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800088e:	687b      	ldr	r3, [r7, #4]
 8000890:	681b      	ldr	r3, [r3, #0]
 8000892:	68da      	ldr	r2, [r3, #12]
 8000894:	687b      	ldr	r3, [r7, #4]
 8000896:	791b      	ldrb	r3, [r3, #4]
 8000898:	4619      	mov	r1, r3
 800089a:	2303      	movs	r3, #3
 800089c:	408b      	lsls	r3, r1
 800089e:	43db      	mvns	r3, r3
 80008a0:	4619      	mov	r1, r3
 80008a2:	687b      	ldr	r3, [r7, #4]
 80008a4:	681b      	ldr	r3, [r3, #0]
 80008a6:	400a      	ands	r2, r1
 80008a8:	60da      	str	r2, [r3, #12]
	pGPIOHandle->pGPIOx->PUPDR |= temp;
 80008aa:	687b      	ldr	r3, [r7, #4]
 80008ac:	681b      	ldr	r3, [r3, #0]
 80008ae:	68d9      	ldr	r1, [r3, #12]
 80008b0:	687b      	ldr	r3, [r7, #4]
 80008b2:	681b      	ldr	r3, [r3, #0]
 80008b4:	697a      	ldr	r2, [r7, #20]
 80008b6:	430a      	orrs	r2, r1
 80008b8:	60da      	str	r2, [r3, #12]
	temp = 0;
 80008ba:	2300      	movs	r3, #0
 80008bc:	617b      	str	r3, [r7, #20]

	//4. configure the optype (Datasheet 8.4.2)
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinOPType << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80008be:	687b      	ldr	r3, [r7, #4]
 80008c0:	7a1b      	ldrb	r3, [r3, #8]
 80008c2:	461a      	mov	r2, r3
 80008c4:	687b      	ldr	r3, [r7, #4]
 80008c6:	791b      	ldrb	r3, [r3, #4]
 80008c8:	fa02 f303 	lsl.w	r3, r2, r3
 80008cc:	617b      	str	r3, [r7, #20]
	//Dịch 1 bit vì theo datasheet, mỗi 1 bit quản lý một pin number của GPIO port mode register
	pGPIOHandle->pGPIOx->OTYPER &=  ~(0x1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber); //Clearing bit field
 80008ce:	687b      	ldr	r3, [r7, #4]
 80008d0:	681b      	ldr	r3, [r3, #0]
 80008d2:	685a      	ldr	r2, [r3, #4]
 80008d4:	687b      	ldr	r3, [r7, #4]
 80008d6:	791b      	ldrb	r3, [r3, #4]
 80008d8:	4619      	mov	r1, r3
 80008da:	2301      	movs	r3, #1
 80008dc:	408b      	lsls	r3, r1
 80008de:	43db      	mvns	r3, r3
 80008e0:	4619      	mov	r1, r3
 80008e2:	687b      	ldr	r3, [r7, #4]
 80008e4:	681b      	ldr	r3, [r3, #0]
 80008e6:	400a      	ands	r2, r1
 80008e8:	605a      	str	r2, [r3, #4]
	//~(0x1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber); nghĩa là tiến hành đảo trạng thái 1 thành 0
	//vị trí chân Pin_Number
	pGPIOHandle->pGPIOx->OTYPER |= temp;
 80008ea:	687b      	ldr	r3, [r7, #4]
 80008ec:	681b      	ldr	r3, [r3, #0]
 80008ee:	6859      	ldr	r1, [r3, #4]
 80008f0:	687b      	ldr	r3, [r7, #4]
 80008f2:	681b      	ldr	r3, [r3, #0]
 80008f4:	697a      	ldr	r2, [r7, #20]
 80008f6:	430a      	orrs	r2, r1
 80008f8:	605a      	str	r2, [r3, #4]
	temp = 0;
 80008fa:	2300      	movs	r3, #0
 80008fc:	617b      	str	r3, [r7, #20]

	//5. configure the alt functionality
	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_ALTFN)
 80008fe:	687b      	ldr	r3, [r7, #4]
 8000900:	795b      	ldrb	r3, [r3, #5]
 8000902:	2b02      	cmp	r3, #2
 8000904:	d132      	bne.n	800096c <GPIO_Init+0x308>
		//Chế độ này đc thực thi khi và chỉ khi bit MODERx đc thiết lập GPIO_MODE_ALTFN

		uint32_t temp1,temp2;

		//Xác định thanh ghi cần sử dụng là GPIOx_AFRH ->AFR[1] hay GPIOx_AFRL ->AFR[0]
		temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 8;
 8000906:	687b      	ldr	r3, [r7, #4]
 8000908:	791b      	ldrb	r3, [r3, #4]
 800090a:	08db      	lsrs	r3, r3, #3
 800090c:	b2db      	uxtb	r3, r3
 800090e:	60fb      	str	r3, [r7, #12]

		//Xác định vị trí cụm 4bit cần sử dụng ở vị trí nào trong thanh ghi
		temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 8;
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	791b      	ldrb	r3, [r3, #4]
 8000914:	f003 0307 	and.w	r3, r3, #7
 8000918:	60bb      	str	r3, [r7, #8]

		//Clearing bit field
		pGPIOHandle->pGPIOx->AFR[temp1] &= ~(0xF << (4* temp2));   //0xF = 1111, đảo 1111->0000 tại vị trí 4*temp2
 800091a:	687b      	ldr	r3, [r7, #4]
 800091c:	681b      	ldr	r3, [r3, #0]
 800091e:	68fa      	ldr	r2, [r7, #12]
 8000920:	3208      	adds	r2, #8
 8000922:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000926:	68bb      	ldr	r3, [r7, #8]
 8000928:	009b      	lsls	r3, r3, #2
 800092a:	210f      	movs	r1, #15
 800092c:	fa01 f303 	lsl.w	r3, r1, r3
 8000930:	43db      	mvns	r3, r3
 8000932:	4619      	mov	r1, r3
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	681b      	ldr	r3, [r3, #0]
 8000938:	4011      	ands	r1, r2
 800093a:	68fa      	ldr	r2, [r7, #12]
 800093c:	3208      	adds	r2, #8
 800093e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

		//Lưu cấu hình AFR vào trong con trỏ pGPIOHandle
		pGPIOHandle->pGPIOx->AFR[temp1] |= (pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFunMode << (4* temp2));
 8000942:	687b      	ldr	r3, [r7, #4]
 8000944:	681b      	ldr	r3, [r3, #0]
 8000946:	68fa      	ldr	r2, [r7, #12]
 8000948:	3208      	adds	r2, #8
 800094a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	7a5b      	ldrb	r3, [r3, #9]
 8000952:	4619      	mov	r1, r3
 8000954:	68bb      	ldr	r3, [r7, #8]
 8000956:	009b      	lsls	r3, r3, #2
 8000958:	fa01 f303 	lsl.w	r3, r1, r3
 800095c:	4619      	mov	r1, r3
 800095e:	687b      	ldr	r3, [r7, #4]
 8000960:	681b      	ldr	r3, [r3, #0]
 8000962:	4311      	orrs	r1, r2
 8000964:	68fa      	ldr	r2, [r7, #12]
 8000966:	3208      	adds	r2, #8
 8000968:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	}
}
 800096c:	bf00      	nop
 800096e:	3718      	adds	r7, #24
 8000970:	46bd      	mov	sp, r7
 8000972:	bd80      	pop	{r7, pc}
 8000974:	40023800 	.word	0x40023800
 8000978:	40013800 	.word	0x40013800
 800097c:	40013c00 	.word	0x40013c00

08000980 <GPIO_ReadFromInputPin>:
 * @return		- value of read in pin_number (0 or 1)
 *
 * @Note 		- none
 */
uint8_t GPIO_ReadFromInputPin(GPIO_RegDef_t *pGPIOx, uint8_t PinNumber)
{
 8000980:	b480      	push	{r7}
 8000982:	b085      	sub	sp, #20
 8000984:	af00      	add	r7, sp, #0
 8000986:	6078      	str	r0, [r7, #4]
 8000988:	460b      	mov	r3, r1
 800098a:	70fb      	strb	r3, [r7, #3]
	uint8_t value;			//biến lưu value đọc đc từ pin
	value = (uint8_t)((pGPIOx->IDR >> PinNumber) & 0x00000001);
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	691a      	ldr	r2, [r3, #16]
 8000990:	78fb      	ldrb	r3, [r7, #3]
 8000992:	fa22 f303 	lsr.w	r3, r2, r3
 8000996:	b2db      	uxtb	r3, r3
 8000998:	f003 0301 	and.w	r3, r3, #1
 800099c:	73fb      	strb	r3, [r7, #15]
	return value;
 800099e:	7bfb      	ldrb	r3, [r7, #15]

	//((pGPIOx->IDR >> PinNumber): Phần này dịch chuyển giá trị IDR sang phải của vị trí PinNumber đầu vào,
	//căn chỉnh giá trị đầu vào của chân mong muốn về bit ngoài cùng bên phải(bit0).
	//& 0x00000001: Thao tác AND theo bit này che giấu tất cả ngoại trừ bit ngoài cùng bên phải(bit0),
	//trích xuất hiệu quả giá trị đầu vào của mã pin được chỉ định.
}
 80009a0:	4618      	mov	r0, r3
 80009a2:	3714      	adds	r7, #20
 80009a4:	46bd      	mov	sp, r7
 80009a6:	bc80      	pop	{r7}
 80009a8:	4770      	bx	lr
	...

080009ac <RCC_GetPCLK1Value>:
 *
 * @Note        - Sử dụng sơ đồ khối liên quan đến xung Clock của System Clock
 * 				- Thanh ghi CFGR thuộc RCC Register đc sử dụng
 */
uint32_t RCC_GetPCLK1Value(void)
{
 80009ac:	b580      	push	{r7, lr}
 80009ae:	b084      	sub	sp, #16
 80009b0:	af00      	add	r7, sp, #0

	uint8_t clksrc,temp,ahbp,abp1p;				//biến xung clock cho khối system clock

	//Kiểm tra xem SWS[3:2] đang có giá trị bit là bao nhiêu, từ đó xác định khối
	//Oscillator đang đc sử dụng là System Clock
	clksrc = (RCC->CFGR >> 2) & 0x3;	//0x03=0011, nghĩa là đọc 2 vị trí bit liền nhau từ vị trí bit số 2
 80009b2:	4b26      	ldr	r3, [pc, #152]	; (8000a4c <RCC_GetPCLK1Value+0xa0>)
 80009b4:	689b      	ldr	r3, [r3, #8]
 80009b6:	089b      	lsrs	r3, r3, #2
 80009b8:	b2db      	uxtb	r3, r3
 80009ba:	f003 0303 	and.w	r3, r3, #3
 80009be:	727b      	strb	r3, [r7, #9]


	//1. Xác định tần số xung clock tổng của System Clock
	if(clksrc == 0)    		 	//HSI Oscillator
 80009c0:	7a7b      	ldrb	r3, [r7, #9]
 80009c2:	2b00      	cmp	r3, #0
 80009c4:	d102      	bne.n	80009cc <RCC_GetPCLK1Value+0x20>
	{
		SystemClk = 16000000;
 80009c6:	4b22      	ldr	r3, [pc, #136]	; (8000a50 <RCC_GetPCLK1Value+0xa4>)
 80009c8:	60fb      	str	r3, [r7, #12]
 80009ca:	e00b      	b.n	80009e4 <RCC_GetPCLK1Value+0x38>
	}
	else if(clksrc == 1)		//HSE Oscillator
 80009cc:	7a7b      	ldrb	r3, [r7, #9]
 80009ce:	2b01      	cmp	r3, #1
 80009d0:	d102      	bne.n	80009d8 <RCC_GetPCLK1Value+0x2c>
	{
		SystemClk = 8000000;
 80009d2:	4b20      	ldr	r3, [pc, #128]	; (8000a54 <RCC_GetPCLK1Value+0xa8>)
 80009d4:	60fb      	str	r3, [r7, #12]
 80009d6:	e005      	b.n	80009e4 <RCC_GetPCLK1Value+0x38>
	}
	else if(clksrc == 2)		//PLL Oscillator
 80009d8:	7a7b      	ldrb	r3, [r7, #9]
 80009da:	2b02      	cmp	r3, #2
 80009dc:	d102      	bne.n	80009e4 <RCC_GetPCLK1Value+0x38>
	{
		SystemClk = RCC_GetPLLOutputClock();
 80009de:	f000 f88f 	bl	8000b00 <RCC_GetPLLOutputClock>
 80009e2:	60f8      	str	r0, [r7, #12]
	}

	//2. Xác định bộ chia của AHBP Prescaler, bit field HPRE[7:4] của CFGR register
	temp = ((RCC->CFGR >> 4) & 0xF);	//0xF=1111, nghĩa là đọc 4 vị trí bit liền nhau từ vị trí bit số 4
 80009e4:	4b19      	ldr	r3, [pc, #100]	; (8000a4c <RCC_GetPCLK1Value+0xa0>)
 80009e6:	689b      	ldr	r3, [r3, #8]
 80009e8:	091b      	lsrs	r3, r3, #4
 80009ea:	b2db      	uxtb	r3, r3
 80009ec:	f003 030f 	and.w	r3, r3, #15
 80009f0:	723b      	strb	r3, [r7, #8]
	if(temp < 4)
 80009f2:	7a3b      	ldrb	r3, [r7, #8]
 80009f4:	2b03      	cmp	r3, #3
 80009f6:	d802      	bhi.n	80009fe <RCC_GetPCLK1Value+0x52>
	{
		ahbp = 1;			//Không sử dụng bộ chia
 80009f8:	2301      	movs	r3, #1
 80009fa:	72fb      	strb	r3, [r7, #11]
 80009fc:	e005      	b.n	8000a0a <RCC_GetPCLK1Value+0x5e>
	}
	else
	{
		//Có sử dụng bộ chia, nếu temp=8 thì 8-8=0, sử dụng bộ chia 2,...
		ahbp = AHB_PreScaler[temp - 8];
 80009fe:	7a3b      	ldrb	r3, [r7, #8]
 8000a00:	3b08      	subs	r3, #8
 8000a02:	4a15      	ldr	r2, [pc, #84]	; (8000a58 <RCC_GetPCLK1Value+0xac>)
 8000a04:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000a08:	72fb      	strb	r3, [r7, #11]
	}

	//3. Xác định bộ chia của APB1 PreScaler,bit ffield PPRE[12:10] của CFGR register
	temp = ((RCC->CFGR >> 10) & 0x7);	//0xF=1111, nghĩa là đọc 3 vị trí bit liền nhau từ vị trí bit số 10
 8000a0a:	4b10      	ldr	r3, [pc, #64]	; (8000a4c <RCC_GetPCLK1Value+0xa0>)
 8000a0c:	689b      	ldr	r3, [r3, #8]
 8000a0e:	0a9b      	lsrs	r3, r3, #10
 8000a10:	b2db      	uxtb	r3, r3
 8000a12:	f003 0307 	and.w	r3, r3, #7
 8000a16:	723b      	strb	r3, [r7, #8]
	if(temp < 8)
 8000a18:	7a3b      	ldrb	r3, [r7, #8]
 8000a1a:	2b07      	cmp	r3, #7
 8000a1c:	d802      	bhi.n	8000a24 <RCC_GetPCLK1Value+0x78>
	{
		abp1p = 1;			//Không sử dụng bộ chia
 8000a1e:	2301      	movs	r3, #1
 8000a20:	72bb      	strb	r3, [r7, #10]
 8000a22:	e005      	b.n	8000a30 <RCC_GetPCLK1Value+0x84>
	}
	else
	{
		//Có sử dụng bộ chia, nếu temp=8 thì 8-8=0, sử dụng bộ chia 2,...
		abp1p = APB1_PreScaler[temp - 4];
 8000a24:	7a3b      	ldrb	r3, [r7, #8]
 8000a26:	3b04      	subs	r3, #4
 8000a28:	4a0c      	ldr	r2, [pc, #48]	; (8000a5c <RCC_GetPCLK1Value+0xb0>)
 8000a2a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000a2e:	72bb      	strb	r3, [r7, #10]
	}

	//4. Xác định xung PCLK1 dùng cho I2C đc lấy từ từ System Clock
	pclk1 = (SystemClk / ahbp) / abp1p;
 8000a30:	7afb      	ldrb	r3, [r7, #11]
 8000a32:	68fa      	ldr	r2, [r7, #12]
 8000a34:	fbb2 f2f3 	udiv	r2, r2, r3
 8000a38:	7abb      	ldrb	r3, [r7, #10]
 8000a3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a3e:	607b      	str	r3, [r7, #4]

	return pclk1;
 8000a40:	687b      	ldr	r3, [r7, #4]
}
 8000a42:	4618      	mov	r0, r3
 8000a44:	3710      	adds	r7, #16
 8000a46:	46bd      	mov	sp, r7
 8000a48:	bd80      	pop	{r7, pc}
 8000a4a:	bf00      	nop
 8000a4c:	40023800 	.word	0x40023800
 8000a50:	00f42400 	.word	0x00f42400
 8000a54:	007a1200 	.word	0x007a1200
 8000a58:	2000000c 	.word	0x2000000c
 8000a5c:	2000001c 	.word	0x2000001c

08000a60 <RCC_GetPCLK2Value>:
 *
 * @Note        - Sử dụng sơ đồ khối liên quan đến xung Clock của System Clock
 * 				- Thanh ghi CFGR thuộc RCC Register đc sử dụng
 */
uint32_t RCC_GetPCLK2Value(void)
{
 8000a60:	b480      	push	{r7}
 8000a62:	b085      	sub	sp, #20
 8000a64:	af00      	add	r7, sp, #0
	uint32_t SystemClock=0,tmp,pclk2;
 8000a66:	2300      	movs	r3, #0
 8000a68:	60fb      	str	r3, [r7, #12]

	uint8_t clk_src = ( RCC->CFGR >> 2) & 0X3;
 8000a6a:	4b20      	ldr	r3, [pc, #128]	; (8000aec <RCC_GetPCLK2Value+0x8c>)
 8000a6c:	689b      	ldr	r3, [r3, #8]
 8000a6e:	089b      	lsrs	r3, r3, #2
 8000a70:	b2db      	uxtb	r3, r3
 8000a72:	f003 0303 	and.w	r3, r3, #3
 8000a76:	727b      	strb	r3, [r7, #9]

	uint8_t ahbp,apb2p;

	if(clk_src == 0)
 8000a78:	7a7b      	ldrb	r3, [r7, #9]
 8000a7a:	2b00      	cmp	r3, #0
 8000a7c:	d102      	bne.n	8000a84 <RCC_GetPCLK2Value+0x24>
	{
		SystemClock = 16000000;
 8000a7e:	4b1c      	ldr	r3, [pc, #112]	; (8000af0 <RCC_GetPCLK2Value+0x90>)
 8000a80:	60fb      	str	r3, [r7, #12]
 8000a82:	e001      	b.n	8000a88 <RCC_GetPCLK2Value+0x28>
	}
	else
	{
		SystemClock = 8000000;
 8000a84:	4b1b      	ldr	r3, [pc, #108]	; (8000af4 <RCC_GetPCLK2Value+0x94>)
 8000a86:	60fb      	str	r3, [r7, #12]
	}

	tmp = (RCC->CFGR >> 4 ) & 0xF;
 8000a88:	4b18      	ldr	r3, [pc, #96]	; (8000aec <RCC_GetPCLK2Value+0x8c>)
 8000a8a:	689b      	ldr	r3, [r3, #8]
 8000a8c:	091b      	lsrs	r3, r3, #4
 8000a8e:	f003 030f 	and.w	r3, r3, #15
 8000a92:	607b      	str	r3, [r7, #4]

	if(tmp < 0x08)
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	2b07      	cmp	r3, #7
 8000a98:	d802      	bhi.n	8000aa0 <RCC_GetPCLK2Value+0x40>
	{
		ahbp = 1;
 8000a9a:	2301      	movs	r3, #1
 8000a9c:	72fb      	strb	r3, [r7, #11]
 8000a9e:	e005      	b.n	8000aac <RCC_GetPCLK2Value+0x4c>
	}
	else
	{
	   ahbp = AHB_PreScaler[tmp-8];
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	3b08      	subs	r3, #8
 8000aa4:	4a14      	ldr	r2, [pc, #80]	; (8000af8 <RCC_GetPCLK2Value+0x98>)
 8000aa6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000aaa:	72fb      	strb	r3, [r7, #11]
	}

	tmp = (RCC->CFGR >> 13 ) & 0x7;
 8000aac:	4b0f      	ldr	r3, [pc, #60]	; (8000aec <RCC_GetPCLK2Value+0x8c>)
 8000aae:	689b      	ldr	r3, [r3, #8]
 8000ab0:	0b5b      	lsrs	r3, r3, #13
 8000ab2:	f003 0307 	and.w	r3, r3, #7
 8000ab6:	607b      	str	r3, [r7, #4]
	if(tmp < 0x04)
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	2b03      	cmp	r3, #3
 8000abc:	d802      	bhi.n	8000ac4 <RCC_GetPCLK2Value+0x64>
	{
		apb2p = 1;
 8000abe:	2301      	movs	r3, #1
 8000ac0:	72bb      	strb	r3, [r7, #10]
 8000ac2:	e005      	b.n	8000ad0 <RCC_GetPCLK2Value+0x70>
	}
	else
	{
		apb2p = APB1_PreScaler[tmp-4];
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	3b04      	subs	r3, #4
 8000ac8:	4a0c      	ldr	r2, [pc, #48]	; (8000afc <RCC_GetPCLK2Value+0x9c>)
 8000aca:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000ace:	72bb      	strb	r3, [r7, #10]
	}

	pclk2 = (SystemClock / ahbp )/ apb2p;
 8000ad0:	7afb      	ldrb	r3, [r7, #11]
 8000ad2:	68fa      	ldr	r2, [r7, #12]
 8000ad4:	fbb2 f2f3 	udiv	r2, r2, r3
 8000ad8:	7abb      	ldrb	r3, [r7, #10]
 8000ada:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ade:	603b      	str	r3, [r7, #0]

	return pclk2;
 8000ae0:	683b      	ldr	r3, [r7, #0]
}
 8000ae2:	4618      	mov	r0, r3
 8000ae4:	3714      	adds	r7, #20
 8000ae6:	46bd      	mov	sp, r7
 8000ae8:	bc80      	pop	{r7}
 8000aea:	4770      	bx	lr
 8000aec:	40023800 	.word	0x40023800
 8000af0:	00f42400 	.word	0x00f42400
 8000af4:	007a1200 	.word	0x007a1200
 8000af8:	2000000c 	.word	0x2000000c
 8000afc:	2000001c 	.word	0x2000001c

08000b00 <RCC_GetPLLOutputClock>:
 *
 * @Note        - Không sử dụng xung clock dạng PLL trong khóa học

 */
uint32_t RCC_GetPLLOutputClock(void)
{
 8000b00:	b480      	push	{r7}
 8000b02:	af00      	add	r7, sp, #0
	return 0;
 8000b04:	2300      	movs	r3, #0
}
 8000b06:	4618      	mov	r0, r3
 8000b08:	46bd      	mov	sp, r7
 8000b0a:	bc80      	pop	{r7}
 8000b0c:	4770      	bx	lr
	...

08000b10 <USART_SetBaudRate>:
 *
 * @Note              - none

 */
void USART_SetBaudRate(USART_RegDef_t *pUSARTx, uint32_t BaudRate)
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	b088      	sub	sp, #32
 8000b14:	af00      	add	r7, sp, #0
 8000b16:	6078      	str	r0, [r7, #4]
 8000b18:	6039      	str	r1, [r7, #0]
	uint32_t usartdiv;		//value usartdiv để cấu hình vào USART_BRR

	//variables to hold "Mantissa" and "Fraction" values
	uint32_t M_part,F_part;

	uint32_t tempreg=0;
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	613b      	str	r3, [r7, #16]

	//Get the value of APBx bus clock in to the variable PCLKx
	if(pUSARTx == USART1 || pUSARTx == USART6)
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	4a31      	ldr	r2, [pc, #196]	; (8000be8 <USART_SetBaudRate+0xd8>)
 8000b22:	4293      	cmp	r3, r2
 8000b24:	d003      	beq.n	8000b2e <USART_SetBaudRate+0x1e>
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	4a30      	ldr	r2, [pc, #192]	; (8000bec <USART_SetBaudRate+0xdc>)
 8000b2a:	4293      	cmp	r3, r2
 8000b2c:	d103      	bne.n	8000b36 <USART_SetBaudRate+0x26>
	{
	   //USART1 and USART6 are hanging on APB2 bus
	   PCLKx = RCC_GetPCLK2Value();
 8000b2e:	f7ff ff97 	bl	8000a60 <RCC_GetPCLK2Value>
 8000b32:	61f8      	str	r0, [r7, #28]
 8000b34:	e002      	b.n	8000b3c <USART_SetBaudRate+0x2c>
	}
	else
	{
		//USART2 and USART3 are hanging on APB1 bus
	   PCLKx = RCC_GetPCLK1Value();
 8000b36:	f7ff ff39 	bl	80009ac <RCC_GetPCLK1Value>
 8000b3a:	61f8      	str	r0, [r7, #28]
	}

	//Check for "OVER8" configuration bit
	if(pUSARTx->CR1 & (1 << USART_CR1_OVER8))
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	68db      	ldr	r3, [r3, #12]
 8000b40:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000b44:	2b00      	cmp	r3, #0
 8000b46:	d00b      	beq.n	8000b60 <USART_SetBaudRate+0x50>
	{
	   //OVER8 = 1 , over sampling by 8
	   usartdiv = ((25 * PCLKx) / (2 *BaudRate));
 8000b48:	69fa      	ldr	r2, [r7, #28]
 8000b4a:	4613      	mov	r3, r2
 8000b4c:	009b      	lsls	r3, r3, #2
 8000b4e:	4413      	add	r3, r2
 8000b50:	009a      	lsls	r2, r3, #2
 8000b52:	441a      	add	r2, r3
 8000b54:	683b      	ldr	r3, [r7, #0]
 8000b56:	005b      	lsls	r3, r3, #1
 8000b58:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b5c:	61bb      	str	r3, [r7, #24]
 8000b5e:	e00a      	b.n	8000b76 <USART_SetBaudRate+0x66>
	}
	else
	{
	   //over sampling by 16
		usartdiv = ((25 * PCLKx) / (4 *BaudRate));
 8000b60:	69fa      	ldr	r2, [r7, #28]
 8000b62:	4613      	mov	r3, r2
 8000b64:	009b      	lsls	r3, r3, #2
 8000b66:	4413      	add	r3, r2
 8000b68:	009a      	lsls	r2, r3, #2
 8000b6a:	441a      	add	r2, r3
 8000b6c:	683b      	ldr	r3, [r7, #0]
 8000b6e:	009b      	lsls	r3, r3, #2
 8000b70:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b74:	61bb      	str	r3, [r7, #24]
	}

	//Calculate the Mantissa part
	M_part = usartdiv/100;
 8000b76:	69bb      	ldr	r3, [r7, #24]
 8000b78:	4a1d      	ldr	r2, [pc, #116]	; (8000bf0 <USART_SetBaudRate+0xe0>)
 8000b7a:	fba2 2303 	umull	r2, r3, r2, r3
 8000b7e:	095b      	lsrs	r3, r3, #5
 8000b80:	60fb      	str	r3, [r7, #12]

	//Place the Mantissa part in appropriate bit position . refer USART_BRR - Đặt phần Mantissa ở vị trí bit thích hợp. tham khảo USART_BRR
	tempreg |= M_part << 4;  //phần Mantissa là 4bit đầu tiên [3:0] của biến 32 bit tempreg
 8000b82:	68fb      	ldr	r3, [r7, #12]
 8000b84:	011b      	lsls	r3, r3, #4
 8000b86:	693a      	ldr	r2, [r7, #16]
 8000b88:	4313      	orrs	r3, r2
 8000b8a:	613b      	str	r3, [r7, #16]

	//Extract the "fraction" part
	F_part = (usartdiv - (M_part * 100));
 8000b8c:	68fb      	ldr	r3, [r7, #12]
 8000b8e:	2264      	movs	r2, #100	; 0x64
 8000b90:	fb02 f303 	mul.w	r3, r2, r3
 8000b94:	69ba      	ldr	r2, [r7, #24]
 8000b96:	1ad3      	subs	r3, r2, r3
 8000b98:	617b      	str	r3, [r7, #20]

	//Calculate the final "fractional"
	if(pUSARTx->CR1 & ( 1 << USART_CR1_OVER8))
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	68db      	ldr	r3, [r3, #12]
 8000b9e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000ba2:	2b00      	cmp	r3, #0
 8000ba4:	d00a      	beq.n	8000bbc <USART_SetBaudRate+0xac>
	{
		//OVER8 = 1 , over sampling by 8
		F_part = ((( F_part * 8)+ 50) / 100) & ((uint8_t)0x07);
 8000ba6:	697b      	ldr	r3, [r7, #20]
 8000ba8:	00db      	lsls	r3, r3, #3
 8000baa:	3332      	adds	r3, #50	; 0x32
 8000bac:	4a10      	ldr	r2, [pc, #64]	; (8000bf0 <USART_SetBaudRate+0xe0>)
 8000bae:	fba2 2303 	umull	r2, r3, r2, r3
 8000bb2:	095b      	lsrs	r3, r3, #5
 8000bb4:	f003 0307 	and.w	r3, r3, #7
 8000bb8:	617b      	str	r3, [r7, #20]
 8000bba:	e009      	b.n	8000bd0 <USART_SetBaudRate+0xc0>
	}
	else
	{
		//over sampling by 16
		F_part = ((( F_part * 16)+ 50) / 100) & ((uint8_t)0x0F);
 8000bbc:	697b      	ldr	r3, [r7, #20]
 8000bbe:	011b      	lsls	r3, r3, #4
 8000bc0:	3332      	adds	r3, #50	; 0x32
 8000bc2:	4a0b      	ldr	r2, [pc, #44]	; (8000bf0 <USART_SetBaudRate+0xe0>)
 8000bc4:	fba2 2303 	umull	r2, r3, r2, r3
 8000bc8:	095b      	lsrs	r3, r3, #5
 8000bca:	f003 030f 	and.w	r3, r3, #15
 8000bce:	617b      	str	r3, [r7, #20]
	}

	//Place the fractional part in appropriate bit position . refer USART_BRR
	tempreg |= F_part;
 8000bd0:	693a      	ldr	r2, [r7, #16]
 8000bd2:	697b      	ldr	r3, [r7, #20]
 8000bd4:	4313      	orrs	r3, r2
 8000bd6:	613b      	str	r3, [r7, #16]

	//copy the value of tempreg in to BRR register
	pUSARTx->BRR = tempreg;
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	693a      	ldr	r2, [r7, #16]
 8000bdc:	609a      	str	r2, [r3, #8]

}
 8000bde:	bf00      	nop
 8000be0:	3720      	adds	r7, #32
 8000be2:	46bd      	mov	sp, r7
 8000be4:	bd80      	pop	{r7, pc}
 8000be6:	bf00      	nop
 8000be8:	40011000 	.word	0x40011000
 8000bec:	40011400 	.word	0x40011400
 8000bf0:	51eb851f 	.word	0x51eb851f

08000bf4 <USART_PeriClockControl>:
 *
 * @Note        - none

 */
void USART_PeriClockControl(USART_RegDef_t *pUSARTx, uint8_t EnorDi)
{
 8000bf4:	b480      	push	{r7}
 8000bf6:	b083      	sub	sp, #12
 8000bf8:	af00      	add	r7, sp, #0
 8000bfa:	6078      	str	r0, [r7, #4]
 8000bfc:	460b      	mov	r3, r1
 8000bfe:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE)
 8000c00:	78fb      	ldrb	r3, [r7, #3]
 8000c02:	2b01      	cmp	r3, #1
 8000c04:	d12a      	bne.n	8000c5c <USART_PeriClockControl+0x68>
	{
		if(pUSARTx == USART1)
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	4a17      	ldr	r2, [pc, #92]	; (8000c68 <USART_PeriClockControl+0x74>)
 8000c0a:	4293      	cmp	r3, r2
 8000c0c:	d106      	bne.n	8000c1c <USART_PeriClockControl+0x28>
		{
			USART1_PCLK_EN();
 8000c0e:	4b17      	ldr	r3, [pc, #92]	; (8000c6c <USART_PeriClockControl+0x78>)
 8000c10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c12:	4a16      	ldr	r2, [pc, #88]	; (8000c6c <USART_PeriClockControl+0x78>)
 8000c14:	f043 0310 	orr.w	r3, r3, #16
 8000c18:	6453      	str	r3, [r2, #68]	; 0x44
	}
	else
	{
		//TODO
	}
}
 8000c1a:	e01f      	b.n	8000c5c <USART_PeriClockControl+0x68>
		else if (pUSARTx == USART2)
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	4a14      	ldr	r2, [pc, #80]	; (8000c70 <USART_PeriClockControl+0x7c>)
 8000c20:	4293      	cmp	r3, r2
 8000c22:	d106      	bne.n	8000c32 <USART_PeriClockControl+0x3e>
			USART2_PCLK_EN();
 8000c24:	4b11      	ldr	r3, [pc, #68]	; (8000c6c <USART_PeriClockControl+0x78>)
 8000c26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c28:	4a10      	ldr	r2, [pc, #64]	; (8000c6c <USART_PeriClockControl+0x78>)
 8000c2a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c2e:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000c30:	e014      	b.n	8000c5c <USART_PeriClockControl+0x68>
		else if (pUSARTx == USART3)
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	4a0f      	ldr	r2, [pc, #60]	; (8000c74 <USART_PeriClockControl+0x80>)
 8000c36:	4293      	cmp	r3, r2
 8000c38:	d106      	bne.n	8000c48 <USART_PeriClockControl+0x54>
			USART3_PCLK_EN();
 8000c3a:	4b0c      	ldr	r3, [pc, #48]	; (8000c6c <USART_PeriClockControl+0x78>)
 8000c3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c3e:	4a0b      	ldr	r2, [pc, #44]	; (8000c6c <USART_PeriClockControl+0x78>)
 8000c40:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000c44:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000c46:	e009      	b.n	8000c5c <USART_PeriClockControl+0x68>
		else if (pUSARTx == USART6)
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	4a0b      	ldr	r2, [pc, #44]	; (8000c78 <USART_PeriClockControl+0x84>)
 8000c4c:	4293      	cmp	r3, r2
 8000c4e:	d105      	bne.n	8000c5c <USART_PeriClockControl+0x68>
			USART6_PCLK_EN();
 8000c50:	4b06      	ldr	r3, [pc, #24]	; (8000c6c <USART_PeriClockControl+0x78>)
 8000c52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c54:	4a05      	ldr	r2, [pc, #20]	; (8000c6c <USART_PeriClockControl+0x78>)
 8000c56:	f043 0320 	orr.w	r3, r3, #32
 8000c5a:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000c5c:	bf00      	nop
 8000c5e:	370c      	adds	r7, #12
 8000c60:	46bd      	mov	sp, r7
 8000c62:	bc80      	pop	{r7}
 8000c64:	4770      	bx	lr
 8000c66:	bf00      	nop
 8000c68:	40011000 	.word	0x40011000
 8000c6c:	40023800 	.word	0x40023800
 8000c70:	40004400 	.word	0x40004400
 8000c74:	40004800 	.word	0x40004800
 8000c78:	40011400 	.word	0x40011400

08000c7c <USART_Init>:
 *
 * @Note              - none

 */
void USART_Init(USART_Handle_t *pUSARTHandle)
{
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	b084      	sub	sp, #16
 8000c80:	af00      	add	r7, sp, #0
 8000c82:	6078      	str	r0, [r7, #4]

	//Temporary variable
	uint32_t tempreg=0;
 8000c84:	2300      	movs	r3, #0
 8000c86:	60fb      	str	r3, [r7, #12]

/******************************** 1. Configuration of CR1******************************************/

	//Implement the code to enable the "Clock" for given USART peripheral - Kích hoạt xung Clock
	USART_PeriClockControl(pUSARTHandle->pUSARTx, ENABLE);
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	681b      	ldr	r3, [r3, #0]
 8000c8c:	2101      	movs	r1, #1
 8000c8e:	4618      	mov	r0, r3
 8000c90:	f7ff ffb0 	bl	8000bf4 <USART_PeriClockControl>

	//Enable USART Tx and Rx engines according to the USART_Mode configuration item
	//Biện luận để Kích hoạt USART Tx và Rx engines theo mục cấu hình USART_Mode
	//Trạng thái dùng để so sánh là sử dụng thông số "USART_Config" do User cài đặt ban đầu
	if ( pUSARTHandle->USART_Config.USART_Mode == USART_MODE_ONLY_RX)	//Trạng thái nhận
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	791b      	ldrb	r3, [r3, #4]
 8000c98:	2b01      	cmp	r3, #1
 8000c9a:	d104      	bne.n	8000ca6 <USART_Init+0x2a>
	{
		//Implement the code to enable the Receiver bit field - Triển khai mã để kích hoạt trường bit Receiver
		tempreg|= (1 << USART_CR1_RE);
 8000c9c:	68fb      	ldr	r3, [r7, #12]
 8000c9e:	f043 0304 	orr.w	r3, r3, #4
 8000ca2:	60fb      	str	r3, [r7, #12]
 8000ca4:	e010      	b.n	8000cc8 <USART_Init+0x4c>
	}
	else if (pUSARTHandle->USART_Config.USART_Mode == USART_MODE_ONLY_TX)
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	791b      	ldrb	r3, [r3, #4]
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	d104      	bne.n	8000cb8 <USART_Init+0x3c>
	{
		//Implement the code to enable the "Transmitter" bit field
		tempreg |= ( 1 << USART_CR1_TE );
 8000cae:	68fb      	ldr	r3, [r7, #12]
 8000cb0:	f043 0308 	orr.w	r3, r3, #8
 8000cb4:	60fb      	str	r3, [r7, #12]
 8000cb6:	e007      	b.n	8000cc8 <USART_Init+0x4c>

	}
	else if (pUSARTHandle->USART_Config.USART_Mode == USART_MODE_TXRX)
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	791b      	ldrb	r3, [r3, #4]
 8000cbc:	2b02      	cmp	r3, #2
 8000cbe:	d103      	bne.n	8000cc8 <USART_Init+0x4c>
	{
		//Implement the code to enable the both Transmitter and Receiver bit fields - Cả hai RX và TX Mode
		tempreg |= ( ( 1 << USART_CR1_RE) | ( 1 << USART_CR1_TE) );
 8000cc0:	68fb      	ldr	r3, [r7, #12]
 8000cc2:	f043 030c 	orr.w	r3, r3, #12
 8000cc6:	60fb      	str	r3, [r7, #12]
	}

    //Implement the code to configure the Word length configuration item
	tempreg |= pUSARTHandle->USART_Config.USART_WordLength << USART_CR1_M ;
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	7b5b      	ldrb	r3, [r3, #13]
 8000ccc:	031b      	lsls	r3, r3, #12
 8000cce:	461a      	mov	r2, r3
 8000cd0:	68fb      	ldr	r3, [r7, #12]
 8000cd2:	4313      	orrs	r3, r2
 8000cd4:	60fb      	str	r3, [r7, #12]


    //Configuration of parity control bit fields - Cấu hình các trường bit kiểm soát tính Parity
	if ( pUSARTHandle->USART_Config.USART_ParityControl == USART_PARITY_EN_EVEN)
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	7b9b      	ldrb	r3, [r3, #14]
 8000cda:	2b01      	cmp	r3, #1
 8000cdc:	d104      	bne.n	8000ce8 <USART_Init+0x6c>
	{
		//Implement the code to enable the parity control
		tempreg |= ( 1 << USART_CR1_PCE);
 8000cde:	68fb      	ldr	r3, [r7, #12]
 8000ce0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000ce4:	60fb      	str	r3, [r7, #12]
 8000ce6:	e00b      	b.n	8000d00 <USART_Init+0x84>

		//Implement the code to enable EVEN parity - Triển khai mã để kích hoạt EVEN Parity
		//Not required because by default EVEN parity will be selected once you enable the parity control
		//Không bắt buộc code vì theo mặc định USART_CR1_PS=0=EVEN, EVEN sẽ được chọn sau khi bạn bật kiểm soát Parity

	}else if (pUSARTHandle->USART_Config.USART_ParityControl == USART_PARITY_EN_ODD )
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	7b9b      	ldrb	r3, [r3, #14]
 8000cec:	2b02      	cmp	r3, #2
 8000cee:	d107      	bne.n	8000d00 <USART_Init+0x84>
	{
		//Implement the code to enable the parity control
	    tempreg |= ( 1 << USART_CR1_PCE);
 8000cf0:	68fb      	ldr	r3, [r7, #12]
 8000cf2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000cf6:	60fb      	str	r3, [r7, #12]

	    //Implement the code to enable ODD parity - kích hoạt bit field USART_CR1_PS lên 1 = Odd
	    tempreg |= ( 1 << USART_CR1_PS);
 8000cf8:	68fb      	ldr	r3, [r7, #12]
 8000cfa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000cfe:	60fb      	str	r3, [r7, #12]

	}

   //Program the CR1 register - Cấu hình thông số đã cài đặt tempreg cho CR1 Register
	pUSARTHandle->pUSARTx->CR1 = tempreg;
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	681b      	ldr	r3, [r3, #0]
 8000d04:	68fa      	ldr	r2, [r7, #12]
 8000d06:	60da      	str	r2, [r3, #12]


/******************************** 2. Configuration of CR2******************************************/

	tempreg=0;
 8000d08:	2300      	movs	r3, #0
 8000d0a:	60fb      	str	r3, [r7, #12]

	//Implement the code to configure the number of "Stop Bits" inserted during USART frame transmission
	//Triển khai mã để định cấu hình số lượng "Stop Bits" được chèn trong quá trình truyền khung USART
	tempreg |= pUSARTHandle->USART_Config.USART_NoOfStopBits << USART_CR2_STOP; //Thông báo có stop bit đc sử dụng
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	7b1b      	ldrb	r3, [r3, #12]
 8000d10:	031b      	lsls	r3, r3, #12
 8000d12:	461a      	mov	r2, r3
 8000d14:	68fb      	ldr	r3, [r7, #12]
 8000d16:	4313      	orrs	r3, r2
 8000d18:	60fb      	str	r3, [r7, #12]

	//Program the CR2 register
	pUSARTHandle->pUSARTx->CR2 = tempreg;
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	681b      	ldr	r3, [r3, #0]
 8000d1e:	68fa      	ldr	r2, [r7, #12]
 8000d20:	611a      	str	r2, [r3, #16]

/******************************** 3. Configuration of CR3******************************************/

	tempreg=0;
 8000d22:	2300      	movs	r3, #0
 8000d24:	60fb      	str	r3, [r7, #12]

	//Biện luận thông số "USART_HWFlowControl" do User cài đặt ban đầu

	//Configuration of USART hardware flow control
	if ( pUSARTHandle->USART_Config.USART_HWFlowControl == USART_HW_FLOW_CTRL_CTS)
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	7bdb      	ldrb	r3, [r3, #15]
 8000d2a:	2b01      	cmp	r3, #1
 8000d2c:	d104      	bne.n	8000d38 <USART_Init+0xbc>
	{
		//Implement the code to "Enable CTS" flow control
		tempreg |= ( 1 << USART_CR3_CTSE);
 8000d2e:	68fb      	ldr	r3, [r7, #12]
 8000d30:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000d34:	60fb      	str	r3, [r7, #12]
 8000d36:	e014      	b.n	8000d62 <USART_Init+0xe6>


	}else if (pUSARTHandle->USART_Config.USART_HWFlowControl == USART_HW_FLOW_CTRL_RTS)
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	7bdb      	ldrb	r3, [r3, #15]
 8000d3c:	2b02      	cmp	r3, #2
 8000d3e:	d104      	bne.n	8000d4a <USART_Init+0xce>
	{
		//Implement the code to "Enable RTS" flow control
		tempreg |= ( 1 << USART_CR3_RTSE);
 8000d40:	68fb      	ldr	r3, [r7, #12]
 8000d42:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d46:	60fb      	str	r3, [r7, #12]
 8000d48:	e00b      	b.n	8000d62 <USART_Init+0xe6>

	}else if (pUSARTHandle->USART_Config.USART_HWFlowControl == USART_HW_FLOW_CTRL_CTS_RTS)
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	7bdb      	ldrb	r3, [r3, #15]
 8000d4e:	2b03      	cmp	r3, #3
 8000d50:	d107      	bne.n	8000d62 <USART_Init+0xe6>
	{
		//Implement the code to enable both "CTS and RTS" Flow control
		tempreg |= ( 1 << USART_CR3_CTSE);
 8000d52:	68fb      	ldr	r3, [r7, #12]
 8000d54:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000d58:	60fb      	str	r3, [r7, #12]
		tempreg |= ( 1 << USART_CR3_RTSE);
 8000d5a:	68fb      	ldr	r3, [r7, #12]
 8000d5c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d60:	60fb      	str	r3, [r7, #12]
	}


	pUSARTHandle->pUSARTx->CR3 = tempreg;
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	681b      	ldr	r3, [r3, #0]
 8000d66:	68fa      	ldr	r2, [r7, #12]
 8000d68:	615a      	str	r2, [r3, #20]
/******************************** 4. Configuration of BRR(Baudrate register)******************************************/

	//Implement the code to configure the baud rate
	//We will cover this in the lecture. No action required here

	USART_SetBaudRate(pUSARTHandle->pUSARTx, pUSARTHandle->USART_Config.USART_Baud);
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	681a      	ldr	r2, [r3, #0]
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	689b      	ldr	r3, [r3, #8]
 8000d72:	4619      	mov	r1, r3
 8000d74:	4610      	mov	r0, r2
 8000d76:	f7ff fecb 	bl	8000b10 <USART_SetBaudRate>
}
 8000d7a:	bf00      	nop
 8000d7c:	3710      	adds	r7, #16
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	bd80      	pop	{r7, pc}

08000d82 <USART_SendData>:
 *
 * @Note              - none

 */
void USART_SendData(USART_Handle_t *pUSARTHandle, uint8_t *pTxBuffer, uint32_t Len)
{
 8000d82:	b580      	push	{r7, lr}
 8000d84:	b086      	sub	sp, #24
 8000d86:	af00      	add	r7, sp, #0
 8000d88:	60f8      	str	r0, [r7, #12]
 8000d8a:	60b9      	str	r1, [r7, #8]
 8000d8c:	607a      	str	r2, [r7, #4]
	uint16_t *pdata;
   //Loop over until "Len" number of bytes are transferred - Lặp lại cho đến khi số byte "Len" được chuyển
	for(uint32_t i = 0 ; i < Len; i++)
 8000d8e:	2300      	movs	r3, #0
 8000d90:	617b      	str	r3, [r7, #20]
 8000d92:	e031      	b.n	8000df8 <USART_SendData+0x76>
	{
		//Implement the code to wait until TXE flag is set in the SR
		//Triển khai mã để đợi cho đến khi cờ TXE được đặt trong SR, nghĩa là thanh ghi TDR là empty
		while(! USART_GetFlagStatus(pUSARTHandle->pUSARTx,USART_SR_TXE));
 8000d94:	bf00      	nop
 8000d96:	68fb      	ldr	r3, [r7, #12]
 8000d98:	681b      	ldr	r3, [r3, #0]
 8000d9a:	2107      	movs	r1, #7
 8000d9c:	4618      	mov	r0, r3
 8000d9e:	f000 f881 	bl	8000ea4 <USART_GetFlagStatus>
 8000da2:	4603      	mov	r3, r0
 8000da4:	2b00      	cmp	r3, #0
 8000da6:	d0f6      	beq.n	8000d96 <USART_SendData+0x14>

         //Check the "USART_WordLength" item for "9BIT" or "8BIT" in a "frame"
		if(pUSARTHandle->USART_Config.USART_WordLength == USART_WORDLEN_9BITS)  //9bit
 8000da8:	68fb      	ldr	r3, [r7, #12]
 8000daa:	7b5b      	ldrb	r3, [r3, #13]
 8000dac:	2b01      	cmp	r3, #1
 8000dae:	d118      	bne.n	8000de2 <USART_SendData+0x60>
		{
			//if 9BIT, load the DR with "2bytes masking the bits" other than first 9 bits
			pdata = (uint16_t*) pTxBuffer;
 8000db0:	68bb      	ldr	r3, [r7, #8]
 8000db2:	613b      	str	r3, [r7, #16]
			pUSARTHandle->pUSARTx->DR = (*pdata & (uint16_t)0x01FF); //0x01FF = 0000 0001 1111 1111, 9bit
 8000db4:	693b      	ldr	r3, [r7, #16]
 8000db6:	881b      	ldrh	r3, [r3, #0]
 8000db8:	461a      	mov	r2, r3
 8000dba:	68fb      	ldr	r3, [r7, #12]
 8000dbc:	681b      	ldr	r3, [r3, #0]
 8000dbe:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8000dc2:	605a      	str	r2, [r3, #4]

			//Check for "USART_ParityControl" - có sử dụng hay ko parity bit
			if(pUSARTHandle->USART_Config.USART_ParityControl == USART_PARITY_DISABLE)
 8000dc4:	68fb      	ldr	r3, [r7, #12]
 8000dc6:	7b9b      	ldrb	r3, [r3, #14]
 8000dc8:	2b00      	cmp	r3, #0
 8000dca:	d106      	bne.n	8000dda <USART_SendData+0x58>
			{
				//No parity is used in this transfer. so, 9bits of user data will be sent
				//Implement the code to increment pTxBuffer twice
				pTxBuffer++;
 8000dcc:	68bb      	ldr	r3, [r7, #8]
 8000dce:	3301      	adds	r3, #1
 8000dd0:	60bb      	str	r3, [r7, #8]
				pTxBuffer++;
 8000dd2:	68bb      	ldr	r3, [r7, #8]
 8000dd4:	3301      	adds	r3, #1
 8000dd6:	60bb      	str	r3, [r7, #8]
 8000dd8:	e00b      	b.n	8000df2 <USART_SendData+0x70>
			}
			else
			{
				//Parity bit is used in this transfer . so , 8bits of user data will be sent
				//The 9th bit will be replaced by parity bit by the hardware
				pTxBuffer++;
 8000dda:	68bb      	ldr	r3, [r7, #8]
 8000ddc:	3301      	adds	r3, #1
 8000dde:	60bb      	str	r3, [r7, #8]
 8000de0:	e007      	b.n	8000df2 <USART_SendData+0x70>
			}
		}
		else
		{
			//This is 8bit data transfer
			pUSARTHandle->pUSARTx->DR = (*pTxBuffer  & (uint8_t)0xFF);	//1111 1111
 8000de2:	68bb      	ldr	r3, [r7, #8]
 8000de4:	781a      	ldrb	r2, [r3, #0]
 8000de6:	68fb      	ldr	r3, [r7, #12]
 8000de8:	681b      	ldr	r3, [r3, #0]
 8000dea:	605a      	str	r2, [r3, #4]

			//Implement the code to increment the buffer address
			pTxBuffer++;
 8000dec:	68bb      	ldr	r3, [r7, #8]
 8000dee:	3301      	adds	r3, #1
 8000df0:	60bb      	str	r3, [r7, #8]
	for(uint32_t i = 0 ; i < Len; i++)
 8000df2:	697b      	ldr	r3, [r7, #20]
 8000df4:	3301      	adds	r3, #1
 8000df6:	617b      	str	r3, [r7, #20]
 8000df8:	697a      	ldr	r2, [r7, #20]
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	429a      	cmp	r2, r3
 8000dfe:	d3c9      	bcc.n	8000d94 <USART_SendData+0x12>
		}
	}

	//Implement the code to wait till "TC flag" is set in the "SR register", nghĩa là chờ đến khi TC=1
	while( ! USART_GetFlagStatus(pUSARTHandle->pUSARTx,USART_SR_TC));  //TC=1-> Transmission complete
 8000e00:	bf00      	nop
 8000e02:	68fb      	ldr	r3, [r7, #12]
 8000e04:	681b      	ldr	r3, [r3, #0]
 8000e06:	2106      	movs	r1, #6
 8000e08:	4618      	mov	r0, r3
 8000e0a:	f000 f84b 	bl	8000ea4 <USART_GetFlagStatus>
 8000e0e:	4603      	mov	r3, r0
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	d0f6      	beq.n	8000e02 <USART_SendData+0x80>
}
 8000e14:	bf00      	nop
 8000e16:	bf00      	nop
 8000e18:	3718      	adds	r7, #24
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	bd80      	pop	{r7, pc}

08000e1e <USART_ReceiveDataIT>:
 *
 * @Note              - none

 */
uint8_t USART_ReceiveDataIT(USART_Handle_t *pUSARTHandle,uint8_t *pRxBuffer, uint32_t Len)
{
 8000e1e:	b480      	push	{r7}
 8000e20:	b087      	sub	sp, #28
 8000e22:	af00      	add	r7, sp, #0
 8000e24:	60f8      	str	r0, [r7, #12]
 8000e26:	60b9      	str	r1, [r7, #8]
 8000e28:	607a      	str	r2, [r7, #4]
	uint8_t rxstate = pUSARTHandle->RxBusyState;
 8000e2a:	68fb      	ldr	r3, [r7, #12]
 8000e2c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000e30:	75fb      	strb	r3, [r7, #23]

	if(rxstate != USART_BUSY_IN_RX)
 8000e32:	7dfb      	ldrb	r3, [r7, #23]
 8000e34:	2b01      	cmp	r3, #1
 8000e36:	d014      	beq.n	8000e62 <USART_ReceiveDataIT+0x44>
	{
		pUSARTHandle->RxLen = Len;
 8000e38:	68fb      	ldr	r3, [r7, #12]
 8000e3a:	687a      	ldr	r2, [r7, #4]
 8000e3c:	61da      	str	r2, [r3, #28]
		pUSARTHandle->pRxBuffer = pRxBuffer;
 8000e3e:	68fb      	ldr	r3, [r7, #12]
 8000e40:	68ba      	ldr	r2, [r7, #8]
 8000e42:	615a      	str	r2, [r3, #20]
		pUSARTHandle->RxBusyState = USART_BUSY_IN_RX;
 8000e44:	68fb      	ldr	r3, [r7, #12]
 8000e46:	2201      	movs	r2, #1
 8000e48:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

		(void)pUSARTHandle->pUSARTx->DR;
 8000e4c:	68fb      	ldr	r3, [r7, #12]
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	685b      	ldr	r3, [r3, #4]

		//Implement the code to enable interrupt for RXNE
		pUSARTHandle->pUSARTx->CR1 |= ( 1 << USART_CR1_RXNEIE);
 8000e52:	68fb      	ldr	r3, [r7, #12]
 8000e54:	681b      	ldr	r3, [r3, #0]
 8000e56:	68da      	ldr	r2, [r3, #12]
 8000e58:	68fb      	ldr	r3, [r7, #12]
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	f042 0220 	orr.w	r2, r2, #32
 8000e60:	60da      	str	r2, [r3, #12]

	}

	return rxstate;
 8000e62:	7dfb      	ldrb	r3, [r7, #23]

}
 8000e64:	4618      	mov	r0, r3
 8000e66:	371c      	adds	r7, #28
 8000e68:	46bd      	mov	sp, r7
 8000e6a:	bc80      	pop	{r7}
 8000e6c:	4770      	bx	lr

08000e6e <USART_PeripheralControl>:
 * @return      - none
 *
 * @Note        - none
 */
void USART_PeripheralControl(USART_RegDef_t *pUSARTx, uint8_t EnOrDi)
{
 8000e6e:	b480      	push	{r7}
 8000e70:	b083      	sub	sp, #12
 8000e72:	af00      	add	r7, sp, #0
 8000e74:	6078      	str	r0, [r7, #4]
 8000e76:	460b      	mov	r3, r1
 8000e78:	70fb      	strb	r3, [r7, #3]
	if(EnOrDi == ENABLE)
 8000e7a:	78fb      	ldrb	r3, [r7, #3]
 8000e7c:	2b01      	cmp	r3, #1
 8000e7e:	d106      	bne.n	8000e8e <USART_PeripheralControl+0x20>
	{
		pUSARTx->CR1 |= (1 << USART_CR1_UE);
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	68db      	ldr	r3, [r3, #12]
 8000e84:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	60da      	str	r2, [r3, #12]
	}
	else
	{
		pUSARTx->CR1 &= ~(1 << USART_CR1_UE);
	}
}
 8000e8c:	e005      	b.n	8000e9a <USART_PeripheralControl+0x2c>
		pUSARTx->CR1 &= ~(1 << USART_CR1_UE);
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	68db      	ldr	r3, [r3, #12]
 8000e92:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	60da      	str	r2, [r3, #12]
}
 8000e9a:	bf00      	nop
 8000e9c:	370c      	adds	r7, #12
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	bc80      	pop	{r7}
 8000ea2:	4770      	bx	lr

08000ea4 <USART_GetFlagStatus>:
 * @return      - Trạng thái cờ_flag
 *
 * @Note        - none
 */
uint8_t USART_GetFlagStatus(USART_RegDef_t *pUSARTx , uint32_t FlagName)
{
 8000ea4:	b480      	push	{r7}
 8000ea6:	b083      	sub	sp, #12
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	6078      	str	r0, [r7, #4]
 8000eac:	6039      	str	r1, [r7, #0]
	if(pUSARTx->SR & FlagName)
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	681a      	ldr	r2, [r3, #0]
 8000eb2:	683b      	ldr	r3, [r7, #0]
 8000eb4:	4013      	ands	r3, r2
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	d001      	beq.n	8000ebe <USART_GetFlagStatus+0x1a>
	{
		return SET;			//High=1
 8000eba:	2301      	movs	r3, #1
 8000ebc:	e000      	b.n	8000ec0 <USART_GetFlagStatus+0x1c>
	}

	return RESET;			//Low=0
 8000ebe:	2300      	movs	r3, #0
}
 8000ec0:	4618      	mov	r0, r3
 8000ec2:	370c      	adds	r7, #12
 8000ec4:	46bd      	mov	sp, r7
 8000ec6:	bc80      	pop	{r7}
 8000ec8:	4770      	bx	lr
	...

08000ecc <USART_IRQInterruptConfig>:
 * @return		- none
 *
 * @Note 		- none
 */
void USART_IRQInterruptConfig(uint8_t IRQNumber, uint8_t EnorDi)
{
 8000ecc:	b480      	push	{r7}
 8000ece:	b083      	sub	sp, #12
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	4603      	mov	r3, r0
 8000ed4:	460a      	mov	r2, r1
 8000ed6:	71fb      	strb	r3, [r7, #7]
 8000ed8:	4613      	mov	r3, r2
 8000eda:	71bb      	strb	r3, [r7, #6]
	if(EnorDi == ENABLE)	//cho phép kích hoạt interrupt
 8000edc:	79bb      	ldrb	r3, [r7, #6]
 8000ede:	2b01      	cmp	r3, #1
 8000ee0:	d133      	bne.n	8000f4a <USART_IRQInterruptConfig+0x7e>
	{
		if(IRQNumber <= 31)
 8000ee2:	79fb      	ldrb	r3, [r7, #7]
 8000ee4:	2b1f      	cmp	r3, #31
 8000ee6:	d80a      	bhi.n	8000efe <USART_IRQInterruptConfig+0x32>
		{
			//program ISER0 register
			*NVIC_ISER0 |= (1 << IRQNumber);
 8000ee8:	4b34      	ldr	r3, [pc, #208]	; (8000fbc <USART_IRQInterruptConfig+0xf0>)
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	79fa      	ldrb	r2, [r7, #7]
 8000eee:	2101      	movs	r1, #1
 8000ef0:	fa01 f202 	lsl.w	r2, r1, r2
 8000ef4:	4611      	mov	r1, r2
 8000ef6:	4a31      	ldr	r2, [pc, #196]	; (8000fbc <USART_IRQInterruptConfig+0xf0>)
 8000ef8:	430b      	orrs	r3, r1
 8000efa:	6013      	str	r3, [r2, #0]
		{
			//program ICER2 register
			*NVIC_ICER2 |= (1 << IRQNumber % 64);
		}
	}
}
 8000efc:	e059      	b.n	8000fb2 <USART_IRQInterruptConfig+0xe6>
		else if(IRQNumber > 31 && IRQNumber < 64)
 8000efe:	79fb      	ldrb	r3, [r7, #7]
 8000f00:	2b1f      	cmp	r3, #31
 8000f02:	d90f      	bls.n	8000f24 <USART_IRQInterruptConfig+0x58>
 8000f04:	79fb      	ldrb	r3, [r7, #7]
 8000f06:	2b3f      	cmp	r3, #63	; 0x3f
 8000f08:	d80c      	bhi.n	8000f24 <USART_IRQInterruptConfig+0x58>
			*NVIC_ISER1 |= (1 << IRQNumber % 32);   //vd 32%32=0, lấy bit 0 của ISER1
 8000f0a:	4b2d      	ldr	r3, [pc, #180]	; (8000fc0 <USART_IRQInterruptConfig+0xf4>)
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	79fa      	ldrb	r2, [r7, #7]
 8000f10:	f002 021f 	and.w	r2, r2, #31
 8000f14:	2101      	movs	r1, #1
 8000f16:	fa01 f202 	lsl.w	r2, r1, r2
 8000f1a:	4611      	mov	r1, r2
 8000f1c:	4a28      	ldr	r2, [pc, #160]	; (8000fc0 <USART_IRQInterruptConfig+0xf4>)
 8000f1e:	430b      	orrs	r3, r1
 8000f20:	6013      	str	r3, [r2, #0]
 8000f22:	e046      	b.n	8000fb2 <USART_IRQInterruptConfig+0xe6>
		else if(IRQNumber >= 64 && IRQNumber < 96)
 8000f24:	79fb      	ldrb	r3, [r7, #7]
 8000f26:	2b3f      	cmp	r3, #63	; 0x3f
 8000f28:	d943      	bls.n	8000fb2 <USART_IRQInterruptConfig+0xe6>
 8000f2a:	79fb      	ldrb	r3, [r7, #7]
 8000f2c:	2b5f      	cmp	r3, #95	; 0x5f
 8000f2e:	d840      	bhi.n	8000fb2 <USART_IRQInterruptConfig+0xe6>
			*NVIC_ISER2 |= (1 << IRQNumber % 64);
 8000f30:	4b24      	ldr	r3, [pc, #144]	; (8000fc4 <USART_IRQInterruptConfig+0xf8>)
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	79fa      	ldrb	r2, [r7, #7]
 8000f36:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8000f3a:	2101      	movs	r1, #1
 8000f3c:	fa01 f202 	lsl.w	r2, r1, r2
 8000f40:	4611      	mov	r1, r2
 8000f42:	4a20      	ldr	r2, [pc, #128]	; (8000fc4 <USART_IRQInterruptConfig+0xf8>)
 8000f44:	430b      	orrs	r3, r1
 8000f46:	6013      	str	r3, [r2, #0]
}
 8000f48:	e033      	b.n	8000fb2 <USART_IRQInterruptConfig+0xe6>
		if(IRQNumber <= 31)
 8000f4a:	79fb      	ldrb	r3, [r7, #7]
 8000f4c:	2b1f      	cmp	r3, #31
 8000f4e:	d80a      	bhi.n	8000f66 <USART_IRQInterruptConfig+0x9a>
			*NVIC_ICER0 |= (1 << IRQNumber);
 8000f50:	4b1d      	ldr	r3, [pc, #116]	; (8000fc8 <USART_IRQInterruptConfig+0xfc>)
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	79fa      	ldrb	r2, [r7, #7]
 8000f56:	2101      	movs	r1, #1
 8000f58:	fa01 f202 	lsl.w	r2, r1, r2
 8000f5c:	4611      	mov	r1, r2
 8000f5e:	4a1a      	ldr	r2, [pc, #104]	; (8000fc8 <USART_IRQInterruptConfig+0xfc>)
 8000f60:	430b      	orrs	r3, r1
 8000f62:	6013      	str	r3, [r2, #0]
}
 8000f64:	e025      	b.n	8000fb2 <USART_IRQInterruptConfig+0xe6>
		else if(IRQNumber > 31 && IRQNumber < 64)
 8000f66:	79fb      	ldrb	r3, [r7, #7]
 8000f68:	2b1f      	cmp	r3, #31
 8000f6a:	d90f      	bls.n	8000f8c <USART_IRQInterruptConfig+0xc0>
 8000f6c:	79fb      	ldrb	r3, [r7, #7]
 8000f6e:	2b3f      	cmp	r3, #63	; 0x3f
 8000f70:	d80c      	bhi.n	8000f8c <USART_IRQInterruptConfig+0xc0>
			*NVIC_ICER1 |= (1 << IRQNumber % 32);
 8000f72:	4b16      	ldr	r3, [pc, #88]	; (8000fcc <USART_IRQInterruptConfig+0x100>)
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	79fa      	ldrb	r2, [r7, #7]
 8000f78:	f002 021f 	and.w	r2, r2, #31
 8000f7c:	2101      	movs	r1, #1
 8000f7e:	fa01 f202 	lsl.w	r2, r1, r2
 8000f82:	4611      	mov	r1, r2
 8000f84:	4a11      	ldr	r2, [pc, #68]	; (8000fcc <USART_IRQInterruptConfig+0x100>)
 8000f86:	430b      	orrs	r3, r1
 8000f88:	6013      	str	r3, [r2, #0]
 8000f8a:	e012      	b.n	8000fb2 <USART_IRQInterruptConfig+0xe6>
		else if(IRQNumber >= 64 && IRQNumber < 96)
 8000f8c:	79fb      	ldrb	r3, [r7, #7]
 8000f8e:	2b3f      	cmp	r3, #63	; 0x3f
 8000f90:	d90f      	bls.n	8000fb2 <USART_IRQInterruptConfig+0xe6>
 8000f92:	79fb      	ldrb	r3, [r7, #7]
 8000f94:	2b5f      	cmp	r3, #95	; 0x5f
 8000f96:	d80c      	bhi.n	8000fb2 <USART_IRQInterruptConfig+0xe6>
			*NVIC_ICER2 |= (1 << IRQNumber % 64);
 8000f98:	4b0d      	ldr	r3, [pc, #52]	; (8000fd0 <USART_IRQInterruptConfig+0x104>)
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	79fa      	ldrb	r2, [r7, #7]
 8000f9e:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8000fa2:	2101      	movs	r1, #1
 8000fa4:	fa01 f202 	lsl.w	r2, r1, r2
 8000fa8:	4611      	mov	r1, r2
 8000faa:	4a09      	ldr	r2, [pc, #36]	; (8000fd0 <USART_IRQInterruptConfig+0x104>)
 8000fac:	430b      	orrs	r3, r1
 8000fae:	6013      	str	r3, [r2, #0]
}
 8000fb0:	e7ff      	b.n	8000fb2 <USART_IRQInterruptConfig+0xe6>
 8000fb2:	bf00      	nop
 8000fb4:	370c      	adds	r7, #12
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	bc80      	pop	{r7}
 8000fba:	4770      	bx	lr
 8000fbc:	e000e100 	.word	0xe000e100
 8000fc0:	e000e104 	.word	0xe000e104
 8000fc4:	e000e108 	.word	0xe000e108
 8000fc8:	e000e180 	.word	0xe000e180
 8000fcc:	e000e184 	.word	0xe000e184
 8000fd0:	e000e188 	.word	0xe000e188

08000fd4 <USART_IRQHandling>:
 *
 * @Note        - none

 */
void USART_IRQHandling(USART_Handle_t *pUSARTHandle)
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	b086      	sub	sp, #24
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	6078      	str	r0, [r7, #4]
	uint16_t *pdata;

/*************************1. Check for TC flag ********************************************/

    //Implement the code to check the state of TC bit in the SR
	temp1 = pUSARTHandle->pUSARTx->SR & ( 1 << USART_SR_TC);
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000fe6:	617b      	str	r3, [r7, #20]

	 //Implement the code to check the state of TCEIE bit
	temp2 = pUSARTHandle->pUSARTx->CR1 & ( 1 << USART_CR1_TCIE);
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	68db      	ldr	r3, [r3, #12]
 8000fee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000ff2:	613b      	str	r3, [r7, #16]

	if(temp1 && temp2 )
 8000ff4:	697b      	ldr	r3, [r7, #20]
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d021      	beq.n	800103e <USART_IRQHandling+0x6a>
 8000ffa:	693b      	ldr	r3, [r7, #16]
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d01e      	beq.n	800103e <USART_IRQHandling+0x6a>
	{
		//this interrupt is because of TC

		//close transmission and call application callback if TxLen is zero
		if ( pUSARTHandle->TxBusyState == USART_BUSY_IN_TX)
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001006:	2b02      	cmp	r3, #2
 8001008:	d119      	bne.n	800103e <USART_IRQHandling+0x6a>
		{
			//Check the TxLen . If it is zero then close the data transmission
			if(! pUSARTHandle->TxLen )
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	699b      	ldr	r3, [r3, #24]
 800100e:	2b00      	cmp	r3, #0
 8001010:	d115      	bne.n	800103e <USART_IRQHandling+0x6a>
			{
				//Implement the code to clear the TC flag
				pUSARTHandle->pUSARTx->SR &= ~( 1 << USART_SR_TC);
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	681a      	ldr	r2, [r3, #0]
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001020:	601a      	str	r2, [r3, #0]

				//Implement the code to clear the TCIE control bit

				//Reset the application state
				pUSARTHandle->TxBusyState = USART_READY;
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	2200      	movs	r2, #0
 8001026:	f883 2020 	strb.w	r2, [r3, #32]

				//Reset Buffer address to NULL
				pUSARTHandle->pTxBuffer = NULL;
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	2200      	movs	r2, #0
 800102e:	611a      	str	r2, [r3, #16]

				//Reset the length to zero
				pUSARTHandle->TxLen = 0;
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	2200      	movs	r2, #0
 8001034:	619a      	str	r2, [r3, #24]

				//Call the application call back with event USART_EVENT_TX_CMPLT
				USART_ApplicationEventCallback(pUSARTHandle,USART_EVENT_TX_CMPLT);
 8001036:	2100      	movs	r1, #0
 8001038:	6878      	ldr	r0, [r7, #4]
 800103a:	f7ff f9b3 	bl	80003a4 <USART_ApplicationEventCallback>
	}

/*************************2. Check for TXE flag ********************************************/

	//Implement the code to check the state of TXE bit in the SR
	temp1 = pUSARTHandle->pUSARTx->SR & ( 1 << USART_SR_TXE);
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001048:	617b      	str	r3, [r7, #20]

	//Implement the code to check the state of TXEIE bit in CR1
	temp2 = pUSARTHandle->pUSARTx->CR1 & ( 1 << USART_CR1_TXEIE);
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	68db      	ldr	r3, [r3, #12]
 8001050:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001054:	613b      	str	r3, [r7, #16]


	if(temp1 && temp2 )
 8001056:	697b      	ldr	r3, [r7, #20]
 8001058:	2b00      	cmp	r3, #0
 800105a:	d055      	beq.n	8001108 <USART_IRQHandling+0x134>
 800105c:	693b      	ldr	r3, [r7, #16]
 800105e:	2b00      	cmp	r3, #0
 8001060:	d052      	beq.n	8001108 <USART_IRQHandling+0x134>
	{
		//this interrupt is because of TXE

		if(pUSARTHandle->TxBusyState == USART_BUSY_IN_TX)
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001068:	2b02      	cmp	r3, #2
 800106a:	d14d      	bne.n	8001108 <USART_IRQHandling+0x134>
		{
			//Keep sending data until Txlen reaches to zero
			if(pUSARTHandle->TxLen > 0)
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	699b      	ldr	r3, [r3, #24]
 8001070:	2b00      	cmp	r3, #0
 8001072:	d03d      	beq.n	80010f0 <USART_IRQHandling+0x11c>
			{
				//Check the USART_WordLength item for 9BIT or 8BIT in a frame
				if(pUSARTHandle->USART_Config.USART_WordLength == USART_WORDLEN_9BITS)
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	7b5b      	ldrb	r3, [r3, #13]
 8001078:	2b01      	cmp	r3, #1
 800107a:	d129      	bne.n	80010d0 <USART_IRQHandling+0xfc>
				{
					//if 9BIT load the DR with 2bytes masking  the bits other than first 9 bits
					pdata = (uint16_t*) pUSARTHandle->pTxBuffer;
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	691b      	ldr	r3, [r3, #16]
 8001080:	60fb      	str	r3, [r7, #12]
					pUSARTHandle->pUSARTx->DR = (*pdata & (uint16_t)0x01FF);
 8001082:	68fb      	ldr	r3, [r7, #12]
 8001084:	881b      	ldrh	r3, [r3, #0]
 8001086:	461a      	mov	r2, r3
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001090:	605a      	str	r2, [r3, #4]

					//check for USART_ParityControl
					if(pUSARTHandle->USART_Config.USART_ParityControl == USART_PARITY_DISABLE)
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	7b9b      	ldrb	r3, [r3, #14]
 8001096:	2b00      	cmp	r3, #0
 8001098:	d10f      	bne.n	80010ba <USART_IRQHandling+0xe6>
					{
						//No parity is used in this transfer , so 9bits of user data will be sent
						//Implement the code to increment pTxBuffer twice
						pUSARTHandle->pTxBuffer++;
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	691b      	ldr	r3, [r3, #16]
 800109e:	1c5a      	adds	r2, r3, #1
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	611a      	str	r2, [r3, #16]
						pUSARTHandle->pTxBuffer++;
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	691b      	ldr	r3, [r3, #16]
 80010a8:	1c5a      	adds	r2, r3, #1
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	611a      	str	r2, [r3, #16]
						pUSARTHandle->TxLen-=2;
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	699b      	ldr	r3, [r3, #24]
 80010b2:	1e9a      	subs	r2, r3, #2
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	619a      	str	r2, [r3, #24]
 80010b8:	e01a      	b.n	80010f0 <USART_IRQHandling+0x11c>
					}
					else
					{
						//Parity bit is used in this transfer . so 8bits of user data will be sent
						//The 9th bit will be replaced by parity bit by the hardware
						pUSARTHandle->pTxBuffer++;
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	691b      	ldr	r3, [r3, #16]
 80010be:	1c5a      	adds	r2, r3, #1
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	611a      	str	r2, [r3, #16]
						pUSARTHandle->TxLen-=1;
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	699b      	ldr	r3, [r3, #24]
 80010c8:	1e5a      	subs	r2, r3, #1
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	619a      	str	r2, [r3, #24]
 80010ce:	e00f      	b.n	80010f0 <USART_IRQHandling+0x11c>
					}
				}
				else
				{
					//This is 8bit data transfer
					pUSARTHandle->pUSARTx->DR = (*pUSARTHandle->pTxBuffer  & (uint8_t)0xFF);
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	691b      	ldr	r3, [r3, #16]
 80010d4:	781a      	ldrb	r2, [r3, #0]
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	605a      	str	r2, [r3, #4]

					//Implement the code to increment the buffer address
					pUSARTHandle->pTxBuffer++;
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	691b      	ldr	r3, [r3, #16]
 80010e0:	1c5a      	adds	r2, r3, #1
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	611a      	str	r2, [r3, #16]
					pUSARTHandle->TxLen-=1;
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	699b      	ldr	r3, [r3, #24]
 80010ea:	1e5a      	subs	r2, r3, #1
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	619a      	str	r2, [r3, #24]
				}

			}
			if (pUSARTHandle->TxLen == 0 )
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	699b      	ldr	r3, [r3, #24]
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d107      	bne.n	8001108 <USART_IRQHandling+0x134>
			{
				//TxLen is zero
				//Implement the code to clear the TXEIE bit (disable interrupt for TXE flag )
				pUSARTHandle->pUSARTx->CR1 &= ~( 1 << USART_CR1_TXEIE);
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	68da      	ldr	r2, [r3, #12]
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001106:	60da      	str	r2, [r3, #12]
		}
	}

/*************************3. Check for RXNE flag ********************************************/

	temp1 = pUSARTHandle->pUSARTx->SR & ( 1 << USART_SR_RXNE);
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	f003 0320 	and.w	r3, r3, #32
 8001112:	617b      	str	r3, [r7, #20]
	temp2 = pUSARTHandle->pUSARTx->CR1 & ( 1 << USART_CR1_RXNEIE);
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	68db      	ldr	r3, [r3, #12]
 800111a:	f003 0320 	and.w	r3, r3, #32
 800111e:	613b      	str	r3, [r7, #16]


	if(temp1 && temp2 )
 8001120:	697b      	ldr	r3, [r7, #20]
 8001122:	2b00      	cmp	r3, #0
 8001124:	d073      	beq.n	800120e <USART_IRQHandling+0x23a>
 8001126:	693b      	ldr	r3, [r7, #16]
 8001128:	2b00      	cmp	r3, #0
 800112a:	d070      	beq.n	800120e <USART_IRQHandling+0x23a>
	{
		//this interrupt is because of rxne
		if(pUSARTHandle->RxBusyState == USART_BUSY_IN_RX)
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001132:	2b01      	cmp	r3, #1
 8001134:	d16b      	bne.n	800120e <USART_IRQHandling+0x23a>
		{
			if(pUSARTHandle->RxLen > 0)
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	69db      	ldr	r3, [r3, #28]
 800113a:	2b00      	cmp	r3, #0
 800113c:	d053      	beq.n	80011e6 <USART_IRQHandling+0x212>
			{
				//Check the USART_WordLength to decide whether we are going to receive 9bit of data in a frame or 8 bit
				if(pUSARTHandle->USART_Config.USART_WordLength == USART_WORDLEN_9BITS)
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	7b5b      	ldrb	r3, [r3, #13]
 8001142:	2b01      	cmp	r3, #1
 8001144:	d12f      	bne.n	80011a6 <USART_IRQHandling+0x1d2>
				{
					//We are going to receive 9bit data in a frame

					//Now, check are we using USART_ParityControl control or not
					if(pUSARTHandle->USART_Config.USART_ParityControl == USART_PARITY_DISABLE)
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	7b9b      	ldrb	r3, [r3, #14]
 800114a:	2b00      	cmp	r3, #0
 800114c:	d119      	bne.n	8001182 <USART_IRQHandling+0x1ae>
					{
						//No parity is used , so all 9bits will be of user data

						//read only first 9 bits so mask the DR with 0x01FF
						*((uint16_t*) pUSARTHandle->pRxBuffer) = (pUSARTHandle->pUSARTx->DR  & (uint16_t)0x01FF);
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	685b      	ldr	r3, [r3, #4]
 8001154:	b29a      	uxth	r2, r3
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	695b      	ldr	r3, [r3, #20]
 800115a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800115e:	b292      	uxth	r2, r2
 8001160:	801a      	strh	r2, [r3, #0]

						//Now increment the pRxBuffer two times
						pUSARTHandle->pRxBuffer++;
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	695b      	ldr	r3, [r3, #20]
 8001166:	1c5a      	adds	r2, r3, #1
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	615a      	str	r2, [r3, #20]
						pUSARTHandle->pRxBuffer++;
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	695b      	ldr	r3, [r3, #20]
 8001170:	1c5a      	adds	r2, r3, #1
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	615a      	str	r2, [r3, #20]
						pUSARTHandle->RxLen-=2;
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	69db      	ldr	r3, [r3, #28]
 800117a:	1e9a      	subs	r2, r3, #2
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	61da      	str	r2, [r3, #28]
 8001180:	e031      	b.n	80011e6 <USART_IRQHandling+0x212>
					}
					else
					{
						//Parity is used, so 8bits will be of user data and 1 bit is parity
						 *pUSARTHandle->pRxBuffer = (pUSARTHandle->pUSARTx->DR  & (uint8_t)0xFF);
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	685a      	ldr	r2, [r3, #4]
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	695b      	ldr	r3, [r3, #20]
 800118c:	b2d2      	uxtb	r2, r2
 800118e:	701a      	strb	r2, [r3, #0]
						 pUSARTHandle->pRxBuffer++;
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	695b      	ldr	r3, [r3, #20]
 8001194:	1c5a      	adds	r2, r3, #1
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	615a      	str	r2, [r3, #20]
						 pUSARTHandle->RxLen-=1;
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	69db      	ldr	r3, [r3, #28]
 800119e:	1e5a      	subs	r2, r3, #1
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	61da      	str	r2, [r3, #28]
 80011a4:	e01f      	b.n	80011e6 <USART_IRQHandling+0x212>
				else
				{
					//We are going to receive 8bit data in a frame

					//Now, check are we using USART_ParityControl control or not
					if(pUSARTHandle->USART_Config.USART_ParityControl == USART_PARITY_DISABLE)
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	7b9b      	ldrb	r3, [r3, #14]
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d107      	bne.n	80011be <USART_IRQHandling+0x1ea>
					{
						//No parity is used , so all 8bits will be of user data

						//read 8 bits from DR
						 *pUSARTHandle->pRxBuffer = (uint8_t) (pUSARTHandle->pUSARTx->DR  & (uint8_t)0xFF);
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	685a      	ldr	r2, [r3, #4]
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	695b      	ldr	r3, [r3, #20]
 80011b8:	b2d2      	uxtb	r2, r2
 80011ba:	701a      	strb	r2, [r3, #0]
 80011bc:	e009      	b.n	80011d2 <USART_IRQHandling+0x1fe>
					else
					{
						//Parity is used, so , 7 bits will be of user data and 1 bit is parity

						//read only 7 bits , hence mask the DR with 0X7F
						 *pUSARTHandle->pRxBuffer = (uint8_t) (pUSARTHandle->pUSARTx->DR  & (uint8_t)0x7F);
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	685b      	ldr	r3, [r3, #4]
 80011c4:	b2da      	uxtb	r2, r3
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	695b      	ldr	r3, [r3, #20]
 80011ca:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80011ce:	b2d2      	uxtb	r2, r2
 80011d0:	701a      	strb	r2, [r3, #0]

					}

					//Now , increment the pRxBuffer
					pUSARTHandle->pRxBuffer++;
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	695b      	ldr	r3, [r3, #20]
 80011d6:	1c5a      	adds	r2, r3, #1
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	615a      	str	r2, [r3, #20]
					 pUSARTHandle->RxLen-=1;
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	69db      	ldr	r3, [r3, #28]
 80011e0:	1e5a      	subs	r2, r3, #1
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	61da      	str	r2, [r3, #28]
				}


			}//if of >0

			if(! pUSARTHandle->RxLen)
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	69db      	ldr	r3, [r3, #28]
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d10f      	bne.n	800120e <USART_IRQHandling+0x23a>
			{
				//disable the rxne
				pUSARTHandle->pUSARTx->CR1 &= ~( 1 << USART_CR1_RXNEIE );
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	68da      	ldr	r2, [r3, #12]
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	f022 0220 	bic.w	r2, r2, #32
 80011fc:	60da      	str	r2, [r3, #12]
				pUSARTHandle->RxBusyState = USART_READY;
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	2200      	movs	r2, #0
 8001202:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
				USART_ApplicationEventCallback(pUSARTHandle,USART_EVENT_RX_CMPLT);
 8001206:	2101      	movs	r1, #1
 8001208:	6878      	ldr	r0, [r7, #4]
 800120a:	f7ff f8cb 	bl	80003a4 <USART_ApplicationEventCallback>

/*************************4. Check for CTS flag ********************************************/
//Note : CTS feature is not applicable for UART4 and UART5

	//Implement the code to check the status of CTS bit in the SR
	temp1 = pUSARTHandle->pUSARTx->SR & ( 1 << USART_SR_CTS);
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001218:	617b      	str	r3, [r7, #20]

	//Implement the code to check the state of CTSE bit in CR1
	temp2 = pUSARTHandle->pUSARTx->CR3 & ( 1 << USART_CR3_CTSE);
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	695b      	ldr	r3, [r3, #20]
 8001220:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001224:	613b      	str	r3, [r7, #16]

	//Implement the code to check the state of CTSIE bit in CR3 (This bit is not available for UART4 & UART5.)
	temp3 = pUSARTHandle->pUSARTx->CR3 & ( 1 << USART_CR3_CTSIE);
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	695b      	ldr	r3, [r3, #20]
 800122c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001230:	60bb      	str	r3, [r7, #8]


	if(temp1  && temp2 )
 8001232:	697b      	ldr	r3, [r7, #20]
 8001234:	2b00      	cmp	r3, #0
 8001236:	d00e      	beq.n	8001256 <USART_IRQHandling+0x282>
 8001238:	693b      	ldr	r3, [r7, #16]
 800123a:	2b00      	cmp	r3, #0
 800123c:	d00b      	beq.n	8001256 <USART_IRQHandling+0x282>
	{
		//Implement the code to clear the CTS flag in SR
		pUSARTHandle->pUSARTx->SR &=  ~( 1 << USART_SR_CTS);
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	681a      	ldr	r2, [r3, #0]
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800124c:	601a      	str	r2, [r3, #0]

		//this interrupt is because of cts
		USART_ApplicationEventCallback(pUSARTHandle,USART_EVENT_CTS);
 800124e:	2103      	movs	r1, #3
 8001250:	6878      	ldr	r0, [r7, #4]
 8001252:	f7ff f8a7 	bl	80003a4 <USART_ApplicationEventCallback>
	}

/*************************5. Check for IDLE detection flag ********************************************/

	//Implement the code to check the status of IDLE flag bit in the SR
	temp1 = pUSARTHandle->pUSARTx->SR & ( 1 << USART_SR_IDLE);
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	f003 0310 	and.w	r3, r3, #16
 8001260:	617b      	str	r3, [r7, #20]

	//Implement the code to check the state of IDLEIE bit in CR1
	temp2 = pUSARTHandle->pUSARTx->CR1 & ( 1 << USART_CR1_IDLEIE);
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	68db      	ldr	r3, [r3, #12]
 8001268:	f003 0310 	and.w	r3, r3, #16
 800126c:	613b      	str	r3, [r7, #16]


	if(temp1 && temp2)
 800126e:	697b      	ldr	r3, [r7, #20]
 8001270:	2b00      	cmp	r3, #0
 8001272:	d00f      	beq.n	8001294 <USART_IRQHandling+0x2c0>
 8001274:	693b      	ldr	r3, [r7, #16]
 8001276:	2b00      	cmp	r3, #0
 8001278:	d00c      	beq.n	8001294 <USART_IRQHandling+0x2c0>
	{
		//Implement the code to clear the IDLE flag. Refer to the RM to understand the clear sequence
		temp1 = pUSARTHandle->pUSARTx->SR &= ~( 1 << USART_SR_IDLE);
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	687a      	ldr	r2, [r7, #4]
 8001282:	6812      	ldr	r2, [r2, #0]
 8001284:	f023 0310 	bic.w	r3, r3, #16
 8001288:	6013      	str	r3, [r2, #0]
 800128a:	617b      	str	r3, [r7, #20]

		//this interrupt is because of idle
		USART_ApplicationEventCallback(pUSARTHandle,USART_EVENT_IDLE);
 800128c:	2102      	movs	r1, #2
 800128e:	6878      	ldr	r0, [r7, #4]
 8001290:	f7ff f888 	bl	80003a4 <USART_ApplicationEventCallback>
	}

/*************************6. Check for Overrun detection flag ********************************************/

	//Implement the code to check the status of ORE flag  in the SR
	temp1 = pUSARTHandle->pUSARTx->SR & USART_SR_ORE;
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	f003 0303 	and.w	r3, r3, #3
 800129e:	617b      	str	r3, [r7, #20]

	//Implement the code to check the status of RXNEIE  bit in the CR1
	temp2 = pUSARTHandle->pUSARTx->CR1 & USART_CR1_RXNEIE;
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	68db      	ldr	r3, [r3, #12]
 80012a6:	f003 0305 	and.w	r3, r3, #5
 80012aa:	613b      	str	r3, [r7, #16]


	if(temp1  && temp2 )
 80012ac:	697b      	ldr	r3, [r7, #20]
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d006      	beq.n	80012c0 <USART_IRQHandling+0x2ec>
 80012b2:	693b      	ldr	r3, [r7, #16]
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d003      	beq.n	80012c0 <USART_IRQHandling+0x2ec>
	{
		//Need not to clear the ORE flag here, instead give an api for the application to clear the ORE flag .

		//this interrupt is because of Overrun error
		USART_ApplicationEventCallback(pUSARTHandle,USART_ERR_ORE);
 80012b8:	2107      	movs	r1, #7
 80012ba:	6878      	ldr	r0, [r7, #4]
 80012bc:	f7ff f872 	bl	80003a4 <USART_ApplicationEventCallback>

//Noise Flag, Overrun error and Framing Error in multibuffer communication
//We dont discuss multibuffer communication in this course. please refer to the RM
//The blow code will get executed in only if multibuffer mode is used.

	temp2 =  pUSARTHandle->pUSARTx->CR3 & ( 1 << USART_CR3_EIE) ;
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	695b      	ldr	r3, [r3, #20]
 80012c6:	f003 0301 	and.w	r3, r3, #1
 80012ca:	613b      	str	r3, [r7, #16]

	if(temp2 )
 80012cc:	693b      	ldr	r3, [r7, #16]
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d01e      	beq.n	8001310 <USART_IRQHandling+0x33c>
	{
		temp1 = pUSARTHandle->pUSARTx->SR;
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	617b      	str	r3, [r7, #20]
		if(temp1 & ( 1 << USART_SR_FE))
 80012da:	697b      	ldr	r3, [r7, #20]
 80012dc:	f003 0302 	and.w	r3, r3, #2
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d003      	beq.n	80012ec <USART_IRQHandling+0x318>
			/*
				This bit is set by hardware when a de-synchronization, excessive noise or a break character
				is detected. It is cleared by a software sequence (an read to the USART_SR register
				followed by a read to the USART_DR register).
			*/
			USART_ApplicationEventCallback(pUSARTHandle,USART_ERR_FE);
 80012e4:	2105      	movs	r1, #5
 80012e6:	6878      	ldr	r0, [r7, #4]
 80012e8:	f7ff f85c 	bl	80003a4 <USART_ApplicationEventCallback>
		}

		if(temp1 & ( 1 << USART_SR_NF))
 80012ec:	697b      	ldr	r3, [r7, #20]
 80012ee:	f003 0304 	and.w	r3, r3, #4
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d003      	beq.n	80012fe <USART_IRQHandling+0x32a>
			/*
				This bit is set by hardware when noise is detected on a received frame. It is cleared by a
				software sequence (an read to the USART_SR register followed by a read to the
				USART_DR register).
			*/
			USART_ApplicationEventCallback(pUSARTHandle,USART_ERR_NE);
 80012f6:	2106      	movs	r1, #6
 80012f8:	6878      	ldr	r0, [r7, #4]
 80012fa:	f7ff f853 	bl	80003a4 <USART_ApplicationEventCallback>
		}

		if(temp1 & ( 1 << USART_SR_ORE) )
 80012fe:	697b      	ldr	r3, [r7, #20]
 8001300:	f003 0308 	and.w	r3, r3, #8
 8001304:	2b00      	cmp	r3, #0
 8001306:	d003      	beq.n	8001310 <USART_IRQHandling+0x33c>
		{
			USART_ApplicationEventCallback(pUSARTHandle,USART_ERR_ORE);
 8001308:	2107      	movs	r1, #7
 800130a:	6878      	ldr	r0, [r7, #4]
 800130c:	f7ff f84a 	bl	80003a4 <USART_ApplicationEventCallback>
		}
	}

}
 8001310:	bf00      	nop
 8001312:	3718      	adds	r7, #24
 8001314:	46bd      	mov	sp, r7
 8001316:	bd80      	pop	{r7, pc}

08001318 <std>:
 8001318:	2300      	movs	r3, #0
 800131a:	b510      	push	{r4, lr}
 800131c:	4604      	mov	r4, r0
 800131e:	e9c0 3300 	strd	r3, r3, [r0]
 8001322:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8001326:	6083      	str	r3, [r0, #8]
 8001328:	8181      	strh	r1, [r0, #12]
 800132a:	6643      	str	r3, [r0, #100]	; 0x64
 800132c:	81c2      	strh	r2, [r0, #14]
 800132e:	6183      	str	r3, [r0, #24]
 8001330:	4619      	mov	r1, r3
 8001332:	2208      	movs	r2, #8
 8001334:	305c      	adds	r0, #92	; 0x5c
 8001336:	f000 f9d3 	bl	80016e0 <memset>
 800133a:	4b05      	ldr	r3, [pc, #20]	; (8001350 <std+0x38>)
 800133c:	6263      	str	r3, [r4, #36]	; 0x24
 800133e:	4b05      	ldr	r3, [pc, #20]	; (8001354 <std+0x3c>)
 8001340:	62a3      	str	r3, [r4, #40]	; 0x28
 8001342:	4b05      	ldr	r3, [pc, #20]	; (8001358 <std+0x40>)
 8001344:	62e3      	str	r3, [r4, #44]	; 0x2c
 8001346:	4b05      	ldr	r3, [pc, #20]	; (800135c <std+0x44>)
 8001348:	6224      	str	r4, [r4, #32]
 800134a:	6323      	str	r3, [r4, #48]	; 0x30
 800134c:	bd10      	pop	{r4, pc}
 800134e:	bf00      	nop
 8001350:	08001531 	.word	0x08001531
 8001354:	08001553 	.word	0x08001553
 8001358:	0800158b 	.word	0x0800158b
 800135c:	080015af 	.word	0x080015af

08001360 <stdio_exit_handler>:
 8001360:	4a02      	ldr	r2, [pc, #8]	; (800136c <stdio_exit_handler+0xc>)
 8001362:	4903      	ldr	r1, [pc, #12]	; (8001370 <stdio_exit_handler+0x10>)
 8001364:	4803      	ldr	r0, [pc, #12]	; (8001374 <stdio_exit_handler+0x14>)
 8001366:	f000 b869 	b.w	800143c <_fwalk_sglue>
 800136a:	bf00      	nop
 800136c:	20000024 	.word	0x20000024
 8001370:	08001ac5 	.word	0x08001ac5
 8001374:	20000030 	.word	0x20000030

08001378 <cleanup_stdio>:
 8001378:	6841      	ldr	r1, [r0, #4]
 800137a:	4b0c      	ldr	r3, [pc, #48]	; (80013ac <cleanup_stdio+0x34>)
 800137c:	4299      	cmp	r1, r3
 800137e:	b510      	push	{r4, lr}
 8001380:	4604      	mov	r4, r0
 8001382:	d001      	beq.n	8001388 <cleanup_stdio+0x10>
 8001384:	f000 fb9e 	bl	8001ac4 <_fflush_r>
 8001388:	68a1      	ldr	r1, [r4, #8]
 800138a:	4b09      	ldr	r3, [pc, #36]	; (80013b0 <cleanup_stdio+0x38>)
 800138c:	4299      	cmp	r1, r3
 800138e:	d002      	beq.n	8001396 <cleanup_stdio+0x1e>
 8001390:	4620      	mov	r0, r4
 8001392:	f000 fb97 	bl	8001ac4 <_fflush_r>
 8001396:	68e1      	ldr	r1, [r4, #12]
 8001398:	4b06      	ldr	r3, [pc, #24]	; (80013b4 <cleanup_stdio+0x3c>)
 800139a:	4299      	cmp	r1, r3
 800139c:	d004      	beq.n	80013a8 <cleanup_stdio+0x30>
 800139e:	4620      	mov	r0, r4
 80013a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80013a4:	f000 bb8e 	b.w	8001ac4 <_fflush_r>
 80013a8:	bd10      	pop	{r4, pc}
 80013aa:	bf00      	nop
 80013ac:	200004c8 	.word	0x200004c8
 80013b0:	20000530 	.word	0x20000530
 80013b4:	20000598 	.word	0x20000598

080013b8 <global_stdio_init.part.0>:
 80013b8:	b510      	push	{r4, lr}
 80013ba:	4b0b      	ldr	r3, [pc, #44]	; (80013e8 <global_stdio_init.part.0+0x30>)
 80013bc:	4c0b      	ldr	r4, [pc, #44]	; (80013ec <global_stdio_init.part.0+0x34>)
 80013be:	4a0c      	ldr	r2, [pc, #48]	; (80013f0 <global_stdio_init.part.0+0x38>)
 80013c0:	601a      	str	r2, [r3, #0]
 80013c2:	4620      	mov	r0, r4
 80013c4:	2200      	movs	r2, #0
 80013c6:	2104      	movs	r1, #4
 80013c8:	f7ff ffa6 	bl	8001318 <std>
 80013cc:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80013d0:	2201      	movs	r2, #1
 80013d2:	2109      	movs	r1, #9
 80013d4:	f7ff ffa0 	bl	8001318 <std>
 80013d8:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80013dc:	2202      	movs	r2, #2
 80013de:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80013e2:	2112      	movs	r1, #18
 80013e4:	f7ff bf98 	b.w	8001318 <std>
 80013e8:	20000600 	.word	0x20000600
 80013ec:	200004c8 	.word	0x200004c8
 80013f0:	08001361 	.word	0x08001361

080013f4 <__sfp_lock_acquire>:
 80013f4:	4801      	ldr	r0, [pc, #4]	; (80013fc <__sfp_lock_acquire+0x8>)
 80013f6:	f000 b9eb 	b.w	80017d0 <__retarget_lock_acquire_recursive>
 80013fa:	bf00      	nop
 80013fc:	20000609 	.word	0x20000609

08001400 <__sfp_lock_release>:
 8001400:	4801      	ldr	r0, [pc, #4]	; (8001408 <__sfp_lock_release+0x8>)
 8001402:	f000 b9e6 	b.w	80017d2 <__retarget_lock_release_recursive>
 8001406:	bf00      	nop
 8001408:	20000609 	.word	0x20000609

0800140c <__sinit>:
 800140c:	b510      	push	{r4, lr}
 800140e:	4604      	mov	r4, r0
 8001410:	f7ff fff0 	bl	80013f4 <__sfp_lock_acquire>
 8001414:	6a23      	ldr	r3, [r4, #32]
 8001416:	b11b      	cbz	r3, 8001420 <__sinit+0x14>
 8001418:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800141c:	f7ff bff0 	b.w	8001400 <__sfp_lock_release>
 8001420:	4b04      	ldr	r3, [pc, #16]	; (8001434 <__sinit+0x28>)
 8001422:	6223      	str	r3, [r4, #32]
 8001424:	4b04      	ldr	r3, [pc, #16]	; (8001438 <__sinit+0x2c>)
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	2b00      	cmp	r3, #0
 800142a:	d1f5      	bne.n	8001418 <__sinit+0xc>
 800142c:	f7ff ffc4 	bl	80013b8 <global_stdio_init.part.0>
 8001430:	e7f2      	b.n	8001418 <__sinit+0xc>
 8001432:	bf00      	nop
 8001434:	08001379 	.word	0x08001379
 8001438:	20000600 	.word	0x20000600

0800143c <_fwalk_sglue>:
 800143c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001440:	4607      	mov	r7, r0
 8001442:	4688      	mov	r8, r1
 8001444:	4614      	mov	r4, r2
 8001446:	2600      	movs	r6, #0
 8001448:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800144c:	f1b9 0901 	subs.w	r9, r9, #1
 8001450:	d505      	bpl.n	800145e <_fwalk_sglue+0x22>
 8001452:	6824      	ldr	r4, [r4, #0]
 8001454:	2c00      	cmp	r4, #0
 8001456:	d1f7      	bne.n	8001448 <_fwalk_sglue+0xc>
 8001458:	4630      	mov	r0, r6
 800145a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800145e:	89ab      	ldrh	r3, [r5, #12]
 8001460:	2b01      	cmp	r3, #1
 8001462:	d907      	bls.n	8001474 <_fwalk_sglue+0x38>
 8001464:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8001468:	3301      	adds	r3, #1
 800146a:	d003      	beq.n	8001474 <_fwalk_sglue+0x38>
 800146c:	4629      	mov	r1, r5
 800146e:	4638      	mov	r0, r7
 8001470:	47c0      	blx	r8
 8001472:	4306      	orrs	r6, r0
 8001474:	3568      	adds	r5, #104	; 0x68
 8001476:	e7e9      	b.n	800144c <_fwalk_sglue+0x10>

08001478 <_puts_r>:
 8001478:	6a03      	ldr	r3, [r0, #32]
 800147a:	b570      	push	{r4, r5, r6, lr}
 800147c:	6884      	ldr	r4, [r0, #8]
 800147e:	4605      	mov	r5, r0
 8001480:	460e      	mov	r6, r1
 8001482:	b90b      	cbnz	r3, 8001488 <_puts_r+0x10>
 8001484:	f7ff ffc2 	bl	800140c <__sinit>
 8001488:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800148a:	07db      	lsls	r3, r3, #31
 800148c:	d405      	bmi.n	800149a <_puts_r+0x22>
 800148e:	89a3      	ldrh	r3, [r4, #12]
 8001490:	0598      	lsls	r0, r3, #22
 8001492:	d402      	bmi.n	800149a <_puts_r+0x22>
 8001494:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001496:	f000 f99b 	bl	80017d0 <__retarget_lock_acquire_recursive>
 800149a:	89a3      	ldrh	r3, [r4, #12]
 800149c:	0719      	lsls	r1, r3, #28
 800149e:	d513      	bpl.n	80014c8 <_puts_r+0x50>
 80014a0:	6923      	ldr	r3, [r4, #16]
 80014a2:	b18b      	cbz	r3, 80014c8 <_puts_r+0x50>
 80014a4:	3e01      	subs	r6, #1
 80014a6:	68a3      	ldr	r3, [r4, #8]
 80014a8:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80014ac:	3b01      	subs	r3, #1
 80014ae:	60a3      	str	r3, [r4, #8]
 80014b0:	b9e9      	cbnz	r1, 80014ee <_puts_r+0x76>
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	da2e      	bge.n	8001514 <_puts_r+0x9c>
 80014b6:	4622      	mov	r2, r4
 80014b8:	210a      	movs	r1, #10
 80014ba:	4628      	mov	r0, r5
 80014bc:	f000 f87b 	bl	80015b6 <__swbuf_r>
 80014c0:	3001      	adds	r0, #1
 80014c2:	d007      	beq.n	80014d4 <_puts_r+0x5c>
 80014c4:	250a      	movs	r5, #10
 80014c6:	e007      	b.n	80014d8 <_puts_r+0x60>
 80014c8:	4621      	mov	r1, r4
 80014ca:	4628      	mov	r0, r5
 80014cc:	f000 f8b0 	bl	8001630 <__swsetup_r>
 80014d0:	2800      	cmp	r0, #0
 80014d2:	d0e7      	beq.n	80014a4 <_puts_r+0x2c>
 80014d4:	f04f 35ff 	mov.w	r5, #4294967295
 80014d8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80014da:	07da      	lsls	r2, r3, #31
 80014dc:	d405      	bmi.n	80014ea <_puts_r+0x72>
 80014de:	89a3      	ldrh	r3, [r4, #12]
 80014e0:	059b      	lsls	r3, r3, #22
 80014e2:	d402      	bmi.n	80014ea <_puts_r+0x72>
 80014e4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80014e6:	f000 f974 	bl	80017d2 <__retarget_lock_release_recursive>
 80014ea:	4628      	mov	r0, r5
 80014ec:	bd70      	pop	{r4, r5, r6, pc}
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	da04      	bge.n	80014fc <_puts_r+0x84>
 80014f2:	69a2      	ldr	r2, [r4, #24]
 80014f4:	429a      	cmp	r2, r3
 80014f6:	dc06      	bgt.n	8001506 <_puts_r+0x8e>
 80014f8:	290a      	cmp	r1, #10
 80014fa:	d004      	beq.n	8001506 <_puts_r+0x8e>
 80014fc:	6823      	ldr	r3, [r4, #0]
 80014fe:	1c5a      	adds	r2, r3, #1
 8001500:	6022      	str	r2, [r4, #0]
 8001502:	7019      	strb	r1, [r3, #0]
 8001504:	e7cf      	b.n	80014a6 <_puts_r+0x2e>
 8001506:	4622      	mov	r2, r4
 8001508:	4628      	mov	r0, r5
 800150a:	f000 f854 	bl	80015b6 <__swbuf_r>
 800150e:	3001      	adds	r0, #1
 8001510:	d1c9      	bne.n	80014a6 <_puts_r+0x2e>
 8001512:	e7df      	b.n	80014d4 <_puts_r+0x5c>
 8001514:	6823      	ldr	r3, [r4, #0]
 8001516:	250a      	movs	r5, #10
 8001518:	1c5a      	adds	r2, r3, #1
 800151a:	6022      	str	r2, [r4, #0]
 800151c:	701d      	strb	r5, [r3, #0]
 800151e:	e7db      	b.n	80014d8 <_puts_r+0x60>

08001520 <puts>:
 8001520:	4b02      	ldr	r3, [pc, #8]	; (800152c <puts+0xc>)
 8001522:	4601      	mov	r1, r0
 8001524:	6818      	ldr	r0, [r3, #0]
 8001526:	f7ff bfa7 	b.w	8001478 <_puts_r>
 800152a:	bf00      	nop
 800152c:	2000007c 	.word	0x2000007c

08001530 <__sread>:
 8001530:	b510      	push	{r4, lr}
 8001532:	460c      	mov	r4, r1
 8001534:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001538:	f000 f8fc 	bl	8001734 <_read_r>
 800153c:	2800      	cmp	r0, #0
 800153e:	bfab      	itete	ge
 8001540:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8001542:	89a3      	ldrhlt	r3, [r4, #12]
 8001544:	181b      	addge	r3, r3, r0
 8001546:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800154a:	bfac      	ite	ge
 800154c:	6563      	strge	r3, [r4, #84]	; 0x54
 800154e:	81a3      	strhlt	r3, [r4, #12]
 8001550:	bd10      	pop	{r4, pc}

08001552 <__swrite>:
 8001552:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001556:	461f      	mov	r7, r3
 8001558:	898b      	ldrh	r3, [r1, #12]
 800155a:	05db      	lsls	r3, r3, #23
 800155c:	4605      	mov	r5, r0
 800155e:	460c      	mov	r4, r1
 8001560:	4616      	mov	r6, r2
 8001562:	d505      	bpl.n	8001570 <__swrite+0x1e>
 8001564:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001568:	2302      	movs	r3, #2
 800156a:	2200      	movs	r2, #0
 800156c:	f000 f8d0 	bl	8001710 <_lseek_r>
 8001570:	89a3      	ldrh	r3, [r4, #12]
 8001572:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001576:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800157a:	81a3      	strh	r3, [r4, #12]
 800157c:	4632      	mov	r2, r6
 800157e:	463b      	mov	r3, r7
 8001580:	4628      	mov	r0, r5
 8001582:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8001586:	f000 b8e7 	b.w	8001758 <_write_r>

0800158a <__sseek>:
 800158a:	b510      	push	{r4, lr}
 800158c:	460c      	mov	r4, r1
 800158e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001592:	f000 f8bd 	bl	8001710 <_lseek_r>
 8001596:	1c43      	adds	r3, r0, #1
 8001598:	89a3      	ldrh	r3, [r4, #12]
 800159a:	bf15      	itete	ne
 800159c:	6560      	strne	r0, [r4, #84]	; 0x54
 800159e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80015a2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80015a6:	81a3      	strheq	r3, [r4, #12]
 80015a8:	bf18      	it	ne
 80015aa:	81a3      	strhne	r3, [r4, #12]
 80015ac:	bd10      	pop	{r4, pc}

080015ae <__sclose>:
 80015ae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80015b2:	f000 b89d 	b.w	80016f0 <_close_r>

080015b6 <__swbuf_r>:
 80015b6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80015b8:	460e      	mov	r6, r1
 80015ba:	4614      	mov	r4, r2
 80015bc:	4605      	mov	r5, r0
 80015be:	b118      	cbz	r0, 80015c8 <__swbuf_r+0x12>
 80015c0:	6a03      	ldr	r3, [r0, #32]
 80015c2:	b90b      	cbnz	r3, 80015c8 <__swbuf_r+0x12>
 80015c4:	f7ff ff22 	bl	800140c <__sinit>
 80015c8:	69a3      	ldr	r3, [r4, #24]
 80015ca:	60a3      	str	r3, [r4, #8]
 80015cc:	89a3      	ldrh	r3, [r4, #12]
 80015ce:	071a      	lsls	r2, r3, #28
 80015d0:	d525      	bpl.n	800161e <__swbuf_r+0x68>
 80015d2:	6923      	ldr	r3, [r4, #16]
 80015d4:	b31b      	cbz	r3, 800161e <__swbuf_r+0x68>
 80015d6:	6823      	ldr	r3, [r4, #0]
 80015d8:	6922      	ldr	r2, [r4, #16]
 80015da:	1a98      	subs	r0, r3, r2
 80015dc:	6963      	ldr	r3, [r4, #20]
 80015de:	b2f6      	uxtb	r6, r6
 80015e0:	4283      	cmp	r3, r0
 80015e2:	4637      	mov	r7, r6
 80015e4:	dc04      	bgt.n	80015f0 <__swbuf_r+0x3a>
 80015e6:	4621      	mov	r1, r4
 80015e8:	4628      	mov	r0, r5
 80015ea:	f000 fa6b 	bl	8001ac4 <_fflush_r>
 80015ee:	b9e0      	cbnz	r0, 800162a <__swbuf_r+0x74>
 80015f0:	68a3      	ldr	r3, [r4, #8]
 80015f2:	3b01      	subs	r3, #1
 80015f4:	60a3      	str	r3, [r4, #8]
 80015f6:	6823      	ldr	r3, [r4, #0]
 80015f8:	1c5a      	adds	r2, r3, #1
 80015fa:	6022      	str	r2, [r4, #0]
 80015fc:	701e      	strb	r6, [r3, #0]
 80015fe:	6962      	ldr	r2, [r4, #20]
 8001600:	1c43      	adds	r3, r0, #1
 8001602:	429a      	cmp	r2, r3
 8001604:	d004      	beq.n	8001610 <__swbuf_r+0x5a>
 8001606:	89a3      	ldrh	r3, [r4, #12]
 8001608:	07db      	lsls	r3, r3, #31
 800160a:	d506      	bpl.n	800161a <__swbuf_r+0x64>
 800160c:	2e0a      	cmp	r6, #10
 800160e:	d104      	bne.n	800161a <__swbuf_r+0x64>
 8001610:	4621      	mov	r1, r4
 8001612:	4628      	mov	r0, r5
 8001614:	f000 fa56 	bl	8001ac4 <_fflush_r>
 8001618:	b938      	cbnz	r0, 800162a <__swbuf_r+0x74>
 800161a:	4638      	mov	r0, r7
 800161c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800161e:	4621      	mov	r1, r4
 8001620:	4628      	mov	r0, r5
 8001622:	f000 f805 	bl	8001630 <__swsetup_r>
 8001626:	2800      	cmp	r0, #0
 8001628:	d0d5      	beq.n	80015d6 <__swbuf_r+0x20>
 800162a:	f04f 37ff 	mov.w	r7, #4294967295
 800162e:	e7f4      	b.n	800161a <__swbuf_r+0x64>

08001630 <__swsetup_r>:
 8001630:	b538      	push	{r3, r4, r5, lr}
 8001632:	4b2a      	ldr	r3, [pc, #168]	; (80016dc <__swsetup_r+0xac>)
 8001634:	4605      	mov	r5, r0
 8001636:	6818      	ldr	r0, [r3, #0]
 8001638:	460c      	mov	r4, r1
 800163a:	b118      	cbz	r0, 8001644 <__swsetup_r+0x14>
 800163c:	6a03      	ldr	r3, [r0, #32]
 800163e:	b90b      	cbnz	r3, 8001644 <__swsetup_r+0x14>
 8001640:	f7ff fee4 	bl	800140c <__sinit>
 8001644:	89a3      	ldrh	r3, [r4, #12]
 8001646:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800164a:	0718      	lsls	r0, r3, #28
 800164c:	d422      	bmi.n	8001694 <__swsetup_r+0x64>
 800164e:	06d9      	lsls	r1, r3, #27
 8001650:	d407      	bmi.n	8001662 <__swsetup_r+0x32>
 8001652:	2309      	movs	r3, #9
 8001654:	602b      	str	r3, [r5, #0]
 8001656:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800165a:	81a3      	strh	r3, [r4, #12]
 800165c:	f04f 30ff 	mov.w	r0, #4294967295
 8001660:	e034      	b.n	80016cc <__swsetup_r+0x9c>
 8001662:	0758      	lsls	r0, r3, #29
 8001664:	d512      	bpl.n	800168c <__swsetup_r+0x5c>
 8001666:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001668:	b141      	cbz	r1, 800167c <__swsetup_r+0x4c>
 800166a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800166e:	4299      	cmp	r1, r3
 8001670:	d002      	beq.n	8001678 <__swsetup_r+0x48>
 8001672:	4628      	mov	r0, r5
 8001674:	f000 f8ae 	bl	80017d4 <_free_r>
 8001678:	2300      	movs	r3, #0
 800167a:	6363      	str	r3, [r4, #52]	; 0x34
 800167c:	89a3      	ldrh	r3, [r4, #12]
 800167e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8001682:	81a3      	strh	r3, [r4, #12]
 8001684:	2300      	movs	r3, #0
 8001686:	6063      	str	r3, [r4, #4]
 8001688:	6923      	ldr	r3, [r4, #16]
 800168a:	6023      	str	r3, [r4, #0]
 800168c:	89a3      	ldrh	r3, [r4, #12]
 800168e:	f043 0308 	orr.w	r3, r3, #8
 8001692:	81a3      	strh	r3, [r4, #12]
 8001694:	6923      	ldr	r3, [r4, #16]
 8001696:	b94b      	cbnz	r3, 80016ac <__swsetup_r+0x7c>
 8001698:	89a3      	ldrh	r3, [r4, #12]
 800169a:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800169e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80016a2:	d003      	beq.n	80016ac <__swsetup_r+0x7c>
 80016a4:	4621      	mov	r1, r4
 80016a6:	4628      	mov	r0, r5
 80016a8:	f000 fa5a 	bl	8001b60 <__smakebuf_r>
 80016ac:	89a0      	ldrh	r0, [r4, #12]
 80016ae:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80016b2:	f010 0301 	ands.w	r3, r0, #1
 80016b6:	d00a      	beq.n	80016ce <__swsetup_r+0x9e>
 80016b8:	2300      	movs	r3, #0
 80016ba:	60a3      	str	r3, [r4, #8]
 80016bc:	6963      	ldr	r3, [r4, #20]
 80016be:	425b      	negs	r3, r3
 80016c0:	61a3      	str	r3, [r4, #24]
 80016c2:	6923      	ldr	r3, [r4, #16]
 80016c4:	b943      	cbnz	r3, 80016d8 <__swsetup_r+0xa8>
 80016c6:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80016ca:	d1c4      	bne.n	8001656 <__swsetup_r+0x26>
 80016cc:	bd38      	pop	{r3, r4, r5, pc}
 80016ce:	0781      	lsls	r1, r0, #30
 80016d0:	bf58      	it	pl
 80016d2:	6963      	ldrpl	r3, [r4, #20]
 80016d4:	60a3      	str	r3, [r4, #8]
 80016d6:	e7f4      	b.n	80016c2 <__swsetup_r+0x92>
 80016d8:	2000      	movs	r0, #0
 80016da:	e7f7      	b.n	80016cc <__swsetup_r+0x9c>
 80016dc:	2000007c 	.word	0x2000007c

080016e0 <memset>:
 80016e0:	4402      	add	r2, r0
 80016e2:	4603      	mov	r3, r0
 80016e4:	4293      	cmp	r3, r2
 80016e6:	d100      	bne.n	80016ea <memset+0xa>
 80016e8:	4770      	bx	lr
 80016ea:	f803 1b01 	strb.w	r1, [r3], #1
 80016ee:	e7f9      	b.n	80016e4 <memset+0x4>

080016f0 <_close_r>:
 80016f0:	b538      	push	{r3, r4, r5, lr}
 80016f2:	4d06      	ldr	r5, [pc, #24]	; (800170c <_close_r+0x1c>)
 80016f4:	2300      	movs	r3, #0
 80016f6:	4604      	mov	r4, r0
 80016f8:	4608      	mov	r0, r1
 80016fa:	602b      	str	r3, [r5, #0]
 80016fc:	f7fe fe9f 	bl	800043e <_close>
 8001700:	1c43      	adds	r3, r0, #1
 8001702:	d102      	bne.n	800170a <_close_r+0x1a>
 8001704:	682b      	ldr	r3, [r5, #0]
 8001706:	b103      	cbz	r3, 800170a <_close_r+0x1a>
 8001708:	6023      	str	r3, [r4, #0]
 800170a:	bd38      	pop	{r3, r4, r5, pc}
 800170c:	20000604 	.word	0x20000604

08001710 <_lseek_r>:
 8001710:	b538      	push	{r3, r4, r5, lr}
 8001712:	4d07      	ldr	r5, [pc, #28]	; (8001730 <_lseek_r+0x20>)
 8001714:	4604      	mov	r4, r0
 8001716:	4608      	mov	r0, r1
 8001718:	4611      	mov	r1, r2
 800171a:	2200      	movs	r2, #0
 800171c:	602a      	str	r2, [r5, #0]
 800171e:	461a      	mov	r2, r3
 8001720:	f7fe feb1 	bl	8000486 <_lseek>
 8001724:	1c43      	adds	r3, r0, #1
 8001726:	d102      	bne.n	800172e <_lseek_r+0x1e>
 8001728:	682b      	ldr	r3, [r5, #0]
 800172a:	b103      	cbz	r3, 800172e <_lseek_r+0x1e>
 800172c:	6023      	str	r3, [r4, #0]
 800172e:	bd38      	pop	{r3, r4, r5, pc}
 8001730:	20000604 	.word	0x20000604

08001734 <_read_r>:
 8001734:	b538      	push	{r3, r4, r5, lr}
 8001736:	4d07      	ldr	r5, [pc, #28]	; (8001754 <_read_r+0x20>)
 8001738:	4604      	mov	r4, r0
 800173a:	4608      	mov	r0, r1
 800173c:	4611      	mov	r1, r2
 800173e:	2200      	movs	r2, #0
 8001740:	602a      	str	r2, [r5, #0]
 8001742:	461a      	mov	r2, r3
 8001744:	f7fe fe42 	bl	80003cc <_read>
 8001748:	1c43      	adds	r3, r0, #1
 800174a:	d102      	bne.n	8001752 <_read_r+0x1e>
 800174c:	682b      	ldr	r3, [r5, #0]
 800174e:	b103      	cbz	r3, 8001752 <_read_r+0x1e>
 8001750:	6023      	str	r3, [r4, #0]
 8001752:	bd38      	pop	{r3, r4, r5, pc}
 8001754:	20000604 	.word	0x20000604

08001758 <_write_r>:
 8001758:	b538      	push	{r3, r4, r5, lr}
 800175a:	4d07      	ldr	r5, [pc, #28]	; (8001778 <_write_r+0x20>)
 800175c:	4604      	mov	r4, r0
 800175e:	4608      	mov	r0, r1
 8001760:	4611      	mov	r1, r2
 8001762:	2200      	movs	r2, #0
 8001764:	602a      	str	r2, [r5, #0]
 8001766:	461a      	mov	r2, r3
 8001768:	f7fe fe4d 	bl	8000406 <_write>
 800176c:	1c43      	adds	r3, r0, #1
 800176e:	d102      	bne.n	8001776 <_write_r+0x1e>
 8001770:	682b      	ldr	r3, [r5, #0]
 8001772:	b103      	cbz	r3, 8001776 <_write_r+0x1e>
 8001774:	6023      	str	r3, [r4, #0]
 8001776:	bd38      	pop	{r3, r4, r5, pc}
 8001778:	20000604 	.word	0x20000604

0800177c <__errno>:
 800177c:	4b01      	ldr	r3, [pc, #4]	; (8001784 <__errno+0x8>)
 800177e:	6818      	ldr	r0, [r3, #0]
 8001780:	4770      	bx	lr
 8001782:	bf00      	nop
 8001784:	2000007c 	.word	0x2000007c

08001788 <__libc_init_array>:
 8001788:	b570      	push	{r4, r5, r6, lr}
 800178a:	4d0d      	ldr	r5, [pc, #52]	; (80017c0 <__libc_init_array+0x38>)
 800178c:	4c0d      	ldr	r4, [pc, #52]	; (80017c4 <__libc_init_array+0x3c>)
 800178e:	1b64      	subs	r4, r4, r5
 8001790:	10a4      	asrs	r4, r4, #2
 8001792:	2600      	movs	r6, #0
 8001794:	42a6      	cmp	r6, r4
 8001796:	d109      	bne.n	80017ac <__libc_init_array+0x24>
 8001798:	4d0b      	ldr	r5, [pc, #44]	; (80017c8 <__libc_init_array+0x40>)
 800179a:	4c0c      	ldr	r4, [pc, #48]	; (80017cc <__libc_init_array+0x44>)
 800179c:	f000 fa4e 	bl	8001c3c <_init>
 80017a0:	1b64      	subs	r4, r4, r5
 80017a2:	10a4      	asrs	r4, r4, #2
 80017a4:	2600      	movs	r6, #0
 80017a6:	42a6      	cmp	r6, r4
 80017a8:	d105      	bne.n	80017b6 <__libc_init_array+0x2e>
 80017aa:	bd70      	pop	{r4, r5, r6, pc}
 80017ac:	f855 3b04 	ldr.w	r3, [r5], #4
 80017b0:	4798      	blx	r3
 80017b2:	3601      	adds	r6, #1
 80017b4:	e7ee      	b.n	8001794 <__libc_init_array+0xc>
 80017b6:	f855 3b04 	ldr.w	r3, [r5], #4
 80017ba:	4798      	blx	r3
 80017bc:	3601      	adds	r6, #1
 80017be:	e7f2      	b.n	80017a6 <__libc_init_array+0x1e>
 80017c0:	08001ca4 	.word	0x08001ca4
 80017c4:	08001ca4 	.word	0x08001ca4
 80017c8:	08001ca4 	.word	0x08001ca4
 80017cc:	08001ca8 	.word	0x08001ca8

080017d0 <__retarget_lock_acquire_recursive>:
 80017d0:	4770      	bx	lr

080017d2 <__retarget_lock_release_recursive>:
 80017d2:	4770      	bx	lr

080017d4 <_free_r>:
 80017d4:	b538      	push	{r3, r4, r5, lr}
 80017d6:	4605      	mov	r5, r0
 80017d8:	2900      	cmp	r1, #0
 80017da:	d041      	beq.n	8001860 <_free_r+0x8c>
 80017dc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80017e0:	1f0c      	subs	r4, r1, #4
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	bfb8      	it	lt
 80017e6:	18e4      	addlt	r4, r4, r3
 80017e8:	f000 f8de 	bl	80019a8 <__malloc_lock>
 80017ec:	4a1d      	ldr	r2, [pc, #116]	; (8001864 <_free_r+0x90>)
 80017ee:	6813      	ldr	r3, [r2, #0]
 80017f0:	b933      	cbnz	r3, 8001800 <_free_r+0x2c>
 80017f2:	6063      	str	r3, [r4, #4]
 80017f4:	6014      	str	r4, [r2, #0]
 80017f6:	4628      	mov	r0, r5
 80017f8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80017fc:	f000 b8da 	b.w	80019b4 <__malloc_unlock>
 8001800:	42a3      	cmp	r3, r4
 8001802:	d908      	bls.n	8001816 <_free_r+0x42>
 8001804:	6820      	ldr	r0, [r4, #0]
 8001806:	1821      	adds	r1, r4, r0
 8001808:	428b      	cmp	r3, r1
 800180a:	bf01      	itttt	eq
 800180c:	6819      	ldreq	r1, [r3, #0]
 800180e:	685b      	ldreq	r3, [r3, #4]
 8001810:	1809      	addeq	r1, r1, r0
 8001812:	6021      	streq	r1, [r4, #0]
 8001814:	e7ed      	b.n	80017f2 <_free_r+0x1e>
 8001816:	461a      	mov	r2, r3
 8001818:	685b      	ldr	r3, [r3, #4]
 800181a:	b10b      	cbz	r3, 8001820 <_free_r+0x4c>
 800181c:	42a3      	cmp	r3, r4
 800181e:	d9fa      	bls.n	8001816 <_free_r+0x42>
 8001820:	6811      	ldr	r1, [r2, #0]
 8001822:	1850      	adds	r0, r2, r1
 8001824:	42a0      	cmp	r0, r4
 8001826:	d10b      	bne.n	8001840 <_free_r+0x6c>
 8001828:	6820      	ldr	r0, [r4, #0]
 800182a:	4401      	add	r1, r0
 800182c:	1850      	adds	r0, r2, r1
 800182e:	4283      	cmp	r3, r0
 8001830:	6011      	str	r1, [r2, #0]
 8001832:	d1e0      	bne.n	80017f6 <_free_r+0x22>
 8001834:	6818      	ldr	r0, [r3, #0]
 8001836:	685b      	ldr	r3, [r3, #4]
 8001838:	6053      	str	r3, [r2, #4]
 800183a:	4408      	add	r0, r1
 800183c:	6010      	str	r0, [r2, #0]
 800183e:	e7da      	b.n	80017f6 <_free_r+0x22>
 8001840:	d902      	bls.n	8001848 <_free_r+0x74>
 8001842:	230c      	movs	r3, #12
 8001844:	602b      	str	r3, [r5, #0]
 8001846:	e7d6      	b.n	80017f6 <_free_r+0x22>
 8001848:	6820      	ldr	r0, [r4, #0]
 800184a:	1821      	adds	r1, r4, r0
 800184c:	428b      	cmp	r3, r1
 800184e:	bf04      	itt	eq
 8001850:	6819      	ldreq	r1, [r3, #0]
 8001852:	685b      	ldreq	r3, [r3, #4]
 8001854:	6063      	str	r3, [r4, #4]
 8001856:	bf04      	itt	eq
 8001858:	1809      	addeq	r1, r1, r0
 800185a:	6021      	streq	r1, [r4, #0]
 800185c:	6054      	str	r4, [r2, #4]
 800185e:	e7ca      	b.n	80017f6 <_free_r+0x22>
 8001860:	bd38      	pop	{r3, r4, r5, pc}
 8001862:	bf00      	nop
 8001864:	2000060c 	.word	0x2000060c

08001868 <sbrk_aligned>:
 8001868:	b570      	push	{r4, r5, r6, lr}
 800186a:	4e0e      	ldr	r6, [pc, #56]	; (80018a4 <sbrk_aligned+0x3c>)
 800186c:	460c      	mov	r4, r1
 800186e:	6831      	ldr	r1, [r6, #0]
 8001870:	4605      	mov	r5, r0
 8001872:	b911      	cbnz	r1, 800187a <sbrk_aligned+0x12>
 8001874:	f000 f9d2 	bl	8001c1c <_sbrk_r>
 8001878:	6030      	str	r0, [r6, #0]
 800187a:	4621      	mov	r1, r4
 800187c:	4628      	mov	r0, r5
 800187e:	f000 f9cd 	bl	8001c1c <_sbrk_r>
 8001882:	1c43      	adds	r3, r0, #1
 8001884:	d00a      	beq.n	800189c <sbrk_aligned+0x34>
 8001886:	1cc4      	adds	r4, r0, #3
 8001888:	f024 0403 	bic.w	r4, r4, #3
 800188c:	42a0      	cmp	r0, r4
 800188e:	d007      	beq.n	80018a0 <sbrk_aligned+0x38>
 8001890:	1a21      	subs	r1, r4, r0
 8001892:	4628      	mov	r0, r5
 8001894:	f000 f9c2 	bl	8001c1c <_sbrk_r>
 8001898:	3001      	adds	r0, #1
 800189a:	d101      	bne.n	80018a0 <sbrk_aligned+0x38>
 800189c:	f04f 34ff 	mov.w	r4, #4294967295
 80018a0:	4620      	mov	r0, r4
 80018a2:	bd70      	pop	{r4, r5, r6, pc}
 80018a4:	20000610 	.word	0x20000610

080018a8 <_malloc_r>:
 80018a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80018ac:	1ccd      	adds	r5, r1, #3
 80018ae:	f025 0503 	bic.w	r5, r5, #3
 80018b2:	3508      	adds	r5, #8
 80018b4:	2d0c      	cmp	r5, #12
 80018b6:	bf38      	it	cc
 80018b8:	250c      	movcc	r5, #12
 80018ba:	2d00      	cmp	r5, #0
 80018bc:	4607      	mov	r7, r0
 80018be:	db01      	blt.n	80018c4 <_malloc_r+0x1c>
 80018c0:	42a9      	cmp	r1, r5
 80018c2:	d905      	bls.n	80018d0 <_malloc_r+0x28>
 80018c4:	230c      	movs	r3, #12
 80018c6:	603b      	str	r3, [r7, #0]
 80018c8:	2600      	movs	r6, #0
 80018ca:	4630      	mov	r0, r6
 80018cc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80018d0:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80019a4 <_malloc_r+0xfc>
 80018d4:	f000 f868 	bl	80019a8 <__malloc_lock>
 80018d8:	f8d8 3000 	ldr.w	r3, [r8]
 80018dc:	461c      	mov	r4, r3
 80018de:	bb5c      	cbnz	r4, 8001938 <_malloc_r+0x90>
 80018e0:	4629      	mov	r1, r5
 80018e2:	4638      	mov	r0, r7
 80018e4:	f7ff ffc0 	bl	8001868 <sbrk_aligned>
 80018e8:	1c43      	adds	r3, r0, #1
 80018ea:	4604      	mov	r4, r0
 80018ec:	d155      	bne.n	800199a <_malloc_r+0xf2>
 80018ee:	f8d8 4000 	ldr.w	r4, [r8]
 80018f2:	4626      	mov	r6, r4
 80018f4:	2e00      	cmp	r6, #0
 80018f6:	d145      	bne.n	8001984 <_malloc_r+0xdc>
 80018f8:	2c00      	cmp	r4, #0
 80018fa:	d048      	beq.n	800198e <_malloc_r+0xe6>
 80018fc:	6823      	ldr	r3, [r4, #0]
 80018fe:	4631      	mov	r1, r6
 8001900:	4638      	mov	r0, r7
 8001902:	eb04 0903 	add.w	r9, r4, r3
 8001906:	f000 f989 	bl	8001c1c <_sbrk_r>
 800190a:	4581      	cmp	r9, r0
 800190c:	d13f      	bne.n	800198e <_malloc_r+0xe6>
 800190e:	6821      	ldr	r1, [r4, #0]
 8001910:	1a6d      	subs	r5, r5, r1
 8001912:	4629      	mov	r1, r5
 8001914:	4638      	mov	r0, r7
 8001916:	f7ff ffa7 	bl	8001868 <sbrk_aligned>
 800191a:	3001      	adds	r0, #1
 800191c:	d037      	beq.n	800198e <_malloc_r+0xe6>
 800191e:	6823      	ldr	r3, [r4, #0]
 8001920:	442b      	add	r3, r5
 8001922:	6023      	str	r3, [r4, #0]
 8001924:	f8d8 3000 	ldr.w	r3, [r8]
 8001928:	2b00      	cmp	r3, #0
 800192a:	d038      	beq.n	800199e <_malloc_r+0xf6>
 800192c:	685a      	ldr	r2, [r3, #4]
 800192e:	42a2      	cmp	r2, r4
 8001930:	d12b      	bne.n	800198a <_malloc_r+0xe2>
 8001932:	2200      	movs	r2, #0
 8001934:	605a      	str	r2, [r3, #4]
 8001936:	e00f      	b.n	8001958 <_malloc_r+0xb0>
 8001938:	6822      	ldr	r2, [r4, #0]
 800193a:	1b52      	subs	r2, r2, r5
 800193c:	d41f      	bmi.n	800197e <_malloc_r+0xd6>
 800193e:	2a0b      	cmp	r2, #11
 8001940:	d917      	bls.n	8001972 <_malloc_r+0xca>
 8001942:	1961      	adds	r1, r4, r5
 8001944:	42a3      	cmp	r3, r4
 8001946:	6025      	str	r5, [r4, #0]
 8001948:	bf18      	it	ne
 800194a:	6059      	strne	r1, [r3, #4]
 800194c:	6863      	ldr	r3, [r4, #4]
 800194e:	bf08      	it	eq
 8001950:	f8c8 1000 	streq.w	r1, [r8]
 8001954:	5162      	str	r2, [r4, r5]
 8001956:	604b      	str	r3, [r1, #4]
 8001958:	4638      	mov	r0, r7
 800195a:	f104 060b 	add.w	r6, r4, #11
 800195e:	f000 f829 	bl	80019b4 <__malloc_unlock>
 8001962:	f026 0607 	bic.w	r6, r6, #7
 8001966:	1d23      	adds	r3, r4, #4
 8001968:	1af2      	subs	r2, r6, r3
 800196a:	d0ae      	beq.n	80018ca <_malloc_r+0x22>
 800196c:	1b9b      	subs	r3, r3, r6
 800196e:	50a3      	str	r3, [r4, r2]
 8001970:	e7ab      	b.n	80018ca <_malloc_r+0x22>
 8001972:	42a3      	cmp	r3, r4
 8001974:	6862      	ldr	r2, [r4, #4]
 8001976:	d1dd      	bne.n	8001934 <_malloc_r+0x8c>
 8001978:	f8c8 2000 	str.w	r2, [r8]
 800197c:	e7ec      	b.n	8001958 <_malloc_r+0xb0>
 800197e:	4623      	mov	r3, r4
 8001980:	6864      	ldr	r4, [r4, #4]
 8001982:	e7ac      	b.n	80018de <_malloc_r+0x36>
 8001984:	4634      	mov	r4, r6
 8001986:	6876      	ldr	r6, [r6, #4]
 8001988:	e7b4      	b.n	80018f4 <_malloc_r+0x4c>
 800198a:	4613      	mov	r3, r2
 800198c:	e7cc      	b.n	8001928 <_malloc_r+0x80>
 800198e:	230c      	movs	r3, #12
 8001990:	603b      	str	r3, [r7, #0]
 8001992:	4638      	mov	r0, r7
 8001994:	f000 f80e 	bl	80019b4 <__malloc_unlock>
 8001998:	e797      	b.n	80018ca <_malloc_r+0x22>
 800199a:	6025      	str	r5, [r4, #0]
 800199c:	e7dc      	b.n	8001958 <_malloc_r+0xb0>
 800199e:	605b      	str	r3, [r3, #4]
 80019a0:	deff      	udf	#255	; 0xff
 80019a2:	bf00      	nop
 80019a4:	2000060c 	.word	0x2000060c

080019a8 <__malloc_lock>:
 80019a8:	4801      	ldr	r0, [pc, #4]	; (80019b0 <__malloc_lock+0x8>)
 80019aa:	f7ff bf11 	b.w	80017d0 <__retarget_lock_acquire_recursive>
 80019ae:	bf00      	nop
 80019b0:	20000608 	.word	0x20000608

080019b4 <__malloc_unlock>:
 80019b4:	4801      	ldr	r0, [pc, #4]	; (80019bc <__malloc_unlock+0x8>)
 80019b6:	f7ff bf0c 	b.w	80017d2 <__retarget_lock_release_recursive>
 80019ba:	bf00      	nop
 80019bc:	20000608 	.word	0x20000608

080019c0 <__sflush_r>:
 80019c0:	898a      	ldrh	r2, [r1, #12]
 80019c2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80019c4:	4605      	mov	r5, r0
 80019c6:	0710      	lsls	r0, r2, #28
 80019c8:	460c      	mov	r4, r1
 80019ca:	d457      	bmi.n	8001a7c <__sflush_r+0xbc>
 80019cc:	684b      	ldr	r3, [r1, #4]
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	dc04      	bgt.n	80019dc <__sflush_r+0x1c>
 80019d2:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	dc01      	bgt.n	80019dc <__sflush_r+0x1c>
 80019d8:	2000      	movs	r0, #0
 80019da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80019dc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80019de:	2e00      	cmp	r6, #0
 80019e0:	d0fa      	beq.n	80019d8 <__sflush_r+0x18>
 80019e2:	2300      	movs	r3, #0
 80019e4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80019e8:	682f      	ldr	r7, [r5, #0]
 80019ea:	6a21      	ldr	r1, [r4, #32]
 80019ec:	602b      	str	r3, [r5, #0]
 80019ee:	d032      	beq.n	8001a56 <__sflush_r+0x96>
 80019f0:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80019f2:	89a3      	ldrh	r3, [r4, #12]
 80019f4:	075a      	lsls	r2, r3, #29
 80019f6:	d505      	bpl.n	8001a04 <__sflush_r+0x44>
 80019f8:	6863      	ldr	r3, [r4, #4]
 80019fa:	1ac0      	subs	r0, r0, r3
 80019fc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80019fe:	b10b      	cbz	r3, 8001a04 <__sflush_r+0x44>
 8001a00:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001a02:	1ac0      	subs	r0, r0, r3
 8001a04:	2300      	movs	r3, #0
 8001a06:	4602      	mov	r2, r0
 8001a08:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8001a0a:	6a21      	ldr	r1, [r4, #32]
 8001a0c:	4628      	mov	r0, r5
 8001a0e:	47b0      	blx	r6
 8001a10:	1c43      	adds	r3, r0, #1
 8001a12:	89a3      	ldrh	r3, [r4, #12]
 8001a14:	d106      	bne.n	8001a24 <__sflush_r+0x64>
 8001a16:	6829      	ldr	r1, [r5, #0]
 8001a18:	291d      	cmp	r1, #29
 8001a1a:	d82b      	bhi.n	8001a74 <__sflush_r+0xb4>
 8001a1c:	4a28      	ldr	r2, [pc, #160]	; (8001ac0 <__sflush_r+0x100>)
 8001a1e:	410a      	asrs	r2, r1
 8001a20:	07d6      	lsls	r6, r2, #31
 8001a22:	d427      	bmi.n	8001a74 <__sflush_r+0xb4>
 8001a24:	2200      	movs	r2, #0
 8001a26:	6062      	str	r2, [r4, #4]
 8001a28:	04d9      	lsls	r1, r3, #19
 8001a2a:	6922      	ldr	r2, [r4, #16]
 8001a2c:	6022      	str	r2, [r4, #0]
 8001a2e:	d504      	bpl.n	8001a3a <__sflush_r+0x7a>
 8001a30:	1c42      	adds	r2, r0, #1
 8001a32:	d101      	bne.n	8001a38 <__sflush_r+0x78>
 8001a34:	682b      	ldr	r3, [r5, #0]
 8001a36:	b903      	cbnz	r3, 8001a3a <__sflush_r+0x7a>
 8001a38:	6560      	str	r0, [r4, #84]	; 0x54
 8001a3a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001a3c:	602f      	str	r7, [r5, #0]
 8001a3e:	2900      	cmp	r1, #0
 8001a40:	d0ca      	beq.n	80019d8 <__sflush_r+0x18>
 8001a42:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8001a46:	4299      	cmp	r1, r3
 8001a48:	d002      	beq.n	8001a50 <__sflush_r+0x90>
 8001a4a:	4628      	mov	r0, r5
 8001a4c:	f7ff fec2 	bl	80017d4 <_free_r>
 8001a50:	2000      	movs	r0, #0
 8001a52:	6360      	str	r0, [r4, #52]	; 0x34
 8001a54:	e7c1      	b.n	80019da <__sflush_r+0x1a>
 8001a56:	2301      	movs	r3, #1
 8001a58:	4628      	mov	r0, r5
 8001a5a:	47b0      	blx	r6
 8001a5c:	1c41      	adds	r1, r0, #1
 8001a5e:	d1c8      	bne.n	80019f2 <__sflush_r+0x32>
 8001a60:	682b      	ldr	r3, [r5, #0]
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d0c5      	beq.n	80019f2 <__sflush_r+0x32>
 8001a66:	2b1d      	cmp	r3, #29
 8001a68:	d001      	beq.n	8001a6e <__sflush_r+0xae>
 8001a6a:	2b16      	cmp	r3, #22
 8001a6c:	d101      	bne.n	8001a72 <__sflush_r+0xb2>
 8001a6e:	602f      	str	r7, [r5, #0]
 8001a70:	e7b2      	b.n	80019d8 <__sflush_r+0x18>
 8001a72:	89a3      	ldrh	r3, [r4, #12]
 8001a74:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001a78:	81a3      	strh	r3, [r4, #12]
 8001a7a:	e7ae      	b.n	80019da <__sflush_r+0x1a>
 8001a7c:	690f      	ldr	r7, [r1, #16]
 8001a7e:	2f00      	cmp	r7, #0
 8001a80:	d0aa      	beq.n	80019d8 <__sflush_r+0x18>
 8001a82:	0793      	lsls	r3, r2, #30
 8001a84:	680e      	ldr	r6, [r1, #0]
 8001a86:	bf08      	it	eq
 8001a88:	694b      	ldreq	r3, [r1, #20]
 8001a8a:	600f      	str	r7, [r1, #0]
 8001a8c:	bf18      	it	ne
 8001a8e:	2300      	movne	r3, #0
 8001a90:	1bf6      	subs	r6, r6, r7
 8001a92:	608b      	str	r3, [r1, #8]
 8001a94:	2e00      	cmp	r6, #0
 8001a96:	dd9f      	ble.n	80019d8 <__sflush_r+0x18>
 8001a98:	6a21      	ldr	r1, [r4, #32]
 8001a9a:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8001a9e:	4633      	mov	r3, r6
 8001aa0:	463a      	mov	r2, r7
 8001aa2:	4628      	mov	r0, r5
 8001aa4:	47e0      	blx	ip
 8001aa6:	2800      	cmp	r0, #0
 8001aa8:	dc06      	bgt.n	8001ab8 <__sflush_r+0xf8>
 8001aaa:	89a3      	ldrh	r3, [r4, #12]
 8001aac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001ab0:	81a3      	strh	r3, [r4, #12]
 8001ab2:	f04f 30ff 	mov.w	r0, #4294967295
 8001ab6:	e790      	b.n	80019da <__sflush_r+0x1a>
 8001ab8:	4407      	add	r7, r0
 8001aba:	1a36      	subs	r6, r6, r0
 8001abc:	e7ea      	b.n	8001a94 <__sflush_r+0xd4>
 8001abe:	bf00      	nop
 8001ac0:	dfbffffe 	.word	0xdfbffffe

08001ac4 <_fflush_r>:
 8001ac4:	b538      	push	{r3, r4, r5, lr}
 8001ac6:	690b      	ldr	r3, [r1, #16]
 8001ac8:	4605      	mov	r5, r0
 8001aca:	460c      	mov	r4, r1
 8001acc:	b913      	cbnz	r3, 8001ad4 <_fflush_r+0x10>
 8001ace:	2500      	movs	r5, #0
 8001ad0:	4628      	mov	r0, r5
 8001ad2:	bd38      	pop	{r3, r4, r5, pc}
 8001ad4:	b118      	cbz	r0, 8001ade <_fflush_r+0x1a>
 8001ad6:	6a03      	ldr	r3, [r0, #32]
 8001ad8:	b90b      	cbnz	r3, 8001ade <_fflush_r+0x1a>
 8001ada:	f7ff fc97 	bl	800140c <__sinit>
 8001ade:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d0f3      	beq.n	8001ace <_fflush_r+0xa>
 8001ae6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8001ae8:	07d0      	lsls	r0, r2, #31
 8001aea:	d404      	bmi.n	8001af6 <_fflush_r+0x32>
 8001aec:	0599      	lsls	r1, r3, #22
 8001aee:	d402      	bmi.n	8001af6 <_fflush_r+0x32>
 8001af0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001af2:	f7ff fe6d 	bl	80017d0 <__retarget_lock_acquire_recursive>
 8001af6:	4628      	mov	r0, r5
 8001af8:	4621      	mov	r1, r4
 8001afa:	f7ff ff61 	bl	80019c0 <__sflush_r>
 8001afe:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8001b00:	07da      	lsls	r2, r3, #31
 8001b02:	4605      	mov	r5, r0
 8001b04:	d4e4      	bmi.n	8001ad0 <_fflush_r+0xc>
 8001b06:	89a3      	ldrh	r3, [r4, #12]
 8001b08:	059b      	lsls	r3, r3, #22
 8001b0a:	d4e1      	bmi.n	8001ad0 <_fflush_r+0xc>
 8001b0c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001b0e:	f7ff fe60 	bl	80017d2 <__retarget_lock_release_recursive>
 8001b12:	e7dd      	b.n	8001ad0 <_fflush_r+0xc>

08001b14 <__swhatbuf_r>:
 8001b14:	b570      	push	{r4, r5, r6, lr}
 8001b16:	460c      	mov	r4, r1
 8001b18:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001b1c:	2900      	cmp	r1, #0
 8001b1e:	b096      	sub	sp, #88	; 0x58
 8001b20:	4615      	mov	r5, r2
 8001b22:	461e      	mov	r6, r3
 8001b24:	da0d      	bge.n	8001b42 <__swhatbuf_r+0x2e>
 8001b26:	89a3      	ldrh	r3, [r4, #12]
 8001b28:	f013 0f80 	tst.w	r3, #128	; 0x80
 8001b2c:	f04f 0100 	mov.w	r1, #0
 8001b30:	bf0c      	ite	eq
 8001b32:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8001b36:	2340      	movne	r3, #64	; 0x40
 8001b38:	2000      	movs	r0, #0
 8001b3a:	6031      	str	r1, [r6, #0]
 8001b3c:	602b      	str	r3, [r5, #0]
 8001b3e:	b016      	add	sp, #88	; 0x58
 8001b40:	bd70      	pop	{r4, r5, r6, pc}
 8001b42:	466a      	mov	r2, sp
 8001b44:	f000 f848 	bl	8001bd8 <_fstat_r>
 8001b48:	2800      	cmp	r0, #0
 8001b4a:	dbec      	blt.n	8001b26 <__swhatbuf_r+0x12>
 8001b4c:	9901      	ldr	r1, [sp, #4]
 8001b4e:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8001b52:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8001b56:	4259      	negs	r1, r3
 8001b58:	4159      	adcs	r1, r3
 8001b5a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001b5e:	e7eb      	b.n	8001b38 <__swhatbuf_r+0x24>

08001b60 <__smakebuf_r>:
 8001b60:	898b      	ldrh	r3, [r1, #12]
 8001b62:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8001b64:	079d      	lsls	r5, r3, #30
 8001b66:	4606      	mov	r6, r0
 8001b68:	460c      	mov	r4, r1
 8001b6a:	d507      	bpl.n	8001b7c <__smakebuf_r+0x1c>
 8001b6c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8001b70:	6023      	str	r3, [r4, #0]
 8001b72:	6123      	str	r3, [r4, #16]
 8001b74:	2301      	movs	r3, #1
 8001b76:	6163      	str	r3, [r4, #20]
 8001b78:	b002      	add	sp, #8
 8001b7a:	bd70      	pop	{r4, r5, r6, pc}
 8001b7c:	ab01      	add	r3, sp, #4
 8001b7e:	466a      	mov	r2, sp
 8001b80:	f7ff ffc8 	bl	8001b14 <__swhatbuf_r>
 8001b84:	9900      	ldr	r1, [sp, #0]
 8001b86:	4605      	mov	r5, r0
 8001b88:	4630      	mov	r0, r6
 8001b8a:	f7ff fe8d 	bl	80018a8 <_malloc_r>
 8001b8e:	b948      	cbnz	r0, 8001ba4 <__smakebuf_r+0x44>
 8001b90:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001b94:	059a      	lsls	r2, r3, #22
 8001b96:	d4ef      	bmi.n	8001b78 <__smakebuf_r+0x18>
 8001b98:	f023 0303 	bic.w	r3, r3, #3
 8001b9c:	f043 0302 	orr.w	r3, r3, #2
 8001ba0:	81a3      	strh	r3, [r4, #12]
 8001ba2:	e7e3      	b.n	8001b6c <__smakebuf_r+0xc>
 8001ba4:	89a3      	ldrh	r3, [r4, #12]
 8001ba6:	6020      	str	r0, [r4, #0]
 8001ba8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001bac:	81a3      	strh	r3, [r4, #12]
 8001bae:	9b00      	ldr	r3, [sp, #0]
 8001bb0:	6163      	str	r3, [r4, #20]
 8001bb2:	9b01      	ldr	r3, [sp, #4]
 8001bb4:	6120      	str	r0, [r4, #16]
 8001bb6:	b15b      	cbz	r3, 8001bd0 <__smakebuf_r+0x70>
 8001bb8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001bbc:	4630      	mov	r0, r6
 8001bbe:	f000 f81d 	bl	8001bfc <_isatty_r>
 8001bc2:	b128      	cbz	r0, 8001bd0 <__smakebuf_r+0x70>
 8001bc4:	89a3      	ldrh	r3, [r4, #12]
 8001bc6:	f023 0303 	bic.w	r3, r3, #3
 8001bca:	f043 0301 	orr.w	r3, r3, #1
 8001bce:	81a3      	strh	r3, [r4, #12]
 8001bd0:	89a3      	ldrh	r3, [r4, #12]
 8001bd2:	431d      	orrs	r5, r3
 8001bd4:	81a5      	strh	r5, [r4, #12]
 8001bd6:	e7cf      	b.n	8001b78 <__smakebuf_r+0x18>

08001bd8 <_fstat_r>:
 8001bd8:	b538      	push	{r3, r4, r5, lr}
 8001bda:	4d07      	ldr	r5, [pc, #28]	; (8001bf8 <_fstat_r+0x20>)
 8001bdc:	2300      	movs	r3, #0
 8001bde:	4604      	mov	r4, r0
 8001be0:	4608      	mov	r0, r1
 8001be2:	4611      	mov	r1, r2
 8001be4:	602b      	str	r3, [r5, #0]
 8001be6:	f7fe fc35 	bl	8000454 <_fstat>
 8001bea:	1c43      	adds	r3, r0, #1
 8001bec:	d102      	bne.n	8001bf4 <_fstat_r+0x1c>
 8001bee:	682b      	ldr	r3, [r5, #0]
 8001bf0:	b103      	cbz	r3, 8001bf4 <_fstat_r+0x1c>
 8001bf2:	6023      	str	r3, [r4, #0]
 8001bf4:	bd38      	pop	{r3, r4, r5, pc}
 8001bf6:	bf00      	nop
 8001bf8:	20000604 	.word	0x20000604

08001bfc <_isatty_r>:
 8001bfc:	b538      	push	{r3, r4, r5, lr}
 8001bfe:	4d06      	ldr	r5, [pc, #24]	; (8001c18 <_isatty_r+0x1c>)
 8001c00:	2300      	movs	r3, #0
 8001c02:	4604      	mov	r4, r0
 8001c04:	4608      	mov	r0, r1
 8001c06:	602b      	str	r3, [r5, #0]
 8001c08:	f7fe fc33 	bl	8000472 <_isatty>
 8001c0c:	1c43      	adds	r3, r0, #1
 8001c0e:	d102      	bne.n	8001c16 <_isatty_r+0x1a>
 8001c10:	682b      	ldr	r3, [r5, #0]
 8001c12:	b103      	cbz	r3, 8001c16 <_isatty_r+0x1a>
 8001c14:	6023      	str	r3, [r4, #0]
 8001c16:	bd38      	pop	{r3, r4, r5, pc}
 8001c18:	20000604 	.word	0x20000604

08001c1c <_sbrk_r>:
 8001c1c:	b538      	push	{r3, r4, r5, lr}
 8001c1e:	4d06      	ldr	r5, [pc, #24]	; (8001c38 <_sbrk_r+0x1c>)
 8001c20:	2300      	movs	r3, #0
 8001c22:	4604      	mov	r4, r0
 8001c24:	4608      	mov	r0, r1
 8001c26:	602b      	str	r3, [r5, #0]
 8001c28:	f7fe fc3a 	bl	80004a0 <_sbrk>
 8001c2c:	1c43      	adds	r3, r0, #1
 8001c2e:	d102      	bne.n	8001c36 <_sbrk_r+0x1a>
 8001c30:	682b      	ldr	r3, [r5, #0]
 8001c32:	b103      	cbz	r3, 8001c36 <_sbrk_r+0x1a>
 8001c34:	6023      	str	r3, [r4, #0]
 8001c36:	bd38      	pop	{r3, r4, r5, pc}
 8001c38:	20000604 	.word	0x20000604

08001c3c <_init>:
 8001c3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001c3e:	bf00      	nop
 8001c40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001c42:	bc08      	pop	{r3}
 8001c44:	469e      	mov	lr, r3
 8001c46:	4770      	bx	lr

08001c48 <_fini>:
 8001c48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001c4a:	bf00      	nop
 8001c4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001c4e:	bc08      	pop	{r3}
 8001c50:	469e      	mov	lr, r3
 8001c52:	4770      	bx	lr
