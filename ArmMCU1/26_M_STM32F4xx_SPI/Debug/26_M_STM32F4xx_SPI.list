
26_M_STM32F4xx_SPI.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001a8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000008e8  080001a8  080001a8  000101a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000000c  08000a90  08000a90  00010a90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000a9c  08000a9c  00010aa4  2**0
                  CONTENTS
  4 .ARM          00000000  08000a9c  08000a9c  00010aa4  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000a9c  08000aa4  00010aa4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000a9c  08000a9c  00010a9c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000aa0  08000aa0  00010aa0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010aa4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00010aa4  2**0
                  CONTENTS
 10 .bss          0000001c  20000000  20000000  00020000  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000001c  2000001c  00020000  2**0
                  ALLOC
 12 .ARM.attributes 0000002a  00000000  00000000  00010aa4  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00010ace  2**0
                  CONTENTS, READONLY
 14 .debug_info   00001235  00000000  00000000  00010b11  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000004bc  00000000  00000000  00011d46  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000150  00000000  00000000  00012208  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 000000ef  00000000  00000000  00012358  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00002135  00000000  00000000  00012447  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0000179c  00000000  00000000  0001457c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    00009107  00000000  00000000  00015d18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  0000049c  00000000  00000000  0001ee20  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000005c  00000000  00000000  0001f2bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a8 <__do_global_dtors_aux>:
 80001a8:	b510      	push	{r4, lr}
 80001aa:	4c05      	ldr	r4, [pc, #20]	; (80001c0 <__do_global_dtors_aux+0x18>)
 80001ac:	7823      	ldrb	r3, [r4, #0]
 80001ae:	b933      	cbnz	r3, 80001be <__do_global_dtors_aux+0x16>
 80001b0:	4b04      	ldr	r3, [pc, #16]	; (80001c4 <__do_global_dtors_aux+0x1c>)
 80001b2:	b113      	cbz	r3, 80001ba <__do_global_dtors_aux+0x12>
 80001b4:	4804      	ldr	r0, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x20>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	2301      	movs	r3, #1
 80001bc:	7023      	strb	r3, [r4, #0]
 80001be:	bd10      	pop	{r4, pc}
 80001c0:	20000000 	.word	0x20000000
 80001c4:	00000000 	.word	0x00000000
 80001c8:	08000a78 	.word	0x08000a78

080001cc <frame_dummy>:
 80001cc:	b508      	push	{r3, lr}
 80001ce:	4b03      	ldr	r3, [pc, #12]	; (80001dc <frame_dummy+0x10>)
 80001d0:	b11b      	cbz	r3, 80001da <frame_dummy+0xe>
 80001d2:	4903      	ldr	r1, [pc, #12]	; (80001e0 <frame_dummy+0x14>)
 80001d4:	4803      	ldr	r0, [pc, #12]	; (80001e4 <frame_dummy+0x18>)
 80001d6:	f3af 8000 	nop.w
 80001da:	bd08      	pop	{r3, pc}
 80001dc:	00000000 	.word	0x00000000
 80001e0:	20000004 	.word	0x20000004
 80001e4:	08000a78 	.word	0x08000a78

080001e8 <strlen>:
 80001e8:	4603      	mov	r3, r0
 80001ea:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ee:	2a00      	cmp	r2, #0
 80001f0:	d1fb      	bne.n	80001ea <strlen+0x2>
 80001f2:	1a18      	subs	r0, r3, r0
 80001f4:	3801      	subs	r0, #1
 80001f6:	4770      	bx	lr

080001f8 <SPI2_GPIOInits>:
#include "stm32f407xx_gpio_driver.h"	//Khai báo thư viện xử lý GPIO peripheral

/**
 * Hàm thiết lập tính năng Alternate chuyển đổi chân Pins từ GPIO sang SPI
 */
void SPI2_GPIOInits(){
 80001f8:	b580      	push	{r7, lr}
 80001fa:	b084      	sub	sp, #16
 80001fc:	af00      	add	r7, sp, #0

	GPIOx_Handle_t SPIpins;										//Khai báo 1 biến cấu trúc Portx muốn dùng AF

	SPIpins.pGPIOx = GPIOB;										//Xác định Port có chân làm chức năng Alternate
 80001fe:	4b11      	ldr	r3, [pc, #68]	; (8000244 <SPI2_GPIOInits+0x4c>)
 8000200:	607b      	str	r3, [r7, #4]
	SPIpins.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALTFN;		//Thiết lập tính năng Alternate Function
 8000202:	2302      	movs	r3, #2
 8000204:	727b      	strb	r3, [r7, #9]
	SPIpins.GPIO_PinConfig.GPIO_PinAltFunMode = 5;				//Column AF5
 8000206:	2305      	movs	r3, #5
 8000208:	737b      	strb	r3, [r7, #13]
	SPIpins.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_PP;	//SPI sử dụng push-pull
 800020a:	2300      	movs	r3, #0
 800020c:	733b      	strb	r3, [r7, #12]
	SPIpins.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 800020e:	2300      	movs	r3, #0
 8000210:	72fb      	strb	r3, [r7, #11]
	SPIpins.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 8000212:	2302      	movs	r3, #2
 8000214:	72bb      	strb	r3, [r7, #10]

	//SPI2_NSS pin
	SPIpins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_12;		//PB12 làm chân AF5 SPI2_NSS
 8000216:	230c      	movs	r3, #12
 8000218:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&SPIpins);										//Thiết lập SPI_NSS pin
 800021a:	1d3b      	adds	r3, r7, #4
 800021c:	4618      	mov	r0, r3
 800021e:	f000 f959 	bl	80004d4 <GPIO_Init>

	//SPI2_SCLK pin
	SPIpins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_13;		//PB13 làm chân AF5 SPI2_SCLK
 8000222:	230d      	movs	r3, #13
 8000224:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&SPIpins);										//Thiết lập SPI_SCLK pin
 8000226:	1d3b      	adds	r3, r7, #4
 8000228:	4618      	mov	r0, r3
 800022a:	f000 f953 	bl	80004d4 <GPIO_Init>
	//SPI2_MISO pin
//	SPIpins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_14;		//PB14 làm chân AF5 SPI2_MISO
//	GPIO_Init(&SPIpins);										//Thiết lập SPI_MISO pin

	//SPI2_MOSI pin
	SPIpins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_15;		//PB13 làm chân AF5 SPI2_MOSI
 800022e:	230f      	movs	r3, #15
 8000230:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&SPIpins);										//Thiết lập SPI_MOSI pin
 8000232:	1d3b      	adds	r3, r7, #4
 8000234:	4618      	mov	r0, r3
 8000236:	f000 f94d 	bl	80004d4 <GPIO_Init>


	//Nếu chân nào ko sử dụng thì có thể toggle lại
}
 800023a:	bf00      	nop
 800023c:	3710      	adds	r7, #16
 800023e:	46bd      	mov	sp, r7
 8000240:	bd80      	pop	{r7, pc}
 8000242:	bf00      	nop
 8000244:	40020400 	.word	0x40020400

08000248 <SPI2_Inits>:

/**
 * Khởi tạo các cấu hình cơ bản cho SPI Peripheral
 */
void SPI2_Inits()
{
 8000248:	b580      	push	{r7, lr}
 800024a:	b084      	sub	sp, #16
 800024c:	af00      	add	r7, sp, #0
	SPI_Handle_t SPI2handle;											//Khai báo biến struct cấu hình SPI2

	SPI2handle.pSPIx = SPI2;											//Thiết lập SPIx sử dụng để Send Data
 800024e:	4b0c      	ldr	r3, [pc, #48]	; (8000280 <SPI2_Inits+0x38>)
 8000250:	607b      	str	r3, [r7, #4]
	SPI2handle.SPIConfig.SPI_BusConfig = SPI_BUS_CONFIG_FD;				//Full-Duplex
 8000252:	2301      	movs	r3, #1
 8000254:	727b      	strb	r3, [r7, #9]
	SPI2handle.SPIConfig.SPI_DeviceMode = SPI_DEVICE_MODE_MASTER;		//Master
 8000256:	2301      	movs	r3, #1
 8000258:	723b      	strb	r3, [r7, #8]
	SPI2handle.SPIConfig.SPI_SclkSpeed = SPI_SCLK_SPEED_DIV8;			//Generate SCLK of 2MHz
 800025a:	2302      	movs	r3, #2
 800025c:	72bb      	strb	r3, [r7, #10]
	SPI2handle.SPIConfig.SPI_DFF = SPI_DFF_8BIT;						//Data 8bit
 800025e:	2300      	movs	r3, #0
 8000260:	72fb      	strb	r3, [r7, #11]
	SPI2handle.SPIConfig.SPI_CPOL = SPI_CPOL_LOW;						//Cạnh xung xuống
 8000262:	2300      	movs	r3, #0
 8000264:	733b      	strb	r3, [r7, #12]
	SPI2handle.SPIConfig.SPI_CPHA = SPI_CPHA_LOW;						//Nửa chu kỳ đầu
 8000266:	2300      	movs	r3, #0
 8000268:	737b      	strb	r3, [r7, #13]
	SPI2handle.SPIConfig.SPI_SSM = SPI_SSM_DS;							//Software Slave Disable(Hardware Slave Enable)
 800026a:	2300      	movs	r3, #0
 800026c:	73bb      	strb	r3, [r7, #14]

	SPI_Init(&SPI2handle);												//Thiết lập cấu hình SPI2
 800026e:	1d3b      	adds	r3, r7, #4
 8000270:	4618      	mov	r0, r3
 8000272:	f000 fb09 	bl	8000888 <SPI_Init>
}
 8000276:	bf00      	nop
 8000278:	3710      	adds	r7, #16
 800027a:	46bd      	mov	sp, r7
 800027c:	bd80      	pop	{r7, pc}
 800027e:	bf00      	nop
 8000280:	40003800 	.word	0x40003800

08000284 <GPIO_ButtonInit>:

void GPIO_ButtonInit()
{
 8000284:	b580      	push	{r7, lr}
 8000286:	b084      	sub	sp, #16
 8000288:	af00      	add	r7, sp, #0
	GPIOx_Handle_t GPIOBtn;			//Khai báo biến struct chứa thông tin port và pin(input button) muốn điều khiển

	//Cấu hình thông tin hoạt động của Button muốn điều khiển
	GPIOBtn.pGPIOx = GPIOA;										//Thiết lập port muốn điều khiển
 800028a:	4b0b      	ldr	r3, [pc, #44]	; (80002b8 <GPIO_ButtonInit+0x34>)
 800028c:	607b      	str	r3, [r7, #4]
	GPIOBtn.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_0;		//Chân pin của port muốn điều khiển
 800028e:	2300      	movs	r3, #0
 8000290:	723b      	strb	r3, [r7, #8]
	GPIOBtn.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_IN;			//Chế độ xuất tín hiệu input
 8000292:	2300      	movs	r3, #0
 8000294:	727b      	strb	r3, [r7, #9]
	GPIOBtn.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST; 	//Tốc độ xuất tín hiệu
 8000296:	2302      	movs	r3, #2
 8000298:	72bb      	strb	r3, [r7, #10]

	GPIOBtn.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;		//Đầu vào ko cần điện trở kéo
 800029a:	2300      	movs	r3, #0
 800029c:	72fb      	strb	r3, [r7, #11]
	//Gpio_Led.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PIN_PU;	//Chọn pull-up(kéo lên)

	//Cấu hình xung Clock cho Peripheral Port Button
	GPIO_PeriClockControl(GPIOA, ENABLE);		//Port A và Enalbe=1
 800029e:	2101      	movs	r1, #1
 80002a0:	4805      	ldr	r0, [pc, #20]	; (80002b8 <GPIO_ButtonInit+0x34>)
 80002a2:	f000 f895 	bl	80003d0 <GPIO_PeriClockControl>
	//Ko cần vì đã cấu hình xung clock ở hàm dưới cho SPI

	//Gọi hàm kjhởi tạo hoạt động cấu hình muốn điều khiển(ở đây muốn điều khiển Input Button)
	GPIO_Init(&GPIOBtn);
 80002a6:	1d3b      	adds	r3, r7, #4
 80002a8:	4618      	mov	r0, r3
 80002aa:	f000 f913 	bl	80004d4 <GPIO_Init>
}
 80002ae:	bf00      	nop
 80002b0:	3710      	adds	r7, #16
 80002b2:	46bd      	mov	sp, r7
 80002b4:	bd80      	pop	{r7, pc}
 80002b6:	bf00      	nop
 80002b8:	40020000 	.word	0x40020000

080002bc <delay>:

/*
 * Hàm Delay thời gian
 */
void delay(void)
{
 80002bc:	b480      	push	{r7}
 80002be:	b083      	sub	sp, #12
 80002c0:	af00      	add	r7, sp, #0
	//for(uint32_t i = 0; i< 500000; i++);
	for(uint32_t i = 0; i< 500000/2; i++);		//giảm thời gian delay
 80002c2:	2300      	movs	r3, #0
 80002c4:	607b      	str	r3, [r7, #4]
 80002c6:	e002      	b.n	80002ce <delay+0x12>
 80002c8:	687b      	ldr	r3, [r7, #4]
 80002ca:	3301      	adds	r3, #1
 80002cc:	607b      	str	r3, [r7, #4]
 80002ce:	687b      	ldr	r3, [r7, #4]
 80002d0:	4a04      	ldr	r2, [pc, #16]	; (80002e4 <delay+0x28>)
 80002d2:	4293      	cmp	r3, r2
 80002d4:	d9f8      	bls.n	80002c8 <delay+0xc>
}
 80002d6:	bf00      	nop
 80002d8:	bf00      	nop
 80002da:	370c      	adds	r7, #12
 80002dc:	46bd      	mov	sp, r7
 80002de:	bc80      	pop	{r7}
 80002e0:	4770      	bx	lr
 80002e2:	bf00      	nop
 80002e4:	0003d08f 	.word	0x0003d08f

080002e8 <main>:

int main(void)
{
 80002e8:	b580      	push	{r7, lr}
 80002ea:	b084      	sub	sp, #16
 80002ec:	af00      	add	r7, sp, #0
	char user_data[] = "Hello world";
 80002ee:	4a20      	ldr	r2, [pc, #128]	; (8000370 <main+0x88>)
 80002f0:	1d3b      	adds	r3, r7, #4
 80002f2:	ca07      	ldmia	r2, {r0, r1, r2}
 80002f4:	e883 0007 	stmia.w	r3, {r0, r1, r2}

	//0. Khởi tạo cấu hình nút nhấn cho phép truyền
	GPIO_ButtonInit();
 80002f8:	f7ff ffc4 	bl	8000284 <GPIO_ButtonInit>

	//1. This is function is used initialize the GPIO pins to behave(thay thế) as SPI2 pins
	SPI2_GPIOInits();
 80002fc:	f7ff ff7c 	bl	80001f8 <SPI2_GPIOInits>

	//2. Khởi tạo chức năng SPI2
	SPI2_Inits();
 8000300:	f7ff ffa2 	bl	8000248 <SPI2_Inits>
	 * Making SSOE 1 does NSS output enable
	 * The NSS pin is automatically managed by the hardware
	 * i.e: when SPE=1, NSS will be pulled to low
	 * and NSS pin will be high when SPE=0
	 */
	SPI_SSOEConfig(SPI2, ENABLE);
 8000304:	2101      	movs	r1, #1
 8000306:	481b      	ldr	r0, [pc, #108]	; (8000374 <main+0x8c>)
 8000308:	f000 fb77 	bl	80009fa <SPI_SSOEConfig>
		//SPI_SSIConfig(SPI2,ENABLE);							//Cấu hình NSS lên HIGH để phòng tránh lỗi MODF
		//Vì NSS sẽ với với Slave Arduino nên ko cần cấu hình lên mức cao

		//Wait till button is pressed
		//nếu ko nhấn(=0) sẽ ở vòng lặp này và nếu nhấn(=1) sẽ thoát khỏi vòng lặp và làm công việc bên dưới
		while(!GPIO_ReadFromInputPin(GPIOA, GPIO_PIN_NO_0));
 800030c:	bf00      	nop
 800030e:	2100      	movs	r1, #0
 8000310:	4819      	ldr	r0, [pc, #100]	; (8000378 <main+0x90>)
 8000312:	f000 fa6d 	bl	80007f0 <GPIO_ReadFromInputPin>
 8000316:	4603      	mov	r3, r0
 8000318:	2b00      	cmp	r3, #0
 800031a:	d0f8      	beq.n	800030e <main+0x26>
		delay();			//200ms delay
 800031c:	f7ff ffce 	bl	80002bc <delay>

		//3. Enable the SPI Peripheral worked
		SPI_PeripheralControl(SPI2, ENABLE);
 8000320:	2101      	movs	r1, #1
 8000322:	4814      	ldr	r0, [pc, #80]	; (8000374 <main+0x8c>)
 8000324:	f000 fb4e 	bl	80009c4 <SPI_PeripheralControl>

		//4. First send length information
		uint8_t dataLen = strlen(user_data);
 8000328:	1d3b      	adds	r3, r7, #4
 800032a:	4618      	mov	r0, r3
 800032c:	f7ff ff5c 	bl	80001e8 <strlen>
 8000330:	4603      	mov	r3, r0
 8000332:	b2db      	uxtb	r3, r3
 8000334:	70fb      	strb	r3, [r7, #3]
		SPI_SendData(SPI2, &dataLen, 1);
 8000336:	1cfb      	adds	r3, r7, #3
 8000338:	2201      	movs	r2, #1
 800033a:	4619      	mov	r1, r3
 800033c:	480d      	ldr	r0, [pc, #52]	; (8000374 <main+0x8c>)
 800033e:	f000 fb0a 	bl	8000956 <SPI_SendData>

		//4.1 Send Data
		SPI_SendData(SPI2, (uint8_t*)user_data, strlen(user_data));
 8000342:	1d3b      	adds	r3, r7, #4
 8000344:	4618      	mov	r0, r3
 8000346:	f7ff ff4f 	bl	80001e8 <strlen>
 800034a:	4602      	mov	r2, r0
 800034c:	1d3b      	adds	r3, r7, #4
 800034e:	4619      	mov	r1, r3
 8000350:	4808      	ldr	r0, [pc, #32]	; (8000374 <main+0x8c>)
 8000352:	f000 fb00 	bl	8000956 <SPI_SendData>

		//5. Let comfirm SPI, nếu 1 trả về thì nó sẽ lặp liên tục cho đến khi 0 đc trả về
		while(SPI_GetFlagStatus(SPI2, SPI_BUSY_FLAG));
 8000356:	bf00      	nop
 8000358:	2180      	movs	r1, #128	; 0x80
 800035a:	4806      	ldr	r0, [pc, #24]	; (8000374 <main+0x8c>)
 800035c:	f000 fae8 	bl	8000930 <SPI_GetFlagStatus>
 8000360:	4603      	mov	r3, r0
 8000362:	2b00      	cmp	r3, #0
 8000364:	d1f8      	bne.n	8000358 <main+0x70>

		//5.1 Disable the SPI Peripheral worked
		SPI_PeripheralControl(SPI2, DISABLE);			//Đóng cổng cho phép truyền
 8000366:	2100      	movs	r1, #0
 8000368:	4802      	ldr	r0, [pc, #8]	; (8000374 <main+0x8c>)
 800036a:	f000 fb2b 	bl	80009c4 <SPI_PeripheralControl>
	{
 800036e:	e7cd      	b.n	800030c <main+0x24>
 8000370:	08000a90 	.word	0x08000a90
 8000374:	40003800 	.word	0x40003800
 8000378:	40020000 	.word	0x40020000

0800037c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800037c:	480d      	ldr	r0, [pc, #52]	; (80003b4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800037e:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000380:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000384:	480c      	ldr	r0, [pc, #48]	; (80003b8 <LoopForever+0x6>)
  ldr r1, =_edata
 8000386:	490d      	ldr	r1, [pc, #52]	; (80003bc <LoopForever+0xa>)
  ldr r2, =_sidata
 8000388:	4a0d      	ldr	r2, [pc, #52]	; (80003c0 <LoopForever+0xe>)
  movs r3, #0
 800038a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800038c:	e002      	b.n	8000394 <LoopCopyDataInit>

0800038e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800038e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000390:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000392:	3304      	adds	r3, #4

08000394 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000394:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000396:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000398:	d3f9      	bcc.n	800038e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800039a:	4a0a      	ldr	r2, [pc, #40]	; (80003c4 <LoopForever+0x12>)
  ldr r4, =_ebss
 800039c:	4c0a      	ldr	r4, [pc, #40]	; (80003c8 <LoopForever+0x16>)
  movs r3, #0
 800039e:	2300      	movs	r3, #0
  b LoopFillZerobss
 80003a0:	e001      	b.n	80003a6 <LoopFillZerobss>

080003a2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80003a2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80003a4:	3204      	adds	r2, #4

080003a6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80003a6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80003a8:	d3fb      	bcc.n	80003a2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80003aa:	f000 fb41 	bl	8000a30 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80003ae:	f7ff ff9b 	bl	80002e8 <main>

080003b2 <LoopForever>:

LoopForever:
  b LoopForever
 80003b2:	e7fe      	b.n	80003b2 <LoopForever>
  ldr   r0, =_estack
 80003b4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80003b8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80003bc:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80003c0:	08000aa4 	.word	0x08000aa4
  ldr r2, =_sbss
 80003c4:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80003c8:	2000001c 	.word	0x2000001c

080003cc <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80003cc:	e7fe      	b.n	80003cc <ADC_IRQHandler>
	...

080003d0 <GPIO_PeriClockControl>:
 * @return		- none
 *
 * @Note 		- none
 */
void GPIO_PeriClockControl(GPIO_RegDef_t *pGPIOx, uint8_t EnorDi)
{
 80003d0:	b480      	push	{r7}
 80003d2:	b083      	sub	sp, #12
 80003d4:	af00      	add	r7, sp, #0
 80003d6:	6078      	str	r0, [r7, #4]
 80003d8:	460b      	mov	r3, r1
 80003da:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE)
 80003dc:	78fb      	ldrb	r3, [r7, #3]
 80003de:	2b01      	cmp	r3, #1
 80003e0:	d161      	bne.n	80004a6 <GPIO_PeriClockControl+0xd6>
	{
		if(pGPIOx == GPIOA)
 80003e2:	687b      	ldr	r3, [r7, #4]
 80003e4:	4a32      	ldr	r2, [pc, #200]	; (80004b0 <GPIO_PeriClockControl+0xe0>)
 80003e6:	4293      	cmp	r3, r2
 80003e8:	d106      	bne.n	80003f8 <GPIO_PeriClockControl+0x28>
		{
			GPIOA_PCLK_EN();		//hàm đã đc define trong stm32f407xx.h(lớp Driver)
 80003ea:	4b32      	ldr	r3, [pc, #200]	; (80004b4 <GPIO_PeriClockControl+0xe4>)
 80003ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003ee:	4a31      	ldr	r2, [pc, #196]	; (80004b4 <GPIO_PeriClockControl+0xe4>)
 80003f0:	f043 0301 	orr.w	r3, r3, #1
 80003f4:	6313      	str	r3, [r2, #48]	; 0x30
	else
	{
		//Todo: (Disable Status)

	}
}
 80003f6:	e056      	b.n	80004a6 <GPIO_PeriClockControl+0xd6>
		else if(pGPIOx == GPIOB)
 80003f8:	687b      	ldr	r3, [r7, #4]
 80003fa:	4a2f      	ldr	r2, [pc, #188]	; (80004b8 <GPIO_PeriClockControl+0xe8>)
 80003fc:	4293      	cmp	r3, r2
 80003fe:	d106      	bne.n	800040e <GPIO_PeriClockControl+0x3e>
			GPIOB_PCLK_EN();
 8000400:	4b2c      	ldr	r3, [pc, #176]	; (80004b4 <GPIO_PeriClockControl+0xe4>)
 8000402:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000404:	4a2b      	ldr	r2, [pc, #172]	; (80004b4 <GPIO_PeriClockControl+0xe4>)
 8000406:	f043 0302 	orr.w	r3, r3, #2
 800040a:	6313      	str	r3, [r2, #48]	; 0x30
}
 800040c:	e04b      	b.n	80004a6 <GPIO_PeriClockControl+0xd6>
		else if(pGPIOx == GPIOC)
 800040e:	687b      	ldr	r3, [r7, #4]
 8000410:	4a2a      	ldr	r2, [pc, #168]	; (80004bc <GPIO_PeriClockControl+0xec>)
 8000412:	4293      	cmp	r3, r2
 8000414:	d106      	bne.n	8000424 <GPIO_PeriClockControl+0x54>
			GPIOC_PCLK_EN();
 8000416:	4b27      	ldr	r3, [pc, #156]	; (80004b4 <GPIO_PeriClockControl+0xe4>)
 8000418:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800041a:	4a26      	ldr	r2, [pc, #152]	; (80004b4 <GPIO_PeriClockControl+0xe4>)
 800041c:	f043 0304 	orr.w	r3, r3, #4
 8000420:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000422:	e040      	b.n	80004a6 <GPIO_PeriClockControl+0xd6>
		else if(pGPIOx == GPIOD)
 8000424:	687b      	ldr	r3, [r7, #4]
 8000426:	4a26      	ldr	r2, [pc, #152]	; (80004c0 <GPIO_PeriClockControl+0xf0>)
 8000428:	4293      	cmp	r3, r2
 800042a:	d106      	bne.n	800043a <GPIO_PeriClockControl+0x6a>
			GPIOD_PCLK_EN();
 800042c:	4b21      	ldr	r3, [pc, #132]	; (80004b4 <GPIO_PeriClockControl+0xe4>)
 800042e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000430:	4a20      	ldr	r2, [pc, #128]	; (80004b4 <GPIO_PeriClockControl+0xe4>)
 8000432:	f043 0308 	orr.w	r3, r3, #8
 8000436:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000438:	e035      	b.n	80004a6 <GPIO_PeriClockControl+0xd6>
		else if(pGPIOx == GPIOE)
 800043a:	687b      	ldr	r3, [r7, #4]
 800043c:	4a21      	ldr	r2, [pc, #132]	; (80004c4 <GPIO_PeriClockControl+0xf4>)
 800043e:	4293      	cmp	r3, r2
 8000440:	d106      	bne.n	8000450 <GPIO_PeriClockControl+0x80>
			GPIOE_PCLK_EN();
 8000442:	4b1c      	ldr	r3, [pc, #112]	; (80004b4 <GPIO_PeriClockControl+0xe4>)
 8000444:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000446:	4a1b      	ldr	r2, [pc, #108]	; (80004b4 <GPIO_PeriClockControl+0xe4>)
 8000448:	f043 0310 	orr.w	r3, r3, #16
 800044c:	6313      	str	r3, [r2, #48]	; 0x30
}
 800044e:	e02a      	b.n	80004a6 <GPIO_PeriClockControl+0xd6>
		else if(pGPIOx == GPIOF)
 8000450:	687b      	ldr	r3, [r7, #4]
 8000452:	4a1d      	ldr	r2, [pc, #116]	; (80004c8 <GPIO_PeriClockControl+0xf8>)
 8000454:	4293      	cmp	r3, r2
 8000456:	d106      	bne.n	8000466 <GPIO_PeriClockControl+0x96>
			GPIOF_PCLK_EN();
 8000458:	4b16      	ldr	r3, [pc, #88]	; (80004b4 <GPIO_PeriClockControl+0xe4>)
 800045a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800045c:	4a15      	ldr	r2, [pc, #84]	; (80004b4 <GPIO_PeriClockControl+0xe4>)
 800045e:	f043 0320 	orr.w	r3, r3, #32
 8000462:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000464:	e01f      	b.n	80004a6 <GPIO_PeriClockControl+0xd6>
		else if(pGPIOx == GPIOG)
 8000466:	687b      	ldr	r3, [r7, #4]
 8000468:	4a18      	ldr	r2, [pc, #96]	; (80004cc <GPIO_PeriClockControl+0xfc>)
 800046a:	4293      	cmp	r3, r2
 800046c:	d106      	bne.n	800047c <GPIO_PeriClockControl+0xac>
			GPIOG_PCLK_EN();
 800046e:	4b11      	ldr	r3, [pc, #68]	; (80004b4 <GPIO_PeriClockControl+0xe4>)
 8000470:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000472:	4a10      	ldr	r2, [pc, #64]	; (80004b4 <GPIO_PeriClockControl+0xe4>)
 8000474:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000478:	6313      	str	r3, [r2, #48]	; 0x30
}
 800047a:	e014      	b.n	80004a6 <GPIO_PeriClockControl+0xd6>
		else if(pGPIOx == GPIOH)
 800047c:	687b      	ldr	r3, [r7, #4]
 800047e:	4a13      	ldr	r2, [pc, #76]	; (80004cc <GPIO_PeriClockControl+0xfc>)
 8000480:	4293      	cmp	r3, r2
 8000482:	d106      	bne.n	8000492 <GPIO_PeriClockControl+0xc2>
			GPIOH_PCLK_EN();
 8000484:	4b0b      	ldr	r3, [pc, #44]	; (80004b4 <GPIO_PeriClockControl+0xe4>)
 8000486:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000488:	4a0a      	ldr	r2, [pc, #40]	; (80004b4 <GPIO_PeriClockControl+0xe4>)
 800048a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800048e:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000490:	e009      	b.n	80004a6 <GPIO_PeriClockControl+0xd6>
		else if(pGPIOx == GPIOI)
 8000492:	687b      	ldr	r3, [r7, #4]
 8000494:	4a0e      	ldr	r2, [pc, #56]	; (80004d0 <GPIO_PeriClockControl+0x100>)
 8000496:	4293      	cmp	r3, r2
 8000498:	d105      	bne.n	80004a6 <GPIO_PeriClockControl+0xd6>
			GPIOI_PCLK_EN();
 800049a:	4b06      	ldr	r3, [pc, #24]	; (80004b4 <GPIO_PeriClockControl+0xe4>)
 800049c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800049e:	4a05      	ldr	r2, [pc, #20]	; (80004b4 <GPIO_PeriClockControl+0xe4>)
 80004a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80004a4:	6313      	str	r3, [r2, #48]	; 0x30
}
 80004a6:	bf00      	nop
 80004a8:	370c      	adds	r7, #12
 80004aa:	46bd      	mov	sp, r7
 80004ac:	bc80      	pop	{r7}
 80004ae:	4770      	bx	lr
 80004b0:	40020000 	.word	0x40020000
 80004b4:	40023800 	.word	0x40023800
 80004b8:	40020400 	.word	0x40020400
 80004bc:	40020800 	.word	0x40020800
 80004c0:	40020c00 	.word	0x40020c00
 80004c4:	40021000 	.word	0x40021000
 80004c8:	40021400 	.word	0x40021400
 80004cc:	40021800 	.word	0x40021800
 80004d0:	40022000 	.word	0x40022000

080004d4 <GPIO_Init>:
 * @return		- none
 *
 * @Note 		- none
 */
void GPIO_Init(GPIOx_Handle_t *pGPIOHandle)
{
 80004d4:	b580      	push	{r7, lr}
 80004d6:	b086      	sub	sp, #24
 80004d8:	af00      	add	r7, sp, #0
 80004da:	6078      	str	r0, [r7, #4]
	uint32_t temp = 0; 	//temp. registerr
 80004dc:	2300      	movs	r3, #0
 80004de:	617b      	str	r3, [r7, #20]

	//0. Enable the Peripheral Clock
	GPIO_PeriClockControl(pGPIOHandle->pGPIOx, ENABLE);
 80004e0:	687b      	ldr	r3, [r7, #4]
 80004e2:	681b      	ldr	r3, [r3, #0]
 80004e4:	2101      	movs	r1, #1
 80004e6:	4618      	mov	r0, r3
 80004e8:	f7ff ff72 	bl	80003d0 <GPIO_PeriClockControl>

	//1. configure(cấu hình) the mode of gpio pin(Datasheet 8.4.1)
	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_ANALOG)
 80004ec:	687b      	ldr	r3, [r7, #4]
 80004ee:	795b      	ldrb	r3, [r3, #5]
 80004f0:	2b03      	cmp	r3, #3
 80004f2:	d81f      	bhi.n	8000534 <GPIO_Init+0x60>
	{
		//Giá trị GPIO_PinMode thuộc 1 trong 4 trường hợp bit của Mode Register
		//this is part non-interrupt mode

		//Xác định lấy vị trí MODERx cần điều khiển dựa vào số chân Pin_Number và lưu vào biến temp
		temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 80004f4:	687b      	ldr	r3, [r7, #4]
 80004f6:	795b      	ldrb	r3, [r3, #5]
 80004f8:	461a      	mov	r2, r3
 80004fa:	687b      	ldr	r3, [r7, #4]
 80004fc:	791b      	ldrb	r3, [r3, #4]
 80004fe:	005b      	lsls	r3, r3, #1
 8000500:	fa02 f303 	lsl.w	r3, r2, r3
 8000504:	617b      	str	r3, [r7, #20]
		//Dịch 2 bit vì theo datasheet, mỗi 2 bit quản lý một pin number của GPIO port mode register
		//vd: GPIO_PinNumber=Pin0 thì sẽ kích hoạt MODER0(2*0=0->bắt đầu từ bit0)
		//GPIO_PinNumber=Pin1 thì sẽ kích hoạt MODER1(2*1=2->bắt đầu từ bit2)

		//Xóa(clear) value bit tại vị trí 2 bit muốn cấu hình
		pGPIOHandle->pGPIOx->MODER &= ~(0x3 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000506:	687b      	ldr	r3, [r7, #4]
 8000508:	681b      	ldr	r3, [r3, #0]
 800050a:	681a      	ldr	r2, [r3, #0]
 800050c:	687b      	ldr	r3, [r7, #4]
 800050e:	791b      	ldrb	r3, [r3, #4]
 8000510:	4619      	mov	r1, r3
 8000512:	2303      	movs	r3, #3
 8000514:	408b      	lsls	r3, r1
 8000516:	43db      	mvns	r3, r3
 8000518:	4619      	mov	r1, r3
 800051a:	687b      	ldr	r3, [r7, #4]
 800051c:	681b      	ldr	r3, [r3, #0]
 800051e:	400a      	ands	r2, r1
 8000520:	601a      	str	r2, [r3, #0]
		//Theo datasheet thì để reset MODERx thì ta cần thiết lập value bit là 00, Ta có: 0x3 = 11
		//~(0x3 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber); nghĩa là tiến hành đảo trạng thái 11 thành 00
		//vị trí chân Pin_Number

		//Lưu value temp vào trong thanh ghi MODER của biến pGPIOHandle
		pGPIOHandle->pGPIOx->MODER |= temp;
 8000522:	687b      	ldr	r3, [r7, #4]
 8000524:	681b      	ldr	r3, [r3, #0]
 8000526:	6819      	ldr	r1, [r3, #0]
 8000528:	687b      	ldr	r3, [r7, #4]
 800052a:	681b      	ldr	r3, [r3, #0]
 800052c:	697a      	ldr	r2, [r7, #20]
 800052e:	430a      	orrs	r2, r1
 8000530:	601a      	str	r2, [r3, #0]
 8000532:	e0b8      	b.n	80006a6 <GPIO_Init+0x1d2>
	}
	else
	{
		//This is part(phần) will code later (Interrupt mode) //các trường hợp khác từ 4->6

		if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_FT)
 8000534:	687b      	ldr	r3, [r7, #4]
 8000536:	795b      	ldrb	r3, [r3, #5]
 8000538:	2b04      	cmp	r3, #4
 800053a:	d117      	bne.n	800056c <GPIO_Init+0x98>
		{
			//1. configure the FTSR(Falling(xuống) Trigger Select Register)
			EXTI->FTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800053c:	4b43      	ldr	r3, [pc, #268]	; (800064c <GPIO_Init+0x178>)
 800053e:	68db      	ldr	r3, [r3, #12]
 8000540:	687a      	ldr	r2, [r7, #4]
 8000542:	7912      	ldrb	r2, [r2, #4]
 8000544:	4611      	mov	r1, r2
 8000546:	2201      	movs	r2, #1
 8000548:	408a      	lsls	r2, r1
 800054a:	4611      	mov	r1, r2
 800054c:	4a3f      	ldr	r2, [pc, #252]	; (800064c <GPIO_Init+0x178>)
 800054e:	430b      	orrs	r3, r1
 8000550:	60d3      	str	r3, [r2, #12]

			//1.2 Clear the corresponding(tương ứng) RTSR, việc này phòng ngừa cho tình huống sử dụng RTSR trước đó
			//và có thể gây xung đột cho lần cấu hình hiện tại
			EXTI->RTSR &= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000552:	4b3e      	ldr	r3, [pc, #248]	; (800064c <GPIO_Init+0x178>)
 8000554:	689b      	ldr	r3, [r3, #8]
 8000556:	687a      	ldr	r2, [r7, #4]
 8000558:	7912      	ldrb	r2, [r2, #4]
 800055a:	4611      	mov	r1, r2
 800055c:	2201      	movs	r2, #1
 800055e:	408a      	lsls	r2, r1
 8000560:	43d2      	mvns	r2, r2
 8000562:	4611      	mov	r1, r2
 8000564:	4a39      	ldr	r2, [pc, #228]	; (800064c <GPIO_Init+0x178>)
 8000566:	400b      	ands	r3, r1
 8000568:	6093      	str	r3, [r2, #8]
 800056a:	e035      	b.n	80005d8 <GPIO_Init+0x104>
		}
		else if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RT)
 800056c:	687b      	ldr	r3, [r7, #4]
 800056e:	795b      	ldrb	r3, [r3, #5]
 8000570:	2b05      	cmp	r3, #5
 8000572:	d117      	bne.n	80005a4 <GPIO_Init+0xd0>
		{
			//1. configure the RTSR(Rising(lên) Trigger Select Register)
			EXTI->RTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000574:	4b35      	ldr	r3, [pc, #212]	; (800064c <GPIO_Init+0x178>)
 8000576:	689b      	ldr	r3, [r3, #8]
 8000578:	687a      	ldr	r2, [r7, #4]
 800057a:	7912      	ldrb	r2, [r2, #4]
 800057c:	4611      	mov	r1, r2
 800057e:	2201      	movs	r2, #1
 8000580:	408a      	lsls	r2, r1
 8000582:	4611      	mov	r1, r2
 8000584:	4a31      	ldr	r2, [pc, #196]	; (800064c <GPIO_Init+0x178>)
 8000586:	430b      	orrs	r3, r1
 8000588:	6093      	str	r3, [r2, #8]

			//1.2 Clear the corresponding(tương ứng) FTSR, việc này phòng ngừa cho tình huống sử dụng FTSR trước đó
			//và có thể gây xung đột cho lần cấu hình hiện tại
			EXTI->FTSR &= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800058a:	4b30      	ldr	r3, [pc, #192]	; (800064c <GPIO_Init+0x178>)
 800058c:	68db      	ldr	r3, [r3, #12]
 800058e:	687a      	ldr	r2, [r7, #4]
 8000590:	7912      	ldrb	r2, [r2, #4]
 8000592:	4611      	mov	r1, r2
 8000594:	2201      	movs	r2, #1
 8000596:	408a      	lsls	r2, r1
 8000598:	43d2      	mvns	r2, r2
 800059a:	4611      	mov	r1, r2
 800059c:	4a2b      	ldr	r2, [pc, #172]	; (800064c <GPIO_Init+0x178>)
 800059e:	400b      	ands	r3, r1
 80005a0:	60d3      	str	r3, [r2, #12]
 80005a2:	e019      	b.n	80005d8 <GPIO_Init+0x104>
		}
		else if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RFT)
 80005a4:	687b      	ldr	r3, [r7, #4]
 80005a6:	795b      	ldrb	r3, [r3, #5]
 80005a8:	2b06      	cmp	r3, #6
 80005aa:	d115      	bne.n	80005d8 <GPIO_Init+0x104>
		{
			//1. configure the FTSR and RTSR
			EXTI->FTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80005ac:	4b27      	ldr	r3, [pc, #156]	; (800064c <GPIO_Init+0x178>)
 80005ae:	68db      	ldr	r3, [r3, #12]
 80005b0:	687a      	ldr	r2, [r7, #4]
 80005b2:	7912      	ldrb	r2, [r2, #4]
 80005b4:	4611      	mov	r1, r2
 80005b6:	2201      	movs	r2, #1
 80005b8:	408a      	lsls	r2, r1
 80005ba:	4611      	mov	r1, r2
 80005bc:	4a23      	ldr	r2, [pc, #140]	; (800064c <GPIO_Init+0x178>)
 80005be:	430b      	orrs	r3, r1
 80005c0:	60d3      	str	r3, [r2, #12]
			EXTI->RTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80005c2:	4b22      	ldr	r3, [pc, #136]	; (800064c <GPIO_Init+0x178>)
 80005c4:	689b      	ldr	r3, [r3, #8]
 80005c6:	687a      	ldr	r2, [r7, #4]
 80005c8:	7912      	ldrb	r2, [r2, #4]
 80005ca:	4611      	mov	r1, r2
 80005cc:	2201      	movs	r2, #1
 80005ce:	408a      	lsls	r2, r1
 80005d0:	4611      	mov	r1, r2
 80005d2:	4a1e      	ldr	r2, [pc, #120]	; (800064c <GPIO_Init+0x178>)
 80005d4:	430b      	orrs	r3, r1
 80005d6:	6093      	str	r3, [r2, #8]
		}

		//2. Configure the GPIO port selection in SYSCFG_EXTICR
		uint8_t temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 4;		//xác định SYSCFG_EXTICR_temp1 register
 80005d8:	687b      	ldr	r3, [r7, #4]
 80005da:	791b      	ldrb	r3, [r3, #4]
 80005dc:	089b      	lsrs	r3, r3, #2
 80005de:	74fb      	strb	r3, [r7, #19]
		uint8_t temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 4;		//xác định 4bit EXTI_temp2 trong SYSCFG_EXTICR_temp1
 80005e0:	687b      	ldr	r3, [r7, #4]
 80005e2:	791b      	ldrb	r3, [r3, #4]
 80005e4:	f003 0303 	and.w	r3, r3, #3
 80005e8:	74bb      	strb	r3, [r7, #18]
		uint8_t portcode = GPIO_BASEADDR_TO_CODE(pGPIOHandle->pGPIOx);		//xác định mã nhị phân xxxx để xác định GPIO port sử dụng
 80005ea:	687b      	ldr	r3, [r7, #4]
 80005ec:	681b      	ldr	r3, [r3, #0]
 80005ee:	4a18      	ldr	r2, [pc, #96]	; (8000650 <GPIO_Init+0x17c>)
 80005f0:	4293      	cmp	r3, r2
 80005f2:	d03b      	beq.n	800066c <GPIO_Init+0x198>
 80005f4:	687b      	ldr	r3, [r7, #4]
 80005f6:	681b      	ldr	r3, [r3, #0]
 80005f8:	4a16      	ldr	r2, [pc, #88]	; (8000654 <GPIO_Init+0x180>)
 80005fa:	4293      	cmp	r3, r2
 80005fc:	d024      	beq.n	8000648 <GPIO_Init+0x174>
 80005fe:	687b      	ldr	r3, [r7, #4]
 8000600:	681b      	ldr	r3, [r3, #0]
 8000602:	4a15      	ldr	r2, [pc, #84]	; (8000658 <GPIO_Init+0x184>)
 8000604:	4293      	cmp	r3, r2
 8000606:	d01d      	beq.n	8000644 <GPIO_Init+0x170>
 8000608:	687b      	ldr	r3, [r7, #4]
 800060a:	681b      	ldr	r3, [r3, #0]
 800060c:	4a13      	ldr	r2, [pc, #76]	; (800065c <GPIO_Init+0x188>)
 800060e:	4293      	cmp	r3, r2
 8000610:	d016      	beq.n	8000640 <GPIO_Init+0x16c>
 8000612:	687b      	ldr	r3, [r7, #4]
 8000614:	681b      	ldr	r3, [r3, #0]
 8000616:	4a12      	ldr	r2, [pc, #72]	; (8000660 <GPIO_Init+0x18c>)
 8000618:	4293      	cmp	r3, r2
 800061a:	d00f      	beq.n	800063c <GPIO_Init+0x168>
 800061c:	687b      	ldr	r3, [r7, #4]
 800061e:	681b      	ldr	r3, [r3, #0]
 8000620:	4a10      	ldr	r2, [pc, #64]	; (8000664 <GPIO_Init+0x190>)
 8000622:	4293      	cmp	r3, r2
 8000624:	d008      	beq.n	8000638 <GPIO_Init+0x164>
 8000626:	687b      	ldr	r3, [r7, #4]
 8000628:	681b      	ldr	r3, [r3, #0]
 800062a:	4a0f      	ldr	r2, [pc, #60]	; (8000668 <GPIO_Init+0x194>)
 800062c:	4293      	cmp	r3, r2
 800062e:	d101      	bne.n	8000634 <GPIO_Init+0x160>
 8000630:	2306      	movs	r3, #6
 8000632:	e01c      	b.n	800066e <GPIO_Init+0x19a>
 8000634:	2300      	movs	r3, #0
 8000636:	e01a      	b.n	800066e <GPIO_Init+0x19a>
 8000638:	2305      	movs	r3, #5
 800063a:	e018      	b.n	800066e <GPIO_Init+0x19a>
 800063c:	2304      	movs	r3, #4
 800063e:	e016      	b.n	800066e <GPIO_Init+0x19a>
 8000640:	2303      	movs	r3, #3
 8000642:	e014      	b.n	800066e <GPIO_Init+0x19a>
 8000644:	2302      	movs	r3, #2
 8000646:	e012      	b.n	800066e <GPIO_Init+0x19a>
 8000648:	2301      	movs	r3, #1
 800064a:	e010      	b.n	800066e <GPIO_Init+0x19a>
 800064c:	40013c00 	.word	0x40013c00
 8000650:	40020000 	.word	0x40020000
 8000654:	40020400 	.word	0x40020400
 8000658:	40020800 	.word	0x40020800
 800065c:	40020c00 	.word	0x40020c00
 8000660:	40021000 	.word	0x40021000
 8000664:	40021400 	.word	0x40021400
 8000668:	40021800 	.word	0x40021800
 800066c:	2300      	movs	r3, #0
 800066e:	747b      	strb	r3, [r7, #17]
		SYSCFG_PCLK_EN();													//Kích hoạt xung clock để cấu hình
 8000670:	4b5c      	ldr	r3, [pc, #368]	; (80007e4 <GPIO_Init+0x310>)
 8000672:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000674:	4a5b      	ldr	r2, [pc, #364]	; (80007e4 <GPIO_Init+0x310>)
 8000676:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800067a:	6453      	str	r3, [r2, #68]	; 0x44
		SYSCFG->EXTICR[temp1] = portcode << (temp2 * 4);					//Cấu hình thanh ghi SYSCFG_EXTICR_temp1
 800067c:	7c7a      	ldrb	r2, [r7, #17]
 800067e:	7cbb      	ldrb	r3, [r7, #18]
 8000680:	009b      	lsls	r3, r3, #2
 8000682:	fa02 f103 	lsl.w	r1, r2, r3
 8000686:	4a58      	ldr	r2, [pc, #352]	; (80007e8 <GPIO_Init+0x314>)
 8000688:	7cfb      	ldrb	r3, [r7, #19]
 800068a:	3302      	adds	r3, #2
 800068c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

		//3. Eanble the exti interrupt delivery(chuyển, sử dụng) by using IMR(Interrupt Masking Register)
		EXTI->IMR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000690:	4b56      	ldr	r3, [pc, #344]	; (80007ec <GPIO_Init+0x318>)
 8000692:	681b      	ldr	r3, [r3, #0]
 8000694:	687a      	ldr	r2, [r7, #4]
 8000696:	7912      	ldrb	r2, [r2, #4]
 8000698:	4611      	mov	r1, r2
 800069a:	2201      	movs	r2, #1
 800069c:	408a      	lsls	r2, r1
 800069e:	4611      	mov	r1, r2
 80006a0:	4a52      	ldr	r2, [pc, #328]	; (80007ec <GPIO_Init+0x318>)
 80006a2:	430b      	orrs	r3, r1
 80006a4:	6013      	str	r3, [r2, #0]

	}
	//Reset biến temp để sử dụng cho các lệnh khác trong hàm
	temp = 0;
 80006a6:	2300      	movs	r3, #0
 80006a8:	617b      	str	r3, [r7, #20]

	//2. configure the speed (Datasheet 8.4.3)
	//Xác định lấy vị trí OSPEEDRx cần điều khiển dựa vào số chân Pin_Number và lưu vào biến temp
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinSpeed << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 80006aa:	687b      	ldr	r3, [r7, #4]
 80006ac:	799b      	ldrb	r3, [r3, #6]
 80006ae:	461a      	mov	r2, r3
 80006b0:	687b      	ldr	r3, [r7, #4]
 80006b2:	791b      	ldrb	r3, [r3, #4]
 80006b4:	005b      	lsls	r3, r3, #1
 80006b6:	fa02 f303 	lsl.w	r3, r2, r3
 80006ba:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OSPEEDR &=  ~(0x3 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);	//Clearing bit field
 80006bc:	687b      	ldr	r3, [r7, #4]
 80006be:	681b      	ldr	r3, [r3, #0]
 80006c0:	689a      	ldr	r2, [r3, #8]
 80006c2:	687b      	ldr	r3, [r7, #4]
 80006c4:	791b      	ldrb	r3, [r3, #4]
 80006c6:	4619      	mov	r1, r3
 80006c8:	2303      	movs	r3, #3
 80006ca:	408b      	lsls	r3, r1
 80006cc:	43db      	mvns	r3, r3
 80006ce:	4619      	mov	r1, r3
 80006d0:	687b      	ldr	r3, [r7, #4]
 80006d2:	681b      	ldr	r3, [r3, #0]
 80006d4:	400a      	ands	r2, r1
 80006d6:	609a      	str	r2, [r3, #8]
	pGPIOHandle->pGPIOx->OSPEEDR |= temp;
 80006d8:	687b      	ldr	r3, [r7, #4]
 80006da:	681b      	ldr	r3, [r3, #0]
 80006dc:	6899      	ldr	r1, [r3, #8]
 80006de:	687b      	ldr	r3, [r7, #4]
 80006e0:	681b      	ldr	r3, [r3, #0]
 80006e2:	697a      	ldr	r2, [r7, #20]
 80006e4:	430a      	orrs	r2, r1
 80006e6:	609a      	str	r2, [r3, #8]
	//=> Lúc này ta đã xác định(cấu hình) đc speed(OSPEEDRx) của GPIO tùy thuộc vào pin_number bạn muốn control
	temp = 0;
 80006e8:	2300      	movs	r3, #0
 80006ea:	617b      	str	r3, [r7, #20]

	//3. configure the pullup-pulldown settings (Datasheet 8.4.4)
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinPuPdControl << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 80006ec:	687b      	ldr	r3, [r7, #4]
 80006ee:	79db      	ldrb	r3, [r3, #7]
 80006f0:	461a      	mov	r2, r3
 80006f2:	687b      	ldr	r3, [r7, #4]
 80006f4:	791b      	ldrb	r3, [r3, #4]
 80006f6:	005b      	lsls	r3, r3, #1
 80006f8:	fa02 f303 	lsl.w	r3, r2, r3
 80006fc:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->PUPDR &=  ~(0x3 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80006fe:	687b      	ldr	r3, [r7, #4]
 8000700:	681b      	ldr	r3, [r3, #0]
 8000702:	68da      	ldr	r2, [r3, #12]
 8000704:	687b      	ldr	r3, [r7, #4]
 8000706:	791b      	ldrb	r3, [r3, #4]
 8000708:	4619      	mov	r1, r3
 800070a:	2303      	movs	r3, #3
 800070c:	408b      	lsls	r3, r1
 800070e:	43db      	mvns	r3, r3
 8000710:	4619      	mov	r1, r3
 8000712:	687b      	ldr	r3, [r7, #4]
 8000714:	681b      	ldr	r3, [r3, #0]
 8000716:	400a      	ands	r2, r1
 8000718:	60da      	str	r2, [r3, #12]
	pGPIOHandle->pGPIOx->PUPDR |= temp;
 800071a:	687b      	ldr	r3, [r7, #4]
 800071c:	681b      	ldr	r3, [r3, #0]
 800071e:	68d9      	ldr	r1, [r3, #12]
 8000720:	687b      	ldr	r3, [r7, #4]
 8000722:	681b      	ldr	r3, [r3, #0]
 8000724:	697a      	ldr	r2, [r7, #20]
 8000726:	430a      	orrs	r2, r1
 8000728:	60da      	str	r2, [r3, #12]
	temp = 0;
 800072a:	2300      	movs	r3, #0
 800072c:	617b      	str	r3, [r7, #20]

	//4. configure the optype (Datasheet 8.4.2)
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinOPType << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800072e:	687b      	ldr	r3, [r7, #4]
 8000730:	7a1b      	ldrb	r3, [r3, #8]
 8000732:	461a      	mov	r2, r3
 8000734:	687b      	ldr	r3, [r7, #4]
 8000736:	791b      	ldrb	r3, [r3, #4]
 8000738:	fa02 f303 	lsl.w	r3, r2, r3
 800073c:	617b      	str	r3, [r7, #20]
	//Dịch 1 bit vì theo datasheet, mỗi 1 bit quản lý một pin number của GPIO port mode register
	pGPIOHandle->pGPIOx->OTYPER &=  ~(0x1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber); //Clearing bit field
 800073e:	687b      	ldr	r3, [r7, #4]
 8000740:	681b      	ldr	r3, [r3, #0]
 8000742:	685a      	ldr	r2, [r3, #4]
 8000744:	687b      	ldr	r3, [r7, #4]
 8000746:	791b      	ldrb	r3, [r3, #4]
 8000748:	4619      	mov	r1, r3
 800074a:	2301      	movs	r3, #1
 800074c:	408b      	lsls	r3, r1
 800074e:	43db      	mvns	r3, r3
 8000750:	4619      	mov	r1, r3
 8000752:	687b      	ldr	r3, [r7, #4]
 8000754:	681b      	ldr	r3, [r3, #0]
 8000756:	400a      	ands	r2, r1
 8000758:	605a      	str	r2, [r3, #4]
	//~(0x1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber); nghĩa là tiến hành đảo trạng thái 1 thành 0
	//vị trí chân Pin_Number
	pGPIOHandle->pGPIOx->OTYPER |= temp;
 800075a:	687b      	ldr	r3, [r7, #4]
 800075c:	681b      	ldr	r3, [r3, #0]
 800075e:	6859      	ldr	r1, [r3, #4]
 8000760:	687b      	ldr	r3, [r7, #4]
 8000762:	681b      	ldr	r3, [r3, #0]
 8000764:	697a      	ldr	r2, [r7, #20]
 8000766:	430a      	orrs	r2, r1
 8000768:	605a      	str	r2, [r3, #4]
	temp = 0;
 800076a:	2300      	movs	r3, #0
 800076c:	617b      	str	r3, [r7, #20]

	//5. configure the alt functionality
	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_ALTFN)
 800076e:	687b      	ldr	r3, [r7, #4]
 8000770:	795b      	ldrb	r3, [r3, #5]
 8000772:	2b02      	cmp	r3, #2
 8000774:	d132      	bne.n	80007dc <GPIO_Init+0x308>
		//Chế độ này đc thực thi khi và chỉ khi bit MODERx đc thiết lập GPIO_MODE_ALTFN

		uint32_t temp1,temp2;

		//Xác định thanh ghi cần sử dụng là GPIOx_AFRH ->AFR[1] hay GPIOx_AFRL ->AFR[0]
		temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 8;
 8000776:	687b      	ldr	r3, [r7, #4]
 8000778:	791b      	ldrb	r3, [r3, #4]
 800077a:	08db      	lsrs	r3, r3, #3
 800077c:	b2db      	uxtb	r3, r3
 800077e:	60fb      	str	r3, [r7, #12]

		//Xác định vị trí cụm 4bit cần sử dụng ở vị trí nào trong thanh ghi
		temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 8;
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	791b      	ldrb	r3, [r3, #4]
 8000784:	f003 0307 	and.w	r3, r3, #7
 8000788:	60bb      	str	r3, [r7, #8]

		//Clearing bit field
		pGPIOHandle->pGPIOx->AFR[temp1] &= ~(0xF << (4* temp2));   //0xF = 1111, đảo 1111->0000 tại vị trí 4*temp2
 800078a:	687b      	ldr	r3, [r7, #4]
 800078c:	681b      	ldr	r3, [r3, #0]
 800078e:	68fa      	ldr	r2, [r7, #12]
 8000790:	3208      	adds	r2, #8
 8000792:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000796:	68bb      	ldr	r3, [r7, #8]
 8000798:	009b      	lsls	r3, r3, #2
 800079a:	210f      	movs	r1, #15
 800079c:	fa01 f303 	lsl.w	r3, r1, r3
 80007a0:	43db      	mvns	r3, r3
 80007a2:	4619      	mov	r1, r3
 80007a4:	687b      	ldr	r3, [r7, #4]
 80007a6:	681b      	ldr	r3, [r3, #0]
 80007a8:	4011      	ands	r1, r2
 80007aa:	68fa      	ldr	r2, [r7, #12]
 80007ac:	3208      	adds	r2, #8
 80007ae:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

		//Lưu cấu hình AFR vào trong con trỏ pGPIOHandle
		pGPIOHandle->pGPIOx->AFR[temp1] |= (pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFunMode << (4* temp2));
 80007b2:	687b      	ldr	r3, [r7, #4]
 80007b4:	681b      	ldr	r3, [r3, #0]
 80007b6:	68fa      	ldr	r2, [r7, #12]
 80007b8:	3208      	adds	r2, #8
 80007ba:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80007be:	687b      	ldr	r3, [r7, #4]
 80007c0:	7a5b      	ldrb	r3, [r3, #9]
 80007c2:	4619      	mov	r1, r3
 80007c4:	68bb      	ldr	r3, [r7, #8]
 80007c6:	009b      	lsls	r3, r3, #2
 80007c8:	fa01 f303 	lsl.w	r3, r1, r3
 80007cc:	4619      	mov	r1, r3
 80007ce:	687b      	ldr	r3, [r7, #4]
 80007d0:	681b      	ldr	r3, [r3, #0]
 80007d2:	4311      	orrs	r1, r2
 80007d4:	68fa      	ldr	r2, [r7, #12]
 80007d6:	3208      	adds	r2, #8
 80007d8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	}
}
 80007dc:	bf00      	nop
 80007de:	3718      	adds	r7, #24
 80007e0:	46bd      	mov	sp, r7
 80007e2:	bd80      	pop	{r7, pc}
 80007e4:	40023800 	.word	0x40023800
 80007e8:	40013800 	.word	0x40013800
 80007ec:	40013c00 	.word	0x40013c00

080007f0 <GPIO_ReadFromInputPin>:
 * @return		- value of read in pin_number (0 or 1)
 *
 * @Note 		- none
 */
uint8_t GPIO_ReadFromInputPin(GPIO_RegDef_t *pGPIOx, uint8_t PinNumber)
{
 80007f0:	b480      	push	{r7}
 80007f2:	b085      	sub	sp, #20
 80007f4:	af00      	add	r7, sp, #0
 80007f6:	6078      	str	r0, [r7, #4]
 80007f8:	460b      	mov	r3, r1
 80007fa:	70fb      	strb	r3, [r7, #3]
	uint8_t value;			//biến lưu value đọc đc từ pin
	value = (uint8_t)((pGPIOx->IDR >> PinNumber) & 0x00000001);
 80007fc:	687b      	ldr	r3, [r7, #4]
 80007fe:	691a      	ldr	r2, [r3, #16]
 8000800:	78fb      	ldrb	r3, [r7, #3]
 8000802:	fa22 f303 	lsr.w	r3, r2, r3
 8000806:	b2db      	uxtb	r3, r3
 8000808:	f003 0301 	and.w	r3, r3, #1
 800080c:	73fb      	strb	r3, [r7, #15]
	return value;
 800080e:	7bfb      	ldrb	r3, [r7, #15]

	//((pGPIOx->IDR >> PinNumber): Phần này dịch chuyển giá trị IDR sang phải của vị trí PinNumber đầu vào,
	//căn chỉnh giá trị đầu vào của chân mong muốn về bit ngoài cùng bên phải(bit0).
	//& 0x00000001: Thao tác AND theo bit này che giấu tất cả ngoại trừ bit ngoài cùng bên phải(bit0),
	//trích xuất hiệu quả giá trị đầu vào của mã pin được chỉ định.
}
 8000810:	4618      	mov	r0, r3
 8000812:	3714      	adds	r7, #20
 8000814:	46bd      	mov	sp, r7
 8000816:	bc80      	pop	{r7}
 8000818:	4770      	bx	lr
	...

0800081c <SPI_PeriClockControl>:
 * @return		- none
 *
 * @Note 		- none
 */
void SPI_PeriClockControl(SPI_RegDef_t *pSPIx, uint8_t EnorDi)
{
 800081c:	b480      	push	{r7}
 800081e:	b083      	sub	sp, #12
 8000820:	af00      	add	r7, sp, #0
 8000822:	6078      	str	r0, [r7, #4]
 8000824:	460b      	mov	r3, r1
 8000826:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE)
 8000828:	78fb      	ldrb	r3, [r7, #3]
 800082a:	2b01      	cmp	r3, #1
 800082c:	d11f      	bne.n	800086e <SPI_PeriClockControl+0x52>
	{
		if(pSPIx == SPI1)
 800082e:	687b      	ldr	r3, [r7, #4]
 8000830:	4a11      	ldr	r2, [pc, #68]	; (8000878 <SPI_PeriClockControl+0x5c>)
 8000832:	4293      	cmp	r3, r2
 8000834:	d106      	bne.n	8000844 <SPI_PeriClockControl+0x28>
		{
			SPI1_PCLK_EN();		//hàm đã đc define trong stm32f407xx.h(lớp Driver)
 8000836:	4b11      	ldr	r3, [pc, #68]	; (800087c <SPI_PeriClockControl+0x60>)
 8000838:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800083a:	4a10      	ldr	r2, [pc, #64]	; (800087c <SPI_PeriClockControl+0x60>)
 800083c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000840:	6453      	str	r3, [r2, #68]	; 0x44
	else
	{
		//Todo: (Disable Status)

	}
}
 8000842:	e014      	b.n	800086e <SPI_PeriClockControl+0x52>
		else if(pSPIx == SPI2)
 8000844:	687b      	ldr	r3, [r7, #4]
 8000846:	4a0e      	ldr	r2, [pc, #56]	; (8000880 <SPI_PeriClockControl+0x64>)
 8000848:	4293      	cmp	r3, r2
 800084a:	d106      	bne.n	800085a <SPI_PeriClockControl+0x3e>
			SPI2_PCLK_EN();
 800084c:	4b0b      	ldr	r3, [pc, #44]	; (800087c <SPI_PeriClockControl+0x60>)
 800084e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000850:	4a0a      	ldr	r2, [pc, #40]	; (800087c <SPI_PeriClockControl+0x60>)
 8000852:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000856:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000858:	e009      	b.n	800086e <SPI_PeriClockControl+0x52>
		else if(pSPIx == SPI3)
 800085a:	687b      	ldr	r3, [r7, #4]
 800085c:	4a09      	ldr	r2, [pc, #36]	; (8000884 <SPI_PeriClockControl+0x68>)
 800085e:	4293      	cmp	r3, r2
 8000860:	d105      	bne.n	800086e <SPI_PeriClockControl+0x52>
			SPI3_PCLK_EN();
 8000862:	4b06      	ldr	r3, [pc, #24]	; (800087c <SPI_PeriClockControl+0x60>)
 8000864:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000866:	4a05      	ldr	r2, [pc, #20]	; (800087c <SPI_PeriClockControl+0x60>)
 8000868:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800086c:	6413      	str	r3, [r2, #64]	; 0x40
}
 800086e:	bf00      	nop
 8000870:	370c      	adds	r7, #12
 8000872:	46bd      	mov	sp, r7
 8000874:	bc80      	pop	{r7}
 8000876:	4770      	bx	lr
 8000878:	40013000 	.word	0x40013000
 800087c:	40023800 	.word	0x40023800
 8000880:	40003800 	.word	0x40003800
 8000884:	40003c00 	.word	0x40003c00

08000888 <SPI_Init>:
 * @return		- none
 *
 * @Note 		- none
 */
void SPI_Init(SPI_Handle_t *pSPIHandle)
{
 8000888:	b580      	push	{r7, lr}
 800088a:	b084      	sub	sp, #16
 800088c:	af00      	add	r7, sp, #0
 800088e:	6078      	str	r0, [r7, #4]
	//First lets configure the SPI_CR1 register, biến tạm đại diện vị trí bit muốn cấu hình CR1 Register
	uint32_t tempreg = 0;
 8000890:	2300      	movs	r3, #0
 8000892:	60fb      	str	r3, [r7, #12]

	//0.Enable CLock for Peripheral SPI
	SPI_PeriClockControl(pSPIHandle->pSPIx, ENABLE);
 8000894:	687b      	ldr	r3, [r7, #4]
 8000896:	681b      	ldr	r3, [r3, #0]
 8000898:	2101      	movs	r1, #1
 800089a:	4618      	mov	r0, r3
 800089c:	f7ff ffbe 	bl	800081c <SPI_PeriClockControl>

	//1.Configure the device mode , MSTR[bit2]
	tempreg |=  pSPIHandle->SPIConfig.SPI_DeviceMode << SPI_CR1_MSTR;  //Chỉ dịch tới vị trí bit ko mà set bit
 80008a0:	687b      	ldr	r3, [r7, #4]
 80008a2:	791b      	ldrb	r3, [r3, #4]
 80008a4:	009b      	lsls	r3, r3, #2
 80008a6:	461a      	mov	r2, r3
 80008a8:	68fb      	ldr	r3, [r7, #12]
 80008aa:	4313      	orrs	r3, r2
 80008ac:	60fb      	str	r3, [r7, #12]
	//Ban đầu sẽ cấu hình device là Slave và vì tempreg đã bằng 0 nên chỉ cần dịch 2 bit

	//2. Configure the bus config , cấu hình mode theo chuẩn giao tiếp
	if(pSPIHandle->SPIConfig.SPI_BusConfig == SPI_BUS_CONFIG_FD)
 80008ae:	687b      	ldr	r3, [r7, #4]
 80008b0:	795b      	ldrb	r3, [r3, #5]
 80008b2:	2b01      	cmp	r3, #1
 80008b4:	d104      	bne.n	80008c0 <SPI_Init+0x38>
	{
		//BIDIMODE[bit15] should be cleared
		tempreg &= ~(1 << SPI_CR1_BIDIMODE);
 80008b6:	68fb      	ldr	r3, [r7, #12]
 80008b8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80008bc:	60fb      	str	r3, [r7, #12]
 80008be:	e014      	b.n	80008ea <SPI_Init+0x62>
	}else if(pSPIHandle->SPIConfig.SPI_BusConfig == SPI_BUS_CONFIG_HD)
 80008c0:	687b      	ldr	r3, [r7, #4]
 80008c2:	795b      	ldrb	r3, [r3, #5]
 80008c4:	2b02      	cmp	r3, #2
 80008c6:	d104      	bne.n	80008d2 <SPI_Init+0x4a>
	{
		//BIDIMODE[bit15] should be set
		tempreg |= (1 << SPI_CR1_BIDIMODE);
 80008c8:	68fb      	ldr	r3, [r7, #12]
 80008ca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80008ce:	60fb      	str	r3, [r7, #12]
 80008d0:	e00b      	b.n	80008ea <SPI_Init+0x62>

	}else if(pSPIHandle->SPIConfig.SPI_BusConfig == SPI_BUS_CONFIG_SIMPLEX_RXONLY)
 80008d2:	687b      	ldr	r3, [r7, #4]
 80008d4:	795b      	ldrb	r3, [r3, #5]
 80008d6:	2b03      	cmp	r3, #3
 80008d8:	d107      	bne.n	80008ea <SPI_Init+0x62>
	{
		//BIDIMODE[bit15] should be cleared
		tempreg &= ~(1 << SPI_CR1_BIDIMODE);
 80008da:	68fb      	ldr	r3, [r7, #12]
 80008dc:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80008e0:	60fb      	str	r3, [r7, #12]

		//RX_ONLY[bit10] must be set
		tempreg |= (1 << SPI_CR1_RXONLY);
 80008e2:	68fb      	ldr	r3, [r7, #12]
 80008e4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80008e8:	60fb      	str	r3, [r7, #12]
	}

	//3. Configure the SPI serial clock (baud rate), BR[bit2:0], mặc định Div2, bit[2:0] = 0
	tempreg |= pSPIHandle->SPIConfig.SPI_SclkSpeed << SPI_CR1_BR;  		//Chỉ dịch tới vị trí bit mà ko set bit
 80008ea:	687b      	ldr	r3, [r7, #4]
 80008ec:	799b      	ldrb	r3, [r3, #6]
 80008ee:	00db      	lsls	r3, r3, #3
 80008f0:	461a      	mov	r2, r3
 80008f2:	68fb      	ldr	r3, [r7, #12]
 80008f4:	4313      	orrs	r3, r2
 80008f6:	60fb      	str	r3, [r7, #12]

	//4. Configure the DFF, DFF[bit11]
	tempreg |= pSPIHandle->SPIConfig.SPI_DFF << SPI_CR1_DFF;			//Chỉ dịch tới vị trí bit ko mà set bit
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	79db      	ldrb	r3, [r3, #7]
 80008fc:	02db      	lsls	r3, r3, #11
 80008fe:	461a      	mov	r2, r3
 8000900:	68fb      	ldr	r3, [r7, #12]
 8000902:	4313      	orrs	r3, r2
 8000904:	60fb      	str	r3, [r7, #12]

	//5. Configure the CPOL, CPOL[bit1]
	tempreg |= pSPIHandle->SPIConfig.SPI_CPOL << SPI_CR1_CPOL;			//Chỉ dịch tới vị trí bit ko mà set bit
 8000906:	687b      	ldr	r3, [r7, #4]
 8000908:	7a1b      	ldrb	r3, [r3, #8]
 800090a:	005b      	lsls	r3, r3, #1
 800090c:	461a      	mov	r2, r3
 800090e:	68fb      	ldr	r3, [r7, #12]
 8000910:	4313      	orrs	r3, r2
 8000912:	60fb      	str	r3, [r7, #12]

	//6. Configure the CPHA, CPHA[bit0]
	tempreg |= pSPIHandle->SPIConfig.SPI_CPHA << SPI_CR1_CPHA;			//Chỉ dịch tới vị trí bit ko mà set bit
 8000914:	687b      	ldr	r3, [r7, #4]
 8000916:	7a5b      	ldrb	r3, [r3, #9]
 8000918:	461a      	mov	r2, r3
 800091a:	68fb      	ldr	r3, [r7, #12]
 800091c:	4313      	orrs	r3, r2
 800091e:	60fb      	str	r3, [r7, #12]

	//Sau bước 6, bạn sẽ có cấu hình tạm(theo ý muốn lập trình viên) của thanh ghi CR1 là value biến tempreg

	//7. Lưu thông tin đã cấu hình biến tempreg vào CR1 của pSPIx muốn triển khai
	pSPIHandle->pSPIx->CR1 = tempreg;
 8000920:	687b      	ldr	r3, [r7, #4]
 8000922:	681b      	ldr	r3, [r3, #0]
 8000924:	68fa      	ldr	r2, [r7, #12]
 8000926:	601a      	str	r2, [r3, #0]
}
 8000928:	bf00      	nop
 800092a:	3710      	adds	r7, #16
 800092c:	46bd      	mov	sp, r7
 800092e:	bd80      	pop	{r7, pc}

08000930 <SPI_GetFlagStatus>:
 * @return		- Trạng thái đã empty(Set) hay not empty(reset)
 *
 * @Note 		- none
 */
uint8_t SPI_GetFlagStatus(SPI_RegDef_t *pSPIx, uint32_t FlagName)
{
 8000930:	b480      	push	{r7}
 8000932:	b083      	sub	sp, #12
 8000934:	af00      	add	r7, sp, #0
 8000936:	6078      	str	r0, [r7, #4]
 8000938:	6039      	str	r1, [r7, #0]
	if(pSPIx->SR & FlagName)  //Kiểm tra value của pSPIx->SR and với FlagName
 800093a:	687b      	ldr	r3, [r7, #4]
 800093c:	689a      	ldr	r2, [r3, #8]
 800093e:	683b      	ldr	r3, [r7, #0]
 8000940:	4013      	ands	r3, r2
 8000942:	2b00      	cmp	r3, #0
 8000944:	d001      	beq.n	800094a <SPI_GetFlagStatus+0x1a>
	{
		return FLAG_SET; //TH1:nếu kết quả là 1 thì TXE[1]==1 -> trả về SET, thoát vòng lặp
 8000946:	2301      	movs	r3, #1
 8000948:	e000      	b.n	800094c <SPI_GetFlagStatus+0x1c>
						 //TH2: kiểm tra BSY có đang busy truyền hay không
	}
	return FLAG_RESET;		//nếu kết quả là 0 thì tiếp tục vòng lặp
 800094a:	2300      	movs	r3, #0
}
 800094c:	4618      	mov	r0, r3
 800094e:	370c      	adds	r7, #12
 8000950:	46bd      	mov	sp, r7
 8000952:	bc80      	pop	{r7}
 8000954:	4770      	bx	lr

08000956 <SPI_SendData>:
 * @return		- none
 *
 * @Note 		- This is Blocking Call
 */
void SPI_SendData(SPI_RegDef_t *pSPIx, uint8_t *pTxBuffer, uint32_t Len)
{
 8000956:	b580      	push	{r7, lr}
 8000958:	b084      	sub	sp, #16
 800095a:	af00      	add	r7, sp, #0
 800095c:	60f8      	str	r0, [r7, #12]
 800095e:	60b9      	str	r1, [r7, #8]
 8000960:	607a      	str	r2, [r7, #4]
	while(Len > 0)
 8000962:	e027      	b.n	80009b4 <SPI_SendData+0x5e>
	{
		//1. Wait until TXE[1] of SPI_SR register is set
		//while(! (pSPIx->SR & (1 << 1) ));												//C1
		while(SPI_GetFlagStatus(pSPIx, SPI_TXE_FLAG) == FLAG_RESET);					//C2
 8000964:	bf00      	nop
 8000966:	2102      	movs	r1, #2
 8000968:	68f8      	ldr	r0, [r7, #12]
 800096a:	f7ff ffe1 	bl	8000930 <SPI_GetFlagStatus>
 800096e:	4603      	mov	r3, r0
 8000970:	2b00      	cmp	r3, #0
 8000972:	d0f8      	beq.n	8000966 <SPI_SendData+0x10>


		//2. Check the DFF bit in CR1
		if(pSPIx->CR1 & (1 << SPI_CR1_DFF)) //dịch bit đến vị trí 11 và And với thanh ghi CR1 để kiểm tra value DFF bit
 8000974:	68fb      	ldr	r3, [r7, #12]
 8000976:	681b      	ldr	r3, [r3, #0]
 8000978:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800097c:	2b00      	cmp	r3, #0
 800097e:	d00e      	beq.n	800099e <SPI_SendData+0x48>
		{
			//16 bit DFF
			//3. load the data in to the DR(SPI Data Register), đẩy data từ TxBuffer -> DR
			pSPIx->DR = *((uint16_t*)pTxBuffer);	//ép kiểu vì param pTxBuffer đầu vào chỉ 8bit
 8000980:	68bb      	ldr	r3, [r7, #8]
 8000982:	881b      	ldrh	r3, [r3, #0]
 8000984:	461a      	mov	r2, r3
 8000986:	68fb      	ldr	r3, [r7, #12]
 8000988:	60da      	str	r2, [r3, #12]
			Len--;									//Trừ 2 đơn vị độ dài vì đã gửi 2 bit
 800098a:	687b      	ldr	r3, [r7, #4]
 800098c:	3b01      	subs	r3, #1
 800098e:	607b      	str	r3, [r7, #4]
			Len--;
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	3b01      	subs	r3, #1
 8000994:	607b      	str	r3, [r7, #4]
			(uint16_t*)pTxBuffer++;			//tăng địa chỉ bộ đệm chuẩn bị lần gửi tiếp theo
 8000996:	68bb      	ldr	r3, [r7, #8]
 8000998:	3301      	adds	r3, #1
 800099a:	60bb      	str	r3, [r7, #8]
 800099c:	e00a      	b.n	80009b4 <SPI_SendData+0x5e>
		}
		else
		{
			//8 bit DFF
			//3. load the data in to the DR(SPI Data Register), đẩy data từ TxBuffer -> DR
			pSPIx->DR = *pTxBuffer;
 800099e:	68bb      	ldr	r3, [r7, #8]
 80009a0:	781b      	ldrb	r3, [r3, #0]
 80009a2:	461a      	mov	r2, r3
 80009a4:	68fb      	ldr	r3, [r7, #12]
 80009a6:	60da      	str	r2, [r3, #12]
			Len--;
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	3b01      	subs	r3, #1
 80009ac:	607b      	str	r3, [r7, #4]
			pTxBuffer++;					//tăng địa chỉ bộ đệm chuẩn bị lần gửi tiếp theo
 80009ae:	68bb      	ldr	r3, [r7, #8]
 80009b0:	3301      	adds	r3, #1
 80009b2:	60bb      	str	r3, [r7, #8]
	while(Len > 0)
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	2b00      	cmp	r3, #0
 80009b8:	d1d4      	bne.n	8000964 <SPI_SendData+0xe>
		}
	}
}
 80009ba:	bf00      	nop
 80009bc:	bf00      	nop
 80009be:	3710      	adds	r7, #16
 80009c0:	46bd      	mov	sp, r7
 80009c2:	bd80      	pop	{r7, pc}

080009c4 <SPI_PeripheralControl>:
 * @return		- none
 *
 * @Note 		- none
 */
void SPI_PeripheralControl(SPI_RegDef_t *pSPIx, uint8_t EnorDi)
{
 80009c4:	b480      	push	{r7}
 80009c6:	b083      	sub	sp, #12
 80009c8:	af00      	add	r7, sp, #0
 80009ca:	6078      	str	r0, [r7, #4]
 80009cc:	460b      	mov	r3, r1
 80009ce:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE)
 80009d0:	78fb      	ldrb	r3, [r7, #3]
 80009d2:	2b01      	cmp	r3, #1
 80009d4:	d106      	bne.n	80009e4 <SPI_PeripheralControl+0x20>
	{
		pSPIx->CR1 |= (1 << SPI_CR1_SPE); 		//1= Enable SPI
 80009d6:	687b      	ldr	r3, [r7, #4]
 80009d8:	681b      	ldr	r3, [r3, #0]
 80009da:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80009de:	687b      	ldr	r3, [r7, #4]
 80009e0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		pSPIx->CR1 &= ~(1 << SPI_CR1_SPE); 		//0= Disable SPI
	}
}
 80009e2:	e005      	b.n	80009f0 <SPI_PeripheralControl+0x2c>
		pSPIx->CR1 &= ~(1 << SPI_CR1_SPE); 		//0= Disable SPI
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	681b      	ldr	r3, [r3, #0]
 80009e8:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 80009ec:	687b      	ldr	r3, [r7, #4]
 80009ee:	601a      	str	r2, [r3, #0]
}
 80009f0:	bf00      	nop
 80009f2:	370c      	adds	r7, #12
 80009f4:	46bd      	mov	sp, r7
 80009f6:	bc80      	pop	{r7}
 80009f8:	4770      	bx	lr

080009fa <SPI_SSOEConfig>:
 * @return		- none
 *
 * @Note 		- none
 */
void SPI_SSOEConfig(SPI_RegDef_t *pSPIx, uint8_t EnorDi)
{
 80009fa:	b480      	push	{r7}
 80009fc:	b083      	sub	sp, #12
 80009fe:	af00      	add	r7, sp, #0
 8000a00:	6078      	str	r0, [r7, #4]
 8000a02:	460b      	mov	r3, r1
 8000a04:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE)
 8000a06:	78fb      	ldrb	r3, [r7, #3]
 8000a08:	2b01      	cmp	r3, #1
 8000a0a:	d106      	bne.n	8000a1a <SPI_SSOEConfig+0x20>
	{
		pSPIx->CR2 |= (1 << SPI_CR2_SSOE); 		//Enable SSOE=1(điều kiện) -> NSS=Low
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	685b      	ldr	r3, [r3, #4]
 8000a10:	f043 0204 	orr.w	r2, r3, #4
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	605a      	str	r2, [r3, #4]
	}
	else
	{
		pSPIx->CR2 &= ~(1 << SPI_CR2_SSOE); 		//Disable SSOE=0(điều kiện) -> NSS=High
	}
}
 8000a18:	e005      	b.n	8000a26 <SPI_SSOEConfig+0x2c>
		pSPIx->CR2 &= ~(1 << SPI_CR2_SSOE); 		//Disable SSOE=0(điều kiện) -> NSS=High
 8000a1a:	687b      	ldr	r3, [r7, #4]
 8000a1c:	685b      	ldr	r3, [r3, #4]
 8000a1e:	f023 0204 	bic.w	r2, r3, #4
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	605a      	str	r2, [r3, #4]
}
 8000a26:	bf00      	nop
 8000a28:	370c      	adds	r7, #12
 8000a2a:	46bd      	mov	sp, r7
 8000a2c:	bc80      	pop	{r7}
 8000a2e:	4770      	bx	lr

08000a30 <__libc_init_array>:
 8000a30:	b570      	push	{r4, r5, r6, lr}
 8000a32:	4d0d      	ldr	r5, [pc, #52]	; (8000a68 <__libc_init_array+0x38>)
 8000a34:	4c0d      	ldr	r4, [pc, #52]	; (8000a6c <__libc_init_array+0x3c>)
 8000a36:	1b64      	subs	r4, r4, r5
 8000a38:	10a4      	asrs	r4, r4, #2
 8000a3a:	2600      	movs	r6, #0
 8000a3c:	42a6      	cmp	r6, r4
 8000a3e:	d109      	bne.n	8000a54 <__libc_init_array+0x24>
 8000a40:	4d0b      	ldr	r5, [pc, #44]	; (8000a70 <__libc_init_array+0x40>)
 8000a42:	4c0c      	ldr	r4, [pc, #48]	; (8000a74 <__libc_init_array+0x44>)
 8000a44:	f000 f818 	bl	8000a78 <_init>
 8000a48:	1b64      	subs	r4, r4, r5
 8000a4a:	10a4      	asrs	r4, r4, #2
 8000a4c:	2600      	movs	r6, #0
 8000a4e:	42a6      	cmp	r6, r4
 8000a50:	d105      	bne.n	8000a5e <__libc_init_array+0x2e>
 8000a52:	bd70      	pop	{r4, r5, r6, pc}
 8000a54:	f855 3b04 	ldr.w	r3, [r5], #4
 8000a58:	4798      	blx	r3
 8000a5a:	3601      	adds	r6, #1
 8000a5c:	e7ee      	b.n	8000a3c <__libc_init_array+0xc>
 8000a5e:	f855 3b04 	ldr.w	r3, [r5], #4
 8000a62:	4798      	blx	r3
 8000a64:	3601      	adds	r6, #1
 8000a66:	e7f2      	b.n	8000a4e <__libc_init_array+0x1e>
 8000a68:	08000a9c 	.word	0x08000a9c
 8000a6c:	08000a9c 	.word	0x08000a9c
 8000a70:	08000a9c 	.word	0x08000a9c
 8000a74:	08000aa0 	.word	0x08000aa0

08000a78 <_init>:
 8000a78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000a7a:	bf00      	nop
 8000a7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000a7e:	bc08      	pop	{r3}
 8000a80:	469e      	mov	lr, r3
 8000a82:	4770      	bx	lr

08000a84 <_fini>:
 8000a84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000a86:	bf00      	nop
 8000a88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000a8a:	bc08      	pop	{r3}
 8000a8c:	469e      	mov	lr, r3
 8000a8e:	4770      	bx	lr
