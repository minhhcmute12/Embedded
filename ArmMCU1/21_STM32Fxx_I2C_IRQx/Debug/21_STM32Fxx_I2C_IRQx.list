
21_STM32Fxx_I2C_IRQx.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001a8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001058  080001a8  080001a8  000101a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08001200  08001200  00020038  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08001200  08001200  00020038  2**0
                  CONTENTS
  4 .ARM          00000000  08001200  08001200  00020038  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001200  08001200  00020038  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001200  08001200  00011200  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001204  08001204  00011204  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000038  20000000  08001208  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020038  2**0
                  CONTENTS
 10 .bss          00000048  20000038  20000038  00020038  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000080  20000080  00020038  2**0
                  ALLOC
 12 .ARM.attributes 0000002a  00000000  00000000  00020038  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020062  2**0
                  CONTENTS, READONLY
 14 .debug_info   000017df  00000000  00000000  000200a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 0000061a  00000000  00000000  00021884  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000001e0  00000000  00000000  00021ea0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000163  00000000  00000000  00022080  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0000266c  00000000  00000000  000221e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00001f09  00000000  00000000  0002484f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    0000a0ce  00000000  00000000  00026758  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00000720  00000000  00000000  00030828  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000005e  00000000  00000000  00030f48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a8 <__do_global_dtors_aux>:
 80001a8:	b510      	push	{r4, lr}
 80001aa:	4c05      	ldr	r4, [pc, #20]	; (80001c0 <__do_global_dtors_aux+0x18>)
 80001ac:	7823      	ldrb	r3, [r4, #0]
 80001ae:	b933      	cbnz	r3, 80001be <__do_global_dtors_aux+0x16>
 80001b0:	4b04      	ldr	r3, [pc, #16]	; (80001c4 <__do_global_dtors_aux+0x1c>)
 80001b2:	b113      	cbz	r3, 80001ba <__do_global_dtors_aux+0x12>
 80001b4:	4804      	ldr	r0, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x20>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	2301      	movs	r3, #1
 80001bc:	7023      	strb	r3, [r4, #0]
 80001be:	bd10      	pop	{r4, pc}
 80001c0:	20000038 	.word	0x20000038
 80001c4:	00000000 	.word	0x00000000
 80001c8:	080011e8 	.word	0x080011e8

080001cc <frame_dummy>:
 80001cc:	b508      	push	{r3, lr}
 80001ce:	4b03      	ldr	r3, [pc, #12]	; (80001dc <frame_dummy+0x10>)
 80001d0:	b11b      	cbz	r3, 80001da <frame_dummy+0xe>
 80001d2:	4903      	ldr	r1, [pc, #12]	; (80001e0 <frame_dummy+0x14>)
 80001d4:	4803      	ldr	r0, [pc, #12]	; (80001e4 <frame_dummy+0x18>)
 80001d6:	f3af 8000 	nop.w
 80001da:	bd08      	pop	{r3, pc}
 80001dc:	00000000 	.word	0x00000000
 80001e0:	2000003c 	.word	0x2000003c
 80001e4:	080011e8 	.word	0x080011e8

080001e8 <strlen>:
 80001e8:	4603      	mov	r3, r0
 80001ea:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ee:	2a00      	cmp	r2, #0
 80001f0:	d1fb      	bne.n	80001ea <strlen+0x2>
 80001f2:	1a18      	subs	r0, r3, r0
 80001f4:	3801      	subs	r0, #1
 80001f6:	4770      	bx	lr

080001f8 <I2C1_GPIOInits>:
 * @return      - none
 *
 * @Note        - none
 */
void I2C1_GPIOInits(void)
{
 80001f8:	b580      	push	{r7, lr}
 80001fa:	b084      	sub	sp, #16
 80001fc:	af00      	add	r7, sp, #0
	GPIOx_Handle_t I2CPins;								//Khai báo 1 biến cấu trúc GPIO Portx muốn dùng AF

	I2CPins.pGPIOx = GPIOB;										//Port có chân làm chức năng Alternate
 80001fe:	4b0e      	ldr	r3, [pc, #56]	; (8000238 <I2C1_GPIOInits+0x40>)
 8000200:	607b      	str	r3, [r7, #4]
	I2CPins.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALTFN;		//Thiết lập Port sử dụng Alternate Function
 8000202:	2302      	movs	r3, #2
 8000204:	727b      	strb	r3, [r7, #9]
	I2CPins.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_OD; 	//I2C sử dụng Open Drain
 8000206:	2301      	movs	r3, #1
 8000208:	733b      	strb	r3, [r7, #12]
	I2CPins.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PIN_PU; 	//pull up
 800020a:	2301      	movs	r3, #1
 800020c:	72fb      	strb	r3, [r7, #11]
	I2CPins.GPIO_PinConfig.GPIO_PinAltFunMode = 4;				//Column AF4(Check Datasheet)
 800020e:	2304      	movs	r3, #4
 8000210:	737b      	strb	r3, [r7, #13]
	I2CPins.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;		//Speed
 8000212:	2302      	movs	r3, #2
 8000214:	72bb      	strb	r3, [r7, #10]

	//SCL Configuration
	I2CPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_6;		//PB6 làm chân AF4 I2C_SCL
 8000216:	2306      	movs	r3, #6
 8000218:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&I2CPins);						//Thiết lập I2C_SCL cho cấu hình thanh ghi cho Processor
 800021a:	1d3b      	adds	r3, r7, #4
 800021c:	4618      	mov	r0, r3
 800021e:	f000 f955 	bl	80004cc <GPIO_Init>

	//SDA Configuration
	I2CPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_7;			//PB7 làm chân AF4 I2C_SDA
 8000222:	2307      	movs	r3, #7
 8000224:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&I2CPins);						//Thiết lập I2C_SDA cho cấu hình thanh ghi cho Processor
 8000226:	1d3b      	adds	r3, r7, #4
 8000228:	4618      	mov	r0, r3
 800022a:	f000 f94f 	bl	80004cc <GPIO_Init>
}
 800022e:	bf00      	nop
 8000230:	3710      	adds	r7, #16
 8000232:	46bd      	mov	sp, r7
 8000234:	bd80      	pop	{r7, pc}
 8000236:	bf00      	nop
 8000238:	40020400 	.word	0x40020400

0800023c <I2C1_Inits>:
 * @return      - none
 *
 * @Note        - none
 */
void I2C1_Inits(void)
{
 800023c:	b580      	push	{r7, lr}
 800023e:	af00      	add	r7, sp, #0
	I2C1_Handle.pI2Cx = I2C1;				//Sử dụng I2C1
 8000240:	4b09      	ldr	r3, [pc, #36]	; (8000268 <I2C1_Inits+0x2c>)
 8000242:	4a0a      	ldr	r2, [pc, #40]	; (800026c <I2C1_Inits+0x30>)
 8000244:	601a      	str	r2, [r3, #0]
	I2C1_Handle.I2C_Config.I2C_AckControl = I2C_ACK_ENABLE;
 8000246:	4b08      	ldr	r3, [pc, #32]	; (8000268 <I2C1_Inits+0x2c>)
 8000248:	2201      	movs	r2, #1
 800024a:	725a      	strb	r2, [r3, #9]
	I2C1_Handle.I2C_Config.I2C_DeviceAddress = SLAVE_ADDR;	//Cài đặt địa chỉ cho STM32 nếu nó là Slave
 800024c:	4b06      	ldr	r3, [pc, #24]	; (8000268 <I2C1_Inits+0x2c>)
 800024e:	2268      	movs	r2, #104	; 0x68
 8000250:	721a      	strb	r2, [r3, #8]
	I2C1_Handle.I2C_Config.I2C_FmDutyCycle = I2C_FM_DUTY_2; //Bộ chia tần số
 8000252:	4b05      	ldr	r3, [pc, #20]	; (8000268 <I2C1_Inits+0x2c>)
 8000254:	2200      	movs	r2, #0
 8000256:	729a      	strb	r2, [r3, #10]
	I2C1_Handle.I2C_Config.I2C_SCLSpeed = I2C_SCL_SPEED_SM;	//Standard Mode
 8000258:	4b03      	ldr	r3, [pc, #12]	; (8000268 <I2C1_Inits+0x2c>)
 800025a:	4a05      	ldr	r2, [pc, #20]	; (8000270 <I2C1_Inits+0x34>)
 800025c:	605a      	str	r2, [r3, #4]

	I2C_Init(&I2C1_Handle);
 800025e:	4802      	ldr	r0, [pc, #8]	; (8000268 <I2C1_Inits+0x2c>)
 8000260:	f000 fb5a 	bl	8000918 <I2C_Init>
}
 8000264:	bf00      	nop
 8000266:	bd80      	pop	{r7, pc}
 8000268:	20000054 	.word	0x20000054
 800026c:	40005400 	.word	0x40005400
 8000270:	000186a0 	.word	0x000186a0

08000274 <main>:

/*
 * Hàm xử lý chính
 */
int main(void)
{
 8000274:	b580      	push	{r7, lr}
 8000276:	af00      	add	r7, sp, #0
//	uint8_t command_code;							//biến chứa các lệnh command từ Master->Slave
//	uint8_t len;									//biến chứa giá trị len từ Slave->Master

	//I2C pin Alternate Function
	I2C1_GPIOInits();
 8000278:	f7ff ffbe 	bl	80001f8 <I2C1_GPIOInits>

	//I2C Peripheral User Configuration
	I2C1_Inits();
 800027c:	f7ff ffde 	bl	800023c <I2C1_Inits>

	//I2C IRQ configuration(Interrupt)
	I2C_IRQInterruptConfig(IRQ_NO_I2C1_EV,ENABLE);	//Event Config
 8000280:	2101      	movs	r1, #1
 8000282:	201f      	movs	r0, #31
 8000284:	f000 fca2 	bl	8000bcc <I2C_IRQInterruptConfig>
	I2C_IRQInterruptConfig(IRQ_NO_I2C1_ER,ENABLE);	//Error Config
 8000288:	2101      	movs	r1, #1
 800028a:	2020      	movs	r0, #32
 800028c:	f000 fc9e 	bl	8000bcc <I2C_IRQInterruptConfig>

	//Slave mode, "Enable control bit" is Enable
	I2C_SlaveEnableDisableCallBackEvents(I2C1, ENABLE);
 8000290:	2101      	movs	r1, #1
 8000292:	4806      	ldr	r0, [pc, #24]	; (80002ac <main+0x38>)
 8000294:	f000 ff50 	bl	8001138 <I2C_SlaveEnableDisableCallBackEvents>

	//Enable the I2C Peripheral
	I2C_PeripheralControl(I2C1, ENABLE);
 8000298:	2101      	movs	r1, #1
 800029a:	4804      	ldr	r0, [pc, #16]	; (80002ac <main+0x38>)
 800029c:	f000 fc7b 	bl	8000b96 <I2C_PeripheralControl>

	//Set Acking bit is made 1 after PE=1
	I2C_ManageAcking(I2C1, I2C_ACK_ENABLE);
 80002a0:	2101      	movs	r1, #1
 80002a2:	4802      	ldr	r0, [pc, #8]	; (80002ac <main+0x38>)
 80002a4:	f000 fc5c 	bl	8000b60 <I2C_ManageAcking>
	//có lệnh set bit ack lên 1 nhưng vì bit PE lúc này đang là 0 nên ko thể set bit ack 1
	//vì vầy, ta cần set PE=1 trước khi set bit ack lên 1(nên tối ưu hóa lại code)

	//printf("Application is running\n");

	while(1);
 80002a8:	e7fe      	b.n	80002a8 <main+0x34>
 80002aa:	bf00      	nop
 80002ac:	40005400 	.word	0x40005400

080002b0 <I2C1_EV_IRQHandler>:

/**
 * Triển khai I2C Event Interrupt
 */
void I2C1_EV_IRQHandler(void)
{
 80002b0:	b580      	push	{r7, lr}
 80002b2:	af00      	add	r7, sp, #0
	I2C_EV_IRQHangling(&I2C1_Handle);
 80002b4:	4802      	ldr	r0, [pc, #8]	; (80002c0 <I2C1_EV_IRQHandler+0x10>)
 80002b6:	f000 fd0d 	bl	8000cd4 <I2C_EV_IRQHangling>
}
 80002ba:	bf00      	nop
 80002bc:	bd80      	pop	{r7, pc}
 80002be:	bf00      	nop
 80002c0:	20000054 	.word	0x20000054

080002c4 <I2C1_ER_IRQHandler>:

/**
 * Triển khai I2C Error Interrupt
 */
void I2C1_ER_IRQHandler(void)
{
 80002c4:	b580      	push	{r7, lr}
 80002c6:	af00      	add	r7, sp, #0
	I2C_ER_IRQHangling(&I2C1_Handle);
 80002c8:	4802      	ldr	r0, [pc, #8]	; (80002d4 <I2C1_ER_IRQHandler+0x10>)
 80002ca:	f000 fddc 	bl	8000e86 <I2C_ER_IRQHangling>
}
 80002ce:	bf00      	nop
 80002d0:	bd80      	pop	{r7, pc}
 80002d2:	bf00      	nop
 80002d4:	20000054 	.word	0x20000054

080002d8 <I2C_ApplicationEventCallback>:

/**
 * Triển khai thông báo cho người dùng các sự kiện diễn ra
 */
void I2C_ApplicationEventCallback(I2C_Handle_t *pI2CHandle,uint8_t AppEv)
{
 80002d8:	b590      	push	{r4, r7, lr}
 80002da:	b083      	sub	sp, #12
 80002dc:	af00      	add	r7, sp, #0
 80002de:	6078      	str	r0, [r7, #4]
 80002e0:	460b      	mov	r3, r1
 80002e2:	70fb      	strb	r3, [r7, #3]
	//các biến static này thì dù kết thúc hàm thì bộ nhớ cho biến static ko bị giải phóng
	//mục đich khai báo để trong hàm mà ko khai báo bên ngoài vì vừa muốn bộ nhớ biến ko bị giải
	//phóng vừa muốn ko một hàm nào đc phép truy cập vào các biến static này.
	//Chỉ có các lệnh trong hàm khai báo biến static mới đc phép truy cập vào biến static này

	if(AppEv == I2C_EV_DATA_REQ)
 80002e4:	78fb      	ldrb	r3, [r7, #3]
 80002e6:	2b08      	cmp	r3, #8
 80002e8:	d123      	bne.n	8000332 <I2C_ApplicationEventCallback+0x5a>
	{
		//Master wants some data . Slave has to send it
		if(commandCode == 0x51)		//0x51: lệnh yêu cầu gửi độ dài byte muốn gửi
 80002ea:	4b1f      	ldr	r3, [pc, #124]	; (8000368 <I2C_ApplicationEventCallback+0x90>)
 80002ec:	781b      	ldrb	r3, [r3, #0]
 80002ee:	2b51      	cmp	r3, #81	; 0x51
 80002f0:	d10b      	bne.n	800030a <I2C_ApplicationEventCallback+0x32>
		{
			//Send the length information to the master
			I2C_SLaveSendData(pI2CHandle->pI2Cx, strlen((char*)tx_Buf));
 80002f2:	687b      	ldr	r3, [r7, #4]
 80002f4:	681c      	ldr	r4, [r3, #0]
 80002f6:	481d      	ldr	r0, [pc, #116]	; (800036c <I2C_ApplicationEventCallback+0x94>)
 80002f8:	f7ff ff76 	bl	80001e8 <strlen>
 80002fc:	4603      	mov	r3, r0
 80002fe:	b2db      	uxtb	r3, r3
 8000300:	4619      	mov	r1, r3
 8000302:	4620      	mov	r0, r4
 8000304:	f000 fefe 	bl	8001104 <I2C_SLaveSendData>
	else if(AppEv == I2C_EV_STOP)
	{
		//This is happens only during slave reception
		//Master has ended the I2C communication with the Slave
	}
}
 8000308:	e029      	b.n	800035e <I2C_ApplicationEventCallback+0x86>
		else if(commandCode == 0x52)	//0x51: lệnh yêu cầu gửi nội dung byte muốn gửi
 800030a:	4b17      	ldr	r3, [pc, #92]	; (8000368 <I2C_ApplicationEventCallback+0x90>)
 800030c:	781b      	ldrb	r3, [r3, #0]
 800030e:	2b52      	cmp	r3, #82	; 0x52
 8000310:	d125      	bne.n	800035e <I2C_ApplicationEventCallback+0x86>
			I2C_SLaveSendData(pI2CHandle->pI2Cx, tx_Buf[Cnt++]);
 8000312:	687b      	ldr	r3, [r7, #4]
 8000314:	681a      	ldr	r2, [r3, #0]
 8000316:	4b16      	ldr	r3, [pc, #88]	; (8000370 <I2C_ApplicationEventCallback+0x98>)
 8000318:	781b      	ldrb	r3, [r3, #0]
 800031a:	1c59      	adds	r1, r3, #1
 800031c:	b2c8      	uxtb	r0, r1
 800031e:	4914      	ldr	r1, [pc, #80]	; (8000370 <I2C_ApplicationEventCallback+0x98>)
 8000320:	7008      	strb	r0, [r1, #0]
 8000322:	4619      	mov	r1, r3
 8000324:	4b11      	ldr	r3, [pc, #68]	; (800036c <I2C_ApplicationEventCallback+0x94>)
 8000326:	5c5b      	ldrb	r3, [r3, r1]
 8000328:	4619      	mov	r1, r3
 800032a:	4610      	mov	r0, r2
 800032c:	f000 feea 	bl	8001104 <I2C_SLaveSendData>
}
 8000330:	e015      	b.n	800035e <I2C_ApplicationEventCallback+0x86>
	else if(AppEv == I2C_EV_DATA_RCV)
 8000332:	78fb      	ldrb	r3, [r7, #3]
 8000334:	2b09      	cmp	r3, #9
 8000336:	d109      	bne.n	800034c <I2C_ApplicationEventCallback+0x74>
		commandCode = (I2C_SlaveReceiveData(pI2CHandle->pI2Cx));
 8000338:	687b      	ldr	r3, [r7, #4]
 800033a:	681b      	ldr	r3, [r3, #0]
 800033c:	4618      	mov	r0, r3
 800033e:	f000 feef 	bl	8001120 <I2C_SlaveReceiveData>
 8000342:	4603      	mov	r3, r0
 8000344:	461a      	mov	r2, r3
 8000346:	4b08      	ldr	r3, [pc, #32]	; (8000368 <I2C_ApplicationEventCallback+0x90>)
 8000348:	701a      	strb	r2, [r3, #0]
}
 800034a:	e008      	b.n	800035e <I2C_ApplicationEventCallback+0x86>
	else if(AppEv == I2C_ERROR_AF)
 800034c:	78fb      	ldrb	r3, [r7, #3]
 800034e:	2b05      	cmp	r3, #5
 8000350:	d105      	bne.n	800035e <I2C_ApplicationEventCallback+0x86>
		commandCode = 0xff;			//thông báo lỗi
 8000352:	4b05      	ldr	r3, [pc, #20]	; (8000368 <I2C_ApplicationEventCallback+0x90>)
 8000354:	22ff      	movs	r2, #255	; 0xff
 8000356:	701a      	strb	r2, [r3, #0]
		Cnt=0;						//reset lại vị trí byte gửi
 8000358:	4b05      	ldr	r3, [pc, #20]	; (8000370 <I2C_ApplicationEventCallback+0x98>)
 800035a:	2200      	movs	r2, #0
 800035c:	701a      	strb	r2, [r3, #0]
}
 800035e:	bf00      	nop
 8000360:	370c      	adds	r7, #12
 8000362:	46bd      	mov	sp, r7
 8000364:	bd90      	pop	{r4, r7, pc}
 8000366:	bf00      	nop
 8000368:	2000007c 	.word	0x2000007c
 800036c:	20000000 	.word	0x20000000
 8000370:	2000007d 	.word	0x2000007d

08000374 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000374:	480d      	ldr	r0, [pc, #52]	; (80003ac <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000376:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000378:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800037c:	480c      	ldr	r0, [pc, #48]	; (80003b0 <LoopForever+0x6>)
  ldr r1, =_edata
 800037e:	490d      	ldr	r1, [pc, #52]	; (80003b4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000380:	4a0d      	ldr	r2, [pc, #52]	; (80003b8 <LoopForever+0xe>)
  movs r3, #0
 8000382:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000384:	e002      	b.n	800038c <LoopCopyDataInit>

08000386 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000386:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000388:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800038a:	3304      	adds	r3, #4

0800038c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800038c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800038e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000390:	d3f9      	bcc.n	8000386 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000392:	4a0a      	ldr	r2, [pc, #40]	; (80003bc <LoopForever+0x12>)
  ldr r4, =_ebss
 8000394:	4c0a      	ldr	r4, [pc, #40]	; (80003c0 <LoopForever+0x16>)
  movs r3, #0
 8000396:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000398:	e001      	b.n	800039e <LoopFillZerobss>

0800039a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800039a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800039c:	3204      	adds	r2, #4

0800039e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800039e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80003a0:	d3fb      	bcc.n	800039a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80003a2:	f000 fefd 	bl	80011a0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80003a6:	f7ff ff65 	bl	8000274 <main>

080003aa <LoopForever>:

LoopForever:
  b LoopForever
 80003aa:	e7fe      	b.n	80003aa <LoopForever>
  ldr   r0, =_estack
 80003ac:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80003b0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80003b4:	20000038 	.word	0x20000038
  ldr r2, =_sidata
 80003b8:	08001208 	.word	0x08001208
  ldr r2, =_sbss
 80003bc:	20000038 	.word	0x20000038
  ldr r4, =_ebss
 80003c0:	20000080 	.word	0x20000080

080003c4 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80003c4:	e7fe      	b.n	80003c4 <ADC_IRQHandler>
	...

080003c8 <GPIO_PeriClockControl>:
 * @return		- none
 *
 * @Note 		- none
 */
void GPIO_PeriClockControl(GPIO_RegDef_t *pGPIOx, uint8_t EnorDi)
{
 80003c8:	b480      	push	{r7}
 80003ca:	b083      	sub	sp, #12
 80003cc:	af00      	add	r7, sp, #0
 80003ce:	6078      	str	r0, [r7, #4]
 80003d0:	460b      	mov	r3, r1
 80003d2:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE)
 80003d4:	78fb      	ldrb	r3, [r7, #3]
 80003d6:	2b01      	cmp	r3, #1
 80003d8:	d161      	bne.n	800049e <GPIO_PeriClockControl+0xd6>
	{
		if(pGPIOx == GPIOA)
 80003da:	687b      	ldr	r3, [r7, #4]
 80003dc:	4a32      	ldr	r2, [pc, #200]	; (80004a8 <GPIO_PeriClockControl+0xe0>)
 80003de:	4293      	cmp	r3, r2
 80003e0:	d106      	bne.n	80003f0 <GPIO_PeriClockControl+0x28>
		{
			GPIOA_PCLK_EN();		//hàm đã đc define trong stm32f407xx.h(lớp Driver)
 80003e2:	4b32      	ldr	r3, [pc, #200]	; (80004ac <GPIO_PeriClockControl+0xe4>)
 80003e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003e6:	4a31      	ldr	r2, [pc, #196]	; (80004ac <GPIO_PeriClockControl+0xe4>)
 80003e8:	f043 0301 	orr.w	r3, r3, #1
 80003ec:	6313      	str	r3, [r2, #48]	; 0x30
	else
	{
		//Todo: (Disable Status)

	}
}
 80003ee:	e056      	b.n	800049e <GPIO_PeriClockControl+0xd6>
		else if(pGPIOx == GPIOB)
 80003f0:	687b      	ldr	r3, [r7, #4]
 80003f2:	4a2f      	ldr	r2, [pc, #188]	; (80004b0 <GPIO_PeriClockControl+0xe8>)
 80003f4:	4293      	cmp	r3, r2
 80003f6:	d106      	bne.n	8000406 <GPIO_PeriClockControl+0x3e>
			GPIOB_PCLK_EN();
 80003f8:	4b2c      	ldr	r3, [pc, #176]	; (80004ac <GPIO_PeriClockControl+0xe4>)
 80003fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003fc:	4a2b      	ldr	r2, [pc, #172]	; (80004ac <GPIO_PeriClockControl+0xe4>)
 80003fe:	f043 0302 	orr.w	r3, r3, #2
 8000402:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000404:	e04b      	b.n	800049e <GPIO_PeriClockControl+0xd6>
		else if(pGPIOx == GPIOC)
 8000406:	687b      	ldr	r3, [r7, #4]
 8000408:	4a2a      	ldr	r2, [pc, #168]	; (80004b4 <GPIO_PeriClockControl+0xec>)
 800040a:	4293      	cmp	r3, r2
 800040c:	d106      	bne.n	800041c <GPIO_PeriClockControl+0x54>
			GPIOC_PCLK_EN();
 800040e:	4b27      	ldr	r3, [pc, #156]	; (80004ac <GPIO_PeriClockControl+0xe4>)
 8000410:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000412:	4a26      	ldr	r2, [pc, #152]	; (80004ac <GPIO_PeriClockControl+0xe4>)
 8000414:	f043 0304 	orr.w	r3, r3, #4
 8000418:	6313      	str	r3, [r2, #48]	; 0x30
}
 800041a:	e040      	b.n	800049e <GPIO_PeriClockControl+0xd6>
		else if(pGPIOx == GPIOD)
 800041c:	687b      	ldr	r3, [r7, #4]
 800041e:	4a26      	ldr	r2, [pc, #152]	; (80004b8 <GPIO_PeriClockControl+0xf0>)
 8000420:	4293      	cmp	r3, r2
 8000422:	d106      	bne.n	8000432 <GPIO_PeriClockControl+0x6a>
			GPIOD_PCLK_EN();
 8000424:	4b21      	ldr	r3, [pc, #132]	; (80004ac <GPIO_PeriClockControl+0xe4>)
 8000426:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000428:	4a20      	ldr	r2, [pc, #128]	; (80004ac <GPIO_PeriClockControl+0xe4>)
 800042a:	f043 0308 	orr.w	r3, r3, #8
 800042e:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000430:	e035      	b.n	800049e <GPIO_PeriClockControl+0xd6>
		else if(pGPIOx == GPIOE)
 8000432:	687b      	ldr	r3, [r7, #4]
 8000434:	4a21      	ldr	r2, [pc, #132]	; (80004bc <GPIO_PeriClockControl+0xf4>)
 8000436:	4293      	cmp	r3, r2
 8000438:	d106      	bne.n	8000448 <GPIO_PeriClockControl+0x80>
			GPIOE_PCLK_EN();
 800043a:	4b1c      	ldr	r3, [pc, #112]	; (80004ac <GPIO_PeriClockControl+0xe4>)
 800043c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800043e:	4a1b      	ldr	r2, [pc, #108]	; (80004ac <GPIO_PeriClockControl+0xe4>)
 8000440:	f043 0310 	orr.w	r3, r3, #16
 8000444:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000446:	e02a      	b.n	800049e <GPIO_PeriClockControl+0xd6>
		else if(pGPIOx == GPIOF)
 8000448:	687b      	ldr	r3, [r7, #4]
 800044a:	4a1d      	ldr	r2, [pc, #116]	; (80004c0 <GPIO_PeriClockControl+0xf8>)
 800044c:	4293      	cmp	r3, r2
 800044e:	d106      	bne.n	800045e <GPIO_PeriClockControl+0x96>
			GPIOF_PCLK_EN();
 8000450:	4b16      	ldr	r3, [pc, #88]	; (80004ac <GPIO_PeriClockControl+0xe4>)
 8000452:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000454:	4a15      	ldr	r2, [pc, #84]	; (80004ac <GPIO_PeriClockControl+0xe4>)
 8000456:	f043 0320 	orr.w	r3, r3, #32
 800045a:	6313      	str	r3, [r2, #48]	; 0x30
}
 800045c:	e01f      	b.n	800049e <GPIO_PeriClockControl+0xd6>
		else if(pGPIOx == GPIOG)
 800045e:	687b      	ldr	r3, [r7, #4]
 8000460:	4a18      	ldr	r2, [pc, #96]	; (80004c4 <GPIO_PeriClockControl+0xfc>)
 8000462:	4293      	cmp	r3, r2
 8000464:	d106      	bne.n	8000474 <GPIO_PeriClockControl+0xac>
			GPIOG_PCLK_EN();
 8000466:	4b11      	ldr	r3, [pc, #68]	; (80004ac <GPIO_PeriClockControl+0xe4>)
 8000468:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800046a:	4a10      	ldr	r2, [pc, #64]	; (80004ac <GPIO_PeriClockControl+0xe4>)
 800046c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000470:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000472:	e014      	b.n	800049e <GPIO_PeriClockControl+0xd6>
		else if(pGPIOx == GPIOH)
 8000474:	687b      	ldr	r3, [r7, #4]
 8000476:	4a13      	ldr	r2, [pc, #76]	; (80004c4 <GPIO_PeriClockControl+0xfc>)
 8000478:	4293      	cmp	r3, r2
 800047a:	d106      	bne.n	800048a <GPIO_PeriClockControl+0xc2>
			GPIOH_PCLK_EN();
 800047c:	4b0b      	ldr	r3, [pc, #44]	; (80004ac <GPIO_PeriClockControl+0xe4>)
 800047e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000480:	4a0a      	ldr	r2, [pc, #40]	; (80004ac <GPIO_PeriClockControl+0xe4>)
 8000482:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000486:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000488:	e009      	b.n	800049e <GPIO_PeriClockControl+0xd6>
		else if(pGPIOx == GPIOI)
 800048a:	687b      	ldr	r3, [r7, #4]
 800048c:	4a0e      	ldr	r2, [pc, #56]	; (80004c8 <GPIO_PeriClockControl+0x100>)
 800048e:	4293      	cmp	r3, r2
 8000490:	d105      	bne.n	800049e <GPIO_PeriClockControl+0xd6>
			GPIOI_PCLK_EN();
 8000492:	4b06      	ldr	r3, [pc, #24]	; (80004ac <GPIO_PeriClockControl+0xe4>)
 8000494:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000496:	4a05      	ldr	r2, [pc, #20]	; (80004ac <GPIO_PeriClockControl+0xe4>)
 8000498:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800049c:	6313      	str	r3, [r2, #48]	; 0x30
}
 800049e:	bf00      	nop
 80004a0:	370c      	adds	r7, #12
 80004a2:	46bd      	mov	sp, r7
 80004a4:	bc80      	pop	{r7}
 80004a6:	4770      	bx	lr
 80004a8:	40020000 	.word	0x40020000
 80004ac:	40023800 	.word	0x40023800
 80004b0:	40020400 	.word	0x40020400
 80004b4:	40020800 	.word	0x40020800
 80004b8:	40020c00 	.word	0x40020c00
 80004bc:	40021000 	.word	0x40021000
 80004c0:	40021400 	.word	0x40021400
 80004c4:	40021800 	.word	0x40021800
 80004c8:	40022000 	.word	0x40022000

080004cc <GPIO_Init>:
 * @return		- none
 *
 * @Note 		- none
 */
void GPIO_Init(GPIOx_Handle_t *pGPIOHandle)
{
 80004cc:	b580      	push	{r7, lr}
 80004ce:	b086      	sub	sp, #24
 80004d0:	af00      	add	r7, sp, #0
 80004d2:	6078      	str	r0, [r7, #4]
	uint32_t temp = 0; 	//temp. registerr
 80004d4:	2300      	movs	r3, #0
 80004d6:	617b      	str	r3, [r7, #20]

	//0. Enable the Peripheral Clock
	GPIO_PeriClockControl(pGPIOHandle->pGPIOx, ENABLE);
 80004d8:	687b      	ldr	r3, [r7, #4]
 80004da:	681b      	ldr	r3, [r3, #0]
 80004dc:	2101      	movs	r1, #1
 80004de:	4618      	mov	r0, r3
 80004e0:	f7ff ff72 	bl	80003c8 <GPIO_PeriClockControl>

	//1. configure(cấu hình) the mode of gpio pin(Datasheet 8.4.1)
	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_ANALOG)
 80004e4:	687b      	ldr	r3, [r7, #4]
 80004e6:	795b      	ldrb	r3, [r3, #5]
 80004e8:	2b03      	cmp	r3, #3
 80004ea:	d81f      	bhi.n	800052c <GPIO_Init+0x60>
	{
		//Giá trị GPIO_PinMode thuộc 1 trong 4 trường hợp bit của Mode Register
		//this is part non-interrupt mode

		//Xác định lấy vị trí MODERx cần điều khiển dựa vào số chân Pin_Number và lưu vào biến temp
		temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 80004ec:	687b      	ldr	r3, [r7, #4]
 80004ee:	795b      	ldrb	r3, [r3, #5]
 80004f0:	461a      	mov	r2, r3
 80004f2:	687b      	ldr	r3, [r7, #4]
 80004f4:	791b      	ldrb	r3, [r3, #4]
 80004f6:	005b      	lsls	r3, r3, #1
 80004f8:	fa02 f303 	lsl.w	r3, r2, r3
 80004fc:	617b      	str	r3, [r7, #20]
		//Dịch 2 bit vì theo datasheet, mỗi 2 bit quản lý một pin number của GPIO port mode register
		//vd: GPIO_PinNumber=Pin0 thì sẽ kích hoạt MODER0(2*0=0->bắt đầu từ bit0)
		//GPIO_PinNumber=Pin1 thì sẽ kích hoạt MODER1(2*1=2->bắt đầu từ bit2)

		//Xóa(clear) value bit tại vị trí 2 bit muốn cấu hình
		pGPIOHandle->pGPIOx->MODER &= ~(0x3 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80004fe:	687b      	ldr	r3, [r7, #4]
 8000500:	681b      	ldr	r3, [r3, #0]
 8000502:	681a      	ldr	r2, [r3, #0]
 8000504:	687b      	ldr	r3, [r7, #4]
 8000506:	791b      	ldrb	r3, [r3, #4]
 8000508:	4619      	mov	r1, r3
 800050a:	2303      	movs	r3, #3
 800050c:	408b      	lsls	r3, r1
 800050e:	43db      	mvns	r3, r3
 8000510:	4619      	mov	r1, r3
 8000512:	687b      	ldr	r3, [r7, #4]
 8000514:	681b      	ldr	r3, [r3, #0]
 8000516:	400a      	ands	r2, r1
 8000518:	601a      	str	r2, [r3, #0]
		//Theo datasheet thì để reset MODERx thì ta cần thiết lập value bit là 00, Ta có: 0x3 = 11
		//~(0x3 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber); nghĩa là tiến hành đảo trạng thái 11 thành 00
		//vị trí chân Pin_Number

		//Lưu value temp vào trong thanh ghi MODER của biến pGPIOHandle
		pGPIOHandle->pGPIOx->MODER |= temp;
 800051a:	687b      	ldr	r3, [r7, #4]
 800051c:	681b      	ldr	r3, [r3, #0]
 800051e:	6819      	ldr	r1, [r3, #0]
 8000520:	687b      	ldr	r3, [r7, #4]
 8000522:	681b      	ldr	r3, [r3, #0]
 8000524:	697a      	ldr	r2, [r7, #20]
 8000526:	430a      	orrs	r2, r1
 8000528:	601a      	str	r2, [r3, #0]
 800052a:	e0b8      	b.n	800069e <GPIO_Init+0x1d2>
	}
	else
	{
		//This is part(phần) will code later (Interrupt mode) //các trường hợp khác từ 4->6

		if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_FT)
 800052c:	687b      	ldr	r3, [r7, #4]
 800052e:	795b      	ldrb	r3, [r3, #5]
 8000530:	2b04      	cmp	r3, #4
 8000532:	d117      	bne.n	8000564 <GPIO_Init+0x98>
		{
			//1. configure the FTSR(Falling(xuống) Trigger Select Register)
			EXTI->FTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000534:	4b43      	ldr	r3, [pc, #268]	; (8000644 <GPIO_Init+0x178>)
 8000536:	68db      	ldr	r3, [r3, #12]
 8000538:	687a      	ldr	r2, [r7, #4]
 800053a:	7912      	ldrb	r2, [r2, #4]
 800053c:	4611      	mov	r1, r2
 800053e:	2201      	movs	r2, #1
 8000540:	408a      	lsls	r2, r1
 8000542:	4611      	mov	r1, r2
 8000544:	4a3f      	ldr	r2, [pc, #252]	; (8000644 <GPIO_Init+0x178>)
 8000546:	430b      	orrs	r3, r1
 8000548:	60d3      	str	r3, [r2, #12]

			//1.2 Clear the corresponding(tương ứng) RTSR, việc này phòng ngừa cho tình huống sử dụng RTSR trước đó
			//và có thể gây xung đột cho lần cấu hình hiện tại
			EXTI->RTSR &= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800054a:	4b3e      	ldr	r3, [pc, #248]	; (8000644 <GPIO_Init+0x178>)
 800054c:	689b      	ldr	r3, [r3, #8]
 800054e:	687a      	ldr	r2, [r7, #4]
 8000550:	7912      	ldrb	r2, [r2, #4]
 8000552:	4611      	mov	r1, r2
 8000554:	2201      	movs	r2, #1
 8000556:	408a      	lsls	r2, r1
 8000558:	43d2      	mvns	r2, r2
 800055a:	4611      	mov	r1, r2
 800055c:	4a39      	ldr	r2, [pc, #228]	; (8000644 <GPIO_Init+0x178>)
 800055e:	400b      	ands	r3, r1
 8000560:	6093      	str	r3, [r2, #8]
 8000562:	e035      	b.n	80005d0 <GPIO_Init+0x104>
		}
		else if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RT)
 8000564:	687b      	ldr	r3, [r7, #4]
 8000566:	795b      	ldrb	r3, [r3, #5]
 8000568:	2b05      	cmp	r3, #5
 800056a:	d117      	bne.n	800059c <GPIO_Init+0xd0>
		{
			//1. configure the RTSR(Rising(lên) Trigger Select Register)
			EXTI->RTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800056c:	4b35      	ldr	r3, [pc, #212]	; (8000644 <GPIO_Init+0x178>)
 800056e:	689b      	ldr	r3, [r3, #8]
 8000570:	687a      	ldr	r2, [r7, #4]
 8000572:	7912      	ldrb	r2, [r2, #4]
 8000574:	4611      	mov	r1, r2
 8000576:	2201      	movs	r2, #1
 8000578:	408a      	lsls	r2, r1
 800057a:	4611      	mov	r1, r2
 800057c:	4a31      	ldr	r2, [pc, #196]	; (8000644 <GPIO_Init+0x178>)
 800057e:	430b      	orrs	r3, r1
 8000580:	6093      	str	r3, [r2, #8]

			//1.2 Clear the corresponding(tương ứng) FTSR, việc này phòng ngừa cho tình huống sử dụng FTSR trước đó
			//và có thể gây xung đột cho lần cấu hình hiện tại
			EXTI->FTSR &= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000582:	4b30      	ldr	r3, [pc, #192]	; (8000644 <GPIO_Init+0x178>)
 8000584:	68db      	ldr	r3, [r3, #12]
 8000586:	687a      	ldr	r2, [r7, #4]
 8000588:	7912      	ldrb	r2, [r2, #4]
 800058a:	4611      	mov	r1, r2
 800058c:	2201      	movs	r2, #1
 800058e:	408a      	lsls	r2, r1
 8000590:	43d2      	mvns	r2, r2
 8000592:	4611      	mov	r1, r2
 8000594:	4a2b      	ldr	r2, [pc, #172]	; (8000644 <GPIO_Init+0x178>)
 8000596:	400b      	ands	r3, r1
 8000598:	60d3      	str	r3, [r2, #12]
 800059a:	e019      	b.n	80005d0 <GPIO_Init+0x104>
		}
		else if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RFT)
 800059c:	687b      	ldr	r3, [r7, #4]
 800059e:	795b      	ldrb	r3, [r3, #5]
 80005a0:	2b06      	cmp	r3, #6
 80005a2:	d115      	bne.n	80005d0 <GPIO_Init+0x104>
		{
			//1. configure the FTSR and RTSR
			EXTI->FTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80005a4:	4b27      	ldr	r3, [pc, #156]	; (8000644 <GPIO_Init+0x178>)
 80005a6:	68db      	ldr	r3, [r3, #12]
 80005a8:	687a      	ldr	r2, [r7, #4]
 80005aa:	7912      	ldrb	r2, [r2, #4]
 80005ac:	4611      	mov	r1, r2
 80005ae:	2201      	movs	r2, #1
 80005b0:	408a      	lsls	r2, r1
 80005b2:	4611      	mov	r1, r2
 80005b4:	4a23      	ldr	r2, [pc, #140]	; (8000644 <GPIO_Init+0x178>)
 80005b6:	430b      	orrs	r3, r1
 80005b8:	60d3      	str	r3, [r2, #12]
			EXTI->RTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80005ba:	4b22      	ldr	r3, [pc, #136]	; (8000644 <GPIO_Init+0x178>)
 80005bc:	689b      	ldr	r3, [r3, #8]
 80005be:	687a      	ldr	r2, [r7, #4]
 80005c0:	7912      	ldrb	r2, [r2, #4]
 80005c2:	4611      	mov	r1, r2
 80005c4:	2201      	movs	r2, #1
 80005c6:	408a      	lsls	r2, r1
 80005c8:	4611      	mov	r1, r2
 80005ca:	4a1e      	ldr	r2, [pc, #120]	; (8000644 <GPIO_Init+0x178>)
 80005cc:	430b      	orrs	r3, r1
 80005ce:	6093      	str	r3, [r2, #8]
		}

		//2. Configure the GPIO port selection in SYSCFG_EXTICR
		uint8_t temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 4;		//xác định SYSCFG_EXTICR_temp1 register
 80005d0:	687b      	ldr	r3, [r7, #4]
 80005d2:	791b      	ldrb	r3, [r3, #4]
 80005d4:	089b      	lsrs	r3, r3, #2
 80005d6:	74fb      	strb	r3, [r7, #19]
		uint8_t temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 4;		//xác định 4bit EXTI_temp2 trong SYSCFG_EXTICR_temp1
 80005d8:	687b      	ldr	r3, [r7, #4]
 80005da:	791b      	ldrb	r3, [r3, #4]
 80005dc:	f003 0303 	and.w	r3, r3, #3
 80005e0:	74bb      	strb	r3, [r7, #18]
		uint8_t portcode = GPIO_BASEADDR_TO_CODE(pGPIOHandle->pGPIOx);		//xác định mã nhị phân xxxx để xác định GPIO port sử dụng
 80005e2:	687b      	ldr	r3, [r7, #4]
 80005e4:	681b      	ldr	r3, [r3, #0]
 80005e6:	4a18      	ldr	r2, [pc, #96]	; (8000648 <GPIO_Init+0x17c>)
 80005e8:	4293      	cmp	r3, r2
 80005ea:	d03b      	beq.n	8000664 <GPIO_Init+0x198>
 80005ec:	687b      	ldr	r3, [r7, #4]
 80005ee:	681b      	ldr	r3, [r3, #0]
 80005f0:	4a16      	ldr	r2, [pc, #88]	; (800064c <GPIO_Init+0x180>)
 80005f2:	4293      	cmp	r3, r2
 80005f4:	d024      	beq.n	8000640 <GPIO_Init+0x174>
 80005f6:	687b      	ldr	r3, [r7, #4]
 80005f8:	681b      	ldr	r3, [r3, #0]
 80005fa:	4a15      	ldr	r2, [pc, #84]	; (8000650 <GPIO_Init+0x184>)
 80005fc:	4293      	cmp	r3, r2
 80005fe:	d01d      	beq.n	800063c <GPIO_Init+0x170>
 8000600:	687b      	ldr	r3, [r7, #4]
 8000602:	681b      	ldr	r3, [r3, #0]
 8000604:	4a13      	ldr	r2, [pc, #76]	; (8000654 <GPIO_Init+0x188>)
 8000606:	4293      	cmp	r3, r2
 8000608:	d016      	beq.n	8000638 <GPIO_Init+0x16c>
 800060a:	687b      	ldr	r3, [r7, #4]
 800060c:	681b      	ldr	r3, [r3, #0]
 800060e:	4a12      	ldr	r2, [pc, #72]	; (8000658 <GPIO_Init+0x18c>)
 8000610:	4293      	cmp	r3, r2
 8000612:	d00f      	beq.n	8000634 <GPIO_Init+0x168>
 8000614:	687b      	ldr	r3, [r7, #4]
 8000616:	681b      	ldr	r3, [r3, #0]
 8000618:	4a10      	ldr	r2, [pc, #64]	; (800065c <GPIO_Init+0x190>)
 800061a:	4293      	cmp	r3, r2
 800061c:	d008      	beq.n	8000630 <GPIO_Init+0x164>
 800061e:	687b      	ldr	r3, [r7, #4]
 8000620:	681b      	ldr	r3, [r3, #0]
 8000622:	4a0f      	ldr	r2, [pc, #60]	; (8000660 <GPIO_Init+0x194>)
 8000624:	4293      	cmp	r3, r2
 8000626:	d101      	bne.n	800062c <GPIO_Init+0x160>
 8000628:	2306      	movs	r3, #6
 800062a:	e01c      	b.n	8000666 <GPIO_Init+0x19a>
 800062c:	2300      	movs	r3, #0
 800062e:	e01a      	b.n	8000666 <GPIO_Init+0x19a>
 8000630:	2305      	movs	r3, #5
 8000632:	e018      	b.n	8000666 <GPIO_Init+0x19a>
 8000634:	2304      	movs	r3, #4
 8000636:	e016      	b.n	8000666 <GPIO_Init+0x19a>
 8000638:	2303      	movs	r3, #3
 800063a:	e014      	b.n	8000666 <GPIO_Init+0x19a>
 800063c:	2302      	movs	r3, #2
 800063e:	e012      	b.n	8000666 <GPIO_Init+0x19a>
 8000640:	2301      	movs	r3, #1
 8000642:	e010      	b.n	8000666 <GPIO_Init+0x19a>
 8000644:	40013c00 	.word	0x40013c00
 8000648:	40020000 	.word	0x40020000
 800064c:	40020400 	.word	0x40020400
 8000650:	40020800 	.word	0x40020800
 8000654:	40020c00 	.word	0x40020c00
 8000658:	40021000 	.word	0x40021000
 800065c:	40021400 	.word	0x40021400
 8000660:	40021800 	.word	0x40021800
 8000664:	2300      	movs	r3, #0
 8000666:	747b      	strb	r3, [r7, #17]
		SYSCFG_PCLK_EN();													//Kích hoạt xung clock để cấu hình
 8000668:	4b5c      	ldr	r3, [pc, #368]	; (80007dc <GPIO_Init+0x310>)
 800066a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800066c:	4a5b      	ldr	r2, [pc, #364]	; (80007dc <GPIO_Init+0x310>)
 800066e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000672:	6453      	str	r3, [r2, #68]	; 0x44
		SYSCFG->EXTICR[temp1] = portcode << (temp2 * 4);					//Cấu hình thanh ghi SYSCFG_EXTICR_temp1
 8000674:	7c7a      	ldrb	r2, [r7, #17]
 8000676:	7cbb      	ldrb	r3, [r7, #18]
 8000678:	009b      	lsls	r3, r3, #2
 800067a:	fa02 f103 	lsl.w	r1, r2, r3
 800067e:	4a58      	ldr	r2, [pc, #352]	; (80007e0 <GPIO_Init+0x314>)
 8000680:	7cfb      	ldrb	r3, [r7, #19]
 8000682:	3302      	adds	r3, #2
 8000684:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

		//3. Eanble the exti interrupt delivery(chuyển, sử dụng) by using IMR(Interrupt Masking Register)
		EXTI->IMR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000688:	4b56      	ldr	r3, [pc, #344]	; (80007e4 <GPIO_Init+0x318>)
 800068a:	681b      	ldr	r3, [r3, #0]
 800068c:	687a      	ldr	r2, [r7, #4]
 800068e:	7912      	ldrb	r2, [r2, #4]
 8000690:	4611      	mov	r1, r2
 8000692:	2201      	movs	r2, #1
 8000694:	408a      	lsls	r2, r1
 8000696:	4611      	mov	r1, r2
 8000698:	4a52      	ldr	r2, [pc, #328]	; (80007e4 <GPIO_Init+0x318>)
 800069a:	430b      	orrs	r3, r1
 800069c:	6013      	str	r3, [r2, #0]

	}
	//Reset biến temp để sử dụng cho các lệnh khác trong hàm
	temp = 0;
 800069e:	2300      	movs	r3, #0
 80006a0:	617b      	str	r3, [r7, #20]

	//2. configure the speed (Datasheet 8.4.3)
	//Xác định lấy vị trí OSPEEDRx cần điều khiển dựa vào số chân Pin_Number và lưu vào biến temp
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinSpeed << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 80006a2:	687b      	ldr	r3, [r7, #4]
 80006a4:	799b      	ldrb	r3, [r3, #6]
 80006a6:	461a      	mov	r2, r3
 80006a8:	687b      	ldr	r3, [r7, #4]
 80006aa:	791b      	ldrb	r3, [r3, #4]
 80006ac:	005b      	lsls	r3, r3, #1
 80006ae:	fa02 f303 	lsl.w	r3, r2, r3
 80006b2:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OSPEEDR &=  ~(0x3 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);	//Clearing bit field
 80006b4:	687b      	ldr	r3, [r7, #4]
 80006b6:	681b      	ldr	r3, [r3, #0]
 80006b8:	689a      	ldr	r2, [r3, #8]
 80006ba:	687b      	ldr	r3, [r7, #4]
 80006bc:	791b      	ldrb	r3, [r3, #4]
 80006be:	4619      	mov	r1, r3
 80006c0:	2303      	movs	r3, #3
 80006c2:	408b      	lsls	r3, r1
 80006c4:	43db      	mvns	r3, r3
 80006c6:	4619      	mov	r1, r3
 80006c8:	687b      	ldr	r3, [r7, #4]
 80006ca:	681b      	ldr	r3, [r3, #0]
 80006cc:	400a      	ands	r2, r1
 80006ce:	609a      	str	r2, [r3, #8]
	pGPIOHandle->pGPIOx->OSPEEDR |= temp;
 80006d0:	687b      	ldr	r3, [r7, #4]
 80006d2:	681b      	ldr	r3, [r3, #0]
 80006d4:	6899      	ldr	r1, [r3, #8]
 80006d6:	687b      	ldr	r3, [r7, #4]
 80006d8:	681b      	ldr	r3, [r3, #0]
 80006da:	697a      	ldr	r2, [r7, #20]
 80006dc:	430a      	orrs	r2, r1
 80006de:	609a      	str	r2, [r3, #8]
	//=> Lúc này ta đã xác định(cấu hình) đc speed(OSPEEDRx) của GPIO tùy thuộc vào pin_number bạn muốn control
	temp = 0;
 80006e0:	2300      	movs	r3, #0
 80006e2:	617b      	str	r3, [r7, #20]

	//3. configure the pullup-pulldown settings (Datasheet 8.4.4)
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinPuPdControl << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 80006e4:	687b      	ldr	r3, [r7, #4]
 80006e6:	79db      	ldrb	r3, [r3, #7]
 80006e8:	461a      	mov	r2, r3
 80006ea:	687b      	ldr	r3, [r7, #4]
 80006ec:	791b      	ldrb	r3, [r3, #4]
 80006ee:	005b      	lsls	r3, r3, #1
 80006f0:	fa02 f303 	lsl.w	r3, r2, r3
 80006f4:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->PUPDR &=  ~(0x3 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80006f6:	687b      	ldr	r3, [r7, #4]
 80006f8:	681b      	ldr	r3, [r3, #0]
 80006fa:	68da      	ldr	r2, [r3, #12]
 80006fc:	687b      	ldr	r3, [r7, #4]
 80006fe:	791b      	ldrb	r3, [r3, #4]
 8000700:	4619      	mov	r1, r3
 8000702:	2303      	movs	r3, #3
 8000704:	408b      	lsls	r3, r1
 8000706:	43db      	mvns	r3, r3
 8000708:	4619      	mov	r1, r3
 800070a:	687b      	ldr	r3, [r7, #4]
 800070c:	681b      	ldr	r3, [r3, #0]
 800070e:	400a      	ands	r2, r1
 8000710:	60da      	str	r2, [r3, #12]
	pGPIOHandle->pGPIOx->PUPDR |= temp;
 8000712:	687b      	ldr	r3, [r7, #4]
 8000714:	681b      	ldr	r3, [r3, #0]
 8000716:	68d9      	ldr	r1, [r3, #12]
 8000718:	687b      	ldr	r3, [r7, #4]
 800071a:	681b      	ldr	r3, [r3, #0]
 800071c:	697a      	ldr	r2, [r7, #20]
 800071e:	430a      	orrs	r2, r1
 8000720:	60da      	str	r2, [r3, #12]
	temp = 0;
 8000722:	2300      	movs	r3, #0
 8000724:	617b      	str	r3, [r7, #20]

	//4. configure the optype (Datasheet 8.4.2)
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinOPType << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000726:	687b      	ldr	r3, [r7, #4]
 8000728:	7a1b      	ldrb	r3, [r3, #8]
 800072a:	461a      	mov	r2, r3
 800072c:	687b      	ldr	r3, [r7, #4]
 800072e:	791b      	ldrb	r3, [r3, #4]
 8000730:	fa02 f303 	lsl.w	r3, r2, r3
 8000734:	617b      	str	r3, [r7, #20]
	//Dịch 1 bit vì theo datasheet, mỗi 1 bit quản lý một pin number của GPIO port mode register
	pGPIOHandle->pGPIOx->OTYPER &=  ~(0x1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber); //Clearing bit field
 8000736:	687b      	ldr	r3, [r7, #4]
 8000738:	681b      	ldr	r3, [r3, #0]
 800073a:	685a      	ldr	r2, [r3, #4]
 800073c:	687b      	ldr	r3, [r7, #4]
 800073e:	791b      	ldrb	r3, [r3, #4]
 8000740:	4619      	mov	r1, r3
 8000742:	2301      	movs	r3, #1
 8000744:	408b      	lsls	r3, r1
 8000746:	43db      	mvns	r3, r3
 8000748:	4619      	mov	r1, r3
 800074a:	687b      	ldr	r3, [r7, #4]
 800074c:	681b      	ldr	r3, [r3, #0]
 800074e:	400a      	ands	r2, r1
 8000750:	605a      	str	r2, [r3, #4]
	//~(0x1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber); nghĩa là tiến hành đảo trạng thái 1 thành 0
	//vị trí chân Pin_Number
	pGPIOHandle->pGPIOx->OTYPER |= temp;
 8000752:	687b      	ldr	r3, [r7, #4]
 8000754:	681b      	ldr	r3, [r3, #0]
 8000756:	6859      	ldr	r1, [r3, #4]
 8000758:	687b      	ldr	r3, [r7, #4]
 800075a:	681b      	ldr	r3, [r3, #0]
 800075c:	697a      	ldr	r2, [r7, #20]
 800075e:	430a      	orrs	r2, r1
 8000760:	605a      	str	r2, [r3, #4]
	temp = 0;
 8000762:	2300      	movs	r3, #0
 8000764:	617b      	str	r3, [r7, #20]

	//5. configure the alt functionality
	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_ALTFN)
 8000766:	687b      	ldr	r3, [r7, #4]
 8000768:	795b      	ldrb	r3, [r3, #5]
 800076a:	2b02      	cmp	r3, #2
 800076c:	d132      	bne.n	80007d4 <GPIO_Init+0x308>
		//Chế độ này đc thực thi khi và chỉ khi bit MODERx đc thiết lập GPIO_MODE_ALTFN

		uint32_t temp1,temp2;

		//Xác định thanh ghi cần sử dụng là GPIOx_AFRH ->AFR[1] hay GPIOx_AFRL ->AFR[0]
		temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 8;
 800076e:	687b      	ldr	r3, [r7, #4]
 8000770:	791b      	ldrb	r3, [r3, #4]
 8000772:	08db      	lsrs	r3, r3, #3
 8000774:	b2db      	uxtb	r3, r3
 8000776:	60fb      	str	r3, [r7, #12]

		//Xác định vị trí cụm 4bit cần sử dụng ở vị trí nào trong thanh ghi
		temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 8;
 8000778:	687b      	ldr	r3, [r7, #4]
 800077a:	791b      	ldrb	r3, [r3, #4]
 800077c:	f003 0307 	and.w	r3, r3, #7
 8000780:	60bb      	str	r3, [r7, #8]

		//Clearing bit field
		pGPIOHandle->pGPIOx->AFR[temp1] &= ~(0xF << (4* temp2));   //0xF = 1111, đảo 1111->0000 tại vị trí 4*temp2
 8000782:	687b      	ldr	r3, [r7, #4]
 8000784:	681b      	ldr	r3, [r3, #0]
 8000786:	68fa      	ldr	r2, [r7, #12]
 8000788:	3208      	adds	r2, #8
 800078a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800078e:	68bb      	ldr	r3, [r7, #8]
 8000790:	009b      	lsls	r3, r3, #2
 8000792:	210f      	movs	r1, #15
 8000794:	fa01 f303 	lsl.w	r3, r1, r3
 8000798:	43db      	mvns	r3, r3
 800079a:	4619      	mov	r1, r3
 800079c:	687b      	ldr	r3, [r7, #4]
 800079e:	681b      	ldr	r3, [r3, #0]
 80007a0:	4011      	ands	r1, r2
 80007a2:	68fa      	ldr	r2, [r7, #12]
 80007a4:	3208      	adds	r2, #8
 80007a6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

		//Lưu cấu hình AFR vào trong con trỏ pGPIOHandle
		pGPIOHandle->pGPIOx->AFR[temp1] |= (pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFunMode << (4* temp2));
 80007aa:	687b      	ldr	r3, [r7, #4]
 80007ac:	681b      	ldr	r3, [r3, #0]
 80007ae:	68fa      	ldr	r2, [r7, #12]
 80007b0:	3208      	adds	r2, #8
 80007b2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80007b6:	687b      	ldr	r3, [r7, #4]
 80007b8:	7a5b      	ldrb	r3, [r3, #9]
 80007ba:	4619      	mov	r1, r3
 80007bc:	68bb      	ldr	r3, [r7, #8]
 80007be:	009b      	lsls	r3, r3, #2
 80007c0:	fa01 f303 	lsl.w	r3, r1, r3
 80007c4:	4619      	mov	r1, r3
 80007c6:	687b      	ldr	r3, [r7, #4]
 80007c8:	681b      	ldr	r3, [r3, #0]
 80007ca:	4311      	orrs	r1, r2
 80007cc:	68fa      	ldr	r2, [r7, #12]
 80007ce:	3208      	adds	r2, #8
 80007d0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	}
}
 80007d4:	bf00      	nop
 80007d6:	3718      	adds	r7, #24
 80007d8:	46bd      	mov	sp, r7
 80007da:	bd80      	pop	{r7, pc}
 80007dc:	40023800 	.word	0x40023800
 80007e0:	40013800 	.word	0x40013800
 80007e4:	40013c00 	.word	0x40013c00

080007e8 <I2C_PeriClockControl>:
 *
 * @Note        - none

 */
void I2C_PeriClockControl(I2C_RegDef_t *pI2Cx, uint8_t EnorDi)
{
 80007e8:	b480      	push	{r7}
 80007ea:	b083      	sub	sp, #12
 80007ec:	af00      	add	r7, sp, #0
 80007ee:	6078      	str	r0, [r7, #4]
 80007f0:	460b      	mov	r3, r1
 80007f2:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE)
 80007f4:	78fb      	ldrb	r3, [r7, #3]
 80007f6:	2b01      	cmp	r3, #1
 80007f8:	d11f      	bne.n	800083a <I2C_PeriClockControl+0x52>
	{
		if(pI2Cx == I2C1)
 80007fa:	687b      	ldr	r3, [r7, #4]
 80007fc:	4a11      	ldr	r2, [pc, #68]	; (8000844 <I2C_PeriClockControl+0x5c>)
 80007fe:	4293      	cmp	r3, r2
 8000800:	d106      	bne.n	8000810 <I2C_PeriClockControl+0x28>
		{
			I2C1_PCLK_EN();
 8000802:	4b11      	ldr	r3, [pc, #68]	; (8000848 <I2C_PeriClockControl+0x60>)
 8000804:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000806:	4a10      	ldr	r2, [pc, #64]	; (8000848 <I2C_PeriClockControl+0x60>)
 8000808:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800080c:	6413      	str	r3, [r2, #64]	; 0x40
	}
	else
	{
		//TODO
	}
}
 800080e:	e014      	b.n	800083a <I2C_PeriClockControl+0x52>
		else if (pI2Cx == I2C2)
 8000810:	687b      	ldr	r3, [r7, #4]
 8000812:	4a0e      	ldr	r2, [pc, #56]	; (800084c <I2C_PeriClockControl+0x64>)
 8000814:	4293      	cmp	r3, r2
 8000816:	d106      	bne.n	8000826 <I2C_PeriClockControl+0x3e>
			I2C2_PCLK_EN();
 8000818:	4b0b      	ldr	r3, [pc, #44]	; (8000848 <I2C_PeriClockControl+0x60>)
 800081a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800081c:	4a0a      	ldr	r2, [pc, #40]	; (8000848 <I2C_PeriClockControl+0x60>)
 800081e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000822:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000824:	e009      	b.n	800083a <I2C_PeriClockControl+0x52>
		else if (pI2Cx == I2C3)
 8000826:	687b      	ldr	r3, [r7, #4]
 8000828:	4a09      	ldr	r2, [pc, #36]	; (8000850 <I2C_PeriClockControl+0x68>)
 800082a:	4293      	cmp	r3, r2
 800082c:	d105      	bne.n	800083a <I2C_PeriClockControl+0x52>
			I2C3_PCLK_EN();
 800082e:	4b06      	ldr	r3, [pc, #24]	; (8000848 <I2C_PeriClockControl+0x60>)
 8000830:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000832:	4a05      	ldr	r2, [pc, #20]	; (8000848 <I2C_PeriClockControl+0x60>)
 8000834:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000838:	6413      	str	r3, [r2, #64]	; 0x40
}
 800083a:	bf00      	nop
 800083c:	370c      	adds	r7, #12
 800083e:	46bd      	mov	sp, r7
 8000840:	bc80      	pop	{r7}
 8000842:	4770      	bx	lr
 8000844:	40005400 	.word	0x40005400
 8000848:	40023800 	.word	0x40023800
 800084c:	40005800 	.word	0x40005800
 8000850:	40005c00 	.word	0x40005c00

08000854 <RCC_GetPLLOutputClock>:
 *
 * @Note        - Không sử dụng xung clock dạng PLL trong khóa học

 */
uint32_t RCC_GetPLLOutputClock(void)
{
 8000854:	b480      	push	{r7}
 8000856:	af00      	add	r7, sp, #0
	return 0;
 8000858:	2300      	movs	r3, #0
}
 800085a:	4618      	mov	r0, r3
 800085c:	46bd      	mov	sp, r7
 800085e:	bc80      	pop	{r7}
 8000860:	4770      	bx	lr
	...

08000864 <RCC_GetPCLK1Value>:
 *
 * @Note        - Sử dụng sơ đồ khối liên quan đến xung Clock của System Clock
 * 				- Thanh ghi CFGR thuộc RCC Register đc sử dụng
 */
uint32_t RCC_GetPCLK1Value(void)
{
 8000864:	b580      	push	{r7, lr}
 8000866:	b084      	sub	sp, #16
 8000868:	af00      	add	r7, sp, #0

	uint8_t clksrc,temp,ahbp,abp1p;				//biến xung clock cho khối system clock

	//Kiểm tra xem SWS[3:2] đang có giá trị bit là bao nhiêu, từ đó xác định khối
	//Oscillator đang đc sử dụng là System Clock
	clksrc = (RCC->CFGR >> 2) & 0x3;	//0x03=0011, nghĩa là đọc 2 vị trí bit liền nhau từ vị trí bit số 2
 800086a:	4b26      	ldr	r3, [pc, #152]	; (8000904 <RCC_GetPCLK1Value+0xa0>)
 800086c:	689b      	ldr	r3, [r3, #8]
 800086e:	089b      	lsrs	r3, r3, #2
 8000870:	b2db      	uxtb	r3, r3
 8000872:	f003 0303 	and.w	r3, r3, #3
 8000876:	727b      	strb	r3, [r7, #9]


	//1. Xác định tần số xung clock tổng của System Clock
	if(clksrc == 0)    		 	//HSI Oscillator
 8000878:	7a7b      	ldrb	r3, [r7, #9]
 800087a:	2b00      	cmp	r3, #0
 800087c:	d102      	bne.n	8000884 <RCC_GetPCLK1Value+0x20>
	{
		SystemClk = 16000000;
 800087e:	4b22      	ldr	r3, [pc, #136]	; (8000908 <RCC_GetPCLK1Value+0xa4>)
 8000880:	60fb      	str	r3, [r7, #12]
 8000882:	e00b      	b.n	800089c <RCC_GetPCLK1Value+0x38>
	}
	else if(clksrc == 1)		//HSE Oscillator
 8000884:	7a7b      	ldrb	r3, [r7, #9]
 8000886:	2b01      	cmp	r3, #1
 8000888:	d102      	bne.n	8000890 <RCC_GetPCLK1Value+0x2c>
	{
		SystemClk = 8000000;
 800088a:	4b20      	ldr	r3, [pc, #128]	; (800090c <RCC_GetPCLK1Value+0xa8>)
 800088c:	60fb      	str	r3, [r7, #12]
 800088e:	e005      	b.n	800089c <RCC_GetPCLK1Value+0x38>
	}
	else if(clksrc == 2)		//PLL Oscillator
 8000890:	7a7b      	ldrb	r3, [r7, #9]
 8000892:	2b02      	cmp	r3, #2
 8000894:	d102      	bne.n	800089c <RCC_GetPCLK1Value+0x38>
	{
		SystemClk = RCC_GetPLLOutputClock();
 8000896:	f7ff ffdd 	bl	8000854 <RCC_GetPLLOutputClock>
 800089a:	60f8      	str	r0, [r7, #12]
	}

	//2. Xác định bộ chia của AHBP Prescaler, bit field HPRE[7:4] của CFGR register
	temp = ((RCC->CFGR >> 4) & 0xF);	//0xF=1111, nghĩa là đọc 4 vị trí bit liền nhau từ vị trí bit số 4
 800089c:	4b19      	ldr	r3, [pc, #100]	; (8000904 <RCC_GetPCLK1Value+0xa0>)
 800089e:	689b      	ldr	r3, [r3, #8]
 80008a0:	091b      	lsrs	r3, r3, #4
 80008a2:	b2db      	uxtb	r3, r3
 80008a4:	f003 030f 	and.w	r3, r3, #15
 80008a8:	723b      	strb	r3, [r7, #8]
	if(temp < 4)
 80008aa:	7a3b      	ldrb	r3, [r7, #8]
 80008ac:	2b03      	cmp	r3, #3
 80008ae:	d802      	bhi.n	80008b6 <RCC_GetPCLK1Value+0x52>
	{
		ahbp = 1;			//Không sử dụng bộ chia
 80008b0:	2301      	movs	r3, #1
 80008b2:	72fb      	strb	r3, [r7, #11]
 80008b4:	e005      	b.n	80008c2 <RCC_GetPCLK1Value+0x5e>
	}
	else
	{
		//Có sử dụng bộ chia, nếu temp=8 thì 8-8=0, sử dụng bộ chia 2,...
		ahbp = AHB_PreScaler[temp - 8];
 80008b6:	7a3b      	ldrb	r3, [r7, #8]
 80008b8:	3b08      	subs	r3, #8
 80008ba:	4a15      	ldr	r2, [pc, #84]	; (8000910 <RCC_GetPCLK1Value+0xac>)
 80008bc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80008c0:	72fb      	strb	r3, [r7, #11]
	}

	//3. Xác định bộ chia của APB1 PreScaler,bit ffield PPRE[12:10] của CFGR register
	temp = ((RCC->CFGR >> 10) & 0x7);	//0xF=1111, nghĩa là đọc 3 vị trí bit liền nhau từ vị trí bit số 10
 80008c2:	4b10      	ldr	r3, [pc, #64]	; (8000904 <RCC_GetPCLK1Value+0xa0>)
 80008c4:	689b      	ldr	r3, [r3, #8]
 80008c6:	0a9b      	lsrs	r3, r3, #10
 80008c8:	b2db      	uxtb	r3, r3
 80008ca:	f003 0307 	and.w	r3, r3, #7
 80008ce:	723b      	strb	r3, [r7, #8]
	if(temp < 8)
 80008d0:	7a3b      	ldrb	r3, [r7, #8]
 80008d2:	2b07      	cmp	r3, #7
 80008d4:	d802      	bhi.n	80008dc <RCC_GetPCLK1Value+0x78>
	{
		abp1p = 1;			//Không sử dụng bộ chia
 80008d6:	2301      	movs	r3, #1
 80008d8:	72bb      	strb	r3, [r7, #10]
 80008da:	e005      	b.n	80008e8 <RCC_GetPCLK1Value+0x84>
	}
	else
	{
		//Có sử dụng bộ chia, nếu temp=8 thì 8-8=0, sử dụng bộ chia 2,...
		abp1p = APB1_PreScaler[temp - 4];
 80008dc:	7a3b      	ldrb	r3, [r7, #8]
 80008de:	3b04      	subs	r3, #4
 80008e0:	4a0c      	ldr	r2, [pc, #48]	; (8000914 <RCC_GetPCLK1Value+0xb0>)
 80008e2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80008e6:	72bb      	strb	r3, [r7, #10]
	}

	//4. Xác định xung PCLK1 dùng cho I2C đc lấy từ từ System Clock
	pclk1 = (SystemClk / ahbp) / abp1p;
 80008e8:	7afb      	ldrb	r3, [r7, #11]
 80008ea:	68fa      	ldr	r2, [r7, #12]
 80008ec:	fbb2 f2f3 	udiv	r2, r2, r3
 80008f0:	7abb      	ldrb	r3, [r7, #10]
 80008f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80008f6:	607b      	str	r3, [r7, #4]

	return pclk1;
 80008f8:	687b      	ldr	r3, [r7, #4]
}
 80008fa:	4618      	mov	r0, r3
 80008fc:	3710      	adds	r7, #16
 80008fe:	46bd      	mov	sp, r7
 8000900:	bd80      	pop	{r7, pc}
 8000902:	bf00      	nop
 8000904:	40023800 	.word	0x40023800
 8000908:	00f42400 	.word	0x00f42400
 800090c:	007a1200 	.word	0x007a1200
 8000910:	20000020 	.word	0x20000020
 8000914:	20000030 	.word	0x20000030

08000918 <I2C_Init>:
 *
 * @Note        - none

 */
void I2C_Init(I2C_Handle_t *pI2CHandle)
{
 8000918:	b580      	push	{r7, lr}
 800091a:	b084      	sub	sp, #16
 800091c:	af00      	add	r7, sp, #0
 800091e:	6078      	str	r0, [r7, #4]
	uint32_t tempreg = 0;		//biến tạm 32 bit temp register
 8000920:	2300      	movs	r3, #0
 8000922:	60fb      	str	r3, [r7, #12]

	//Enable the Clock for the I2Cx peripheral - Kích hoạt xung clock cho I2Cx
	I2C_PeriClockControl(pI2CHandle->pI2Cx, ENABLE);
 8000924:	687b      	ldr	r3, [r7, #4]
 8000926:	681b      	ldr	r3, [r3, #0]
 8000928:	2101      	movs	r1, #1
 800092a:	4618      	mov	r0, r3
 800092c:	f7ff ff5c 	bl	80007e8 <I2C_PeriClockControl>

	//Đọc và Lưu giá trị của I2C_AckControl(sẽ đc set khi init) vào vị trí bit thứ 10 biến tạm tempreg
	tempreg |= pI2CHandle->I2C_Config.I2C_AckControl << 10;				//Ack control bit
 8000930:	687b      	ldr	r3, [r7, #4]
 8000932:	7a5b      	ldrb	r3, [r3, #9]
 8000934:	029b      	lsls	r3, r3, #10
 8000936:	461a      	mov	r2, r3
 8000938:	68fb      	ldr	r3, [r7, #12]
 800093a:	4313      	orrs	r3, r2
 800093c:	60fb      	str	r3, [r7, #12]
	//Kích hoạt hoặc vô hiệu hóa theo yêu cầu của User

	//Thiết lập giá trị bit thứ 10 của thanh ghi CR1 với giá trị biến tempreg
	pI2CHandle->pI2Cx->CR1 = tempreg;
 800093e:	687b      	ldr	r3, [r7, #4]
 8000940:	681b      	ldr	r3, [r3, #0]
 8000942:	68fa      	ldr	r2, [r7, #12]
 8000944:	601a      	str	r2, [r3, #0]

	/* Cấu hình bit field FREQ của CR2 register */
	tempreg = 0;
 8000946:	2300      	movs	r3, #0
 8000948:	60fb      	str	r3, [r7, #12]
	tempreg |= RCC_GetPCLK1Value() / 1000000U;
 800094a:	f7ff ff8b 	bl	8000864 <RCC_GetPCLK1Value>
 800094e:	4603      	mov	r3, r0
 8000950:	4a48      	ldr	r2, [pc, #288]	; (8000a74 <I2C_Init+0x15c>)
 8000952:	fba2 2303 	umull	r2, r3, r2, r3
 8000956:	0c9b      	lsrs	r3, r3, #18
 8000958:	68fa      	ldr	r2, [r7, #12]
 800095a:	4313      	orrs	r3, r2
 800095c:	60fb      	str	r3, [r7, #12]
	//Giải thích: vì giá trị trả về là 16MHz nên ta chia 1MHz để lấy giá trị 16

	pI2CHandle->pI2Cx->CR2 = (tempreg & 0x3F);  //0x3F = 0011 1111
 800095e:	687b      	ldr	r3, [r7, #4]
 8000960:	681b      	ldr	r3, [r3, #0]
 8000962:	68fa      	ldr	r2, [r7, #12]
 8000964:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8000968:	605a      	str	r2, [r3, #4]
	//Giá trị 16 của tempreg khi biên dịch sẽ đc trình biên dịch tách thành mã nhị phân
	//sau đó & với 0x3F vì bit field FREQ sử dụng 6 bit đầu của CR2 Register

	/* Lập trình định dạng địa chỉ và địa chỉ của thiết bị , OAR1 register */
	tempreg |= pI2CHandle->I2C_Config.I2C_DeviceAddress << 1;	// ADD[7:1] : lấy giá trị từ bit thứ 2
 800096a:	687b      	ldr	r3, [r7, #4]
 800096c:	7a1b      	ldrb	r3, [r3, #8]
 800096e:	005b      	lsls	r3, r3, #1
 8000970:	461a      	mov	r2, r3
 8000972:	68fb      	ldr	r3, [r7, #12]
 8000974:	4313      	orrs	r3, r2
 8000976:	60fb      	str	r3, [r7, #12]
	tempreg |= (1 << 14);								//Lệnh bắt buộc bit thứ 14 luôn là 1 khi cấu hình
 8000978:	68fb      	ldr	r3, [r7, #12]
 800097a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800097e:	60fb      	str	r3, [r7, #12]
	pI2CHandle->pI2Cx->OAR1 = tempreg;					//Đưa vào cấu hình thanh ghi OAR1 bằng giá trị tempreg
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	681b      	ldr	r3, [r3, #0]
 8000984:	68fa      	ldr	r2, [r7, #12]
 8000986:	609a      	str	r2, [r3, #8]

	/* CCR Calculations, Tính toán tần số cho Clock control register */
	uint16_t ccr_value = 0;					//giá trị tần số tạm
 8000988:	2300      	movs	r3, #0
 800098a:	817b      	strh	r3, [r7, #10]
	tempreg = 0;
 800098c:	2300      	movs	r3, #0
 800098e:	60fb      	str	r3, [r7, #12]

	//Kiểm tra speed đc cài đặt đầu vào ở tần số nào từ đó suy ra chế độ đang sử dụng
	if(pI2CHandle->I2C_Config.I2C_SCLSpeed <= I2C_SCL_SPEED_SM)
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	685b      	ldr	r3, [r3, #4]
 8000994:	4a38      	ldr	r2, [pc, #224]	; (8000a78 <I2C_Init+0x160>)
 8000996:	4293      	cmp	r3, r2
 8000998:	d80f      	bhi.n	80009ba <I2C_Init+0xa2>
	{
		//Nếu ở Standard Mode
		ccr_value = (RCC_GetPCLK1Value() / (2 * pI2CHandle->I2C_Config.I2C_SCLSpeed));
 800099a:	f7ff ff63 	bl	8000864 <RCC_GetPCLK1Value>
 800099e:	4602      	mov	r2, r0
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	685b      	ldr	r3, [r3, #4]
 80009a4:	005b      	lsls	r3, r3, #1
 80009a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80009aa:	817b      	strh	r3, [r7, #10]
		tempreg |= ccr_value & 0xFFF;	//0xFFF: CCR[11:0] của CCR Register (If Standard Mode)
 80009ac:	897b      	ldrh	r3, [r7, #10]
 80009ae:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80009b2:	68fa      	ldr	r2, [r7, #12]
 80009b4:	4313      	orrs	r3, r2
 80009b6:	60fb      	str	r3, [r7, #12]
 80009b8:	e02d      	b.n	8000a16 <I2C_Init+0xfe>
	}
	else
	{
		//Nếu ở Fast Mode
		tempreg |= ( 1 << 15);	//Đưa bit field F/S[15] lên 1 của CCR Register, kích hoạt chế độ Fast Mode
 80009ba:	68fb      	ldr	r3, [r7, #12]
 80009bc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80009c0:	60fb      	str	r3, [r7, #12]
		tempreg |= (pI2CHandle->I2C_Config.I2C_FmDutyCycle << 14); //Set value Duty đã đc user input khi init
 80009c2:	687b      	ldr	r3, [r7, #4]
 80009c4:	7a9b      	ldrb	r3, [r3, #10]
 80009c6:	039b      	lsls	r3, r3, #14
 80009c8:	461a      	mov	r2, r3
 80009ca:	68fb      	ldr	r3, [r7, #12]
 80009cc:	4313      	orrs	r3, r2
 80009ce:	60fb      	str	r3, [r7, #12]
		//vào bit field DUTY[14]

		//Kiểm tra DUTY đang ở trạng thái nào để áp dụng công thức
		if(pI2CHandle->I2C_Config.I2C_FmDutyCycle == I2C_FM_DUTY_2)
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	7a9b      	ldrb	r3, [r3, #10]
 80009d4:	2b00      	cmp	r3, #0
 80009d6:	d10b      	bne.n	80009f0 <I2C_Init+0xd8>
		{
			//Nếu Duty = 0
			ccr_value = (RCC_GetPCLK1Value() / (3 * pI2CHandle->I2C_Config.I2C_SCLSpeed));
 80009d8:	f7ff ff44 	bl	8000864 <RCC_GetPCLK1Value>
 80009dc:	4601      	mov	r1, r0
 80009de:	687b      	ldr	r3, [r7, #4]
 80009e0:	685a      	ldr	r2, [r3, #4]
 80009e2:	4613      	mov	r3, r2
 80009e4:	005b      	lsls	r3, r3, #1
 80009e6:	4413      	add	r3, r2
 80009e8:	fbb1 f3f3 	udiv	r3, r1, r3
 80009ec:	817b      	strh	r3, [r7, #10]
 80009ee:	e00c      	b.n	8000a0a <I2C_Init+0xf2>
		}
		else
		{
			//Nếu Duty = 1
			ccr_value = (RCC_GetPCLK1Value() / (25 * pI2CHandle->I2C_Config.I2C_SCLSpeed));
 80009f0:	f7ff ff38 	bl	8000864 <RCC_GetPCLK1Value>
 80009f4:	4601      	mov	r1, r0
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	685a      	ldr	r2, [r3, #4]
 80009fa:	4613      	mov	r3, r2
 80009fc:	009b      	lsls	r3, r3, #2
 80009fe:	4413      	add	r3, r2
 8000a00:	009a      	lsls	r2, r3, #2
 8000a02:	4413      	add	r3, r2
 8000a04:	fbb1 f3f3 	udiv	r3, r1, r3
 8000a08:	817b      	strh	r3, [r7, #10]
		}

		tempreg |= ccr_value & 0xFFF;	//0xFFF: CCR[11:0] của CCR Register (If Fast Mode)
 8000a0a:	897b      	ldrh	r3, [r7, #10]
 8000a0c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000a10:	68fa      	ldr	r2, [r7, #12]
 8000a12:	4313      	orrs	r3, r2
 8000a14:	60fb      	str	r3, [r7, #12]
	}
	pI2CHandle->pI2Cx->CCR |= tempreg;		//Cấu hình thanh ghi CCR cho processor
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	681b      	ldr	r3, [r3, #0]
 8000a1a:	69d9      	ldr	r1, [r3, #28]
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	681b      	ldr	r3, [r3, #0]
 8000a20:	68fa      	ldr	r2, [r7, #12]
 8000a22:	430a      	orrs	r2, r1
 8000a24:	61da      	str	r2, [r3, #28]

	/* TRISE Configuration TRISE register (I2C_TRISE) */
	//Kiểm tra speed đc cài đặt đầu vào ở tần số nào từ đó suy ra chế độ đang sử dụng
	if(pI2CHandle->I2C_Config.I2C_SCLSpeed <= I2C_SCL_SPEED_SM)
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	685b      	ldr	r3, [r3, #4]
 8000a2a:	4a13      	ldr	r2, [pc, #76]	; (8000a78 <I2C_Init+0x160>)
 8000a2c:	4293      	cmp	r3, r2
 8000a2e:	d809      	bhi.n	8000a44 <I2C_Init+0x12c>
	{
		//Nếu ở Standard Mode
		tempreg = (RCC_GetPCLK1Value() / 1000000U) + 1;	//công thức datasheet
 8000a30:	f7ff ff18 	bl	8000864 <RCC_GetPCLK1Value>
 8000a34:	4603      	mov	r3, r0
 8000a36:	4a0f      	ldr	r2, [pc, #60]	; (8000a74 <I2C_Init+0x15c>)
 8000a38:	fba2 2303 	umull	r2, r3, r2, r3
 8000a3c:	0c9b      	lsrs	r3, r3, #18
 8000a3e:	3301      	adds	r3, #1
 8000a40:	60fb      	str	r3, [r7, #12]
 8000a42:	e00d      	b.n	8000a60 <I2C_Init+0x148>
	}
	else
	{
		//Nếu ở Fast Mode
		tempreg = ((RCC_GetPCLK1Value() * 300) / 1000000000U) + 1; //công thức datasheet
 8000a44:	f7ff ff0e 	bl	8000864 <RCC_GetPCLK1Value>
 8000a48:	4603      	mov	r3, r0
 8000a4a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8000a4e:	fb02 f303 	mul.w	r3, r2, r3
 8000a52:	0a5b      	lsrs	r3, r3, #9
 8000a54:	4a09      	ldr	r2, [pc, #36]	; (8000a7c <I2C_Init+0x164>)
 8000a56:	fba2 2303 	umull	r2, r3, r2, r3
 8000a5a:	09db      	lsrs	r3, r3, #7
 8000a5c:	3301      	adds	r3, #1
 8000a5e:	60fb      	str	r3, [r7, #12]
	}
	//0x3F: 0011 1111, TRISE[5:0] của TRISE Register
	pI2CHandle->pI2Cx->TRISE = (tempreg & 0x3F);		//Cấu hình thanh ghi TRISE cho processor
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	681b      	ldr	r3, [r3, #0]
 8000a64:	68fa      	ldr	r2, [r7, #12]
 8000a66:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8000a6a:	621a      	str	r2, [r3, #32]
}
 8000a6c:	bf00      	nop
 8000a6e:	3710      	adds	r7, #16
 8000a70:	46bd      	mov	sp, r7
 8000a72:	bd80      	pop	{r7, pc}
 8000a74:	431bde83 	.word	0x431bde83
 8000a78:	000186a0 	.word	0x000186a0
 8000a7c:	00044b83 	.word	0x00044b83

08000a80 <I2C_ExecuteAddressPhaseWrite>:
 * @return      - none
 *
 * @Note        - SlaveAddr : sẽ đc cài đặt ở phía phần cứng làm Slave
 */
static void I2C_ExecuteAddressPhaseWrite(I2C_RegDef_t *pI2Cx,uint8_t SlaveAddr)
{
 8000a80:	b480      	push	{r7}
 8000a82:	b083      	sub	sp, #12
 8000a84:	af00      	add	r7, sp, #0
 8000a86:	6078      	str	r0, [r7, #4]
 8000a88:	460b      	mov	r3, r1
 8000a8a:	70fb      	strb	r3, [r7, #3]
	//Tiến hành dịch biến SlaveAddr lên 1 bit vì bit0 sẽ chứa giá trị thực hiện việc read hoặc write,
	SlaveAddr = SlaveAddr << 1;			//và bit1->7chứa data địa chỉ(ko làm mất data addr khi set bit0)
 8000a8c:	78fb      	ldrb	r3, [r7, #3]
 8000a8e:	005b      	lsls	r3, r3, #1
 8000a90:	70fb      	strb	r3, [r7, #3]
	SlaveAddr &= ~(1); 					//thiết lập bit0 = 0 = write(gửi data từ master->slave)
 8000a92:	78fb      	ldrb	r3, [r7, #3]
 8000a94:	f023 0301 	bic.w	r3, r3, #1
 8000a98:	70fb      	strb	r3, [r7, #3]
										//SlaveAddr: Slave Addrress + r/nw bit[0]=0

	pI2Cx->DR = SlaveAddr;				//Cấu hình thanh ghi DR cho processor DR[7:0]
 8000a9a:	78fa      	ldrb	r2, [r7, #3]
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	611a      	str	r2, [r3, #16]
}
 8000aa0:	bf00      	nop
 8000aa2:	370c      	adds	r7, #12
 8000aa4:	46bd      	mov	sp, r7
 8000aa6:	bc80      	pop	{r7}
 8000aa8:	4770      	bx	lr

08000aaa <I2C_ExecuteAddressPhaseRead>:
 * @return      - none
 *
 * @Note        - SlaveAddr : sẽ đc cài đặt ở phía phần cứng làm Slave
 */
static void I2C_ExecuteAddressPhaseRead(I2C_RegDef_t *pI2Cx,uint8_t SlaveAddr)
{
 8000aaa:	b480      	push	{r7}
 8000aac:	b083      	sub	sp, #12
 8000aae:	af00      	add	r7, sp, #0
 8000ab0:	6078      	str	r0, [r7, #4]
 8000ab2:	460b      	mov	r3, r1
 8000ab4:	70fb      	strb	r3, [r7, #3]
	//Tiến hành dịch biến SlaveAddr lên 1 bit vì bit0 sẽ chứa giá trị thực hiện việc read hoặc write,
	SlaveAddr = SlaveAddr << 1;			//và bit1->7chứa data địa chỉ(ko làm mất data addr khi set bit0)
 8000ab6:	78fb      	ldrb	r3, [r7, #3]
 8000ab8:	005b      	lsls	r3, r3, #1
 8000aba:	70fb      	strb	r3, [r7, #3]
	SlaveAddr |= 1; 					//thiết lập bit0 = 1 = read(gửi data từ slave->master)
 8000abc:	78fb      	ldrb	r3, [r7, #3]
 8000abe:	f043 0301 	orr.w	r3, r3, #1
 8000ac2:	70fb      	strb	r3, [r7, #3]
										//SlaveAddr: Slave Addrress + r/nw bit[0]=1

	pI2Cx->DR = SlaveAddr;				//Cấu hình thanh ghi DR cho processor DR[7:0]
 8000ac4:	78fa      	ldrb	r2, [r7, #3]
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	611a      	str	r2, [r3, #16]
}
 8000aca:	bf00      	nop
 8000acc:	370c      	adds	r7, #12
 8000ace:	46bd      	mov	sp, r7
 8000ad0:	bc80      	pop	{r7}
 8000ad2:	4770      	bx	lr

08000ad4 <I2C_ClearADDRFlag>:
 * @return      - none
 *
 * @Note        - Đạt đc EVx Condition
 */
static void I2C_ClearADDRFlag(I2C_Handle_t *pI2CHandle)
{
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	b084      	sub	sp, #16
 8000ad8:	af00      	add	r7, sp, #0
 8000ada:	6078      	str	r0, [r7, #4]
	//Việc đọc(gán) giá trị của thanh ghi SR1 và SR2 sẽ làm xóa cờ ADDR.
	//Việc bỏ qua giá trị của biến tạm là để tránh lãng phí tài nguyên bộ nhớ.

	//New(V224)
	//Check for device mode
	if(pI2CHandle->pI2Cx->SR2 && (1 << I2C_SR2_MSL))
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	681b      	ldr	r3, [r3, #0]
 8000ae0:	699b      	ldr	r3, [r3, #24]
 8000ae2:	2b00      	cmp	r3, #0
 8000ae4:	d01f      	beq.n	8000b26 <I2C_ClearADDRFlag+0x52>
	{
		//device is in Master mode
		if(pI2CHandle->TxRxState == I2C_BUSY_IN_RX)
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	7f1b      	ldrb	r3, [r3, #28]
 8000aea:	2b01      	cmp	r3, #1
 8000aec:	d112      	bne.n	8000b14 <I2C_ClearADDRFlag+0x40>
		{
			if(pI2CHandle->RxLen == 1)
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	699b      	ldr	r3, [r3, #24]
 8000af2:	2b01      	cmp	r3, #1
 8000af4:	d120      	bne.n	8000b38 <I2C_ClearADDRFlag+0x64>
			{
				//first disable the ack - vô hiệu hóa ack
				I2C_ManageAcking(pI2CHandle->pI2Cx, DISABLE);
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	681b      	ldr	r3, [r3, #0]
 8000afa:	2100      	movs	r1, #0
 8000afc:	4618      	mov	r0, r3
 8000afe:	f000 f82f 	bl	8000b60 <I2C_ManageAcking>
				//vô hiệu hóa vì ở hàm I2C_MasterReceiveData thì ở TH1 len==1 ta đã vô hiệu hóa
				//nhưng lúc đó có thể ko thuộc I2C_BUSY_IN_RX nên cần làm lại

				//clear the ADDR flag (read SR1, read SR2)
				dummyRead = pI2CHandle->pI2Cx->SR1;			//biến tạm lưu value SR1 Register 32bit
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	681b      	ldr	r3, [r3, #0]
 8000b06:	695b      	ldr	r3, [r3, #20]
 8000b08:	60fb      	str	r3, [r7, #12]
				dummyRead = pI2CHandle->pI2Cx->SR2;			//biến tạm lưu value SR2 Register 32bit
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	681b      	ldr	r3, [r3, #0]
 8000b0e:	699b      	ldr	r3, [r3, #24]
 8000b10:	60fb      	str	r3, [r7, #12]
		if(pI2CHandle->TxRxState == I2C_BUSY_IN_RX)
 8000b12:	e011      	b.n	8000b38 <I2C_ClearADDRFlag+0x64>
			}
		}
		else
		{
			//clear the ADDR flag (read SR1, read SR2)
			dummyRead = pI2CHandle->pI2Cx->SR1;			//biến tạm lưu value SR1 Register 32bit
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	681b      	ldr	r3, [r3, #0]
 8000b18:	695b      	ldr	r3, [r3, #20]
 8000b1a:	60fb      	str	r3, [r7, #12]
			dummyRead = pI2CHandle->pI2Cx->SR2;			//biến tạm lưu value SR2 Register 32bit
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	681b      	ldr	r3, [r3, #0]
 8000b20:	699b      	ldr	r3, [r3, #24]
 8000b22:	60fb      	str	r3, [r7, #12]
		if(pI2CHandle->TxRxState == I2C_BUSY_IN_RX)
 8000b24:	e008      	b.n	8000b38 <I2C_ClearADDRFlag+0x64>
	}
	else
	{
		//device is in Slave mode
		//clear the ADDR flag (read SR1, read SR2)
		dummyRead = pI2CHandle->pI2Cx->SR1;			//biến tạm lưu value SR1 Register 32bit
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	681b      	ldr	r3, [r3, #0]
 8000b2a:	695b      	ldr	r3, [r3, #20]
 8000b2c:	60fb      	str	r3, [r7, #12]
		dummyRead = pI2CHandle->pI2Cx->SR2;			//biến tạm lưu value SR2 Register 32bit
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	681b      	ldr	r3, [r3, #0]
 8000b32:	699b      	ldr	r3, [r3, #24]
 8000b34:	60fb      	str	r3, [r7, #12]
		(void)dummyRead;				//Tránh trình biên dịch tối ưu hóa vì biến đã đc sử dụng
	}

}
 8000b36:	e000      	b.n	8000b3a <I2C_ClearADDRFlag+0x66>
		if(pI2CHandle->TxRxState == I2C_BUSY_IN_RX)
 8000b38:	bf00      	nop
}
 8000b3a:	bf00      	nop
 8000b3c:	3710      	adds	r7, #16
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	bd80      	pop	{r7, pc}

08000b42 <I2C_GenerateStopCondition>:
 * @return      - none
 *
 * @Note        - I2C_CR1, bit field STOP[9]
 */
void I2C_GenerateStopCondition(I2C_RegDef_t *pI2Cx)
{
 8000b42:	b480      	push	{r7}
 8000b44:	b083      	sub	sp, #12
 8000b46:	af00      	add	r7, sp, #0
 8000b48:	6078      	str	r0, [r7, #4]
	//Set bit field STOP[9] lên high
	pI2Cx->CR1 |= (1 << I2C_CR1_STOP);		//Cấu hình thanh ghi CR1 cho processor
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	681b      	ldr	r3, [r3, #0]
 8000b4e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	601a      	str	r2, [r3, #0]
}
 8000b56:	bf00      	nop
 8000b58:	370c      	adds	r7, #12
 8000b5a:	46bd      	mov	sp, r7
 8000b5c:	bc80      	pop	{r7}
 8000b5e:	4770      	bx	lr

08000b60 <I2C_ManageAcking>:
 * 0: No acknowledge returned
   1: Acknowledge returned after a byte is received (matched address or data)
   Mặc định khi Slave->Master từ Ack=1
 */
void I2C_ManageAcking(I2C_RegDef_t *pI2Cx, uint8_t EnorDi)
{
 8000b60:	b480      	push	{r7}
 8000b62:	b083      	sub	sp, #12
 8000b64:	af00      	add	r7, sp, #0
 8000b66:	6078      	str	r0, [r7, #4]
 8000b68:	460b      	mov	r3, r1
 8000b6a:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == I2C_ACK_ENABLE)
 8000b6c:	78fb      	ldrb	r3, [r7, #3]
 8000b6e:	2b01      	cmp	r3, #1
 8000b70:	d106      	bne.n	8000b80 <I2C_ManageAcking+0x20>
	{
		//Enable the Ack(set bit)
		pI2Cx->CR1 |= (1 << I2C_CR1_ACK);	//Cấu hình thanh ghi CR1[ACK] cho processor
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	681b      	ldr	r3, [r3, #0]
 8000b76:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	601a      	str	r2, [r3, #0]
	else
	{
		//Disable the Ack(Clear bit)
		pI2Cx->CR1 &= ~(1 << I2C_CR1_ACK);	//Cấu hình thanh ghi CR1[ACK] cho processor
	}
}
 8000b7e:	e005      	b.n	8000b8c <I2C_ManageAcking+0x2c>
		pI2Cx->CR1 &= ~(1 << I2C_CR1_ACK);	//Cấu hình thanh ghi CR1[ACK] cho processor
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	681b      	ldr	r3, [r3, #0]
 8000b84:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	601a      	str	r2, [r3, #0]
}
 8000b8c:	bf00      	nop
 8000b8e:	370c      	adds	r7, #12
 8000b90:	46bd      	mov	sp, r7
 8000b92:	bc80      	pop	{r7}
 8000b94:	4770      	bx	lr

08000b96 <I2C_PeripheralControl>:
 * @return      - none
 *
 * @Note        - none
 */
void I2C_PeripheralControl(I2C_RegDef_t *pI2Cx, uint8_t EnOrDi)
{
 8000b96:	b480      	push	{r7}
 8000b98:	b083      	sub	sp, #12
 8000b9a:	af00      	add	r7, sp, #0
 8000b9c:	6078      	str	r0, [r7, #4]
 8000b9e:	460b      	mov	r3, r1
 8000ba0:	70fb      	strb	r3, [r7, #3]
	if(EnOrDi == ENABLE)
 8000ba2:	78fb      	ldrb	r3, [r7, #3]
 8000ba4:	2b01      	cmp	r3, #1
 8000ba6:	d106      	bne.n	8000bb6 <I2C_PeripheralControl+0x20>
	{
		pI2Cx->CR1 |= (1 << I2C_CR1_PE);
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	681b      	ldr	r3, [r3, #0]
 8000bac:	f043 0201 	orr.w	r2, r3, #1
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	601a      	str	r2, [r3, #0]
		//pI2cBaseAddress->CR1 |= I2C_CR1_PE_Bit_Mask;
	}else
	{
		pI2Cx->CR1 &= ~(1 << 0);
	}
}
 8000bb4:	e005      	b.n	8000bc2 <I2C_PeripheralControl+0x2c>
		pI2Cx->CR1 &= ~(1 << 0);
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	681b      	ldr	r3, [r3, #0]
 8000bba:	f023 0201 	bic.w	r2, r3, #1
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	601a      	str	r2, [r3, #0]
}
 8000bc2:	bf00      	nop
 8000bc4:	370c      	adds	r7, #12
 8000bc6:	46bd      	mov	sp, r7
 8000bc8:	bc80      	pop	{r7}
 8000bca:	4770      	bx	lr

08000bcc <I2C_IRQInterruptConfig>:
 * @return		- none
 *
 * @Note 		- none
 */
void I2C_IRQInterruptConfig(uint8_t IRQNumber, uint8_t EnorDi)
{
 8000bcc:	b480      	push	{r7}
 8000bce:	b083      	sub	sp, #12
 8000bd0:	af00      	add	r7, sp, #0
 8000bd2:	4603      	mov	r3, r0
 8000bd4:	460a      	mov	r2, r1
 8000bd6:	71fb      	strb	r3, [r7, #7]
 8000bd8:	4613      	mov	r3, r2
 8000bda:	71bb      	strb	r3, [r7, #6]
	if(EnorDi == ENABLE)	//cho phép kích hoạt interrupt
 8000bdc:	79bb      	ldrb	r3, [r7, #6]
 8000bde:	2b01      	cmp	r3, #1
 8000be0:	d133      	bne.n	8000c4a <I2C_IRQInterruptConfig+0x7e>
	{
		if(IRQNumber <= 31)
 8000be2:	79fb      	ldrb	r3, [r7, #7]
 8000be4:	2b1f      	cmp	r3, #31
 8000be6:	d80a      	bhi.n	8000bfe <I2C_IRQInterruptConfig+0x32>
		{
			//program ISER0 register
			*NVIC_ISER0 |= (1 << IRQNumber);
 8000be8:	4b34      	ldr	r3, [pc, #208]	; (8000cbc <I2C_IRQInterruptConfig+0xf0>)
 8000bea:	681b      	ldr	r3, [r3, #0]
 8000bec:	79fa      	ldrb	r2, [r7, #7]
 8000bee:	2101      	movs	r1, #1
 8000bf0:	fa01 f202 	lsl.w	r2, r1, r2
 8000bf4:	4611      	mov	r1, r2
 8000bf6:	4a31      	ldr	r2, [pc, #196]	; (8000cbc <I2C_IRQInterruptConfig+0xf0>)
 8000bf8:	430b      	orrs	r3, r1
 8000bfa:	6013      	str	r3, [r2, #0]
		{
			//program ICER2 register
			*NVIC_ICER2 |= (1 << IRQNumber % 64);
		}
	}
}
 8000bfc:	e059      	b.n	8000cb2 <I2C_IRQInterruptConfig+0xe6>
		else if(IRQNumber > 31 && IRQNumber < 64)
 8000bfe:	79fb      	ldrb	r3, [r7, #7]
 8000c00:	2b1f      	cmp	r3, #31
 8000c02:	d90f      	bls.n	8000c24 <I2C_IRQInterruptConfig+0x58>
 8000c04:	79fb      	ldrb	r3, [r7, #7]
 8000c06:	2b3f      	cmp	r3, #63	; 0x3f
 8000c08:	d80c      	bhi.n	8000c24 <I2C_IRQInterruptConfig+0x58>
			*NVIC_ISER1 |= (1 << IRQNumber % 32);   //vd 32%32=0, lấy bit 0 của ISER1
 8000c0a:	4b2d      	ldr	r3, [pc, #180]	; (8000cc0 <I2C_IRQInterruptConfig+0xf4>)
 8000c0c:	681b      	ldr	r3, [r3, #0]
 8000c0e:	79fa      	ldrb	r2, [r7, #7]
 8000c10:	f002 021f 	and.w	r2, r2, #31
 8000c14:	2101      	movs	r1, #1
 8000c16:	fa01 f202 	lsl.w	r2, r1, r2
 8000c1a:	4611      	mov	r1, r2
 8000c1c:	4a28      	ldr	r2, [pc, #160]	; (8000cc0 <I2C_IRQInterruptConfig+0xf4>)
 8000c1e:	430b      	orrs	r3, r1
 8000c20:	6013      	str	r3, [r2, #0]
 8000c22:	e046      	b.n	8000cb2 <I2C_IRQInterruptConfig+0xe6>
		else if(IRQNumber >= 64 && IRQNumber < 96)
 8000c24:	79fb      	ldrb	r3, [r7, #7]
 8000c26:	2b3f      	cmp	r3, #63	; 0x3f
 8000c28:	d943      	bls.n	8000cb2 <I2C_IRQInterruptConfig+0xe6>
 8000c2a:	79fb      	ldrb	r3, [r7, #7]
 8000c2c:	2b5f      	cmp	r3, #95	; 0x5f
 8000c2e:	d840      	bhi.n	8000cb2 <I2C_IRQInterruptConfig+0xe6>
			*NVIC_ISER2 |= (1 << IRQNumber % 64);
 8000c30:	4b24      	ldr	r3, [pc, #144]	; (8000cc4 <I2C_IRQInterruptConfig+0xf8>)
 8000c32:	681b      	ldr	r3, [r3, #0]
 8000c34:	79fa      	ldrb	r2, [r7, #7]
 8000c36:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8000c3a:	2101      	movs	r1, #1
 8000c3c:	fa01 f202 	lsl.w	r2, r1, r2
 8000c40:	4611      	mov	r1, r2
 8000c42:	4a20      	ldr	r2, [pc, #128]	; (8000cc4 <I2C_IRQInterruptConfig+0xf8>)
 8000c44:	430b      	orrs	r3, r1
 8000c46:	6013      	str	r3, [r2, #0]
}
 8000c48:	e033      	b.n	8000cb2 <I2C_IRQInterruptConfig+0xe6>
		if(IRQNumber <= 31)
 8000c4a:	79fb      	ldrb	r3, [r7, #7]
 8000c4c:	2b1f      	cmp	r3, #31
 8000c4e:	d80a      	bhi.n	8000c66 <I2C_IRQInterruptConfig+0x9a>
			*NVIC_ICER0 |= (1 << IRQNumber);
 8000c50:	4b1d      	ldr	r3, [pc, #116]	; (8000cc8 <I2C_IRQInterruptConfig+0xfc>)
 8000c52:	681b      	ldr	r3, [r3, #0]
 8000c54:	79fa      	ldrb	r2, [r7, #7]
 8000c56:	2101      	movs	r1, #1
 8000c58:	fa01 f202 	lsl.w	r2, r1, r2
 8000c5c:	4611      	mov	r1, r2
 8000c5e:	4a1a      	ldr	r2, [pc, #104]	; (8000cc8 <I2C_IRQInterruptConfig+0xfc>)
 8000c60:	430b      	orrs	r3, r1
 8000c62:	6013      	str	r3, [r2, #0]
}
 8000c64:	e025      	b.n	8000cb2 <I2C_IRQInterruptConfig+0xe6>
		else if(IRQNumber > 31 && IRQNumber < 64)
 8000c66:	79fb      	ldrb	r3, [r7, #7]
 8000c68:	2b1f      	cmp	r3, #31
 8000c6a:	d90f      	bls.n	8000c8c <I2C_IRQInterruptConfig+0xc0>
 8000c6c:	79fb      	ldrb	r3, [r7, #7]
 8000c6e:	2b3f      	cmp	r3, #63	; 0x3f
 8000c70:	d80c      	bhi.n	8000c8c <I2C_IRQInterruptConfig+0xc0>
			*NVIC_ICER1 |= (1 << IRQNumber % 32);
 8000c72:	4b16      	ldr	r3, [pc, #88]	; (8000ccc <I2C_IRQInterruptConfig+0x100>)
 8000c74:	681b      	ldr	r3, [r3, #0]
 8000c76:	79fa      	ldrb	r2, [r7, #7]
 8000c78:	f002 021f 	and.w	r2, r2, #31
 8000c7c:	2101      	movs	r1, #1
 8000c7e:	fa01 f202 	lsl.w	r2, r1, r2
 8000c82:	4611      	mov	r1, r2
 8000c84:	4a11      	ldr	r2, [pc, #68]	; (8000ccc <I2C_IRQInterruptConfig+0x100>)
 8000c86:	430b      	orrs	r3, r1
 8000c88:	6013      	str	r3, [r2, #0]
 8000c8a:	e012      	b.n	8000cb2 <I2C_IRQInterruptConfig+0xe6>
		else if(IRQNumber >= 64 && IRQNumber < 96)
 8000c8c:	79fb      	ldrb	r3, [r7, #7]
 8000c8e:	2b3f      	cmp	r3, #63	; 0x3f
 8000c90:	d90f      	bls.n	8000cb2 <I2C_IRQInterruptConfig+0xe6>
 8000c92:	79fb      	ldrb	r3, [r7, #7]
 8000c94:	2b5f      	cmp	r3, #95	; 0x5f
 8000c96:	d80c      	bhi.n	8000cb2 <I2C_IRQInterruptConfig+0xe6>
			*NVIC_ICER2 |= (1 << IRQNumber % 64);
 8000c98:	4b0d      	ldr	r3, [pc, #52]	; (8000cd0 <I2C_IRQInterruptConfig+0x104>)
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	79fa      	ldrb	r2, [r7, #7]
 8000c9e:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8000ca2:	2101      	movs	r1, #1
 8000ca4:	fa01 f202 	lsl.w	r2, r1, r2
 8000ca8:	4611      	mov	r1, r2
 8000caa:	4a09      	ldr	r2, [pc, #36]	; (8000cd0 <I2C_IRQInterruptConfig+0x104>)
 8000cac:	430b      	orrs	r3, r1
 8000cae:	6013      	str	r3, [r2, #0]
}
 8000cb0:	e7ff      	b.n	8000cb2 <I2C_IRQInterruptConfig+0xe6>
 8000cb2:	bf00      	nop
 8000cb4:	370c      	adds	r7, #12
 8000cb6:	46bd      	mov	sp, r7
 8000cb8:	bc80      	pop	{r7}
 8000cba:	4770      	bx	lr
 8000cbc:	e000e100 	.word	0xe000e100
 8000cc0:	e000e104 	.word	0xe000e104
 8000cc4:	e000e108 	.word	0xe000e108
 8000cc8:	e000e180 	.word	0xe000e180
 8000ccc:	e000e184 	.word	0xe000e184
 8000cd0:	e000e188 	.word	0xe000e188

08000cd4 <I2C_EV_IRQHangling>:
 * @param[in]   - pI2CHandle: Con trỏ là chứa cấu hình I2C peripheral
 * @return      - none
 * @Note        - Xử lý ngắt cho các sự kiện I2C khác nhau (tham khảo SR1)
 */
void I2C_EV_IRQHangling(I2C_Handle_t *pI2CHandle)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	b086      	sub	sp, #24
 8000cd8:	af00      	add	r7, sp, #0
 8000cda:	6078      	str	r0, [r7, #4]
	//Nếu các điều kiện đủ thì Processor sẽ cho phép I2C Interrupt for Event hoặc Error đc kích hoạt
	//ITEVTEN là bit "Enable Control Bit" cho hành động Event(hàm này kiểm tra cho hành động Event)
	//ITBUFEN là bit "Enable Control Bit" cho hành động Error

	int32_t temp1,temp2,temp3;					//biến tạm chứa các trạng thái của cấu hình I2C
	temp1 = pI2CHandle->pI2Cx->CR2 & (1 << I2C_CR2_ITEVTEN);	//Đọc và lưu trạng thái bit ITEVTEN vào biến
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	685b      	ldr	r3, [r3, #4]
 8000ce2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000ce6:	617b      	str	r3, [r7, #20]
	temp2 = pI2CHandle->pI2Cx->CR2 & (1 << I2C_CR2_ITBUFEN);	//Đọc và lưu trạng thái bit ITBUFEN vào biến
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	681b      	ldr	r3, [r3, #0]
 8000cec:	685b      	ldr	r3, [r3, #4]
 8000cee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000cf2:	613b      	str	r3, [r7, #16]

	temp3 = pI2CHandle->pI2Cx->SR1 & (1 << I2C_SR1_SB);		//Đọc và lưu trạng thái bit SB (Start bit-Master mode)
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	681b      	ldr	r3, [r3, #0]
 8000cf8:	695b      	ldr	r3, [r3, #20]
 8000cfa:	f003 0301 	and.w	r3, r3, #1
 8000cfe:	60fb      	str	r3, [r7, #12]

	//1. Handle For interrupt generated by SB event - Note : SB flag is only applicable in Master mode
	//Xử lý ngắt do sự kiện SB tạo ra - Lưu ý: Cờ SB chỉ áp dụng được ở chế độ Master
	if(temp1 && temp3)	//Nếu hai value này đều đang đc set lên 1
 8000d00:	697b      	ldr	r3, [r7, #20]
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	d01b      	beq.n	8000d3e <I2C_EV_IRQHangling+0x6a>
 8000d06:	68fb      	ldr	r3, [r7, #12]
 8000d08:	2b00      	cmp	r3, #0
 8000d0a:	d018      	beq.n	8000d3e <I2C_EV_IRQHangling+0x6a>
		//Ngắt được tạo ra do sự kiện SB
		//Khối "If" này sẽ không được thực thi ở chế độ Slave vì đối với Slave thì bit SB luôn bằng 0
		//Trong khối này cho phép thực thi "Address Phase"

		//Kiểm tra đang thực hiện Tx hay Rx để kích hoạt "ExecuteAddressPhase"
		if(pI2CHandle->TxRxState == I2C_BUSY_IN_TX)
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	7f1b      	ldrb	r3, [r3, #28]
 8000d10:	2b02      	cmp	r3, #2
 8000d12:	d108      	bne.n	8000d26 <I2C_EV_IRQHangling+0x52>
		{
			//Tx
			I2C_ExecuteAddressPhaseWrite(pI2CHandle->pI2Cx, pI2CHandle->DevAddr);
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	681a      	ldr	r2, [r3, #0]
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	7f5b      	ldrb	r3, [r3, #29]
 8000d1c:	4619      	mov	r1, r3
 8000d1e:	4610      	mov	r0, r2
 8000d20:	f7ff feae 	bl	8000a80 <I2C_ExecuteAddressPhaseWrite>
 8000d24:	e00b      	b.n	8000d3e <I2C_EV_IRQHangling+0x6a>
		}
		else if(pI2CHandle->TxRxState == I2C_BUSY_IN_RX)
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	7f1b      	ldrb	r3, [r3, #28]
 8000d2a:	2b01      	cmp	r3, #1
 8000d2c:	d107      	bne.n	8000d3e <I2C_EV_IRQHangling+0x6a>
		{
			//Rx
			I2C_ExecuteAddressPhaseRead(pI2CHandle->pI2Cx, pI2CHandle->DevAddr);
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	681a      	ldr	r2, [r3, #0]
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	7f5b      	ldrb	r3, [r3, #29]
 8000d36:	4619      	mov	r1, r3
 8000d38:	4610      	mov	r0, r2
 8000d3a:	f7ff feb6 	bl	8000aaa <I2C_ExecuteAddressPhaseRead>
		}
	}

	temp3 = pI2CHandle->pI2Cx->SR1 & (1 << I2C_SR1_ADDR);	//Đọc và lưu trạng thái bit ADDR(Address sent (master mode)/matched (slave mode))
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	681b      	ldr	r3, [r3, #0]
 8000d42:	695b      	ldr	r3, [r3, #20]
 8000d44:	f003 0302 	and.w	r3, r3, #2
 8000d48:	60fb      	str	r3, [r7, #12]
	//Note : When master mode : Address is sent
	//		 When Slave mode   : Address matched with own address
	//Xử lý ngắt được tạo bởi sự kiện ADDR
	//Lưu ý: Khi ở chế độ Master: Địa chỉ được gửi
	// 		 Khi ở chế độ Slave: Địa chỉ khớp với địa chỉ của chính nó
	if(temp1 && temp3)	//Nếu hai value này đều đang đc set lên 1
 8000d4a:	697b      	ldr	r3, [r7, #20]
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	d005      	beq.n	8000d5c <I2C_EV_IRQHangling+0x88>
 8000d50:	68fb      	ldr	r3, [r7, #12]
 8000d52:	2b00      	cmp	r3, #0
 8000d54:	d002      	beq.n	8000d5c <I2C_EV_IRQHangling+0x88>
	{
		//ADDR flag is set - ADDR: Làm cho Processor ở Master mode hoặc Slave Mode bị stretched
		//Xóa việc stretched để cho phép ngắt hành động
		I2C_ClearADDRFlag(pI2CHandle);
 8000d56:	6878      	ldr	r0, [r7, #4]
 8000d58:	f7ff febc 	bl	8000ad4 <I2C_ClearADDRFlag>
	}

	temp3 = pI2CHandle->pI2Cx->SR1 & (1 << I2C_SR1_BTF);	//Đọc và lưu trạng thái bit BTF(Byte transfer finished)
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	695b      	ldr	r3, [r3, #20]
 8000d62:	f003 0304 	and.w	r3, r3, #4
 8000d66:	60fb      	str	r3, [r7, #12]
	//3. Handle For interrupt generated by BTF(Byte Transfer Finished) event
	//Xử lý ngắt được tạo bởi sự kiện BTF(Byte Transfer Finished)
	if(temp1 && temp3)	//Nếu hai value này đều đang đc set lên 1
 8000d68:	697b      	ldr	r3, [r7, #20]
 8000d6a:	2b00      	cmp	r3, #0
 8000d6c:	d022      	beq.n	8000db4 <I2C_EV_IRQHangling+0xe0>
 8000d6e:	68fb      	ldr	r3, [r7, #12]
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	d01f      	beq.n	8000db4 <I2C_EV_IRQHangling+0xe0>
	{
		//BTF flag is set - Xác nhận byte data cuối cùng đã đc truyền đi
		if(pI2CHandle->TxRxState == I2C_BUSY_IN_TX)
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	7f1b      	ldrb	r3, [r3, #28]
 8000d78:	2b02      	cmp	r3, #2
 8000d7a:	d11b      	bne.n	8000db4 <I2C_EV_IRQHangling+0xe0>
		{
			//Tx - Make sure that TxE is also set
			if(pI2CHandle->pI2Cx->SR1 & (1 << I2C_SR1_TxE))
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	695b      	ldr	r3, [r3, #20]
 8000d82:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000d86:	2b00      	cmp	r3, #0
 8000d88:	d014      	beq.n	8000db4 <I2C_EV_IRQHangling+0xe0>
			{
				//BTF,TxE = 1 -> Close Data Tranfer Communication
				if(pI2CHandle->TxLen == 0)
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	695b      	ldr	r3, [r3, #20]
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	d110      	bne.n	8000db4 <I2C_EV_IRQHangling+0xe0>
				{
					//1.Generate the STOP Condition - Cài đặt ko tiếp tục sử dụng StartCondition từ User
					if(pI2CHandle->Sr == I2C_DISABLE_SR)
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000d98:	2b00      	cmp	r3, #0
 8000d9a:	d104      	bne.n	8000da6 <I2C_EV_IRQHangling+0xd2>
						I2C_GenerateStopCondition(pI2CHandle->pI2Cx);
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	4618      	mov	r0, r3
 8000da2:	f7ff fece 	bl	8000b42 <I2C_GenerateStopCondition>

					//2.Reset all the member elements of the handle Structure
					//Đặt lại tất cả các phần tử thành viên của "handle Structure" of I2C
					I2C_CloseSendData(pI2CHandle);
 8000da6:	6878      	ldr	r0, [r7, #4]
 8000da8:	f000 f98a 	bl	80010c0 <I2C_CloseSendData>

					//3.Notify the application about transmission complete - Thông báo cho ứng dụng về việc truyền hoàn tất
					I2C_ApplicationEventCallback(pI2CHandle,I2C_EV_TX_CMPLT);
 8000dac:	2100      	movs	r1, #0
 8000dae:	6878      	ldr	r0, [r7, #4]
 8000db0:	f7ff fa92 	bl	80002d8 <I2C_ApplicationEventCallback>
		{
			//Rx - not handling
		}
	}

	temp3 = pI2CHandle->pI2Cx->SR1 & (1 << I2C_SR1_STOPF);	//Đọc và lưu trạng thái bit STOPF(Stop detection (slave mode))
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	695b      	ldr	r3, [r3, #20]
 8000dba:	f003 0310 	and.w	r3, r3, #16
 8000dbe:	60fb      	str	r3, [r7, #12]
	//4. Handle For interrupt generated by STOPF event
	//Note : Stop detection flag is applicable only slave mode . For master this flag will never be set
	//Xử lý ngắt được tạo bởi sự kiện STOPF
	//Lưu ý: Cờ phát hiện dừng chỉ được áp dụng ở chế độ Slave. Đối với Master, cờ này sẽ không bao giờ được đặt
	if(temp1 && temp3)	//Nếu hai value này đều đang đc set lên 1
 8000dc0:	697b      	ldr	r3, [r7, #20]
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	d00c      	beq.n	8000de0 <I2C_EV_IRQHangling+0x10c>
 8000dc6:	68fb      	ldr	r3, [r7, #12]
 8000dc8:	2b00      	cmp	r3, #0
 8000dca:	d009      	beq.n	8000de0 <I2C_EV_IRQHangling+0x10c>
	{
		//STOPF flag is set in Slave mode
		//Clear the STOPF (B1:read SR1(đã làm ở trên) -> B2:Write to CR1)
		pI2CHandle->pI2Cx->CR1 |= 0x0000;
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	681a      	ldr	r2, [r3, #0]
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	6812      	ldr	r2, [r2, #0]
 8000dd6:	601a      	str	r2, [r3, #0]

		//Notify the application that STOP is detected(đc phát hiện)
		I2C_ApplicationEventCallback(pI2CHandle,I2C_EV_STOP);
 8000dd8:	2102      	movs	r1, #2
 8000dda:	6878      	ldr	r0, [r7, #4]
 8000ddc:	f7ff fa7c 	bl	80002d8 <I2C_ApplicationEventCallback>

	}

	temp3 = pI2CHandle->pI2Cx->SR1 & (1 << I2C_SR1_TxE);	//Đọc và lưu trạng thái bit TxE Event
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	695b      	ldr	r3, [r3, #20]
 8000de6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000dea:	60fb      	str	r3, [r7, #12]
	//5. Handle For interrupt generated by TXE event
	if(temp1 && temp2 && temp3)	//Nếu ba value này đều đang đc set lên 1
 8000dec:	697b      	ldr	r3, [r7, #20]
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	d01d      	beq.n	8000e2e <I2C_EV_IRQHangling+0x15a>
 8000df2:	693b      	ldr	r3, [r7, #16]
 8000df4:	2b00      	cmp	r3, #0
 8000df6:	d01a      	beq.n	8000e2e <I2C_EV_IRQHangling+0x15a>
 8000df8:	68fb      	ldr	r3, [r7, #12]
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	d017      	beq.n	8000e2e <I2C_EV_IRQHangling+0x15a>
	{
		//MCU thực hiện gửi data khi nó đang ở Master Mode
		//Kiểm tra MCU đang ở chế độ Master hay Slave bằng cách kiểm tra bit MSL của I2C_SR2
		//Check device mode
		if(pI2CHandle->pI2Cx->SR2 && (1 << I2C_SR2_MSL))		//STM32 is Master mode
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	681b      	ldr	r3, [r3, #0]
 8000e02:	699b      	ldr	r3, [r3, #24]
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	d007      	beq.n	8000e18 <I2C_EV_IRQHangling+0x144>
		{
			//TXE flag is set - We have to do the data transmission
			if(pI2CHandle->TxRxState == I2C_BUSY_IN_TX)
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	7f1b      	ldrb	r3, [r3, #28]
 8000e0c:	2b02      	cmp	r3, #2
 8000e0e:	d10e      	bne.n	8000e2e <I2C_EV_IRQHangling+0x15a>
			{
				I2C_MasterHandleTEXInterrupt(pI2CHandle);
 8000e10:	6878      	ldr	r0, [r7, #4]
 8000e12:	f000 f8be 	bl	8000f92 <I2C_MasterHandleTEXInterrupt>
			if(pI2CHandle->TxRxState == I2C_BUSY_IN_TX)
 8000e16:	e00a      	b.n	8000e2e <I2C_EV_IRQHangling+0x15a>
			}
		}
		else	//STM32 is Slave Mode
		{
			//Make sure that the Slave is really in transmitter mode
			if(pI2CHandle->pI2Cx->SR2 & (1 << I2C_SR2_TRA))
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	699b      	ldr	r3, [r3, #24]
 8000e1e:	f003 0304 	and.w	r3, r3, #4
 8000e22:	2b00      	cmp	r3, #0
 8000e24:	d003      	beq.n	8000e2e <I2C_EV_IRQHangling+0x15a>
			{
				//Thông báo cho user là đang gửi data STM32-> Master
				I2C_ApplicationEventCallback(pI2CHandle,I2C_EV_DATA_REQ);
 8000e26:	2108      	movs	r1, #8
 8000e28:	6878      	ldr	r0, [r7, #4]
 8000e2a:	f7ff fa55 	bl	80002d8 <I2C_ApplicationEventCallback>
			}
		}
	}

	temp3 = pI2CHandle->pI2Cx->SR1 & (1 << I2C_SR1_RxNE);	//Đọc và lưu trạng thái bit RxNE Event
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	681b      	ldr	r3, [r3, #0]
 8000e32:	695b      	ldr	r3, [r3, #20]
 8000e34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000e38:	60fb      	str	r3, [r7, #12]
	//6. Handle For interrupt generated by RXNE event
	if(temp1 && temp2 && temp3)	//Nếu ba value này đều đang đc set lên 1
 8000e3a:	697b      	ldr	r3, [r7, #20]
 8000e3c:	2b00      	cmp	r3, #0
 8000e3e:	d01e      	beq.n	8000e7e <I2C_EV_IRQHangling+0x1aa>
 8000e40:	693b      	ldr	r3, [r7, #16]
 8000e42:	2b00      	cmp	r3, #0
 8000e44:	d01b      	beq.n	8000e7e <I2C_EV_IRQHangling+0x1aa>
 8000e46:	68fb      	ldr	r3, [r7, #12]
 8000e48:	2b00      	cmp	r3, #0
 8000e4a:	d018      	beq.n	8000e7e <I2C_EV_IRQHangling+0x1aa>
	{
		//MCU thực hiện gửi data khi nó đang ở Master Mode
		//Kiểm tra MCU đang ở chế độ Master hay Slave bằng cách kiểm tra bit MSL của I2C_SR2
		//Check device mode
		if(pI2CHandle->pI2Cx->SR2 && (1 << I2C_SR2_MSL))	//STM32 is Master mode
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	699b      	ldr	r3, [r3, #24]
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	d007      	beq.n	8000e66 <I2C_EV_IRQHangling+0x192>
		{
			//RxNE flag is set - We have to do the data reception
			if(pI2CHandle->TxRxState == I2C_BUSY_IN_RX)
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	7f1b      	ldrb	r3, [r3, #28]
 8000e5a:	2b01      	cmp	r3, #1
 8000e5c:	d10f      	bne.n	8000e7e <I2C_EV_IRQHangling+0x1aa>
			{
				I2C_MasterHandleRXNEInterrupt(pI2CHandle);
 8000e5e:	6878      	ldr	r0, [r7, #4]
 8000e60:	f000 f8b4 	bl	8000fcc <I2C_MasterHandleRXNEInterrupt>
			if(pI2CHandle->TxRxState == I2C_BUSY_IN_RX)
 8000e64:	e00b      	b.n	8000e7e <I2C_EV_IRQHangling+0x1aa>
			}
		}
		else	//STM32 is Slave mode
		{
			//Make sure that the Slave is really in transmitter mode
			if(pI2CHandle->pI2Cx->SR2 & (1 << I2C_SR2_TRA))
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	681b      	ldr	r3, [r3, #0]
 8000e6a:	699b      	ldr	r3, [r3, #24]
 8000e6c:	f003 0304 	and.w	r3, r3, #4
 8000e70:	2b00      	cmp	r3, #0
 8000e72:	d004      	beq.n	8000e7e <I2C_EV_IRQHangling+0x1aa>
			{
				//Thông báo cho user là đang nhận data Master->STM32
				I2C_ApplicationEventCallback(pI2CHandle,I2C_EV_DATA_RCV);
 8000e74:	2109      	movs	r1, #9
 8000e76:	6878      	ldr	r0, [r7, #4]
 8000e78:	f7ff fa2e 	bl	80002d8 <I2C_ApplicationEventCallback>
		}
	}

	//Lưu ý: điều kiện tiên trước để ngắt RxNE và TxE xảy ra(bit field TxE Event và RxNE event đc set) là
	//các "Enable Control Bit" của cả "ITEVFEN và ITRRREN" đều đang đc set
}
 8000e7c:	e7ff      	b.n	8000e7e <I2C_EV_IRQHangling+0x1aa>
 8000e7e:	bf00      	nop
 8000e80:	3718      	adds	r7, #24
 8000e82:	46bd      	mov	sp, r7
 8000e84:	bd80      	pop	{r7, pc}

08000e86 <I2C_ER_IRQHangling>:
 * @return      - none
 * @Note        - Dựa vào các lỗi có thể có khi sử dụng I2C peripheral để code
 * 				Sử dụng thanh ghi SR1 để kiểm tra trạng thái bit của các lỗi đó
 */
void I2C_ER_IRQHangling(I2C_Handle_t *pI2CHandle)
{
 8000e86:	b580      	push	{r7, lr}
 8000e88:	b084      	sub	sp, #16
 8000e8a:	af00      	add	r7, sp, #0
 8000e8c:	6078      	str	r0, [r7, #4]
	uint32_t temp1,temp2;			//Biến tạm lưu các giá trị bit đc đọc

	//Know the status of  ITERREN control bit in the CR2
	//Đọc trạng thái của "Enable control bit" ITERREN trong CR2
	temp2 = (pI2CHandle->pI2Cx->CR2) & ( 1 << I2C_CR2_ITERREN);
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	685b      	ldr	r3, [r3, #4]
 8000e94:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000e98:	60fb      	str	r3, [r7, #12]

	//Lập trình theo các trường hợp lỗi có thể xuất hiện trong việc sử dụng I2C Peripheral

	/***********************1.Check for Bus error************************************/
	temp1 = (pI2CHandle->pI2Cx->SR1) & ( 1<< I2C_SR1_BERR);
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	681b      	ldr	r3, [r3, #0]
 8000e9e:	695b      	ldr	r3, [r3, #20]
 8000ea0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000ea4:	60bb      	str	r3, [r7, #8]
	if(temp1  && temp2 )
 8000ea6:	68bb      	ldr	r3, [r7, #8]
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	d00e      	beq.n	8000eca <I2C_ER_IRQHangling+0x44>
 8000eac:	68fb      	ldr	r3, [r7, #12]
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	d00b      	beq.n	8000eca <I2C_ER_IRQHangling+0x44>
	{
		//This is Bus error

		//Implement the code to clear the buss error flag -Thực hiện mã để xóa cờ lỗi bus error
		pI2CHandle->pI2Cx->SR1 &= ~(1 << I2C_SR1_BERR);
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	695a      	ldr	r2, [r3, #20]
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8000ec0:	615a      	str	r2, [r3, #20]

		//Implement the code to notify the application about the error
	   I2C_ApplicationEventCallback(pI2CHandle,I2C_ERROR_BERR);
 8000ec2:	2103      	movs	r1, #3
 8000ec4:	6878      	ldr	r0, [r7, #4]
 8000ec6:	f7ff fa07 	bl	80002d8 <I2C_ApplicationEventCallback>
	}

	/***********************2.Check for arbitration lost error************************************/
	temp1 = (pI2CHandle->pI2Cx->SR1) & ( 1 << I2C_SR1_ARLO);
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	695b      	ldr	r3, [r3, #20]
 8000ed0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000ed4:	60bb      	str	r3, [r7, #8]
	if(temp1  && temp2)
 8000ed6:	68bb      	ldr	r3, [r7, #8]
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	d00e      	beq.n	8000efa <I2C_ER_IRQHangling+0x74>
 8000edc:	68fb      	ldr	r3, [r7, #12]
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	d00b      	beq.n	8000efa <I2C_ER_IRQHangling+0x74>
	{
		//This is arbitration lost error

		//Implement the code to clear the arbitration lost error flag
		pI2CHandle->pI2Cx->SR1 &= ~(1 << I2C_SR1_ARLO);
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	695a      	ldr	r2, [r3, #20]
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8000ef0:	615a      	str	r2, [r3, #20]

		//Implement the code to notify the application about the error
		I2C_ApplicationEventCallback(pI2CHandle,I2C_ERROR_ARLO);
 8000ef2:	2104      	movs	r1, #4
 8000ef4:	6878      	ldr	r0, [r7, #4]
 8000ef6:	f7ff f9ef 	bl	80002d8 <I2C_ApplicationEventCallback>

	}

	/***********************3.Check for ACK failure  error************************************/

	temp1 = (pI2CHandle->pI2Cx->SR1) & ( 1 << I2C_SR1_AF);
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	695b      	ldr	r3, [r3, #20]
 8000f00:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000f04:	60bb      	str	r3, [r7, #8]
	if(temp1  && temp2)
 8000f06:	68bb      	ldr	r3, [r7, #8]
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	d00e      	beq.n	8000f2a <I2C_ER_IRQHangling+0xa4>
 8000f0c:	68fb      	ldr	r3, [r7, #12]
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	d00b      	beq.n	8000f2a <I2C_ER_IRQHangling+0xa4>
	{
		//This is ACK failure error

		//Implement the code to clear the ACK failure error flag
		pI2CHandle->pI2Cx->SR1 &= ~(1 << I2C_SR1_AF);
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	695a      	ldr	r2, [r3, #20]
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000f20:	615a      	str	r2, [r3, #20]

		//Implement the code to notify the application about the error
		I2C_ApplicationEventCallback(pI2CHandle,I2C_ERROR_AF);
 8000f22:	2105      	movs	r1, #5
 8000f24:	6878      	ldr	r0, [r7, #4]
 8000f26:	f7ff f9d7 	bl	80002d8 <I2C_ApplicationEventCallback>
	}

	/***********************4.Check for Overrun/underrun error************************************/
	temp1 = (pI2CHandle->pI2Cx->SR1) & ( 1 << I2C_SR1_OVR);
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	695b      	ldr	r3, [r3, #20]
 8000f30:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000f34:	60bb      	str	r3, [r7, #8]
	if(temp1  && temp2)
 8000f36:	68bb      	ldr	r3, [r7, #8]
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	d00e      	beq.n	8000f5a <I2C_ER_IRQHangling+0xd4>
 8000f3c:	68fb      	ldr	r3, [r7, #12]
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	d00b      	beq.n	8000f5a <I2C_ER_IRQHangling+0xd4>
	{
		//This is Overrun/underrun

		//Implement the code to clear the Overrun/underrun error flag
		pI2CHandle->pI2Cx->SR1 &= ~(1 << I2C_SR1_OVR);
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	695a      	ldr	r2, [r3, #20]
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8000f50:	615a      	str	r2, [r3, #20]

		//Implement the code to notify the application about the error
		I2C_ApplicationEventCallback(pI2CHandle,I2C_ERROR_OVR);
 8000f52:	2106      	movs	r1, #6
 8000f54:	6878      	ldr	r0, [r7, #4]
 8000f56:	f7ff f9bf 	bl	80002d8 <I2C_ApplicationEventCallback>
	}

	/***********************5.Check for Time out error************************************/
	temp1 = (pI2CHandle->pI2Cx->SR1) & ( 1 << I2C_SR1_TIMEOUT);
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	695b      	ldr	r3, [r3, #20]
 8000f60:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f64:	60bb      	str	r3, [r7, #8]
	if(temp1  && temp2)
 8000f66:	68bb      	ldr	r3, [r7, #8]
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	d00e      	beq.n	8000f8a <I2C_ER_IRQHangling+0x104>
 8000f6c:	68fb      	ldr	r3, [r7, #12]
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d00b      	beq.n	8000f8a <I2C_ER_IRQHangling+0x104>
	{
		//This is Time out error

		//Implement the code to clear the Time out error flag
		pI2CHandle->pI2Cx->SR1 &= ~(1 << I2C_SR1_TIMEOUT);
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	695a      	ldr	r2, [r3, #20]
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8000f80:	615a      	str	r2, [r3, #20]

		//Implement the code to notify the application about the error
		I2C_ApplicationEventCallback(pI2CHandle,I2C_ERROR_TIMEOUT);
 8000f82:	2107      	movs	r1, #7
 8000f84:	6878      	ldr	r0, [r7, #4]
 8000f86:	f7ff f9a7 	bl	80002d8 <I2C_ApplicationEventCallback>
	}
}
 8000f8a:	bf00      	nop
 8000f8c:	3710      	adds	r7, #16
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	bd80      	pop	{r7, pc}

08000f92 <I2C_MasterHandleTEXInterrupt>:
 * @param[in]   - pI2CHandle: Con trỏ là chứa cấu hình I2C peripheral
 * @return      - none
 * @Note        - none
 */
static void I2C_MasterHandleTEXInterrupt(I2C_Handle_t *pI2CHandle)
{
 8000f92:	b480      	push	{r7}
 8000f94:	b083      	sub	sp, #12
 8000f96:	af00      	add	r7, sp, #0
 8000f98:	6078      	str	r0, [r7, #4]
	if(pI2CHandle->TxLen > 0)	//nếu có từ 1byte trở lên
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	695b      	ldr	r3, [r3, #20]
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	d00f      	beq.n	8000fc2 <I2C_MasterHandleTEXInterrupt+0x30>
	{
		//1.Load the data in to DR
		pI2CHandle->pI2Cx->DR = *(pI2CHandle->pTxBuffer);	//value của địa chỉ pTxBuffer
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	68db      	ldr	r3, [r3, #12]
 8000fa6:	781a      	ldrb	r2, [r3, #0]
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	611a      	str	r2, [r3, #16]

		//2.Decrement the TxLen
		pI2CHandle->TxLen--;
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	695b      	ldr	r3, [r3, #20]
 8000fb2:	1e5a      	subs	r2, r3, #1
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	615a      	str	r2, [r3, #20]

		//3.Increment the buffer address
		pI2CHandle->pTxBuffer++;
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	68db      	ldr	r3, [r3, #12]
 8000fbc:	1c5a      	adds	r2, r3, #1
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	60da      	str	r2, [r3, #12]
	}
}
 8000fc2:	bf00      	nop
 8000fc4:	370c      	adds	r7, #12
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	bc80      	pop	{r7}
 8000fca:	4770      	bx	lr

08000fcc <I2C_MasterHandleRXNEInterrupt>:
 * @param[in]   - pI2CHandle: Con trỏ là chứa cấu hình I2C peripheral
 * @return      - none
 * @Note        - none
 */
static void I2C_MasterHandleRXNEInterrupt(I2C_Handle_t *pI2CHandle)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b082      	sub	sp, #8
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	6078      	str	r0, [r7, #4]
	if(pI2CHandle->RxSize == 1)
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	6a1b      	ldr	r3, [r3, #32]
 8000fd8:	2b01      	cmp	r3, #1
 8000fda:	d10b      	bne.n	8000ff4 <I2C_MasterHandleRXNEInterrupt+0x28>
	{
		//1.Load the data from DR->address RxBuffer
		*pI2CHandle->pRxBuffer = pI2CHandle->pI2Cx->DR;
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	691a      	ldr	r2, [r3, #16]
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	691b      	ldr	r3, [r3, #16]
 8000fe6:	b2d2      	uxtb	r2, r2
 8000fe8:	701a      	strb	r2, [r3, #0]

		//2.Decrement the address RxLen
		pI2CHandle->RxLen--;
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	699b      	ldr	r3, [r3, #24]
 8000fee:	1e5a      	subs	r2, r3, #1
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	619a      	str	r2, [r3, #24]
	}

	if(pI2CHandle->RxSize > 1)
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	6a1b      	ldr	r3, [r3, #32]
 8000ff8:	2b01      	cmp	r3, #1
 8000ffa:	d91a      	bls.n	8001032 <I2C_MasterHandleRXNEInterrupt+0x66>
	{
		if(pI2CHandle->RxLen == 2)
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	699b      	ldr	r3, [r3, #24]
 8001000:	2b02      	cmp	r3, #2
 8001002:	d105      	bne.n	8001010 <I2C_MasterHandleRXNEInterrupt+0x44>
		{
			//clear the ack bit
			I2C_ManageAcking(pI2CHandle->pI2Cx, DISABLE);
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	2100      	movs	r1, #0
 800100a:	4618      	mov	r0, r3
 800100c:	f7ff fda8 	bl	8000b60 <I2C_ManageAcking>
		}
		//1.Load the data from DR->address RxBuffer
		*pI2CHandle->pRxBuffer = pI2CHandle->pI2Cx->DR;
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	691a      	ldr	r2, [r3, #16]
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	691b      	ldr	r3, [r3, #16]
 800101a:	b2d2      	uxtb	r2, r2
 800101c:	701a      	strb	r2, [r3, #0]

		//2.Increment the buffer address
		pI2CHandle->pRxBuffer++;
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	691b      	ldr	r3, [r3, #16]
 8001022:	1c5a      	adds	r2, r3, #1
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	611a      	str	r2, [r3, #16]

		//3.Decrement the address RxLen
		pI2CHandle->RxLen--;
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	699b      	ldr	r3, [r3, #24]
 800102c:	1e5a      	subs	r2, r3, #1
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	619a      	str	r2, [r3, #24]
	}

	//Đã nhận hết data từ Slave
	if(pI2CHandle->RxSize == 0)
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	6a1b      	ldr	r3, [r3, #32]
 8001036:	2b00      	cmp	r3, #0
 8001038:	d110      	bne.n	800105c <I2C_MasterHandleRXNEInterrupt+0x90>
	{
		//Close the I2C data reception and notify the application

		//1.generate the stop condition
		if(pI2CHandle->Sr == I2C_DISABLE_SR)
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001040:	2b00      	cmp	r3, #0
 8001042:	d104      	bne.n	800104e <I2C_MasterHandleRXNEInterrupt+0x82>
			I2C_GenerateStopCondition(pI2CHandle->pI2Cx);
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	4618      	mov	r0, r3
 800104a:	f7ff fd7a 	bl	8000b42 <I2C_GenerateStopCondition>

		//2.close the I2C Rx
		I2C_CloseReceiveData(pI2CHandle);
 800104e:	6878      	ldr	r0, [r7, #4]
 8001050:	f000 f808 	bl	8001064 <I2C_CloseReceiveData>

		//3.Notify the application
		I2C_ApplicationEventCallback(pI2CHandle,I2C_EV_TX_CMPLT);
 8001054:	2100      	movs	r1, #0
 8001056:	6878      	ldr	r0, [r7, #4]
 8001058:	f7ff f93e 	bl	80002d8 <I2C_ApplicationEventCallback>
	}
}
 800105c:	bf00      	nop
 800105e:	3708      	adds	r7, #8
 8001060:	46bd      	mov	sp, r7
 8001062:	bd80      	pop	{r7, pc}

08001064 <I2C_CloseReceiveData>:
 * @param[in]   - pI2CHandle: Con trỏ là chứa cấu hình I2C peripheral
 * @return      - none
 * @Note        - none
 */
void I2C_CloseReceiveData(I2C_Handle_t *pI2CHandle)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	b082      	sub	sp, #8
 8001068:	af00      	add	r7, sp, #0
 800106a:	6078      	str	r0, [r7, #4]
	//Implement the code to disable ITBUFEN control Bit
	pI2CHandle->pI2Cx->CR2 &= ~(1 << I2C_CR2_ITBUFEN);
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	685a      	ldr	r2, [r3, #4]
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800107a:	605a      	str	r2, [r3, #4]

	//Implement the code to disable ITEVFEN control Bit
	pI2CHandle->pI2Cx->CR2 &= ~(1 << I2C_CR2_ITEVTEN);
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	685a      	ldr	r2, [r3, #4]
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800108a:	605a      	str	r2, [r3, #4]

	//Cấu hình lại(giải phóng) I2C Handle Structure
	pI2CHandle->TxRxState = I2C_READY;			//Chuyển trạng thái về Bus empty
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	2200      	movs	r2, #0
 8001090:	771a      	strb	r2, [r3, #28]
	pI2CHandle->pRxBuffer = NULL;				//Giải phóng RxBuffer
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	2200      	movs	r2, #0
 8001096:	611a      	str	r2, [r3, #16]
	pI2CHandle->RxLen = 0;
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	2200      	movs	r2, #0
 800109c:	619a      	str	r2, [r3, #24]
	pI2CHandle->RxSize = 0;
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	2200      	movs	r2, #0
 80010a2:	621a      	str	r2, [r3, #32]

	if(pI2CHandle->I2C_Config.I2C_AckControl == I2C_ACK_ENABLE)
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	7a5b      	ldrb	r3, [r3, #9]
 80010a8:	2b01      	cmp	r3, #1
 80010aa:	d105      	bne.n	80010b8 <I2C_CloseReceiveData+0x54>
	{
		I2C_ManageAcking(pI2CHandle->pI2Cx, ENABLE);
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	2101      	movs	r1, #1
 80010b2:	4618      	mov	r0, r3
 80010b4:	f7ff fd54 	bl	8000b60 <I2C_ManageAcking>
	}
}
 80010b8:	bf00      	nop
 80010ba:	3708      	adds	r7, #8
 80010bc:	46bd      	mov	sp, r7
 80010be:	bd80      	pop	{r7, pc}

080010c0 <I2C_CloseSendData>:
 * @param[in]   - pI2CHandle: Con trỏ là chứa cấu hình I2C peripheral
 * @return      - none
 * @Note        - none
 */
void I2C_CloseSendData(I2C_Handle_t *pI2CHandle)
{
 80010c0:	b480      	push	{r7}
 80010c2:	b083      	sub	sp, #12
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	6078      	str	r0, [r7, #4]
	//Implement the code to disable ITBUFEN control Bit
	pI2CHandle->pI2Cx->CR2 &= ~(1 << I2C_CR2_ITBUFEN);
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	685a      	ldr	r2, [r3, #4]
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80010d6:	605a      	str	r2, [r3, #4]

	//Implement the code to disable IT control Bit
	pI2CHandle->pI2Cx->CR2 &= ~(1 << I2C_CR2_ITEVTEN);
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	685a      	ldr	r2, [r3, #4]
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80010e6:	605a      	str	r2, [r3, #4]

	//Cấu hình lại(giải phóng) I2C Handle Structure - sẵn sàng cho event kế tiếp
	pI2CHandle->TxRxState = I2C_READY;			//Chuyển trạng thái về Bus empty
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	2200      	movs	r2, #0
 80010ec:	771a      	strb	r2, [r3, #28]
	pI2CHandle->pTxBuffer = NULL;				//Giải phóng xBuffer
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	2200      	movs	r2, #0
 80010f2:	60da      	str	r2, [r3, #12]
	pI2CHandle->TxLen = 0;
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	2200      	movs	r2, #0
 80010f8:	615a      	str	r2, [r3, #20]
}
 80010fa:	bf00      	nop
 80010fc:	370c      	adds	r7, #12
 80010fe:	46bd      	mov	sp, r7
 8001100:	bc80      	pop	{r7}
 8001102:	4770      	bx	lr

08001104 <I2C_SLaveSendData>:
 * @param[in]	- data: nội dung dữ liệu muốn gửi
 * @return      - none
 * @Note        - Trường hợp STM32 đc cài đặt là Slave
 */
void I2C_SLaveSendData(I2C_RegDef_t *pI2C, uint8_t data)
{
 8001104:	b480      	push	{r7}
 8001106:	b083      	sub	sp, #12
 8001108:	af00      	add	r7, sp, #0
 800110a:	6078      	str	r0, [r7, #4]
 800110c:	460b      	mov	r3, r1
 800110e:	70fb      	strb	r3, [r7, #3]
	pI2C->DR = data;			//đưa nội dung data muốn gửi vào DR Register
 8001110:	78fa      	ldrb	r2, [r7, #3]
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	611a      	str	r2, [r3, #16]
}
 8001116:	bf00      	nop
 8001118:	370c      	adds	r7, #12
 800111a:	46bd      	mov	sp, r7
 800111c:	bc80      	pop	{r7}
 800111e:	4770      	bx	lr

08001120 <I2C_SlaveReceiveData>:
 * @param[in]   - pI2Cx: con trỏ là địa chỉ I2Cx chứa cấu hình I2C Registe
 * @return      - Nội dung data nhận đc
 * @Note        - Trường hợp STM32 đc cài đặt là Slave
 */
uint8_t I2C_SlaveReceiveData(I2C_RegDef_t *pI2C)
{
 8001120:	b480      	push	{r7}
 8001122:	b083      	sub	sp, #12
 8001124:	af00      	add	r7, sp, #0
 8001126:	6078      	str	r0, [r7, #4]
	return (uint8_t)pI2C->DR;	//Nội dung data nhận đc từ Master vào DR Register
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	691b      	ldr	r3, [r3, #16]
 800112c:	b2db      	uxtb	r3, r3
}
 800112e:	4618      	mov	r0, r3
 8001130:	370c      	adds	r7, #12
 8001132:	46bd      	mov	sp, r7
 8001134:	bc80      	pop	{r7}
 8001136:	4770      	bx	lr

08001138 <I2C_SlaveEnableDisableCallBackEvents>:
 * @return      - none
 *
 * @Note        - none
 */
void I2C_SlaveEnableDisableCallBackEvents(I2C_RegDef_t *pI2Cx, uint8_t EnorDi)
{
 8001138:	b480      	push	{r7}
 800113a:	b083      	sub	sp, #12
 800113c:	af00      	add	r7, sp, #0
 800113e:	6078      	str	r0, [r7, #4]
 8001140:	460b      	mov	r3, r1
 8001142:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE)
 8001144:	78fb      	ldrb	r3, [r7, #3]
 8001146:	2b01      	cmp	r3, #1
 8001148:	d112      	bne.n	8001170 <I2C_SlaveEnableDisableCallBackEvents+0x38>
	{
		pI2Cx->CR2 |= (1 << I2C_CR2_ITEVTEN);
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	685b      	ldr	r3, [r3, #4]
 800114e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	605a      	str	r2, [r3, #4]
		pI2Cx->CR2 |= (1 << I2C_CR2_ITBUFEN);
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	685b      	ldr	r3, [r3, #4]
 800115a:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	605a      	str	r2, [r3, #4]
		pI2Cx->CR2 |= (1 << I2C_CR2_ITERREN);
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	685b      	ldr	r3, [r3, #4]
 8001166:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	605a      	str	r2, [r3, #4]
	{
		pI2Cx->CR2 &= ~ (1 << I2C_CR2_ITEVTEN);
		pI2Cx->CR2 &= ~ (1 << I2C_CR2_ITBUFEN);
		pI2Cx->CR2 &= ~ (1 << I2C_CR2_ITERREN);
	}
}
 800116e:	e011      	b.n	8001194 <I2C_SlaveEnableDisableCallBackEvents+0x5c>
		pI2Cx->CR2 &= ~ (1 << I2C_CR2_ITEVTEN);
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	685b      	ldr	r3, [r3, #4]
 8001174:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	605a      	str	r2, [r3, #4]
		pI2Cx->CR2 &= ~ (1 << I2C_CR2_ITBUFEN);
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	685b      	ldr	r3, [r3, #4]
 8001180:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	605a      	str	r2, [r3, #4]
		pI2Cx->CR2 &= ~ (1 << I2C_CR2_ITERREN);
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	685b      	ldr	r3, [r3, #4]
 800118c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	605a      	str	r2, [r3, #4]
}
 8001194:	bf00      	nop
 8001196:	370c      	adds	r7, #12
 8001198:	46bd      	mov	sp, r7
 800119a:	bc80      	pop	{r7}
 800119c:	4770      	bx	lr
	...

080011a0 <__libc_init_array>:
 80011a0:	b570      	push	{r4, r5, r6, lr}
 80011a2:	4d0d      	ldr	r5, [pc, #52]	; (80011d8 <__libc_init_array+0x38>)
 80011a4:	4c0d      	ldr	r4, [pc, #52]	; (80011dc <__libc_init_array+0x3c>)
 80011a6:	1b64      	subs	r4, r4, r5
 80011a8:	10a4      	asrs	r4, r4, #2
 80011aa:	2600      	movs	r6, #0
 80011ac:	42a6      	cmp	r6, r4
 80011ae:	d109      	bne.n	80011c4 <__libc_init_array+0x24>
 80011b0:	4d0b      	ldr	r5, [pc, #44]	; (80011e0 <__libc_init_array+0x40>)
 80011b2:	4c0c      	ldr	r4, [pc, #48]	; (80011e4 <__libc_init_array+0x44>)
 80011b4:	f000 f818 	bl	80011e8 <_init>
 80011b8:	1b64      	subs	r4, r4, r5
 80011ba:	10a4      	asrs	r4, r4, #2
 80011bc:	2600      	movs	r6, #0
 80011be:	42a6      	cmp	r6, r4
 80011c0:	d105      	bne.n	80011ce <__libc_init_array+0x2e>
 80011c2:	bd70      	pop	{r4, r5, r6, pc}
 80011c4:	f855 3b04 	ldr.w	r3, [r5], #4
 80011c8:	4798      	blx	r3
 80011ca:	3601      	adds	r6, #1
 80011cc:	e7ee      	b.n	80011ac <__libc_init_array+0xc>
 80011ce:	f855 3b04 	ldr.w	r3, [r5], #4
 80011d2:	4798      	blx	r3
 80011d4:	3601      	adds	r6, #1
 80011d6:	e7f2      	b.n	80011be <__libc_init_array+0x1e>
 80011d8:	08001200 	.word	0x08001200
 80011dc:	08001200 	.word	0x08001200
 80011e0:	08001200 	.word	0x08001200
 80011e4:	08001204 	.word	0x08001204

080011e8 <_init>:
 80011e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80011ea:	bf00      	nop
 80011ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80011ee:	bc08      	pop	{r3}
 80011f0:	469e      	mov	lr, r3
 80011f2:	4770      	bx	lr

080011f4 <_fini>:
 80011f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80011f6:	bf00      	nop
 80011f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80011fa:	bc08      	pop	{r3}
 80011fc:	469e      	mov	lr, r3
 80011fe:	4770      	bx	lr
