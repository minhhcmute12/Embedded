
29_M_STM32F4xx_UART.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001a8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000ba4  080001a8  080001a8  000101a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000d4c  08000d4c  00020418  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000d4c  08000d4c  00020418  2**0
                  CONTENTS
  4 .ARM          00000000  08000d4c  08000d4c  00020418  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000d4c  08000d4c  00020418  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000d4c  08000d4c  00010d4c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000d50  08000d50  00010d50  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000418  20000000  08000d54  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020418  2**0
                  CONTENTS
 10 .bss          00000040  20000418  20000418  00020418  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000458  20000458  00020418  2**0
                  ALLOC
 12 .ARM.attributes 0000002a  00000000  00000000  00020418  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020442  2**0
                  CONTENTS, READONLY
 14 .debug_info   0000179a  00000000  00000000  00020485  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00000683  00000000  00000000  00021c1f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000190  00000000  00000000  000222a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000120  00000000  00000000  00022438  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  000029bd  00000000  00000000  00022558  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   000021cd  00000000  00000000  00024f15  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    0000a842  00000000  00000000  000270e2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00000558  00000000  00000000  00031924  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000005d  00000000  00000000  00031e7c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a8 <__do_global_dtors_aux>:
 80001a8:	b510      	push	{r4, lr}
 80001aa:	4c05      	ldr	r4, [pc, #20]	; (80001c0 <__do_global_dtors_aux+0x18>)
 80001ac:	7823      	ldrb	r3, [r4, #0]
 80001ae:	b933      	cbnz	r3, 80001be <__do_global_dtors_aux+0x16>
 80001b0:	4b04      	ldr	r3, [pc, #16]	; (80001c4 <__do_global_dtors_aux+0x1c>)
 80001b2:	b113      	cbz	r3, 80001ba <__do_global_dtors_aux+0x12>
 80001b4:	4804      	ldr	r0, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x20>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	2301      	movs	r3, #1
 80001bc:	7023      	strb	r3, [r4, #0]
 80001be:	bd10      	pop	{r4, pc}
 80001c0:	20000418 	.word	0x20000418
 80001c4:	00000000 	.word	0x00000000
 80001c8:	08000d34 	.word	0x08000d34

080001cc <frame_dummy>:
 80001cc:	b508      	push	{r3, lr}
 80001ce:	4b03      	ldr	r3, [pc, #12]	; (80001dc <frame_dummy+0x10>)
 80001d0:	b11b      	cbz	r3, 80001da <frame_dummy+0xe>
 80001d2:	4903      	ldr	r1, [pc, #12]	; (80001e0 <frame_dummy+0x14>)
 80001d4:	4803      	ldr	r0, [pc, #12]	; (80001e4 <frame_dummy+0x18>)
 80001d6:	f3af 8000 	nop.w
 80001da:	bd08      	pop	{r3, pc}
 80001dc:	00000000 	.word	0x00000000
 80001e0:	2000041c 	.word	0x2000041c
 80001e4:	08000d34 	.word	0x08000d34

080001e8 <strlen>:
 80001e8:	4603      	mov	r3, r0
 80001ea:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ee:	2a00      	cmp	r2, #0
 80001f0:	d1fb      	bne.n	80001ea <strlen+0x2>
 80001f2:	1a18      	subs	r0, r3, r0
 80001f4:	3801      	subs	r0, #1
 80001f6:	4770      	bx	lr

080001f8 <USART2_Init>:

USART_Handle_t usart2_handle;		//Sử dụng USART2

//Cấu hình ban đầu do user cài đặt cho USART peripheral
void USART2_Init(void)
{
 80001f8:	b580      	push	{r7, lr}
 80001fa:	af00      	add	r7, sp, #0
	usart2_handle.pUSARTx = USART2;
 80001fc:	4b0d      	ldr	r3, [pc, #52]	; (8000234 <USART2_Init+0x3c>)
 80001fe:	4a0e      	ldr	r2, [pc, #56]	; (8000238 <USART2_Init+0x40>)
 8000200:	601a      	str	r2, [r3, #0]
	usart2_handle.USART_Config.USART_Baud = USART_STD_BAUD_9600;
 8000202:	4b0c      	ldr	r3, [pc, #48]	; (8000234 <USART2_Init+0x3c>)
 8000204:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000208:	609a      	str	r2, [r3, #8]
	usart2_handle.USART_Config.USART_HWFlowControl = USART_HW_FLOW_CTRL_NONE;
 800020a:	4b0a      	ldr	r3, [pc, #40]	; (8000234 <USART2_Init+0x3c>)
 800020c:	2200      	movs	r2, #0
 800020e:	73da      	strb	r2, [r3, #15]
	usart2_handle.USART_Config.USART_Mode = USART_MODE_ONLY_TX;
 8000210:	4b08      	ldr	r3, [pc, #32]	; (8000234 <USART2_Init+0x3c>)
 8000212:	2200      	movs	r2, #0
 8000214:	711a      	strb	r2, [r3, #4]
	usart2_handle.USART_Config.USART_NoOfStopBits = USART_STOPBITS_1;
 8000216:	4b07      	ldr	r3, [pc, #28]	; (8000234 <USART2_Init+0x3c>)
 8000218:	2200      	movs	r2, #0
 800021a:	731a      	strb	r2, [r3, #12]
	usart2_handle.USART_Config.USART_WordLength = USART_WORDLEN_8BITS;
 800021c:	4b05      	ldr	r3, [pc, #20]	; (8000234 <USART2_Init+0x3c>)
 800021e:	2200      	movs	r2, #0
 8000220:	735a      	strb	r2, [r3, #13]
	usart2_handle.USART_Config.USART_ParityControl = USART_PARITY_DISABLE;
 8000222:	4b04      	ldr	r3, [pc, #16]	; (8000234 <USART2_Init+0x3c>)
 8000224:	2200      	movs	r2, #0
 8000226:	739a      	strb	r2, [r3, #14]
	USART_Init(&usart2_handle);
 8000228:	4802      	ldr	r0, [pc, #8]	; (8000234 <USART2_Init+0x3c>)
 800022a:	f000 fbd7 	bl	80009dc <USART_Init>
}
 800022e:	bf00      	nop
 8000230:	bd80      	pop	{r7, pc}
 8000232:	bf00      	nop
 8000234:	20000434 	.word	0x20000434
 8000238:	40004400 	.word	0x40004400

0800023c <USART2_GPIOInit>:

//Thiết lập GPIO Alternate để cấu hình chân TX và RX
void USART2_GPIOInit(void)
{
 800023c:	b580      	push	{r7, lr}
 800023e:	b084      	sub	sp, #16
 8000240:	af00      	add	r7, sp, #0
	GPIOx_Handle_t usart_gpios;

	usart_gpios.pGPIOx = GPIOA;
 8000242:	4b0e      	ldr	r3, [pc, #56]	; (800027c <USART2_GPIOInit+0x40>)
 8000244:	607b      	str	r3, [r7, #4]
	usart_gpios.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALTFN;
 8000246:	2302      	movs	r3, #2
 8000248:	727b      	strb	r3, [r7, #9]
	usart_gpios.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_PP;
 800024a:	2300      	movs	r3, #0
 800024c:	733b      	strb	r3, [r7, #12]
	usart_gpios.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PIN_PU;
 800024e:	2301      	movs	r3, #1
 8000250:	72fb      	strb	r3, [r7, #11]
	usart_gpios.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 8000252:	2302      	movs	r3, #2
 8000254:	72bb      	strb	r3, [r7, #10]
	usart_gpios.GPIO_PinConfig.GPIO_PinAltFunMode= 7;				//AF7 for USART2_xx
 8000256:	2307      	movs	r3, #7
 8000258:	737b      	strb	r3, [r7, #13]

	//USART2 TX
	usart_gpios.GPIO_PinConfig.GPIO_PinNumber  = GPIO_PIN_NO_2;
 800025a:	2302      	movs	r3, #2
 800025c:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&usart_gpios);
 800025e:	1d3b      	adds	r3, r7, #4
 8000260:	4618      	mov	r0, r3
 8000262:	f000 f921 	bl	80004a8 <GPIO_Init>

	//USART2 RX
	usart_gpios.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_3;
 8000266:	2303      	movs	r3, #3
 8000268:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&usart_gpios);
 800026a:	1d3b      	adds	r3, r7, #4
 800026c:	4618      	mov	r0, r3
 800026e:	f000 f91b 	bl	80004a8 <GPIO_Init>

}
 8000272:	bf00      	nop
 8000274:	3710      	adds	r7, #16
 8000276:	46bd      	mov	sp, r7
 8000278:	bd80      	pop	{r7, pc}
 800027a:	bf00      	nop
 800027c:	40020000 	.word	0x40020000

08000280 <GPIO_ButtonInit>:

//Thiết lập cấu hình button
void GPIO_ButtonInit(void)
{
 8000280:	b580      	push	{r7, lr}
 8000282:	b086      	sub	sp, #24
 8000284:	af00      	add	r7, sp, #0
	GPIOx_Handle_t GPIOBtn,GpioLed;

	//this is btn gpio configuration
	GPIOBtn.pGPIOx = GPIOA;
 8000286:	4b11      	ldr	r3, [pc, #68]	; (80002cc <GPIO_ButtonInit+0x4c>)
 8000288:	60fb      	str	r3, [r7, #12]
	GPIOBtn.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_0;
 800028a:	2300      	movs	r3, #0
 800028c:	743b      	strb	r3, [r7, #16]
	GPIOBtn.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_IN;
 800028e:	2300      	movs	r3, #0
 8000290:	747b      	strb	r3, [r7, #17]
	GPIOBtn.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 8000292:	2302      	movs	r3, #2
 8000294:	74bb      	strb	r3, [r7, #18]
	GPIOBtn.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 8000296:	2300      	movs	r3, #0
 8000298:	74fb      	strb	r3, [r7, #19]

	//Đã kích hoạt xung clọc GPIOA khi UART_Init()
	GPIO_Init(&GPIOBtn);
 800029a:	f107 030c 	add.w	r3, r7, #12
 800029e:	4618      	mov	r0, r3
 80002a0:	f000 f902 	bl	80004a8 <GPIO_Init>

	//this is led gpio configuration
	GpioLed.pGPIOx = GPIOD;
 80002a4:	4b0a      	ldr	r3, [pc, #40]	; (80002d0 <GPIO_ButtonInit+0x50>)
 80002a6:	603b      	str	r3, [r7, #0]
	GpioLed.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_12;
 80002a8:	230c      	movs	r3, #12
 80002aa:	713b      	strb	r3, [r7, #4]
	GpioLed.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_OUT;
 80002ac:	2301      	movs	r3, #1
 80002ae:	717b      	strb	r3, [r7, #5]
	GpioLed.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 80002b0:	2302      	movs	r3, #2
 80002b2:	71bb      	strb	r3, [r7, #6]
	GpioLed.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_OD;
 80002b4:	2301      	movs	r3, #1
 80002b6:	723b      	strb	r3, [r7, #8]
	GpioLed.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 80002b8:	2300      	movs	r3, #0
 80002ba:	71fb      	strb	r3, [r7, #7]

	//GPIO_PeriClockControl(GPIOD,ENABLE);
	GPIO_Init(&GpioLed);
 80002bc:	463b      	mov	r3, r7
 80002be:	4618      	mov	r0, r3
 80002c0:	f000 f8f2 	bl	80004a8 <GPIO_Init>
}
 80002c4:	bf00      	nop
 80002c6:	3718      	adds	r7, #24
 80002c8:	46bd      	mov	sp, r7
 80002ca:	bd80      	pop	{r7, pc}
 80002cc:	40020000 	.word	0x40020000
 80002d0:	40020c00 	.word	0x40020c00

080002d4 <delay>:

void delay(void)
{
 80002d4:	b480      	push	{r7}
 80002d6:	b083      	sub	sp, #12
 80002d8:	af00      	add	r7, sp, #0
	for(uint32_t i = 0 ; i < 500000/2 ; i ++);
 80002da:	2300      	movs	r3, #0
 80002dc:	607b      	str	r3, [r7, #4]
 80002de:	e002      	b.n	80002e6 <delay+0x12>
 80002e0:	687b      	ldr	r3, [r7, #4]
 80002e2:	3301      	adds	r3, #1
 80002e4:	607b      	str	r3, [r7, #4]
 80002e6:	687b      	ldr	r3, [r7, #4]
 80002e8:	4a04      	ldr	r2, [pc, #16]	; (80002fc <delay+0x28>)
 80002ea:	4293      	cmp	r3, r2
 80002ec:	d9f8      	bls.n	80002e0 <delay+0xc>
}
 80002ee:	bf00      	nop
 80002f0:	bf00      	nop
 80002f2:	370c      	adds	r7, #12
 80002f4:	46bd      	mov	sp, r7
 80002f6:	bc80      	pop	{r7}
 80002f8:	4770      	bx	lr
 80002fa:	bf00      	nop
 80002fc:	0003d08f 	.word	0x0003d08f

08000300 <main>:


int main(void)
{
 8000300:	b580      	push	{r7, lr}
 8000302:	af00      	add	r7, sp, #0
	GPIO_ButtonInit();
 8000304:	f7ff ffbc 	bl	8000280 <GPIO_ButtonInit>

	USART2_GPIOInit();
 8000308:	f7ff ff98 	bl	800023c <USART2_GPIOInit>

    USART2_Init();
 800030c:	f7ff ff74 	bl	80001f8 <USART2_Init>

    USART_PeripheralControl(USART2,ENABLE);
 8000310:	2101      	movs	r1, #1
 8000312:	480b      	ldr	r0, [pc, #44]	; (8000340 <main+0x40>)
 8000314:	f000 fcb8 	bl	8000c88 <USART_PeripheralControl>

    while(1)
    {
		//wait till button is pressed
		while( ! GPIO_ReadFromInputPin(GPIOA,GPIO_PIN_NO_0) );
 8000318:	bf00      	nop
 800031a:	2100      	movs	r1, #0
 800031c:	4809      	ldr	r0, [pc, #36]	; (8000344 <main+0x44>)
 800031e:	f000 fa51 	bl	80007c4 <GPIO_ReadFromInputPin>
 8000322:	4603      	mov	r3, r0
 8000324:	2b00      	cmp	r3, #0
 8000326:	d0f8      	beq.n	800031a <main+0x1a>

		//to avoid button de-bouncing related issues 200ms of delay
		delay();
 8000328:	f7ff ffd4 	bl	80002d4 <delay>

		USART_SendData(&usart2_handle,(uint8_t*)msg,strlen(msg));
 800032c:	4806      	ldr	r0, [pc, #24]	; (8000348 <main+0x48>)
 800032e:	f7ff ff5b 	bl	80001e8 <strlen>
 8000332:	4603      	mov	r3, r0
 8000334:	461a      	mov	r2, r3
 8000336:	4904      	ldr	r1, [pc, #16]	; (8000348 <main+0x48>)
 8000338:	4804      	ldr	r0, [pc, #16]	; (800034c <main+0x4c>)
 800033a:	f000 fc45 	bl	8000bc8 <USART_SendData>
		while( ! GPIO_ReadFromInputPin(GPIOA,GPIO_PIN_NO_0) );
 800033e:	e7eb      	b.n	8000318 <main+0x18>
 8000340:	40004400 	.word	0x40004400
 8000344:	40020000 	.word	0x40020000
 8000348:	20000000 	.word	0x20000000
 800034c:	20000434 	.word	0x20000434

08000350 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000350:	480d      	ldr	r0, [pc, #52]	; (8000388 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000352:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000354:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000358:	480c      	ldr	r0, [pc, #48]	; (800038c <LoopForever+0x6>)
  ldr r1, =_edata
 800035a:	490d      	ldr	r1, [pc, #52]	; (8000390 <LoopForever+0xa>)
  ldr r2, =_sidata
 800035c:	4a0d      	ldr	r2, [pc, #52]	; (8000394 <LoopForever+0xe>)
  movs r3, #0
 800035e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000360:	e002      	b.n	8000368 <LoopCopyDataInit>

08000362 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000362:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000364:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000366:	3304      	adds	r3, #4

08000368 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000368:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800036a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800036c:	d3f9      	bcc.n	8000362 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800036e:	4a0a      	ldr	r2, [pc, #40]	; (8000398 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000370:	4c0a      	ldr	r4, [pc, #40]	; (800039c <LoopForever+0x16>)
  movs r3, #0
 8000372:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000374:	e001      	b.n	800037a <LoopFillZerobss>

08000376 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000376:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000378:	3204      	adds	r2, #4

0800037a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800037a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800037c:	d3fb      	bcc.n	8000376 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800037e:	f000 fcb5 	bl	8000cec <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000382:	f7ff ffbd 	bl	8000300 <main>

08000386 <LoopForever>:

LoopForever:
  b LoopForever
 8000386:	e7fe      	b.n	8000386 <LoopForever>
  ldr   r0, =_estack
 8000388:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800038c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000390:	20000418 	.word	0x20000418
  ldr r2, =_sidata
 8000394:	08000d54 	.word	0x08000d54
  ldr r2, =_sbss
 8000398:	20000418 	.word	0x20000418
  ldr r4, =_ebss
 800039c:	20000458 	.word	0x20000458

080003a0 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80003a0:	e7fe      	b.n	80003a0 <ADC_IRQHandler>
	...

080003a4 <GPIO_PeriClockControl>:
 * @return		- none
 *
 * @Note 		- none
 */
void GPIO_PeriClockControl(GPIO_RegDef_t *pGPIOx, uint8_t EnorDi)
{
 80003a4:	b480      	push	{r7}
 80003a6:	b083      	sub	sp, #12
 80003a8:	af00      	add	r7, sp, #0
 80003aa:	6078      	str	r0, [r7, #4]
 80003ac:	460b      	mov	r3, r1
 80003ae:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE)
 80003b0:	78fb      	ldrb	r3, [r7, #3]
 80003b2:	2b01      	cmp	r3, #1
 80003b4:	d161      	bne.n	800047a <GPIO_PeriClockControl+0xd6>
	{
		if(pGPIOx == GPIOA)
 80003b6:	687b      	ldr	r3, [r7, #4]
 80003b8:	4a32      	ldr	r2, [pc, #200]	; (8000484 <GPIO_PeriClockControl+0xe0>)
 80003ba:	4293      	cmp	r3, r2
 80003bc:	d106      	bne.n	80003cc <GPIO_PeriClockControl+0x28>
		{
			GPIOA_PCLK_EN();		//hàm đã đc define trong stm32f407xx.h(lớp Driver)
 80003be:	4b32      	ldr	r3, [pc, #200]	; (8000488 <GPIO_PeriClockControl+0xe4>)
 80003c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003c2:	4a31      	ldr	r2, [pc, #196]	; (8000488 <GPIO_PeriClockControl+0xe4>)
 80003c4:	f043 0301 	orr.w	r3, r3, #1
 80003c8:	6313      	str	r3, [r2, #48]	; 0x30
	else
	{
		//Todo: (Disable Status)

	}
}
 80003ca:	e056      	b.n	800047a <GPIO_PeriClockControl+0xd6>
		else if(pGPIOx == GPIOB)
 80003cc:	687b      	ldr	r3, [r7, #4]
 80003ce:	4a2f      	ldr	r2, [pc, #188]	; (800048c <GPIO_PeriClockControl+0xe8>)
 80003d0:	4293      	cmp	r3, r2
 80003d2:	d106      	bne.n	80003e2 <GPIO_PeriClockControl+0x3e>
			GPIOB_PCLK_EN();
 80003d4:	4b2c      	ldr	r3, [pc, #176]	; (8000488 <GPIO_PeriClockControl+0xe4>)
 80003d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003d8:	4a2b      	ldr	r2, [pc, #172]	; (8000488 <GPIO_PeriClockControl+0xe4>)
 80003da:	f043 0302 	orr.w	r3, r3, #2
 80003de:	6313      	str	r3, [r2, #48]	; 0x30
}
 80003e0:	e04b      	b.n	800047a <GPIO_PeriClockControl+0xd6>
		else if(pGPIOx == GPIOC)
 80003e2:	687b      	ldr	r3, [r7, #4]
 80003e4:	4a2a      	ldr	r2, [pc, #168]	; (8000490 <GPIO_PeriClockControl+0xec>)
 80003e6:	4293      	cmp	r3, r2
 80003e8:	d106      	bne.n	80003f8 <GPIO_PeriClockControl+0x54>
			GPIOC_PCLK_EN();
 80003ea:	4b27      	ldr	r3, [pc, #156]	; (8000488 <GPIO_PeriClockControl+0xe4>)
 80003ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003ee:	4a26      	ldr	r2, [pc, #152]	; (8000488 <GPIO_PeriClockControl+0xe4>)
 80003f0:	f043 0304 	orr.w	r3, r3, #4
 80003f4:	6313      	str	r3, [r2, #48]	; 0x30
}
 80003f6:	e040      	b.n	800047a <GPIO_PeriClockControl+0xd6>
		else if(pGPIOx == GPIOD)
 80003f8:	687b      	ldr	r3, [r7, #4]
 80003fa:	4a26      	ldr	r2, [pc, #152]	; (8000494 <GPIO_PeriClockControl+0xf0>)
 80003fc:	4293      	cmp	r3, r2
 80003fe:	d106      	bne.n	800040e <GPIO_PeriClockControl+0x6a>
			GPIOD_PCLK_EN();
 8000400:	4b21      	ldr	r3, [pc, #132]	; (8000488 <GPIO_PeriClockControl+0xe4>)
 8000402:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000404:	4a20      	ldr	r2, [pc, #128]	; (8000488 <GPIO_PeriClockControl+0xe4>)
 8000406:	f043 0308 	orr.w	r3, r3, #8
 800040a:	6313      	str	r3, [r2, #48]	; 0x30
}
 800040c:	e035      	b.n	800047a <GPIO_PeriClockControl+0xd6>
		else if(pGPIOx == GPIOE)
 800040e:	687b      	ldr	r3, [r7, #4]
 8000410:	4a21      	ldr	r2, [pc, #132]	; (8000498 <GPIO_PeriClockControl+0xf4>)
 8000412:	4293      	cmp	r3, r2
 8000414:	d106      	bne.n	8000424 <GPIO_PeriClockControl+0x80>
			GPIOE_PCLK_EN();
 8000416:	4b1c      	ldr	r3, [pc, #112]	; (8000488 <GPIO_PeriClockControl+0xe4>)
 8000418:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800041a:	4a1b      	ldr	r2, [pc, #108]	; (8000488 <GPIO_PeriClockControl+0xe4>)
 800041c:	f043 0310 	orr.w	r3, r3, #16
 8000420:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000422:	e02a      	b.n	800047a <GPIO_PeriClockControl+0xd6>
		else if(pGPIOx == GPIOF)
 8000424:	687b      	ldr	r3, [r7, #4]
 8000426:	4a1d      	ldr	r2, [pc, #116]	; (800049c <GPIO_PeriClockControl+0xf8>)
 8000428:	4293      	cmp	r3, r2
 800042a:	d106      	bne.n	800043a <GPIO_PeriClockControl+0x96>
			GPIOF_PCLK_EN();
 800042c:	4b16      	ldr	r3, [pc, #88]	; (8000488 <GPIO_PeriClockControl+0xe4>)
 800042e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000430:	4a15      	ldr	r2, [pc, #84]	; (8000488 <GPIO_PeriClockControl+0xe4>)
 8000432:	f043 0320 	orr.w	r3, r3, #32
 8000436:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000438:	e01f      	b.n	800047a <GPIO_PeriClockControl+0xd6>
		else if(pGPIOx == GPIOG)
 800043a:	687b      	ldr	r3, [r7, #4]
 800043c:	4a18      	ldr	r2, [pc, #96]	; (80004a0 <GPIO_PeriClockControl+0xfc>)
 800043e:	4293      	cmp	r3, r2
 8000440:	d106      	bne.n	8000450 <GPIO_PeriClockControl+0xac>
			GPIOG_PCLK_EN();
 8000442:	4b11      	ldr	r3, [pc, #68]	; (8000488 <GPIO_PeriClockControl+0xe4>)
 8000444:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000446:	4a10      	ldr	r2, [pc, #64]	; (8000488 <GPIO_PeriClockControl+0xe4>)
 8000448:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800044c:	6313      	str	r3, [r2, #48]	; 0x30
}
 800044e:	e014      	b.n	800047a <GPIO_PeriClockControl+0xd6>
		else if(pGPIOx == GPIOH)
 8000450:	687b      	ldr	r3, [r7, #4]
 8000452:	4a13      	ldr	r2, [pc, #76]	; (80004a0 <GPIO_PeriClockControl+0xfc>)
 8000454:	4293      	cmp	r3, r2
 8000456:	d106      	bne.n	8000466 <GPIO_PeriClockControl+0xc2>
			GPIOH_PCLK_EN();
 8000458:	4b0b      	ldr	r3, [pc, #44]	; (8000488 <GPIO_PeriClockControl+0xe4>)
 800045a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800045c:	4a0a      	ldr	r2, [pc, #40]	; (8000488 <GPIO_PeriClockControl+0xe4>)
 800045e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000462:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000464:	e009      	b.n	800047a <GPIO_PeriClockControl+0xd6>
		else if(pGPIOx == GPIOI)
 8000466:	687b      	ldr	r3, [r7, #4]
 8000468:	4a0e      	ldr	r2, [pc, #56]	; (80004a4 <GPIO_PeriClockControl+0x100>)
 800046a:	4293      	cmp	r3, r2
 800046c:	d105      	bne.n	800047a <GPIO_PeriClockControl+0xd6>
			GPIOI_PCLK_EN();
 800046e:	4b06      	ldr	r3, [pc, #24]	; (8000488 <GPIO_PeriClockControl+0xe4>)
 8000470:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000472:	4a05      	ldr	r2, [pc, #20]	; (8000488 <GPIO_PeriClockControl+0xe4>)
 8000474:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000478:	6313      	str	r3, [r2, #48]	; 0x30
}
 800047a:	bf00      	nop
 800047c:	370c      	adds	r7, #12
 800047e:	46bd      	mov	sp, r7
 8000480:	bc80      	pop	{r7}
 8000482:	4770      	bx	lr
 8000484:	40020000 	.word	0x40020000
 8000488:	40023800 	.word	0x40023800
 800048c:	40020400 	.word	0x40020400
 8000490:	40020800 	.word	0x40020800
 8000494:	40020c00 	.word	0x40020c00
 8000498:	40021000 	.word	0x40021000
 800049c:	40021400 	.word	0x40021400
 80004a0:	40021800 	.word	0x40021800
 80004a4:	40022000 	.word	0x40022000

080004a8 <GPIO_Init>:
 * @return		- none
 *
 * @Note 		- none
 */
void GPIO_Init(GPIOx_Handle_t *pGPIOHandle)
{
 80004a8:	b580      	push	{r7, lr}
 80004aa:	b086      	sub	sp, #24
 80004ac:	af00      	add	r7, sp, #0
 80004ae:	6078      	str	r0, [r7, #4]
	uint32_t temp = 0; 	//temp. registerr
 80004b0:	2300      	movs	r3, #0
 80004b2:	617b      	str	r3, [r7, #20]

	//0. Enable the Peripheral Clock
	GPIO_PeriClockControl(pGPIOHandle->pGPIOx, ENABLE);
 80004b4:	687b      	ldr	r3, [r7, #4]
 80004b6:	681b      	ldr	r3, [r3, #0]
 80004b8:	2101      	movs	r1, #1
 80004ba:	4618      	mov	r0, r3
 80004bc:	f7ff ff72 	bl	80003a4 <GPIO_PeriClockControl>

	//1. configure(cấu hình) the mode of gpio pin(Datasheet 8.4.1)
	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_ANALOG)
 80004c0:	687b      	ldr	r3, [r7, #4]
 80004c2:	795b      	ldrb	r3, [r3, #5]
 80004c4:	2b03      	cmp	r3, #3
 80004c6:	d81f      	bhi.n	8000508 <GPIO_Init+0x60>
	{
		//Giá trị GPIO_PinMode thuộc 1 trong 4 trường hợp bit của Mode Register
		//this is part non-interrupt mode

		//Xác định lấy vị trí MODERx cần điều khiển dựa vào số chân Pin_Number và lưu vào biến temp
		temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 80004c8:	687b      	ldr	r3, [r7, #4]
 80004ca:	795b      	ldrb	r3, [r3, #5]
 80004cc:	461a      	mov	r2, r3
 80004ce:	687b      	ldr	r3, [r7, #4]
 80004d0:	791b      	ldrb	r3, [r3, #4]
 80004d2:	005b      	lsls	r3, r3, #1
 80004d4:	fa02 f303 	lsl.w	r3, r2, r3
 80004d8:	617b      	str	r3, [r7, #20]
		//Dịch 2 bit vì theo datasheet, mỗi 2 bit quản lý một pin number của GPIO port mode register
		//vd: GPIO_PinNumber=Pin0 thì sẽ kích hoạt MODER0(2*0=0->bắt đầu từ bit0)
		//GPIO_PinNumber=Pin1 thì sẽ kích hoạt MODER1(2*1=2->bắt đầu từ bit2)

		//Xóa(clear) value bit tại vị trí 2 bit muốn cấu hình
		pGPIOHandle->pGPIOx->MODER &= ~(0x3 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80004da:	687b      	ldr	r3, [r7, #4]
 80004dc:	681b      	ldr	r3, [r3, #0]
 80004de:	681a      	ldr	r2, [r3, #0]
 80004e0:	687b      	ldr	r3, [r7, #4]
 80004e2:	791b      	ldrb	r3, [r3, #4]
 80004e4:	4619      	mov	r1, r3
 80004e6:	2303      	movs	r3, #3
 80004e8:	408b      	lsls	r3, r1
 80004ea:	43db      	mvns	r3, r3
 80004ec:	4619      	mov	r1, r3
 80004ee:	687b      	ldr	r3, [r7, #4]
 80004f0:	681b      	ldr	r3, [r3, #0]
 80004f2:	400a      	ands	r2, r1
 80004f4:	601a      	str	r2, [r3, #0]
		//Theo datasheet thì để reset MODERx thì ta cần thiết lập value bit là 00, Ta có: 0x3 = 11
		//~(0x3 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber); nghĩa là tiến hành đảo trạng thái 11 thành 00
		//vị trí chân Pin_Number

		//Lưu value temp vào trong thanh ghi MODER của biến pGPIOHandle
		pGPIOHandle->pGPIOx->MODER |= temp;
 80004f6:	687b      	ldr	r3, [r7, #4]
 80004f8:	681b      	ldr	r3, [r3, #0]
 80004fa:	6819      	ldr	r1, [r3, #0]
 80004fc:	687b      	ldr	r3, [r7, #4]
 80004fe:	681b      	ldr	r3, [r3, #0]
 8000500:	697a      	ldr	r2, [r7, #20]
 8000502:	430a      	orrs	r2, r1
 8000504:	601a      	str	r2, [r3, #0]
 8000506:	e0b8      	b.n	800067a <GPIO_Init+0x1d2>
	}
	else
	{
		//This is part(phần) will code later (Interrupt mode) //các trường hợp khác từ 4->6

		if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_FT)
 8000508:	687b      	ldr	r3, [r7, #4]
 800050a:	795b      	ldrb	r3, [r3, #5]
 800050c:	2b04      	cmp	r3, #4
 800050e:	d117      	bne.n	8000540 <GPIO_Init+0x98>
		{
			//1. configure the FTSR(Falling(xuống) Trigger Select Register)
			EXTI->FTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000510:	4b43      	ldr	r3, [pc, #268]	; (8000620 <GPIO_Init+0x178>)
 8000512:	68db      	ldr	r3, [r3, #12]
 8000514:	687a      	ldr	r2, [r7, #4]
 8000516:	7912      	ldrb	r2, [r2, #4]
 8000518:	4611      	mov	r1, r2
 800051a:	2201      	movs	r2, #1
 800051c:	408a      	lsls	r2, r1
 800051e:	4611      	mov	r1, r2
 8000520:	4a3f      	ldr	r2, [pc, #252]	; (8000620 <GPIO_Init+0x178>)
 8000522:	430b      	orrs	r3, r1
 8000524:	60d3      	str	r3, [r2, #12]

			//1.2 Clear the corresponding(tương ứng) RTSR, việc này phòng ngừa cho tình huống sử dụng RTSR trước đó
			//và có thể gây xung đột cho lần cấu hình hiện tại
			EXTI->RTSR &= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000526:	4b3e      	ldr	r3, [pc, #248]	; (8000620 <GPIO_Init+0x178>)
 8000528:	689b      	ldr	r3, [r3, #8]
 800052a:	687a      	ldr	r2, [r7, #4]
 800052c:	7912      	ldrb	r2, [r2, #4]
 800052e:	4611      	mov	r1, r2
 8000530:	2201      	movs	r2, #1
 8000532:	408a      	lsls	r2, r1
 8000534:	43d2      	mvns	r2, r2
 8000536:	4611      	mov	r1, r2
 8000538:	4a39      	ldr	r2, [pc, #228]	; (8000620 <GPIO_Init+0x178>)
 800053a:	400b      	ands	r3, r1
 800053c:	6093      	str	r3, [r2, #8]
 800053e:	e035      	b.n	80005ac <GPIO_Init+0x104>
		}
		else if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RT)
 8000540:	687b      	ldr	r3, [r7, #4]
 8000542:	795b      	ldrb	r3, [r3, #5]
 8000544:	2b05      	cmp	r3, #5
 8000546:	d117      	bne.n	8000578 <GPIO_Init+0xd0>
		{
			//1. configure the RTSR(Rising(lên) Trigger Select Register)
			EXTI->RTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000548:	4b35      	ldr	r3, [pc, #212]	; (8000620 <GPIO_Init+0x178>)
 800054a:	689b      	ldr	r3, [r3, #8]
 800054c:	687a      	ldr	r2, [r7, #4]
 800054e:	7912      	ldrb	r2, [r2, #4]
 8000550:	4611      	mov	r1, r2
 8000552:	2201      	movs	r2, #1
 8000554:	408a      	lsls	r2, r1
 8000556:	4611      	mov	r1, r2
 8000558:	4a31      	ldr	r2, [pc, #196]	; (8000620 <GPIO_Init+0x178>)
 800055a:	430b      	orrs	r3, r1
 800055c:	6093      	str	r3, [r2, #8]

			//1.2 Clear the corresponding(tương ứng) FTSR, việc này phòng ngừa cho tình huống sử dụng FTSR trước đó
			//và có thể gây xung đột cho lần cấu hình hiện tại
			EXTI->FTSR &= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800055e:	4b30      	ldr	r3, [pc, #192]	; (8000620 <GPIO_Init+0x178>)
 8000560:	68db      	ldr	r3, [r3, #12]
 8000562:	687a      	ldr	r2, [r7, #4]
 8000564:	7912      	ldrb	r2, [r2, #4]
 8000566:	4611      	mov	r1, r2
 8000568:	2201      	movs	r2, #1
 800056a:	408a      	lsls	r2, r1
 800056c:	43d2      	mvns	r2, r2
 800056e:	4611      	mov	r1, r2
 8000570:	4a2b      	ldr	r2, [pc, #172]	; (8000620 <GPIO_Init+0x178>)
 8000572:	400b      	ands	r3, r1
 8000574:	60d3      	str	r3, [r2, #12]
 8000576:	e019      	b.n	80005ac <GPIO_Init+0x104>
		}
		else if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RFT)
 8000578:	687b      	ldr	r3, [r7, #4]
 800057a:	795b      	ldrb	r3, [r3, #5]
 800057c:	2b06      	cmp	r3, #6
 800057e:	d115      	bne.n	80005ac <GPIO_Init+0x104>
		{
			//1. configure the FTSR and RTSR
			EXTI->FTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000580:	4b27      	ldr	r3, [pc, #156]	; (8000620 <GPIO_Init+0x178>)
 8000582:	68db      	ldr	r3, [r3, #12]
 8000584:	687a      	ldr	r2, [r7, #4]
 8000586:	7912      	ldrb	r2, [r2, #4]
 8000588:	4611      	mov	r1, r2
 800058a:	2201      	movs	r2, #1
 800058c:	408a      	lsls	r2, r1
 800058e:	4611      	mov	r1, r2
 8000590:	4a23      	ldr	r2, [pc, #140]	; (8000620 <GPIO_Init+0x178>)
 8000592:	430b      	orrs	r3, r1
 8000594:	60d3      	str	r3, [r2, #12]
			EXTI->RTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000596:	4b22      	ldr	r3, [pc, #136]	; (8000620 <GPIO_Init+0x178>)
 8000598:	689b      	ldr	r3, [r3, #8]
 800059a:	687a      	ldr	r2, [r7, #4]
 800059c:	7912      	ldrb	r2, [r2, #4]
 800059e:	4611      	mov	r1, r2
 80005a0:	2201      	movs	r2, #1
 80005a2:	408a      	lsls	r2, r1
 80005a4:	4611      	mov	r1, r2
 80005a6:	4a1e      	ldr	r2, [pc, #120]	; (8000620 <GPIO_Init+0x178>)
 80005a8:	430b      	orrs	r3, r1
 80005aa:	6093      	str	r3, [r2, #8]
		}

		//2. Configure the GPIO port selection in SYSCFG_EXTICR
		uint8_t temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 4;		//xác định SYSCFG_EXTICR_temp1 register
 80005ac:	687b      	ldr	r3, [r7, #4]
 80005ae:	791b      	ldrb	r3, [r3, #4]
 80005b0:	089b      	lsrs	r3, r3, #2
 80005b2:	74fb      	strb	r3, [r7, #19]
		uint8_t temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 4;		//xác định 4bit EXTI_temp2 trong SYSCFG_EXTICR_temp1
 80005b4:	687b      	ldr	r3, [r7, #4]
 80005b6:	791b      	ldrb	r3, [r3, #4]
 80005b8:	f003 0303 	and.w	r3, r3, #3
 80005bc:	74bb      	strb	r3, [r7, #18]
		uint8_t portcode = GPIO_BASEADDR_TO_CODE(pGPIOHandle->pGPIOx);		//xác định mã nhị phân xxxx để xác định GPIO port sử dụng
 80005be:	687b      	ldr	r3, [r7, #4]
 80005c0:	681b      	ldr	r3, [r3, #0]
 80005c2:	4a18      	ldr	r2, [pc, #96]	; (8000624 <GPIO_Init+0x17c>)
 80005c4:	4293      	cmp	r3, r2
 80005c6:	d03b      	beq.n	8000640 <GPIO_Init+0x198>
 80005c8:	687b      	ldr	r3, [r7, #4]
 80005ca:	681b      	ldr	r3, [r3, #0]
 80005cc:	4a16      	ldr	r2, [pc, #88]	; (8000628 <GPIO_Init+0x180>)
 80005ce:	4293      	cmp	r3, r2
 80005d0:	d024      	beq.n	800061c <GPIO_Init+0x174>
 80005d2:	687b      	ldr	r3, [r7, #4]
 80005d4:	681b      	ldr	r3, [r3, #0]
 80005d6:	4a15      	ldr	r2, [pc, #84]	; (800062c <GPIO_Init+0x184>)
 80005d8:	4293      	cmp	r3, r2
 80005da:	d01d      	beq.n	8000618 <GPIO_Init+0x170>
 80005dc:	687b      	ldr	r3, [r7, #4]
 80005de:	681b      	ldr	r3, [r3, #0]
 80005e0:	4a13      	ldr	r2, [pc, #76]	; (8000630 <GPIO_Init+0x188>)
 80005e2:	4293      	cmp	r3, r2
 80005e4:	d016      	beq.n	8000614 <GPIO_Init+0x16c>
 80005e6:	687b      	ldr	r3, [r7, #4]
 80005e8:	681b      	ldr	r3, [r3, #0]
 80005ea:	4a12      	ldr	r2, [pc, #72]	; (8000634 <GPIO_Init+0x18c>)
 80005ec:	4293      	cmp	r3, r2
 80005ee:	d00f      	beq.n	8000610 <GPIO_Init+0x168>
 80005f0:	687b      	ldr	r3, [r7, #4]
 80005f2:	681b      	ldr	r3, [r3, #0]
 80005f4:	4a10      	ldr	r2, [pc, #64]	; (8000638 <GPIO_Init+0x190>)
 80005f6:	4293      	cmp	r3, r2
 80005f8:	d008      	beq.n	800060c <GPIO_Init+0x164>
 80005fa:	687b      	ldr	r3, [r7, #4]
 80005fc:	681b      	ldr	r3, [r3, #0]
 80005fe:	4a0f      	ldr	r2, [pc, #60]	; (800063c <GPIO_Init+0x194>)
 8000600:	4293      	cmp	r3, r2
 8000602:	d101      	bne.n	8000608 <GPIO_Init+0x160>
 8000604:	2306      	movs	r3, #6
 8000606:	e01c      	b.n	8000642 <GPIO_Init+0x19a>
 8000608:	2300      	movs	r3, #0
 800060a:	e01a      	b.n	8000642 <GPIO_Init+0x19a>
 800060c:	2305      	movs	r3, #5
 800060e:	e018      	b.n	8000642 <GPIO_Init+0x19a>
 8000610:	2304      	movs	r3, #4
 8000612:	e016      	b.n	8000642 <GPIO_Init+0x19a>
 8000614:	2303      	movs	r3, #3
 8000616:	e014      	b.n	8000642 <GPIO_Init+0x19a>
 8000618:	2302      	movs	r3, #2
 800061a:	e012      	b.n	8000642 <GPIO_Init+0x19a>
 800061c:	2301      	movs	r3, #1
 800061e:	e010      	b.n	8000642 <GPIO_Init+0x19a>
 8000620:	40013c00 	.word	0x40013c00
 8000624:	40020000 	.word	0x40020000
 8000628:	40020400 	.word	0x40020400
 800062c:	40020800 	.word	0x40020800
 8000630:	40020c00 	.word	0x40020c00
 8000634:	40021000 	.word	0x40021000
 8000638:	40021400 	.word	0x40021400
 800063c:	40021800 	.word	0x40021800
 8000640:	2300      	movs	r3, #0
 8000642:	747b      	strb	r3, [r7, #17]
		SYSCFG_PCLK_EN();													//Kích hoạt xung clock để cấu hình
 8000644:	4b5c      	ldr	r3, [pc, #368]	; (80007b8 <GPIO_Init+0x310>)
 8000646:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000648:	4a5b      	ldr	r2, [pc, #364]	; (80007b8 <GPIO_Init+0x310>)
 800064a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800064e:	6453      	str	r3, [r2, #68]	; 0x44
		SYSCFG->EXTICR[temp1] = portcode << (temp2 * 4);					//Cấu hình thanh ghi SYSCFG_EXTICR_temp1
 8000650:	7c7a      	ldrb	r2, [r7, #17]
 8000652:	7cbb      	ldrb	r3, [r7, #18]
 8000654:	009b      	lsls	r3, r3, #2
 8000656:	fa02 f103 	lsl.w	r1, r2, r3
 800065a:	4a58      	ldr	r2, [pc, #352]	; (80007bc <GPIO_Init+0x314>)
 800065c:	7cfb      	ldrb	r3, [r7, #19]
 800065e:	3302      	adds	r3, #2
 8000660:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

		//3. Eanble the exti interrupt delivery(chuyển, sử dụng) by using IMR(Interrupt Masking Register)
		EXTI->IMR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000664:	4b56      	ldr	r3, [pc, #344]	; (80007c0 <GPIO_Init+0x318>)
 8000666:	681b      	ldr	r3, [r3, #0]
 8000668:	687a      	ldr	r2, [r7, #4]
 800066a:	7912      	ldrb	r2, [r2, #4]
 800066c:	4611      	mov	r1, r2
 800066e:	2201      	movs	r2, #1
 8000670:	408a      	lsls	r2, r1
 8000672:	4611      	mov	r1, r2
 8000674:	4a52      	ldr	r2, [pc, #328]	; (80007c0 <GPIO_Init+0x318>)
 8000676:	430b      	orrs	r3, r1
 8000678:	6013      	str	r3, [r2, #0]

	}
	//Reset biến temp để sử dụng cho các lệnh khác trong hàm
	temp = 0;
 800067a:	2300      	movs	r3, #0
 800067c:	617b      	str	r3, [r7, #20]

	//2. configure the speed (Datasheet 8.4.3)
	//Xác định lấy vị trí OSPEEDRx cần điều khiển dựa vào số chân Pin_Number và lưu vào biến temp
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinSpeed << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 800067e:	687b      	ldr	r3, [r7, #4]
 8000680:	799b      	ldrb	r3, [r3, #6]
 8000682:	461a      	mov	r2, r3
 8000684:	687b      	ldr	r3, [r7, #4]
 8000686:	791b      	ldrb	r3, [r3, #4]
 8000688:	005b      	lsls	r3, r3, #1
 800068a:	fa02 f303 	lsl.w	r3, r2, r3
 800068e:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OSPEEDR &=  ~(0x3 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);	//Clearing bit field
 8000690:	687b      	ldr	r3, [r7, #4]
 8000692:	681b      	ldr	r3, [r3, #0]
 8000694:	689a      	ldr	r2, [r3, #8]
 8000696:	687b      	ldr	r3, [r7, #4]
 8000698:	791b      	ldrb	r3, [r3, #4]
 800069a:	4619      	mov	r1, r3
 800069c:	2303      	movs	r3, #3
 800069e:	408b      	lsls	r3, r1
 80006a0:	43db      	mvns	r3, r3
 80006a2:	4619      	mov	r1, r3
 80006a4:	687b      	ldr	r3, [r7, #4]
 80006a6:	681b      	ldr	r3, [r3, #0]
 80006a8:	400a      	ands	r2, r1
 80006aa:	609a      	str	r2, [r3, #8]
	pGPIOHandle->pGPIOx->OSPEEDR |= temp;
 80006ac:	687b      	ldr	r3, [r7, #4]
 80006ae:	681b      	ldr	r3, [r3, #0]
 80006b0:	6899      	ldr	r1, [r3, #8]
 80006b2:	687b      	ldr	r3, [r7, #4]
 80006b4:	681b      	ldr	r3, [r3, #0]
 80006b6:	697a      	ldr	r2, [r7, #20]
 80006b8:	430a      	orrs	r2, r1
 80006ba:	609a      	str	r2, [r3, #8]
	//=> Lúc này ta đã xác định(cấu hình) đc speed(OSPEEDRx) của GPIO tùy thuộc vào pin_number bạn muốn control
	temp = 0;
 80006bc:	2300      	movs	r3, #0
 80006be:	617b      	str	r3, [r7, #20]

	//3. configure the pullup-pulldown settings (Datasheet 8.4.4)
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinPuPdControl << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 80006c0:	687b      	ldr	r3, [r7, #4]
 80006c2:	79db      	ldrb	r3, [r3, #7]
 80006c4:	461a      	mov	r2, r3
 80006c6:	687b      	ldr	r3, [r7, #4]
 80006c8:	791b      	ldrb	r3, [r3, #4]
 80006ca:	005b      	lsls	r3, r3, #1
 80006cc:	fa02 f303 	lsl.w	r3, r2, r3
 80006d0:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->PUPDR &=  ~(0x3 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80006d2:	687b      	ldr	r3, [r7, #4]
 80006d4:	681b      	ldr	r3, [r3, #0]
 80006d6:	68da      	ldr	r2, [r3, #12]
 80006d8:	687b      	ldr	r3, [r7, #4]
 80006da:	791b      	ldrb	r3, [r3, #4]
 80006dc:	4619      	mov	r1, r3
 80006de:	2303      	movs	r3, #3
 80006e0:	408b      	lsls	r3, r1
 80006e2:	43db      	mvns	r3, r3
 80006e4:	4619      	mov	r1, r3
 80006e6:	687b      	ldr	r3, [r7, #4]
 80006e8:	681b      	ldr	r3, [r3, #0]
 80006ea:	400a      	ands	r2, r1
 80006ec:	60da      	str	r2, [r3, #12]
	pGPIOHandle->pGPIOx->PUPDR |= temp;
 80006ee:	687b      	ldr	r3, [r7, #4]
 80006f0:	681b      	ldr	r3, [r3, #0]
 80006f2:	68d9      	ldr	r1, [r3, #12]
 80006f4:	687b      	ldr	r3, [r7, #4]
 80006f6:	681b      	ldr	r3, [r3, #0]
 80006f8:	697a      	ldr	r2, [r7, #20]
 80006fa:	430a      	orrs	r2, r1
 80006fc:	60da      	str	r2, [r3, #12]
	temp = 0;
 80006fe:	2300      	movs	r3, #0
 8000700:	617b      	str	r3, [r7, #20]

	//4. configure the optype (Datasheet 8.4.2)
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinOPType << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000702:	687b      	ldr	r3, [r7, #4]
 8000704:	7a1b      	ldrb	r3, [r3, #8]
 8000706:	461a      	mov	r2, r3
 8000708:	687b      	ldr	r3, [r7, #4]
 800070a:	791b      	ldrb	r3, [r3, #4]
 800070c:	fa02 f303 	lsl.w	r3, r2, r3
 8000710:	617b      	str	r3, [r7, #20]
	//Dịch 1 bit vì theo datasheet, mỗi 1 bit quản lý một pin number của GPIO port mode register
	pGPIOHandle->pGPIOx->OTYPER &=  ~(0x1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber); //Clearing bit field
 8000712:	687b      	ldr	r3, [r7, #4]
 8000714:	681b      	ldr	r3, [r3, #0]
 8000716:	685a      	ldr	r2, [r3, #4]
 8000718:	687b      	ldr	r3, [r7, #4]
 800071a:	791b      	ldrb	r3, [r3, #4]
 800071c:	4619      	mov	r1, r3
 800071e:	2301      	movs	r3, #1
 8000720:	408b      	lsls	r3, r1
 8000722:	43db      	mvns	r3, r3
 8000724:	4619      	mov	r1, r3
 8000726:	687b      	ldr	r3, [r7, #4]
 8000728:	681b      	ldr	r3, [r3, #0]
 800072a:	400a      	ands	r2, r1
 800072c:	605a      	str	r2, [r3, #4]
	//~(0x1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber); nghĩa là tiến hành đảo trạng thái 1 thành 0
	//vị trí chân Pin_Number
	pGPIOHandle->pGPIOx->OTYPER |= temp;
 800072e:	687b      	ldr	r3, [r7, #4]
 8000730:	681b      	ldr	r3, [r3, #0]
 8000732:	6859      	ldr	r1, [r3, #4]
 8000734:	687b      	ldr	r3, [r7, #4]
 8000736:	681b      	ldr	r3, [r3, #0]
 8000738:	697a      	ldr	r2, [r7, #20]
 800073a:	430a      	orrs	r2, r1
 800073c:	605a      	str	r2, [r3, #4]
	temp = 0;
 800073e:	2300      	movs	r3, #0
 8000740:	617b      	str	r3, [r7, #20]

	//5. configure the alt functionality
	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_ALTFN)
 8000742:	687b      	ldr	r3, [r7, #4]
 8000744:	795b      	ldrb	r3, [r3, #5]
 8000746:	2b02      	cmp	r3, #2
 8000748:	d132      	bne.n	80007b0 <GPIO_Init+0x308>
		//Chế độ này đc thực thi khi và chỉ khi bit MODERx đc thiết lập GPIO_MODE_ALTFN

		uint32_t temp1,temp2;

		//Xác định thanh ghi cần sử dụng là GPIOx_AFRH ->AFR[1] hay GPIOx_AFRL ->AFR[0]
		temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 8;
 800074a:	687b      	ldr	r3, [r7, #4]
 800074c:	791b      	ldrb	r3, [r3, #4]
 800074e:	08db      	lsrs	r3, r3, #3
 8000750:	b2db      	uxtb	r3, r3
 8000752:	60fb      	str	r3, [r7, #12]

		//Xác định vị trí cụm 4bit cần sử dụng ở vị trí nào trong thanh ghi
		temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 8;
 8000754:	687b      	ldr	r3, [r7, #4]
 8000756:	791b      	ldrb	r3, [r3, #4]
 8000758:	f003 0307 	and.w	r3, r3, #7
 800075c:	60bb      	str	r3, [r7, #8]

		//Clearing bit field
		pGPIOHandle->pGPIOx->AFR[temp1] &= ~(0xF << (4* temp2));   //0xF = 1111, đảo 1111->0000 tại vị trí 4*temp2
 800075e:	687b      	ldr	r3, [r7, #4]
 8000760:	681b      	ldr	r3, [r3, #0]
 8000762:	68fa      	ldr	r2, [r7, #12]
 8000764:	3208      	adds	r2, #8
 8000766:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800076a:	68bb      	ldr	r3, [r7, #8]
 800076c:	009b      	lsls	r3, r3, #2
 800076e:	210f      	movs	r1, #15
 8000770:	fa01 f303 	lsl.w	r3, r1, r3
 8000774:	43db      	mvns	r3, r3
 8000776:	4619      	mov	r1, r3
 8000778:	687b      	ldr	r3, [r7, #4]
 800077a:	681b      	ldr	r3, [r3, #0]
 800077c:	4011      	ands	r1, r2
 800077e:	68fa      	ldr	r2, [r7, #12]
 8000780:	3208      	adds	r2, #8
 8000782:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

		//Lưu cấu hình AFR vào trong con trỏ pGPIOHandle
		pGPIOHandle->pGPIOx->AFR[temp1] |= (pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFunMode << (4* temp2));
 8000786:	687b      	ldr	r3, [r7, #4]
 8000788:	681b      	ldr	r3, [r3, #0]
 800078a:	68fa      	ldr	r2, [r7, #12]
 800078c:	3208      	adds	r2, #8
 800078e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000792:	687b      	ldr	r3, [r7, #4]
 8000794:	7a5b      	ldrb	r3, [r3, #9]
 8000796:	4619      	mov	r1, r3
 8000798:	68bb      	ldr	r3, [r7, #8]
 800079a:	009b      	lsls	r3, r3, #2
 800079c:	fa01 f303 	lsl.w	r3, r1, r3
 80007a0:	4619      	mov	r1, r3
 80007a2:	687b      	ldr	r3, [r7, #4]
 80007a4:	681b      	ldr	r3, [r3, #0]
 80007a6:	4311      	orrs	r1, r2
 80007a8:	68fa      	ldr	r2, [r7, #12]
 80007aa:	3208      	adds	r2, #8
 80007ac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	}
}
 80007b0:	bf00      	nop
 80007b2:	3718      	adds	r7, #24
 80007b4:	46bd      	mov	sp, r7
 80007b6:	bd80      	pop	{r7, pc}
 80007b8:	40023800 	.word	0x40023800
 80007bc:	40013800 	.word	0x40013800
 80007c0:	40013c00 	.word	0x40013c00

080007c4 <GPIO_ReadFromInputPin>:
 * @return		- value of read in pin_number (0 or 1)
 *
 * @Note 		- none
 */
uint8_t GPIO_ReadFromInputPin(GPIO_RegDef_t *pGPIOx, uint8_t PinNumber)
{
 80007c4:	b480      	push	{r7}
 80007c6:	b085      	sub	sp, #20
 80007c8:	af00      	add	r7, sp, #0
 80007ca:	6078      	str	r0, [r7, #4]
 80007cc:	460b      	mov	r3, r1
 80007ce:	70fb      	strb	r3, [r7, #3]
	uint8_t value;			//biến lưu value đọc đc từ pin
	value = (uint8_t)((pGPIOx->IDR >> PinNumber) & 0x00000001);
 80007d0:	687b      	ldr	r3, [r7, #4]
 80007d2:	691a      	ldr	r2, [r3, #16]
 80007d4:	78fb      	ldrb	r3, [r7, #3]
 80007d6:	fa22 f303 	lsr.w	r3, r2, r3
 80007da:	b2db      	uxtb	r3, r3
 80007dc:	f003 0301 	and.w	r3, r3, #1
 80007e0:	73fb      	strb	r3, [r7, #15]
	return value;
 80007e2:	7bfb      	ldrb	r3, [r7, #15]

	//((pGPIOx->IDR >> PinNumber): Phần này dịch chuyển giá trị IDR sang phải của vị trí PinNumber đầu vào,
	//căn chỉnh giá trị đầu vào của chân mong muốn về bit ngoài cùng bên phải(bit0).
	//& 0x00000001: Thao tác AND theo bit này che giấu tất cả ngoại trừ bit ngoài cùng bên phải(bit0),
	//trích xuất hiệu quả giá trị đầu vào của mã pin được chỉ định.
}
 80007e4:	4618      	mov	r0, r3
 80007e6:	3714      	adds	r7, #20
 80007e8:	46bd      	mov	sp, r7
 80007ea:	bc80      	pop	{r7}
 80007ec:	4770      	bx	lr
	...

080007f0 <RCC_GetPCLK1Value>:
 *
 * @Note        - Sử dụng sơ đồ khối liên quan đến xung Clock của System Clock
 * 				- Thanh ghi CFGR thuộc RCC Register đc sử dụng
 */
uint32_t RCC_GetPCLK1Value(void)
{
 80007f0:	b580      	push	{r7, lr}
 80007f2:	b084      	sub	sp, #16
 80007f4:	af00      	add	r7, sp, #0

	uint8_t clksrc,temp,ahbp,apb1;				//biến xung clock cho khối system clock

	//Kiểm tra xem SWS[3:2] đang có giá trị bit là bao nhiêu, từ đó xác định khối
	//Oscillator đang đc sử dụng là System Clock
	clksrc = (RCC->CFGR >> 2) & 0x3;	//0x03=0011, nghĩa là đọc 2 vị trí bit liền nhau từ vị trí bit số 2
 80007f6:	4b26      	ldr	r3, [pc, #152]	; (8000890 <RCC_GetPCLK1Value+0xa0>)
 80007f8:	689b      	ldr	r3, [r3, #8]
 80007fa:	089b      	lsrs	r3, r3, #2
 80007fc:	b2db      	uxtb	r3, r3
 80007fe:	f003 0303 	and.w	r3, r3, #3
 8000802:	727b      	strb	r3, [r7, #9]

	//1. Xác định tần số xung clock tổng của System Clock
	if(clksrc == 0)    		 	//HSI Oscillator
 8000804:	7a7b      	ldrb	r3, [r7, #9]
 8000806:	2b00      	cmp	r3, #0
 8000808:	d102      	bne.n	8000810 <RCC_GetPCLK1Value+0x20>
	{
		SystemClk = 16000000;
 800080a:	4b22      	ldr	r3, [pc, #136]	; (8000894 <RCC_GetPCLK1Value+0xa4>)
 800080c:	60fb      	str	r3, [r7, #12]
 800080e:	e00b      	b.n	8000828 <RCC_GetPCLK1Value+0x38>
	}
	else if(clksrc == 1)		//HSE Oscillator
 8000810:	7a7b      	ldrb	r3, [r7, #9]
 8000812:	2b01      	cmp	r3, #1
 8000814:	d102      	bne.n	800081c <RCC_GetPCLK1Value+0x2c>
	{
		SystemClk = 8000000;
 8000816:	4b20      	ldr	r3, [pc, #128]	; (8000898 <RCC_GetPCLK1Value+0xa8>)
 8000818:	60fb      	str	r3, [r7, #12]
 800081a:	e005      	b.n	8000828 <RCC_GetPCLK1Value+0x38>
	}
	else if(clksrc == 2)		//PLL Oscillator
 800081c:	7a7b      	ldrb	r3, [r7, #9]
 800081e:	2b02      	cmp	r3, #2
 8000820:	d102      	bne.n	8000828 <RCC_GetPCLK1Value+0x38>
	{
		SystemClk = RCC_GetPLLOutputClock();
 8000822:	f000 f88f 	bl	8000944 <RCC_GetPLLOutputClock>
 8000826:	60f8      	str	r0, [r7, #12]
	}

	//2. Xác định bộ chia của AHBP Prescaler, bit field HPRE[7:4] của CFGR register
	temp = ((RCC->CFGR >> 4) & 0xF);	//0xF=1111, nghĩa là đọc 4 vị trí bit liền nhau từ vị trí bit số 4
 8000828:	4b19      	ldr	r3, [pc, #100]	; (8000890 <RCC_GetPCLK1Value+0xa0>)
 800082a:	689b      	ldr	r3, [r3, #8]
 800082c:	091b      	lsrs	r3, r3, #4
 800082e:	b2db      	uxtb	r3, r3
 8000830:	f003 030f 	and.w	r3, r3, #15
 8000834:	723b      	strb	r3, [r7, #8]
	if(temp < 4)
 8000836:	7a3b      	ldrb	r3, [r7, #8]
 8000838:	2b03      	cmp	r3, #3
 800083a:	d802      	bhi.n	8000842 <RCC_GetPCLK1Value+0x52>
	{
		ahbp = 1;			//Không sử dụng bộ chia
 800083c:	2301      	movs	r3, #1
 800083e:	72fb      	strb	r3, [r7, #11]
 8000840:	e005      	b.n	800084e <RCC_GetPCLK1Value+0x5e>
	}
	else
	{
		//Có sử dụng bộ chia, nếu temp=8 thì 8-8=0, sử dụng bộ chia 2,...
		ahbp = AHB_PreScaler[temp - 8];
 8000842:	7a3b      	ldrb	r3, [r7, #8]
 8000844:	3b08      	subs	r3, #8
 8000846:	4a15      	ldr	r2, [pc, #84]	; (800089c <RCC_GetPCLK1Value+0xac>)
 8000848:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800084c:	72fb      	strb	r3, [r7, #11]
	}

	//3. Xác định bộ chia của APB1 PreScaler,bit ffield PPRE[12:10] của CFGR register
	temp = ((RCC->CFGR >> 10) & 0x7);	//0xF=1111, nghĩa là đọc 3 vị trí bit liền nhau từ vị trí bit số 10
 800084e:	4b10      	ldr	r3, [pc, #64]	; (8000890 <RCC_GetPCLK1Value+0xa0>)
 8000850:	689b      	ldr	r3, [r3, #8]
 8000852:	0a9b      	lsrs	r3, r3, #10
 8000854:	b2db      	uxtb	r3, r3
 8000856:	f003 0307 	and.w	r3, r3, #7
 800085a:	723b      	strb	r3, [r7, #8]
	if(temp < 8)
 800085c:	7a3b      	ldrb	r3, [r7, #8]
 800085e:	2b07      	cmp	r3, #7
 8000860:	d802      	bhi.n	8000868 <RCC_GetPCLK1Value+0x78>
	{
		apb1 = 1;			//Không sử dụng bộ chia
 8000862:	2301      	movs	r3, #1
 8000864:	72bb      	strb	r3, [r7, #10]
 8000866:	e005      	b.n	8000874 <RCC_GetPCLK1Value+0x84>
	}
	else
	{
		//Có sử dụng bộ chia, nếu temp=8 thì 8-8=0, sử dụng bộ chia 2,...
		apb1 = APB1_PreScaler[temp - 4];
 8000868:	7a3b      	ldrb	r3, [r7, #8]
 800086a:	3b04      	subs	r3, #4
 800086c:	4a0c      	ldr	r2, [pc, #48]	; (80008a0 <RCC_GetPCLK1Value+0xb0>)
 800086e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000872:	72bb      	strb	r3, [r7, #10]
	}

	//4. Xác định xung PCLK1 dùng cho I2C đc lấy từ từ System Clock
	pclk1 = (SystemClk / ahbp) / apb1;
 8000874:	7afb      	ldrb	r3, [r7, #11]
 8000876:	68fa      	ldr	r2, [r7, #12]
 8000878:	fbb2 f2f3 	udiv	r2, r2, r3
 800087c:	7abb      	ldrb	r3, [r7, #10]
 800087e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000882:	607b      	str	r3, [r7, #4]

	return pclk1;
 8000884:	687b      	ldr	r3, [r7, #4]
}
 8000886:	4618      	mov	r0, r3
 8000888:	3710      	adds	r7, #16
 800088a:	46bd      	mov	sp, r7
 800088c:	bd80      	pop	{r7, pc}
 800088e:	bf00      	nop
 8000890:	40023800 	.word	0x40023800
 8000894:	00f42400 	.word	0x00f42400
 8000898:	007a1200 	.word	0x007a1200
 800089c:	20000400 	.word	0x20000400
 80008a0:	20000410 	.word	0x20000410

080008a4 <RCC_GetPCLK2Value>:
 *
 * @Note        - Sử dụng sơ đồ khối liên quan đến xung Clock của System Clock
 * 				- Thanh ghi CFGR thuộc RCC Register đc sử dụng
 */
uint32_t RCC_GetPCLK2Value(void)
{
 80008a4:	b480      	push	{r7}
 80008a6:	b085      	sub	sp, #20
 80008a8:	af00      	add	r7, sp, #0
	uint32_t SystemClock=0,tmp,pclk2;
 80008aa:	2300      	movs	r3, #0
 80008ac:	60fb      	str	r3, [r7, #12]

	uint8_t clk_src = ( RCC->CFGR >> 2) & 0X3;
 80008ae:	4b20      	ldr	r3, [pc, #128]	; (8000930 <RCC_GetPCLK2Value+0x8c>)
 80008b0:	689b      	ldr	r3, [r3, #8]
 80008b2:	089b      	lsrs	r3, r3, #2
 80008b4:	b2db      	uxtb	r3, r3
 80008b6:	f003 0303 	and.w	r3, r3, #3
 80008ba:	727b      	strb	r3, [r7, #9]

	uint8_t ahbp,apb2p;

	if(clk_src == 0)
 80008bc:	7a7b      	ldrb	r3, [r7, #9]
 80008be:	2b00      	cmp	r3, #0
 80008c0:	d102      	bne.n	80008c8 <RCC_GetPCLK2Value+0x24>
	{
		SystemClock = 16000000;
 80008c2:	4b1c      	ldr	r3, [pc, #112]	; (8000934 <RCC_GetPCLK2Value+0x90>)
 80008c4:	60fb      	str	r3, [r7, #12]
 80008c6:	e001      	b.n	80008cc <RCC_GetPCLK2Value+0x28>
	}
	else
	{
		SystemClock = 8000000;
 80008c8:	4b1b      	ldr	r3, [pc, #108]	; (8000938 <RCC_GetPCLK2Value+0x94>)
 80008ca:	60fb      	str	r3, [r7, #12]
	}

	tmp = (RCC->CFGR >> 4 ) & 0xF;
 80008cc:	4b18      	ldr	r3, [pc, #96]	; (8000930 <RCC_GetPCLK2Value+0x8c>)
 80008ce:	689b      	ldr	r3, [r3, #8]
 80008d0:	091b      	lsrs	r3, r3, #4
 80008d2:	f003 030f 	and.w	r3, r3, #15
 80008d6:	607b      	str	r3, [r7, #4]

	if(tmp < 0x08)
 80008d8:	687b      	ldr	r3, [r7, #4]
 80008da:	2b07      	cmp	r3, #7
 80008dc:	d802      	bhi.n	80008e4 <RCC_GetPCLK2Value+0x40>
	{
		ahbp = 1;
 80008de:	2301      	movs	r3, #1
 80008e0:	72fb      	strb	r3, [r7, #11]
 80008e2:	e005      	b.n	80008f0 <RCC_GetPCLK2Value+0x4c>
	}
	else
	{
	   ahbp = AHB_PreScaler[tmp-8];
 80008e4:	687b      	ldr	r3, [r7, #4]
 80008e6:	3b08      	subs	r3, #8
 80008e8:	4a14      	ldr	r2, [pc, #80]	; (800093c <RCC_GetPCLK2Value+0x98>)
 80008ea:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80008ee:	72fb      	strb	r3, [r7, #11]
	}

	tmp = (RCC->CFGR >> 13 ) & 0x7;
 80008f0:	4b0f      	ldr	r3, [pc, #60]	; (8000930 <RCC_GetPCLK2Value+0x8c>)
 80008f2:	689b      	ldr	r3, [r3, #8]
 80008f4:	0b5b      	lsrs	r3, r3, #13
 80008f6:	f003 0307 	and.w	r3, r3, #7
 80008fa:	607b      	str	r3, [r7, #4]
	if(tmp < 0x04)
 80008fc:	687b      	ldr	r3, [r7, #4]
 80008fe:	2b03      	cmp	r3, #3
 8000900:	d802      	bhi.n	8000908 <RCC_GetPCLK2Value+0x64>
	{
		apb2p = 1;
 8000902:	2301      	movs	r3, #1
 8000904:	72bb      	strb	r3, [r7, #10]
 8000906:	e005      	b.n	8000914 <RCC_GetPCLK2Value+0x70>
	}
	else
	{
		apb2p = APB1_PreScaler[tmp-4];
 8000908:	687b      	ldr	r3, [r7, #4]
 800090a:	3b04      	subs	r3, #4
 800090c:	4a0c      	ldr	r2, [pc, #48]	; (8000940 <RCC_GetPCLK2Value+0x9c>)
 800090e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000912:	72bb      	strb	r3, [r7, #10]
	}

	pclk2 = (SystemClock / ahbp )/ apb2p;
 8000914:	7afb      	ldrb	r3, [r7, #11]
 8000916:	68fa      	ldr	r2, [r7, #12]
 8000918:	fbb2 f2f3 	udiv	r2, r2, r3
 800091c:	7abb      	ldrb	r3, [r7, #10]
 800091e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000922:	603b      	str	r3, [r7, #0]

	return pclk2;
 8000924:	683b      	ldr	r3, [r7, #0]
}
 8000926:	4618      	mov	r0, r3
 8000928:	3714      	adds	r7, #20
 800092a:	46bd      	mov	sp, r7
 800092c:	bc80      	pop	{r7}
 800092e:	4770      	bx	lr
 8000930:	40023800 	.word	0x40023800
 8000934:	00f42400 	.word	0x00f42400
 8000938:	007a1200 	.word	0x007a1200
 800093c:	20000400 	.word	0x20000400
 8000940:	20000410 	.word	0x20000410

08000944 <RCC_GetPLLOutputClock>:
 *
 * @Note        - Không sử dụng xung clock dạng PLL trong khóa học

 */
uint32_t RCC_GetPLLOutputClock(void)
{
 8000944:	b480      	push	{r7}
 8000946:	af00      	add	r7, sp, #0
	return 0;
 8000948:	2300      	movs	r3, #0
}
 800094a:	4618      	mov	r0, r3
 800094c:	46bd      	mov	sp, r7
 800094e:	bc80      	pop	{r7}
 8000950:	4770      	bx	lr
	...

08000954 <USART_PeriClockControl>:
 * @return      - none
 *
 * @Note        - none
 */
void USART_PeriClockControl(USART_RegDef_t *pUSARTx, uint8_t EnorDi)
{
 8000954:	b480      	push	{r7}
 8000956:	b083      	sub	sp, #12
 8000958:	af00      	add	r7, sp, #0
 800095a:	6078      	str	r0, [r7, #4]
 800095c:	460b      	mov	r3, r1
 800095e:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE)
 8000960:	78fb      	ldrb	r3, [r7, #3]
 8000962:	2b01      	cmp	r3, #1
 8000964:	d12a      	bne.n	80009bc <USART_PeriClockControl+0x68>
	{
		if(pUSARTx == USART1)
 8000966:	687b      	ldr	r3, [r7, #4]
 8000968:	4a17      	ldr	r2, [pc, #92]	; (80009c8 <USART_PeriClockControl+0x74>)
 800096a:	4293      	cmp	r3, r2
 800096c:	d106      	bne.n	800097c <USART_PeriClockControl+0x28>
		{
			USART1_PCLK_EN();
 800096e:	4b17      	ldr	r3, [pc, #92]	; (80009cc <USART_PeriClockControl+0x78>)
 8000970:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000972:	4a16      	ldr	r2, [pc, #88]	; (80009cc <USART_PeriClockControl+0x78>)
 8000974:	f043 0310 	orr.w	r3, r3, #16
 8000978:	6453      	str	r3, [r2, #68]	; 0x44
	}
	else
	{
		//TODO
	}
}
 800097a:	e01f      	b.n	80009bc <USART_PeriClockControl+0x68>
		else if (pUSARTx == USART2)
 800097c:	687b      	ldr	r3, [r7, #4]
 800097e:	4a14      	ldr	r2, [pc, #80]	; (80009d0 <USART_PeriClockControl+0x7c>)
 8000980:	4293      	cmp	r3, r2
 8000982:	d106      	bne.n	8000992 <USART_PeriClockControl+0x3e>
			USART2_PCLK_EN();
 8000984:	4b11      	ldr	r3, [pc, #68]	; (80009cc <USART_PeriClockControl+0x78>)
 8000986:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000988:	4a10      	ldr	r2, [pc, #64]	; (80009cc <USART_PeriClockControl+0x78>)
 800098a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800098e:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000990:	e014      	b.n	80009bc <USART_PeriClockControl+0x68>
		else if (pUSARTx == USART3)
 8000992:	687b      	ldr	r3, [r7, #4]
 8000994:	4a0f      	ldr	r2, [pc, #60]	; (80009d4 <USART_PeriClockControl+0x80>)
 8000996:	4293      	cmp	r3, r2
 8000998:	d106      	bne.n	80009a8 <USART_PeriClockControl+0x54>
			USART3_PCLK_EN();
 800099a:	4b0c      	ldr	r3, [pc, #48]	; (80009cc <USART_PeriClockControl+0x78>)
 800099c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800099e:	4a0b      	ldr	r2, [pc, #44]	; (80009cc <USART_PeriClockControl+0x78>)
 80009a0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80009a4:	6413      	str	r3, [r2, #64]	; 0x40
}
 80009a6:	e009      	b.n	80009bc <USART_PeriClockControl+0x68>
		else if (pUSARTx == USART6)
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	4a0b      	ldr	r2, [pc, #44]	; (80009d8 <USART_PeriClockControl+0x84>)
 80009ac:	4293      	cmp	r3, r2
 80009ae:	d105      	bne.n	80009bc <USART_PeriClockControl+0x68>
			USART6_PCLK_EN();
 80009b0:	4b06      	ldr	r3, [pc, #24]	; (80009cc <USART_PeriClockControl+0x78>)
 80009b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009b4:	4a05      	ldr	r2, [pc, #20]	; (80009cc <USART_PeriClockControl+0x78>)
 80009b6:	f043 0320 	orr.w	r3, r3, #32
 80009ba:	6453      	str	r3, [r2, #68]	; 0x44
}
 80009bc:	bf00      	nop
 80009be:	370c      	adds	r7, #12
 80009c0:	46bd      	mov	sp, r7
 80009c2:	bc80      	pop	{r7}
 80009c4:	4770      	bx	lr
 80009c6:	bf00      	nop
 80009c8:	40011000 	.word	0x40011000
 80009cc:	40023800 	.word	0x40023800
 80009d0:	40004400 	.word	0x40004400
 80009d4:	40004800 	.word	0x40004800
 80009d8:	40011400 	.word	0x40011400

080009dc <USART_Init>:
 *
 * @Note              - none

 */
void USART_Init(USART_Handle_t *pUSARTHandle)
{
 80009dc:	b580      	push	{r7, lr}
 80009de:	b084      	sub	sp, #16
 80009e0:	af00      	add	r7, sp, #0
 80009e2:	6078      	str	r0, [r7, #4]
	//Temporary variable
	uint32_t tempreg = 0;						//Biến dùng để lưu cấu hình user rồi cấu hình vào các thanh ghi control của USART
 80009e4:	2300      	movs	r3, #0
 80009e6:	60fb      	str	r3, [r7, #12]

	/******************************** 1. Configuration of CR1******************************************/
	//Implement the code to enable the "Clock" for given USART peripheral - Kích hoạt xung Clock cho UARTx
	USART_PeriClockControl(pUSARTHandle->pUSARTx, ENABLE);
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	681b      	ldr	r3, [r3, #0]
 80009ec:	2101      	movs	r1, #1
 80009ee:	4618      	mov	r0, r3
 80009f0:	f7ff ffb0 	bl	8000954 <USART_PeriClockControl>

	//Enable USART Tx and Rx engines according to the USART_Mode configuration item
	//Biện luận để Kích hoạt USART Tx và Rx engines theo mục cấu hình USART_Mode
	//Trạng thái dùng để so sánh là sử dụng thông số "USART_Config" do User cài đặt ban đầu
	if (pUSARTHandle->USART_Config.USART_Mode == USART_MODE_ONLY_RX)	//Đang thiết lập trạng thái nhận
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	791b      	ldrb	r3, [r3, #4]
 80009f8:	2b01      	cmp	r3, #1
 80009fa:	d104      	bne.n	8000a06 <USART_Init+0x2a>
	{
		//Implement the code to enable the Receiver bit field - Cấu hình bit theo mã bit field của USART_CR1_RE
		tempreg |= (1 << USART_CR1_RE);							//Dịch đến bit 2 và Cấu hình bit 2 của biến 32 bit tempreg[32:0]
 80009fc:	68fb      	ldr	r3, [r7, #12]
 80009fe:	f043 0304 	orr.w	r3, r3, #4
 8000a02:	60fb      	str	r3, [r7, #12]
 8000a04:	e010      	b.n	8000a28 <USART_Init+0x4c>
	}
	else if (pUSARTHandle->USART_Config.USART_Mode == USART_MODE_ONLY_TX)	//Đang thiết lập trạng thái gửi
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	791b      	ldrb	r3, [r3, #4]
 8000a0a:	2b00      	cmp	r3, #0
 8000a0c:	d104      	bne.n	8000a18 <USART_Init+0x3c>
	{
		//Implement the code to enable the "Transmitter" bit field	- Cấu hình bit theo mã bit field của USART_CR1_TE
		tempreg |= (1 << USART_CR1_TE);						//Dịch đến bit 3 và Cấu hình bit 3 của biến 32 bit tempreg[32:0]
 8000a0e:	68fb      	ldr	r3, [r7, #12]
 8000a10:	f043 0308 	orr.w	r3, r3, #8
 8000a14:	60fb      	str	r3, [r7, #12]
 8000a16:	e007      	b.n	8000a28 <USART_Init+0x4c>
	}
	else if (pUSARTHandle->USART_Config.USART_Mode == USART_MODE_TXRX)		//Đang thiết lập trạng thái cả gửi và nhận
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	791b      	ldrb	r3, [r3, #4]
 8000a1c:	2b02      	cmp	r3, #2
 8000a1e:	d103      	bne.n	8000a28 <USART_Init+0x4c>
	{
		//Implement the code to enable the both Transmitter and Receiver bit fields - Cấu hình bit theo mã bit field của USART_CR1_TE và USART_CR1_RE
		tempreg |= ( (1 << USART_CR1_RE) | (1 << USART_CR1_TE) );			//Cấu hình cả bit 2 và 3 của biến 32 bit tempreg[32:0]
 8000a20:	68fb      	ldr	r3, [r7, #12]
 8000a22:	f043 030c 	orr.w	r3, r3, #12
 8000a26:	60fb      	str	r3, [r7, #12]
	}

	//Implement the code to configure the Word length configuration item - Cấu hình Data Frame theo mã bit của USART_CR1_M
	tempreg |= pUSARTHandle->USART_Config.USART_WordLength << USART_CR1_M;		//Cấu hình bit 12 của biến 32 bit tempreg[32:0]
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	7b5b      	ldrb	r3, [r3, #13]
 8000a2c:	031b      	lsls	r3, r3, #12
 8000a2e:	461a      	mov	r2, r3
 8000a30:	68fb      	ldr	r3, [r7, #12]
 8000a32:	4313      	orrs	r3, r2
 8000a34:	60fb      	str	r3, [r7, #12]

	//Configuration of parity control bit fields - Cấu hình các trường bit kiểm soát tính Parity
	if ( pUSARTHandle->USART_Config.USART_ParityControl == USART_PARITY_EN_EVEN)			//Parity chẵn
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	7b9b      	ldrb	r3, [r3, #14]
 8000a3a:	2b01      	cmp	r3, #1
 8000a3c:	d104      	bne.n	8000a48 <USART_Init+0x6c>
	{
		//Implement the code to enable the parity control - Cấu hình bit theo mã bit field của USART_CR1_PCE
		tempreg |= (1 << USART_CR1_PCE);									//Cấu hình bit 10 của biến 32 bit tempreg[32:0]
 8000a3e:	68fb      	ldr	r3, [r7, #12]
 8000a40:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000a44:	60fb      	str	r3, [r7, #12]
 8000a46:	e00b      	b.n	8000a60 <USART_Init+0x84>
		//Not required because by default EVEN parity will be selected once you enable the parity control
		//Không cần code PS=0 vì theo mặc định USART_CR1_PS=0=EVEN khi set PCE=1
		//Nghĩa là khi PCE(Parity control enable) đc set thì Parity EVEN sẽ được chọn tự động

	}
	else if (pUSARTHandle->USART_Config.USART_ParityControl == USART_PARITY_EN_ODD)		//Parity lẻ
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	7b9b      	ldrb	r3, [r3, #14]
 8000a4c:	2b02      	cmp	r3, #2
 8000a4e:	d107      	bne.n	8000a60 <USART_Init+0x84>
	{
		//Implement the code to enable the parity control
		tempreg |= ( 1 << USART_CR1_PCE);
 8000a50:	68fb      	ldr	r3, [r7, #12]
 8000a52:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000a56:	60fb      	str	r3, [r7, #12]

		//Implement the code to enable ODD parity - kích hoạt bit field USART_CR1_PS lên 1 = Odd
		tempreg |= ( 1 << USART_CR1_PS);									//Dịch đến bit 9 và Cấu hình bit 9 của biến 32 bit tempreg[32:0]
 8000a58:	68fb      	ldr	r3, [r7, #12]
 8000a5a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000a5e:	60fb      	str	r3, [r7, #12]
	}

	//Program the CR1 register - Cấu hình thông số đã cài đặt tempreg cho CR1 Register
	pUSARTHandle->pUSARTx->CR1 = tempreg;
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	681b      	ldr	r3, [r3, #0]
 8000a64:	68fa      	ldr	r2, [r7, #12]
 8000a66:	60da      	str	r2, [r3, #12]


	/******************************** 2. Configuration of CR2******************************************/
	tempreg = 0;			//Reset value
 8000a68:	2300      	movs	r3, #0
 8000a6a:	60fb      	str	r3, [r7, #12]

	//Implement the code to configure the number of "Stop Bits" inserted during USART frame transmission
	//Triển khai mã để định cấu hình số lượng "Stop Bits" sử dụng theo cấu hình bit theo mã bit field của USART_CR2_STOP
	tempreg |= pUSARTHandle->USART_Config.USART_NoOfStopBits << USART_CR2_STOP;			//Dịch đến bit 12 và Cấu hình bit 12 của biến 32 bit tempreg[32:0]
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	7b1b      	ldrb	r3, [r3, #12]
 8000a70:	031b      	lsls	r3, r3, #12
 8000a72:	461a      	mov	r2, r3
 8000a74:	68fb      	ldr	r3, [r7, #12]
 8000a76:	4313      	orrs	r3, r2
 8000a78:	60fb      	str	r3, [r7, #12]

	//Program the CR2 register
	pUSARTHandle->pUSARTx->CR2 = tempreg;
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	681b      	ldr	r3, [r3, #0]
 8000a7e:	68fa      	ldr	r2, [r7, #12]
 8000a80:	611a      	str	r2, [r3, #16]

	/******************************** 3. Configuration of CR3******************************************/
	tempreg = 0;			//Reset value
 8000a82:	2300      	movs	r3, #0
 8000a84:	60fb      	str	r3, [r7, #12]

	//Configuration of USART hardware flow control - Check thông số "USART_HWFlowControl" do User cài đặt ban đầu
	if(pUSARTHandle->USART_Config.USART_HWFlowControl == USART_HW_FLOW_CTRL_CTS)
 8000a86:	687b      	ldr	r3, [r7, #4]
 8000a88:	7bdb      	ldrb	r3, [r3, #15]
 8000a8a:	2b01      	cmp	r3, #1
 8000a8c:	d104      	bne.n	8000a98 <USART_Init+0xbc>
	{
		//Implement the code to "Enable CTS" flow control - cấu hình bit theo mã bit field của USART_CR3_CTSE
		tempreg |= (1 << USART_CR3_CTSE);					//Dịch đến bit 9 và Cấu hình bit 9 của biến 32 bit tempreg[32:0]
 8000a8e:	68fb      	ldr	r3, [r7, #12]
 8000a90:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000a94:	60fb      	str	r3, [r7, #12]
 8000a96:	e014      	b.n	8000ac2 <USART_Init+0xe6>
	}
	else if(pUSARTHandle->USART_Config.USART_HWFlowControl == USART_HW_FLOW_CTRL_RTS)
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	7bdb      	ldrb	r3, [r3, #15]
 8000a9c:	2b02      	cmp	r3, #2
 8000a9e:	d104      	bne.n	8000aaa <USART_Init+0xce>
	{
		//Implement the code to "Enable RTS" flow control - cấu hình bit theo mã bit field của USART_CR3_RTSE
		tempreg |= (1 << USART_CR3_RTSE);					//Dịch đến bit 8 và Cấu hình bit 8 của biến 32 bit tempreg[32:0]
 8000aa0:	68fb      	ldr	r3, [r7, #12]
 8000aa2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000aa6:	60fb      	str	r3, [r7, #12]
 8000aa8:	e00b      	b.n	8000ac2 <USART_Init+0xe6>
	}
	else if (pUSARTHandle->USART_Config.USART_HWFlowControl == USART_HW_FLOW_CTRL_CTS_RTS)
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	7bdb      	ldrb	r3, [r3, #15]
 8000aae:	2b03      	cmp	r3, #3
 8000ab0:	d107      	bne.n	8000ac2 <USART_Init+0xe6>
	{
		//Implement the code to enable both "CTS and RTS" Flow control - cấu hình bit theo mã bit field của USART_CR3_RTSE và USART_CR3_CTSE
		tempreg |= ( 1 << USART_CR3_CTSE);
 8000ab2:	68fb      	ldr	r3, [r7, #12]
 8000ab4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000ab8:	60fb      	str	r3, [r7, #12]
		tempreg |= ( 1 << USART_CR3_RTSE);
 8000aba:	68fb      	ldr	r3, [r7, #12]
 8000abc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ac0:	60fb      	str	r3, [r7, #12]
	}

	//Program the CR3 register
	pUSARTHandle->pUSARTx->CR3 = tempreg;
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	681b      	ldr	r3, [r3, #0]
 8000ac6:	68fa      	ldr	r2, [r7, #12]
 8000ac8:	615a      	str	r2, [r3, #20]

	/******************************** 4. Configuration of BRR(Baudrate register)******************************************/
	//Implement the code to configure the baud rate - We will cover this in the lecture. No action required here
	//Hàm cấu hình baud rate vào trong thanh ghi USART_BRR - Sử dụng con trỏ
	USART_SetBaudRate(pUSARTHandle->pUSARTx, pUSARTHandle->USART_Config.USART_Baud);
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	681a      	ldr	r2, [r3, #0]
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	689b      	ldr	r3, [r3, #8]
 8000ad2:	4619      	mov	r1, r3
 8000ad4:	4610      	mov	r0, r2
 8000ad6:	f000 f805 	bl	8000ae4 <USART_SetBaudRate>
}
 8000ada:	bf00      	nop
 8000adc:	3710      	adds	r7, #16
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	bd80      	pop	{r7, pc}
	...

08000ae4 <USART_SetBaudRate>:
 * @return            - none
 *
 * @Note              - USART_BRR Register
 */
void USART_SetBaudRate(USART_RegDef_t *pUSARTx, uint32_t BaudRate)
{
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	b088      	sub	sp, #32
 8000ae8:	af00      	add	r7, sp, #0
 8000aea:	6078      	str	r0, [r7, #4]
 8000aec:	6039      	str	r1, [r7, #0]
	uint32_t usartDiv;					//Value usartdiv - Bộ Chia hệ số

	//Variables to hold "DIV_Mantissa" and "DIV_Fraction" values with USART_BRR
	uint32_t M_part,F_part;

	uint32_t tempreg = 0;				//Biến sẽ lưu cấu hình cuối cùng để set baudrate cho thanh ghi USART_BRR
 8000aee:	2300      	movs	r3, #0
 8000af0:	613b      	str	r3, [r7, #16]

	//1-Get the value of APBx bus clock in to the variable PCLKx - Lấy giá trị xung clọck từ APBx mà UARTx đang kết nối
	if(pUSARTx == USART1 || pUSARTx == USART6)					//Kiểm tra user muốn chọn UARTx nào
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	4a31      	ldr	r2, [pc, #196]	; (8000bbc <USART_SetBaudRate+0xd8>)
 8000af6:	4293      	cmp	r3, r2
 8000af8:	d003      	beq.n	8000b02 <USART_SetBaudRate+0x1e>
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	4a30      	ldr	r2, [pc, #192]	; (8000bc0 <USART_SetBaudRate+0xdc>)
 8000afe:	4293      	cmp	r3, r2
 8000b00:	d103      	bne.n	8000b0a <USART_SetBaudRate+0x26>
	{
		//USART1 and USART6 are hanging on APB2 bus
		PCLKx = RCC_GetPCLK2Value();
 8000b02:	f7ff fecf 	bl	80008a4 <RCC_GetPCLK2Value>
 8000b06:	61f8      	str	r0, [r7, #28]
 8000b08:	e002      	b.n	8000b10 <USART_SetBaudRate+0x2c>
	}
	else
	{
		//USART2 and USART3 are hanging on APB1 bus
		PCLKx = RCC_GetPCLK1Value();
 8000b0a:	f7ff fe71 	bl	80007f0 <RCC_GetPCLK1Value>
 8000b0e:	61f8      	str	r0, [r7, #28]
	}

	//2-Check for "OVER8" configuration bit - Kiểm tra cấu hình UARTx muốn lấy mẫu ở mức 8 bit hay 16 bit
	if(pUSARTx->CR1 & (1 << USART_CR1_OVER8))
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	68db      	ldr	r3, [r3, #12]
 8000b14:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000b18:	2b00      	cmp	r3, #0
 8000b1a:	d00b      	beq.n	8000b34 <USART_SetBaudRate+0x50>
	{
		//OVER8 = 1 , over sampling by 8
		usartDiv = ((25 * PCLKx) / (2 * BaudRate));
 8000b1c:	69fa      	ldr	r2, [r7, #28]
 8000b1e:	4613      	mov	r3, r2
 8000b20:	009b      	lsls	r3, r3, #2
 8000b22:	4413      	add	r3, r2
 8000b24:	009a      	lsls	r2, r3, #2
 8000b26:	441a      	add	r2, r3
 8000b28:	683b      	ldr	r3, [r7, #0]
 8000b2a:	005b      	lsls	r3, r3, #1
 8000b2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b30:	61bb      	str	r3, [r7, #24]
 8000b32:	e00a      	b.n	8000b4a <USART_SetBaudRate+0x66>
	}
	else
	{
		//OVER8 = 0 , over sampling by 16
		usartDiv = ((25 * PCLKx) / (4 *BaudRate));
 8000b34:	69fa      	ldr	r2, [r7, #28]
 8000b36:	4613      	mov	r3, r2
 8000b38:	009b      	lsls	r3, r3, #2
 8000b3a:	4413      	add	r3, r2
 8000b3c:	009a      	lsls	r2, r3, #2
 8000b3e:	441a      	add	r2, r3
 8000b40:	683b      	ldr	r3, [r7, #0]
 8000b42:	009b      	lsls	r3, r3, #2
 8000b44:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b48:	61bb      	str	r3, [r7, #24]
	}

	//3-Calculate USART_BRR
	//3.1-Calculate the Mantissa part of USART_BRR
	M_part = usartDiv / 100;
 8000b4a:	69bb      	ldr	r3, [r7, #24]
 8000b4c:	4a1d      	ldr	r2, [pc, #116]	; (8000bc4 <USART_SetBaudRate+0xe0>)
 8000b4e:	fba2 2303 	umull	r2, r3, r2, r3
 8000b52:	095b      	lsrs	r3, r3, #5
 8000b54:	60fb      	str	r3, [r7, #12]

	//Place the Mantissa part in appropriate bit position . refer USART_BRR
	//Phần Mantissa của USART_BRR là bit field [15:4] của biến 32 bit tempreg
	tempreg |= M_part << 4;					//Dịch 4 bit sang phải và lưu value M_part vào tempreg bắt đầu từ bit thứ 4
 8000b56:	68fb      	ldr	r3, [r7, #12]
 8000b58:	011b      	lsls	r3, r3, #4
 8000b5a:	693a      	ldr	r2, [r7, #16]
 8000b5c:	4313      	orrs	r3, r2
 8000b5e:	613b      	str	r3, [r7, #16]

	//3.2-Extract the "fraction" part of USART_BRR
	F_part = (usartDiv - (M_part * 100));
 8000b60:	68fb      	ldr	r3, [r7, #12]
 8000b62:	2264      	movs	r2, #100	; 0x64
 8000b64:	fb02 f303 	mul.w	r3, r2, r3
 8000b68:	69ba      	ldr	r2, [r7, #24]
 8000b6a:	1ad3      	subs	r3, r2, r3
 8000b6c:	617b      	str	r3, [r7, #20]

	//3.3-Calculate the final "fractional" of USART_BRR
	if(pUSARTx->CR1 & ( 1 << USART_CR1_OVER8))
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	68db      	ldr	r3, [r3, #12]
 8000b72:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000b76:	2b00      	cmp	r3, #0
 8000b78:	d00a      	beq.n	8000b90 <USART_SetBaudRate+0xac>
	{
		//OVER8 = 1, over sampling by 8
		F_part = ((( F_part * 8)+ 50) / 100) & ((uint8_t)0x07);
 8000b7a:	697b      	ldr	r3, [r7, #20]
 8000b7c:	00db      	lsls	r3, r3, #3
 8000b7e:	3332      	adds	r3, #50	; 0x32
 8000b80:	4a10      	ldr	r2, [pc, #64]	; (8000bc4 <USART_SetBaudRate+0xe0>)
 8000b82:	fba2 2303 	umull	r2, r3, r2, r3
 8000b86:	095b      	lsrs	r3, r3, #5
 8000b88:	f003 0307 	and.w	r3, r3, #7
 8000b8c:	617b      	str	r3, [r7, #20]
 8000b8e:	e009      	b.n	8000ba4 <USART_SetBaudRate+0xc0>
	}
	else
	{
		//OVER8 = 0, over sampling by 16
		F_part = ((( F_part * 16)+ 50) / 100) & ((uint8_t)0x0F);
 8000b90:	697b      	ldr	r3, [r7, #20]
 8000b92:	011b      	lsls	r3, r3, #4
 8000b94:	3332      	adds	r3, #50	; 0x32
 8000b96:	4a0b      	ldr	r2, [pc, #44]	; (8000bc4 <USART_SetBaudRate+0xe0>)
 8000b98:	fba2 2303 	umull	r2, r3, r2, r3
 8000b9c:	095b      	lsrs	r3, r3, #5
 8000b9e:	f003 030f 	and.w	r3, r3, #15
 8000ba2:	617b      	str	r3, [r7, #20]
	}

	//Phần Fractional của USART_BRR là bit field [3:0] của biến 32 bit tempreg
	tempreg |= F_part;						//Đưa value vào 4 bit trống bit field [3:0]
 8000ba4:	693a      	ldr	r2, [r7, #16]
 8000ba6:	697b      	ldr	r3, [r7, #20]
 8000ba8:	4313      	orrs	r3, r2
 8000baa:	613b      	str	r3, [r7, #16]

	//4-Set value of tempreg in to BRR register
	pUSARTx->BRR = tempreg;
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	693a      	ldr	r2, [r7, #16]
 8000bb0:	609a      	str	r2, [r3, #8]
}
 8000bb2:	bf00      	nop
 8000bb4:	3720      	adds	r7, #32
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	bd80      	pop	{r7, pc}
 8000bba:	bf00      	nop
 8000bbc:	40011000 	.word	0x40011000
 8000bc0:	40011400 	.word	0x40011400
 8000bc4:	51eb851f 	.word	0x51eb851f

08000bc8 <USART_SendData>:
 * @return            - none
 *
 * @Note              - Chương trình có sửa một số chỗ so với chương trình gốc - Edit
 */
void USART_SendData(USART_Handle_t *pUSARTHandle, uint8_t *pTxBuffer, uint32_t Len)
{
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	b086      	sub	sp, #24
 8000bcc:	af00      	add	r7, sp, #0
 8000bce:	60f8      	str	r0, [r7, #12]
 8000bd0:	60b9      	str	r1, [r7, #8]
 8000bd2:	607a      	str	r2, [r7, #4]
	uint16_t *pData;					//Biến con trỏ 16 bit

	//Loop over until "Len" number of bytes are transferred - Lặp lại cho đến khi số byte "Len" được chuyển hết
	for(uint32_t i = 0; i < Len; i++)
 8000bd4:	2300      	movs	r3, #0
 8000bd6:	617b      	str	r3, [r7, #20]
 8000bd8:	e043      	b.n	8000c62 <USART_SendData+0x9a>
	{
		//Implement the code to wait until TXE flag is set in the SR - Kiểm tra cho đến khi cờ TXE được đặt trong SR
		while( ! USART_GetFlagStatus(pUSARTHandle->pUSARTx, USART_SR_TXE));
 8000bda:	bf00      	nop
 8000bdc:	68fb      	ldr	r3, [r7, #12]
 8000bde:	681b      	ldr	r3, [r3, #0]
 8000be0:	2107      	movs	r1, #7
 8000be2:	4618      	mov	r0, r3
 8000be4:	f000 f86b 	bl	8000cbe <USART_GetFlagStatus>
 8000be8:	4603      	mov	r3, r0
 8000bea:	2b00      	cmp	r3, #0
 8000bec:	d0f6      	beq.n	8000bdc <USART_SendData+0x14>

		//Check the "USART_WordLength" item for "9BIT" or "8BIT" in a "frame" - Kiểm tra Data Fram sử dụng   -- "Edit 2025/1/1"
		if(pUSARTHandle->USART_Config.USART_WordLength == USART_WORDLEN_9BITS)				//9 bit
 8000bee:	68fb      	ldr	r3, [r7, #12]
 8000bf0:	7b5b      	ldrb	r3, [r3, #13]
 8000bf2:	2b01      	cmp	r3, #1
 8000bf4:	d11d      	bne.n	8000c32 <USART_SendData+0x6a>
		{
			//Check for "USART_ParityControl" - Có sử dụng hay ko parity bit
			if(pUSARTHandle->USART_Config.USART_ParityControl == USART_PARITY_DISABLE)			//Not use
 8000bf6:	68fb      	ldr	r3, [r7, #12]
 8000bf8:	7b9b      	ldrb	r3, [r3, #14]
 8000bfa:	2b00      	cmp	r3, #0
 8000bfc:	d110      	bne.n	8000c20 <USART_SendData+0x58>
			{
				//if 9BIT, load the DR with "2bytes masking the bits" other than first 9 bits
				pData = (uint16_t *)pTxBuffer;			//Ép kiểu địa chỉ vì param "pTxBuffer" đầu vào chỉ có kiểu là uint8_t
 8000bfe:	68bb      	ldr	r3, [r7, #8]
 8000c00:	613b      	str	r3, [r7, #16]

				//Chuẩn hóa data cần gửi *pTxBuffer là kiểu data sử dụng 9 bit
				pUSARTHandle->pUSARTx->DR = (*pData & (uint16_t)0x01FF);			//0x01FF = 0000 0001 1111 1111 - 9bit data đc sử dụng
 8000c02:	693b      	ldr	r3, [r7, #16]
 8000c04:	881b      	ldrh	r3, [r3, #0]
 8000c06:	461a      	mov	r2, r3
 8000c08:	68fb      	ldr	r3, [r7, #12]
 8000c0a:	681b      	ldr	r3, [r3, #0]
 8000c0c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8000c10:	605a      	str	r2, [r3, #4]

				//No parity is used in this transfer. 9bits of user data will be sent - Implement the code to increment pTxBuffer address twice
				pTxBuffer++;
 8000c12:	68bb      	ldr	r3, [r7, #8]
 8000c14:	3301      	adds	r3, #1
 8000c16:	60bb      	str	r3, [r7, #8]
				pTxBuffer++;
 8000c18:	68bb      	ldr	r3, [r7, #8]
 8000c1a:	3301      	adds	r3, #1
 8000c1c:	60bb      	str	r3, [r7, #8]
 8000c1e:	e01d      	b.n	8000c5c <USART_SendData+0x94>
				 */
			}
			else																				//8 bit + Parity bit
			{
				//This is 8bit data transfer - Chuẩn hóa data cần gửi *pTxBuffer là kiểu data sử dụng 8 bit
				pUSARTHandle->pUSARTx->DR = (*pTxBuffer & (uint8_t)0xFF);	//0xFF = 1111 1111
 8000c20:	68bb      	ldr	r3, [r7, #8]
 8000c22:	781a      	ldrb	r2, [r3, #0]
 8000c24:	68fb      	ldr	r3, [r7, #12]
 8000c26:	681b      	ldr	r3, [r3, #0]
 8000c28:	605a      	str	r2, [r3, #4]

				//Parity bit is used in this transfer . 8bits of user data will be sent - Trường hợp có sử dụng Parity bit, 8bit data và 1bit Parity
				//The 9th bit will be replaced by parity bit by the hardware - Bit thứ 9 sẽ được thay thế bằng bit chẵn lẻ bởi phần cứng
				pTxBuffer++;
 8000c2a:	68bb      	ldr	r3, [r7, #8]
 8000c2c:	3301      	adds	r3, #1
 8000c2e:	60bb      	str	r3, [r7, #8]
 8000c30:	e014      	b.n	8000c5c <USART_SendData+0x94>
			}
		}
		else																				//8bit
		{
			//Check for "USART_ParityControl" - Có sử dụng hay ko parity bit
			if(pUSARTHandle->USART_Config.USART_ParityControl == USART_PARITY_DISABLE)			//Not use
 8000c32:	68fb      	ldr	r3, [r7, #12]
 8000c34:	7b9b      	ldrb	r3, [r3, #14]
 8000c36:	2b00      	cmp	r3, #0
 8000c38:	d105      	bne.n	8000c46 <USART_SendData+0x7e>
			{
				//This is 8bit data transfer - Chuẩn hóa data cần gửi *pTxBuffer là kiểu data sử dụng 8 bit
				pUSARTHandle->pUSARTx->DR = (*pTxBuffer & (uint8_t)0xFF);	//0xFF = 1111 1111
 8000c3a:	68bb      	ldr	r3, [r7, #8]
 8000c3c:	781a      	ldrb	r2, [r3, #0]
 8000c3e:	68fb      	ldr	r3, [r7, #12]
 8000c40:	681b      	ldr	r3, [r3, #0]
 8000c42:	605a      	str	r2, [r3, #4]
 8000c44:	e007      	b.n	8000c56 <USART_SendData+0x8e>
			}
			else																				//7bit + 1bit Parity
			{
				//This is 8bit data transfer - Chuẩn hóa data cần gửi *pTxBuffer là kiểu data sử dụng 7 bit
				pUSARTHandle->pUSARTx->DR = (*pTxBuffer & (uint8_t)0x7F);	//0x7F = 0111 1111
 8000c46:	68bb      	ldr	r3, [r7, #8]
 8000c48:	781b      	ldrb	r3, [r3, #0]
 8000c4a:	461a      	mov	r2, r3
 8000c4c:	68fb      	ldr	r3, [r7, #12]
 8000c4e:	681b      	ldr	r3, [r3, #0]
 8000c50:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8000c54:	605a      	str	r2, [r3, #4]

				//Parity bit đã đc thiết lập ở hàm USART_Init()
			}
			//Implement the code to increment the buffer address
			pTxBuffer++;
 8000c56:	68bb      	ldr	r3, [r7, #8]
 8000c58:	3301      	adds	r3, #1
 8000c5a:	60bb      	str	r3, [r7, #8]
	for(uint32_t i = 0; i < Len; i++)
 8000c5c:	697b      	ldr	r3, [r7, #20]
 8000c5e:	3301      	adds	r3, #1
 8000c60:	617b      	str	r3, [r7, #20]
 8000c62:	697a      	ldr	r2, [r7, #20]
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	429a      	cmp	r2, r3
 8000c68:	d3b7      	bcc.n	8000bda <USART_SendData+0x12>
		}
	}

	//Implement the code to wait till "TC flag" is set in the "UART_SR register" - Nghĩa là chờ đến khi TC=1 của USART_SR Register
	while(! USART_GetFlagStatus(pUSARTHandle->pUSARTx, USART_SR_TC));  			//TC=1-> Transmission complete
 8000c6a:	bf00      	nop
 8000c6c:	68fb      	ldr	r3, [r7, #12]
 8000c6e:	681b      	ldr	r3, [r3, #0]
 8000c70:	2106      	movs	r1, #6
 8000c72:	4618      	mov	r0, r3
 8000c74:	f000 f823 	bl	8000cbe <USART_GetFlagStatus>
 8000c78:	4603      	mov	r3, r0
 8000c7a:	2b00      	cmp	r3, #0
 8000c7c:	d0f6      	beq.n	8000c6c <USART_SendData+0xa4>
}
 8000c7e:	bf00      	nop
 8000c80:	bf00      	nop
 8000c82:	3718      	adds	r7, #24
 8000c84:	46bd      	mov	sp, r7
 8000c86:	bd80      	pop	{r7, pc}

08000c88 <USART_PeripheralControl>:
 * @return      - none
 *
 * @Note        - none
 */
void USART_PeripheralControl(USART_RegDef_t *pUSARTx, uint8_t EnOrDi)
{
 8000c88:	b480      	push	{r7}
 8000c8a:	b083      	sub	sp, #12
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	6078      	str	r0, [r7, #4]
 8000c90:	460b      	mov	r3, r1
 8000c92:	70fb      	strb	r3, [r7, #3]
	if(EnOrDi == ENABLE)
 8000c94:	78fb      	ldrb	r3, [r7, #3]
 8000c96:	2b01      	cmp	r3, #1
 8000c98:	d106      	bne.n	8000ca8 <USART_PeripheralControl+0x20>
	{
		pUSARTx->CR1 |= (1 << USART_CR1_UE);
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	68db      	ldr	r3, [r3, #12]
 8000c9e:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	60da      	str	r2, [r3, #12]
	}
	else
	{
		pUSARTx->CR1 &= ~(1 << USART_CR1_UE);
	}
}
 8000ca6:	e005      	b.n	8000cb4 <USART_PeripheralControl+0x2c>
		pUSARTx->CR1 &= ~(1 << USART_CR1_UE);
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	68db      	ldr	r3, [r3, #12]
 8000cac:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	60da      	str	r2, [r3, #12]
}
 8000cb4:	bf00      	nop
 8000cb6:	370c      	adds	r7, #12
 8000cb8:	46bd      	mov	sp, r7
 8000cba:	bc80      	pop	{r7}
 8000cbc:	4770      	bx	lr

08000cbe <USART_GetFlagStatus>:
 * @return      - Trạng thái cờ_flag
 *
 * @Note        - USART_SR register
 */
uint8_t USART_GetFlagStatus(USART_RegDef_t *pUSARTx , uint32_t FlagName)
{
 8000cbe:	b480      	push	{r7}
 8000cc0:	b083      	sub	sp, #12
 8000cc2:	af00      	add	r7, sp, #0
 8000cc4:	6078      	str	r0, [r7, #4]
 8000cc6:	6039      	str	r1, [r7, #0]
	if(pUSARTx->SR & (1 << FlagName))
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	681b      	ldr	r3, [r3, #0]
 8000ccc:	2101      	movs	r1, #1
 8000cce:	683a      	ldr	r2, [r7, #0]
 8000cd0:	fa01 f202 	lsl.w	r2, r1, r2
 8000cd4:	4013      	ands	r3, r2
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	d001      	beq.n	8000cde <USART_GetFlagStatus+0x20>
	{
		return SET;						//Trạng thái bit đang là 1
 8000cda:	2301      	movs	r3, #1
 8000cdc:	e000      	b.n	8000ce0 <USART_GetFlagStatus+0x22>
	}
	return RESET;						//Trạng thái bit đang là 0
 8000cde:	2300      	movs	r3, #0

	//Lưu khi nếu không định nghĩa 1 << FlagName trước thì khi lập trình thì cần dịch bit rồi mới AND
}
 8000ce0:	4618      	mov	r0, r3
 8000ce2:	370c      	adds	r7, #12
 8000ce4:	46bd      	mov	sp, r7
 8000ce6:	bc80      	pop	{r7}
 8000ce8:	4770      	bx	lr
	...

08000cec <__libc_init_array>:
 8000cec:	b570      	push	{r4, r5, r6, lr}
 8000cee:	4d0d      	ldr	r5, [pc, #52]	; (8000d24 <__libc_init_array+0x38>)
 8000cf0:	4c0d      	ldr	r4, [pc, #52]	; (8000d28 <__libc_init_array+0x3c>)
 8000cf2:	1b64      	subs	r4, r4, r5
 8000cf4:	10a4      	asrs	r4, r4, #2
 8000cf6:	2600      	movs	r6, #0
 8000cf8:	42a6      	cmp	r6, r4
 8000cfa:	d109      	bne.n	8000d10 <__libc_init_array+0x24>
 8000cfc:	4d0b      	ldr	r5, [pc, #44]	; (8000d2c <__libc_init_array+0x40>)
 8000cfe:	4c0c      	ldr	r4, [pc, #48]	; (8000d30 <__libc_init_array+0x44>)
 8000d00:	f000 f818 	bl	8000d34 <_init>
 8000d04:	1b64      	subs	r4, r4, r5
 8000d06:	10a4      	asrs	r4, r4, #2
 8000d08:	2600      	movs	r6, #0
 8000d0a:	42a6      	cmp	r6, r4
 8000d0c:	d105      	bne.n	8000d1a <__libc_init_array+0x2e>
 8000d0e:	bd70      	pop	{r4, r5, r6, pc}
 8000d10:	f855 3b04 	ldr.w	r3, [r5], #4
 8000d14:	4798      	blx	r3
 8000d16:	3601      	adds	r6, #1
 8000d18:	e7ee      	b.n	8000cf8 <__libc_init_array+0xc>
 8000d1a:	f855 3b04 	ldr.w	r3, [r5], #4
 8000d1e:	4798      	blx	r3
 8000d20:	3601      	adds	r6, #1
 8000d22:	e7f2      	b.n	8000d0a <__libc_init_array+0x1e>
 8000d24:	08000d4c 	.word	0x08000d4c
 8000d28:	08000d4c 	.word	0x08000d4c
 8000d2c:	08000d4c 	.word	0x08000d4c
 8000d30:	08000d50 	.word	0x08000d50

08000d34 <_init>:
 8000d34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000d36:	bf00      	nop
 8000d38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000d3a:	bc08      	pop	{r3}
 8000d3c:	469e      	mov	lr, r3
 8000d3e:	4770      	bx	lr

08000d40 <_fini>:
 8000d40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000d42:	bf00      	nop
 8000d44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000d46:	bc08      	pop	{r3}
 8000d48:	469e      	mov	lr, r3
 8000d4a:	4770      	bx	lr
