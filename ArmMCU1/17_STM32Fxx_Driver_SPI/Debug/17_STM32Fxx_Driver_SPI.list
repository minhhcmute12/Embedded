
17_STM32Fxx_Driver_SPI.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001a8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001d3c  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000090  08001eec  08001eec  00011eec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001f7c  08001f7c  0002005c  2**0
                  CONTENTS
  4 .ARM          00000000  08001f7c  08001f7c  0002005c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001f7c  08001f7c  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001f7c  08001f7c  00011f7c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001f80  08001f80  00011f80  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  08001f84  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002005c  2**0
                  CONTENTS
 10 .bss          0000016c  2000005c  2000005c  0002005c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200001c8  200001c8  0002005c  2**0
                  ALLOC
 12 .ARM.attributes 0000002a  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020086  2**0
                  CONTENTS, READONLY
 14 .debug_info   00001b70  00000000  00000000  000200c9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 0000078a  00000000  00000000  00021c39  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000228  00000000  00000000  000223c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000187  00000000  00000000  000225f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  000032ac  00000000  00000000  00022777  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00002712  00000000  00000000  00025a23  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    0000ba44  00000000  00000000  00028135  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00000fac  00000000  00000000  00033b7c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000060  00000000  00000000  00034b28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	2000005c 	.word	0x2000005c
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08001ed4 	.word	0x08001ed4

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000060 	.word	0x20000060
 80001ec:	08001ed4 	.word	0x08001ed4

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <SPI2_GPIOInits>:
#include <stdio.h>

/**
 * Hàm thiết lập tính năng Alternate chuyển đổi chân Pins từ GPIO sang SPI
 */
void SPI2_GPIOInits(){
 80002a0:	b580      	push	{r7, lr}
 80002a2:	b084      	sub	sp, #16
 80002a4:	af00      	add	r7, sp, #0

	GPIOx_Handle_t SPIpins;										//Khai báo 1 biến cấu trúc Portx muốn dùng AF

	SPIpins.pGPIOx = GPIOB;										//Xác định Port có chân làm chức năng Alternate
 80002a6:	4b14      	ldr	r3, [pc, #80]	; (80002f8 <SPI2_GPIOInits+0x58>)
 80002a8:	607b      	str	r3, [r7, #4]
	SPIpins.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALTFN;		//Thiết lập tính năng Alternate Function
 80002aa:	2302      	movs	r3, #2
 80002ac:	727b      	strb	r3, [r7, #9]
	SPIpins.GPIO_PinConfig.GPIO_PinAltFunMode = 5;				//Column AF5
 80002ae:	2305      	movs	r3, #5
 80002b0:	737b      	strb	r3, [r7, #13]
	SPIpins.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_PP;	//SPI sử dụng push-pull
 80002b2:	2300      	movs	r3, #0
 80002b4:	733b      	strb	r3, [r7, #12]
	SPIpins.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 80002b6:	2300      	movs	r3, #0
 80002b8:	72fb      	strb	r3, [r7, #11]
	SPIpins.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 80002ba:	2302      	movs	r3, #2
 80002bc:	72bb      	strb	r3, [r7, #10]

	//SPI2_NSS pin
	SPIpins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_12;		//PB12 làm chân AF5 SPI2_NSS
 80002be:	230c      	movs	r3, #12
 80002c0:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&SPIpins);										//Thiết lập SPI_NSS pin
 80002c2:	1d3b      	adds	r3, r7, #4
 80002c4:	4618      	mov	r0, r3
 80002c6:	f000 fba9 	bl	8000a1c <GPIO_Init>

	//SPI2_SCLK pin
	SPIpins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_13;		//PB13 làm chân AF5 SPI2_SCLK
 80002ca:	230d      	movs	r3, #13
 80002cc:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&SPIpins);										//Thiết lập SPI_SCLK pin
 80002ce:	1d3b      	adds	r3, r7, #4
 80002d0:	4618      	mov	r0, r3
 80002d2:	f000 fba3 	bl	8000a1c <GPIO_Init>

	//SPI2_MISO pin
	SPIpins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_14;		//PB14 làm chân AF5 SPI2_MISO
 80002d6:	230e      	movs	r3, #14
 80002d8:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&SPIpins);										//Thiết lập SPI_MISO pin
 80002da:	1d3b      	adds	r3, r7, #4
 80002dc:	4618      	mov	r0, r3
 80002de:	f000 fb9d 	bl	8000a1c <GPIO_Init>

	//SPI2_MOSI pin
	SPIpins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_15;		//PB13 làm chân AF5 SPI2_MOSI
 80002e2:	230f      	movs	r3, #15
 80002e4:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&SPIpins);										//Thiết lập SPI_MOSI pin
 80002e6:	1d3b      	adds	r3, r7, #4
 80002e8:	4618      	mov	r0, r3
 80002ea:	f000 fb97 	bl	8000a1c <GPIO_Init>


	//Nếu chân nào ko sử dụng thì có thể toggle lại
}
 80002ee:	bf00      	nop
 80002f0:	3710      	adds	r7, #16
 80002f2:	46bd      	mov	sp, r7
 80002f4:	bd80      	pop	{r7, pc}
 80002f6:	bf00      	nop
 80002f8:	40020400 	.word	0x40020400

080002fc <SPI2_Inits>:

/**
 * Khởi tạo các cấu hình cơ bản cho SPI Peripheral
 */
void SPI2_Inits()
{
 80002fc:	b580      	push	{r7, lr}
 80002fe:	b084      	sub	sp, #16
 8000300:	af00      	add	r7, sp, #0
	SPI_Handle_t SPI2handle;											//Khai báo biến struct cấu hình SPI2

	SPI2handle.pSPIx = SPI2;											//Thiết lập SPIx sử dụng để Send Data
 8000302:	4b0c      	ldr	r3, [pc, #48]	; (8000334 <SPI2_Inits+0x38>)
 8000304:	607b      	str	r3, [r7, #4]
	SPI2handle.SPIConfig.SPI_BusConfig = SPI_BUS_CONFIG_FD;				//Full-Duplex
 8000306:	2301      	movs	r3, #1
 8000308:	727b      	strb	r3, [r7, #9]
	SPI2handle.SPIConfig.SPI_DeviceMode = SPI_DEVICE_MODE_MASTER;		//Master
 800030a:	2301      	movs	r3, #1
 800030c:	723b      	strb	r3, [r7, #8]
	SPI2handle.SPIConfig.SPI_SclkSpeed = SPI_SCLK_SPEED_DIV8;			//Generate SCLK of 2MHz
 800030e:	2302      	movs	r3, #2
 8000310:	72bb      	strb	r3, [r7, #10]
	SPI2handle.SPIConfig.SPI_DFF = SPI_DFF_8BIT;						//Data 8bit
 8000312:	2300      	movs	r3, #0
 8000314:	72fb      	strb	r3, [r7, #11]
	SPI2handle.SPIConfig.SPI_CPOL = SPI_CPOL_LOW;						//Cạnh xung xuống
 8000316:	2300      	movs	r3, #0
 8000318:	733b      	strb	r3, [r7, #12]
	SPI2handle.SPIConfig.SPI_CPHA = SPI_CPHA_LOW;						//Nửa chu kỳ đầu
 800031a:	2300      	movs	r3, #0
 800031c:	737b      	strb	r3, [r7, #13]
	SPI2handle.SPIConfig.SPI_SSM = SPI_SSM_DS;							//Software Slave Disable(Hardware Slave Enable)
 800031e:	2300      	movs	r3, #0
 8000320:	73bb      	strb	r3, [r7, #14]

	SPI_Init(&SPI2handle);												//Thiết lập cấu hình SPI2
 8000322:	1d3b      	adds	r3, r7, #4
 8000324:	4618      	mov	r0, r3
 8000326:	f000 fd53 	bl	8000dd0 <SPI_Init>
}
 800032a:	bf00      	nop
 800032c:	3710      	adds	r7, #16
 800032e:	46bd      	mov	sp, r7
 8000330:	bd80      	pop	{r7, pc}
 8000332:	bf00      	nop
 8000334:	40003800 	.word	0x40003800

08000338 <GPIO_ButtonInit>:

void GPIO_ButtonInit()
{
 8000338:	b580      	push	{r7, lr}
 800033a:	b084      	sub	sp, #16
 800033c:	af00      	add	r7, sp, #0
	GPIOx_Handle_t GPIOBtn;			//Khai báo biến struct chứa thông tin port và pin(input button) muốn điều khiển

	//Cấu hình thông tin hoạt động của Button muốn điều khiển
	GPIOBtn.pGPIOx = GPIOA;										//Thiết lập port muốn điều khiển
 800033e:	4b09      	ldr	r3, [pc, #36]	; (8000364 <GPIO_ButtonInit+0x2c>)
 8000340:	607b      	str	r3, [r7, #4]
	GPIOBtn.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_0;		//Chân pin của port muốn điều khiển
 8000342:	2300      	movs	r3, #0
 8000344:	723b      	strb	r3, [r7, #8]
	GPIOBtn.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_IN;			//Chế độ xuất tín hiệu input
 8000346:	2300      	movs	r3, #0
 8000348:	727b      	strb	r3, [r7, #9]
	GPIOBtn.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST; 	//Tốc độ xuất tín hiệu
 800034a:	2302      	movs	r3, #2
 800034c:	72bb      	strb	r3, [r7, #10]

	GPIOBtn.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;		//Đầu vào ko cần điện trở kéo
 800034e:	2300      	movs	r3, #0
 8000350:	72fb      	strb	r3, [r7, #11]
	//Cấu hình xung Clock cho Peripheral Port Button
	//GPIO_PeriClockControl(GPIOA, ENABLE);		//Port D và Enalbe=1
	//Ko cần vì đã cấu hình xung clock ở hàm dưới cho SPI

	//Gọi hàm kjhởi tạo hoạt động cấu hình muốn điều khiển(ở đây muốn điều khiển Input Button)
	GPIO_Init(&GPIOBtn);
 8000352:	1d3b      	adds	r3, r7, #4
 8000354:	4618      	mov	r0, r3
 8000356:	f000 fb61 	bl	8000a1c <GPIO_Init>
}
 800035a:	bf00      	nop
 800035c:	3710      	adds	r7, #16
 800035e:	46bd      	mov	sp, r7
 8000360:	bd80      	pop	{r7, pc}
 8000362:	bf00      	nop
 8000364:	40020000 	.word	0x40020000

08000368 <delay>:

/*
 * Hàm Delay thời gian
 */
void delay(void)
{
 8000368:	b480      	push	{r7}
 800036a:	b083      	sub	sp, #12
 800036c:	af00      	add	r7, sp, #0
	//for(uint32_t i = 0; i< 500000; i++);
	for(uint32_t i = 0; i< 500000/2; i++);		//giảm thời gian delay
 800036e:	2300      	movs	r3, #0
 8000370:	607b      	str	r3, [r7, #4]
 8000372:	e002      	b.n	800037a <delay+0x12>
 8000374:	687b      	ldr	r3, [r7, #4]
 8000376:	3301      	adds	r3, #1
 8000378:	607b      	str	r3, [r7, #4]
 800037a:	687b      	ldr	r3, [r7, #4]
 800037c:	4a04      	ldr	r2, [pc, #16]	; (8000390 <delay+0x28>)
 800037e:	4293      	cmp	r3, r2
 8000380:	d9f8      	bls.n	8000374 <delay+0xc>
}
 8000382:	bf00      	nop
 8000384:	bf00      	nop
 8000386:	370c      	adds	r7, #12
 8000388:	46bd      	mov	sp, r7
 800038a:	bc80      	pop	{r7}
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop
 8000390:	0003d08f 	.word	0x0003d08f

08000394 <SPI_VerifyResponse>:

/*
 * Kiểm tra giá trị ackbyte nhận đc có là giá trị hợp lệ hay không
 */
uint8_t SPI_VerifyResponse(uint8_t ackbyte)
{
 8000394:	b480      	push	{r7}
 8000396:	b083      	sub	sp, #12
 8000398:	af00      	add	r7, sp, #0
 800039a:	4603      	mov	r3, r0
 800039c:	71fb      	strb	r3, [r7, #7]
	if(ackbyte == 0xF5)
 800039e:	79fb      	ldrb	r3, [r7, #7]
 80003a0:	2bf5      	cmp	r3, #245	; 0xf5
 80003a2:	d101      	bne.n	80003a8 <SPI_VerifyResponse+0x14>
	{
		//ack
		return 1;
 80003a4:	2301      	movs	r3, #1
 80003a6:	e000      	b.n	80003aa <SPI_VerifyResponse+0x16>
	}
	return 0;
 80003a8:	2300      	movs	r3, #0
}
 80003aa:	4618      	mov	r0, r3
 80003ac:	370c      	adds	r7, #12
 80003ae:	46bd      	mov	sp, r7
 80003b0:	bc80      	pop	{r7}
 80003b2:	4770      	bx	lr

080003b4 <main>:

int main(void)
{
 80003b4:	b5b0      	push	{r4, r5, r7, lr}
 80003b6:	b08e      	sub	sp, #56	; 0x38
 80003b8:	af00      	add	r7, sp, #0
	//char user_data[] = "Hello world";

	uint8_t dummy_write = 0xff;			//dummy bits - mã giả
 80003ba:	23ff      	movs	r3, #255	; 0xff
 80003bc:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
	uint8_t dummy_read;

	//0. Khởi tạo cấu hình nút nhấn cho phép truyền
	GPIO_ButtonInit();
 80003c0:	f7ff ffba 	bl	8000338 <GPIO_ButtonInit>

	//1. This is function is used initialize the GPIO pins to behave(thay thế) as SPI2 pins
	SPI2_GPIOInits();
 80003c4:	f7ff ff6c 	bl	80002a0 <SPI2_GPIOInits>

	//2. Khởi tạo chức năng SPI2
	SPI2_Inits();
 80003c8:	f7ff ff98 	bl	80002fc <SPI2_Inits>
	 * Making SSOE 1 does NSS output enable
	 * The NSS pin is automatically managed by the hardware
	 * i.e: when SPE=1, NSS will be pulled to low
	 * and NSS pin will be high when SPE=0
	 */
	SPI_SSOEConfig(SPI2, ENABLE);
 80003cc:	2101      	movs	r1, #1
 80003ce:	48d4      	ldr	r0, [pc, #848]	; (8000720 <main+0x36c>)
 80003d0:	f000 fdee 	bl	8000fb0 <SPI_SSOEConfig>
		//SPI_SSIConfig(SPI2,ENABLE);							//Cấu hình NSS lên HIGH để phòng tránh lỗi MODF
		//Vì NSS sẽ với với Slave Arduino nên ko cần cấu hình lên mức cao

		//Wait till button is pressed
		//nếu ko nhấn(=0) sẽ ở vòng lặp này và nếu nhấn(=1) sẽ thoát khỏi vòng lặp và làm công việc bên dưới
		while(!GPIO_ReadFromInputPin(GPIOA, GPIO_PIN_NO_0));
 80003d4:	bf00      	nop
 80003d6:	2100      	movs	r1, #0
 80003d8:	48d2      	ldr	r0, [pc, #840]	; (8000724 <main+0x370>)
 80003da:	f000 fcad 	bl	8000d38 <GPIO_ReadFromInputPin>
 80003de:	4603      	mov	r3, r0
 80003e0:	2b00      	cmp	r3, #0
 80003e2:	d0f8      	beq.n	80003d6 <main+0x22>
		delay();			//200ms delay
 80003e4:	f7ff ffc0 	bl	8000368 <delay>

		//3. Enable the SPI Peripheral worked
		SPI_PeripheralControl(SPI2, ENABLE);
 80003e8:	2101      	movs	r1, #1
 80003ea:	48cd      	ldr	r0, [pc, #820]	; (8000720 <main+0x36c>)
 80003ec:	f000 fdc5 	bl	8000f7a <SPI_PeripheralControl>

		//4. Control
		//(1) CMD_LED_CTRL <pin no> <Value>
		uint8_t commandcode = COMMAND_LED_CTRL;
 80003f0:	2350      	movs	r3, #80	; 0x50
 80003f2:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
		uint8_t ackbyte;
		uint8_t args[2];

		//send command
		SPI_SendData(SPI2, &commandcode, 1);
 80003f6:	f107 0331 	add.w	r3, r7, #49	; 0x31
 80003fa:	2201      	movs	r2, #1
 80003fc:	4619      	mov	r1, r3
 80003fe:	48c8      	ldr	r0, [pc, #800]	; (8000720 <main+0x36c>)
 8000400:	f000 fd4d 	bl	8000e9e <SPI_SendData>

		//do dummy read to claer off the RXNE, đọc để xóa bit RXNE
		SPI_ReceiveData(SPI2, &dummy_read, 1);
 8000404:	f107 0332 	add.w	r3, r7, #50	; 0x32
 8000408:	2201      	movs	r2, #1
 800040a:	4619      	mov	r1, r3
 800040c:	48c4      	ldr	r0, [pc, #784]	; (8000720 <main+0x36c>)
 800040e:	f000 fd7d 	bl	8000f0c <SPI_ReceiveData>

		//send some dummy bits (1 byte) to fetch the response from the slave
		//gửi một số bit giả (1 byte) để lấy phản hồi từ slave
		SPI_SendData(SPI2, &dummy_write, 1);
 8000412:	f107 0333 	add.w	r3, r7, #51	; 0x33
 8000416:	2201      	movs	r2, #1
 8000418:	4619      	mov	r1, r3
 800041a:	48c1      	ldr	r0, [pc, #772]	; (8000720 <main+0x36c>)
 800041c:	f000 fd3f 	bl	8000e9e <SPI_SendData>

		//receive
		SPI_ReceiveData(SPI2, &ackbyte, 1);
 8000420:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000424:	2201      	movs	r2, #1
 8000426:	4619      	mov	r1, r3
 8000428:	48bd      	ldr	r0, [pc, #756]	; (8000720 <main+0x36c>)
 800042a:	f000 fd6f 	bl	8000f0c <SPI_ReceiveData>

		if(SPI_VerifyResponse(ackbyte))			//kiểm tra giá trị ackbyte hợp lệ nhận đc
 800042e:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8000432:	4618      	mov	r0, r3
 8000434:	f7ff ffae 	bl	8000394 <SPI_VerifyResponse>
 8000438:	4603      	mov	r3, r0
 800043a:	2b00      	cmp	r3, #0
 800043c:	d00c      	beq.n	8000458 <main+0xa4>
		{
			//Send argument
			args[0] = LED_PIN;		//led on board
 800043e:	2309      	movs	r3, #9
 8000440:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
			args[1] = LED_ON;
 8000444:	2301      	movs	r3, #1
 8000446:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
			//argu[1] = LED_OFF;

			//send argument
			SPI_SendData(SPI2,args,2);
 800044a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800044e:	2202      	movs	r2, #2
 8000450:	4619      	mov	r1, r3
 8000452:	48b3      	ldr	r0, [pc, #716]	; (8000720 <main+0x36c>)
 8000454:	f000 fd23 	bl	8000e9e <SPI_SendData>
		}
		//end of CMD_LED_CTRL

		//(2) CMD_SENSOR_READ <analog pin number>
		while(!GPIO_ReadFromInputPin(GPIOA, GPIO_PIN_NO_0));
 8000458:	bf00      	nop
 800045a:	2100      	movs	r1, #0
 800045c:	48b1      	ldr	r0, [pc, #708]	; (8000724 <main+0x370>)
 800045e:	f000 fc6b 	bl	8000d38 <GPIO_ReadFromInputPin>
 8000462:	4603      	mov	r3, r0
 8000464:	2b00      	cmp	r3, #0
 8000466:	d0f8      	beq.n	800045a <main+0xa6>
		delay();			//200ms delay
 8000468:	f7ff ff7e 	bl	8000368 <delay>
		commandcode = COMMAND_SENSOR_READ;
 800046c:	2351      	movs	r3, #81	; 0x51
 800046e:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
		//send command
		SPI_SendData(SPI2, &commandcode, 1);
 8000472:	f107 0331 	add.w	r3, r7, #49	; 0x31
 8000476:	2201      	movs	r2, #1
 8000478:	4619      	mov	r1, r3
 800047a:	48a9      	ldr	r0, [pc, #676]	; (8000720 <main+0x36c>)
 800047c:	f000 fd0f 	bl	8000e9e <SPI_SendData>

		//do dummy read to claer off the RXNE, đọc để xóa bit RXNE
		SPI_ReceiveData(SPI2, &dummy_read, 1);
 8000480:	f107 0332 	add.w	r3, r7, #50	; 0x32
 8000484:	2201      	movs	r2, #1
 8000486:	4619      	mov	r1, r3
 8000488:	48a5      	ldr	r0, [pc, #660]	; (8000720 <main+0x36c>)
 800048a:	f000 fd3f 	bl	8000f0c <SPI_ReceiveData>

		//send some dummy bits (1 byte) to fetch the response from the slave
		//gửi một số bit giả (1 byte) để lấy phản hồi từ slave
		SPI_SendData(SPI2, &dummy_write, 1);
 800048e:	f107 0333 	add.w	r3, r7, #51	; 0x33
 8000492:	2201      	movs	r2, #1
 8000494:	4619      	mov	r1, r3
 8000496:	48a2      	ldr	r0, [pc, #648]	; (8000720 <main+0x36c>)
 8000498:	f000 fd01 	bl	8000e9e <SPI_SendData>

		//receive ackbyte
		SPI_ReceiveData(SPI2, &ackbyte, 1);
 800049c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80004a0:	2201      	movs	r2, #1
 80004a2:	4619      	mov	r1, r3
 80004a4:	489e      	ldr	r0, [pc, #632]	; (8000720 <main+0x36c>)
 80004a6:	f000 fd31 	bl	8000f0c <SPI_ReceiveData>

		if(SPI_VerifyResponse(ackbyte))			//kiểm tra giá trị ackbyte hợp lệ nhận đc
 80004aa:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 80004ae:	4618      	mov	r0, r3
 80004b0:	f7ff ff70 	bl	8000394 <SPI_VerifyResponse>
 80004b4:	4603      	mov	r3, r0
 80004b6:	2b00      	cmp	r3, #0
 80004b8:	d01f      	beq.n	80004fa <main+0x146>
		{
			//Send argument
			args[0] = ANALOG_PIN0;
 80004ba:	2300      	movs	r3, #0
 80004bc:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c

			//send argument
			SPI_SendData(SPI2,args,1);
 80004c0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80004c4:	2201      	movs	r2, #1
 80004c6:	4619      	mov	r1, r3
 80004c8:	4895      	ldr	r0, [pc, #596]	; (8000720 <main+0x36c>)
 80004ca:	f000 fce8 	bl	8000e9e <SPI_SendData>

			//do dummy read to claer off the RXNE, đọc để xóa bit RXNE
			SPI_ReceiveData(SPI2, &dummy_read, 1);
 80004ce:	f107 0332 	add.w	r3, r7, #50	; 0x32
 80004d2:	2201      	movs	r2, #1
 80004d4:	4619      	mov	r1, r3
 80004d6:	4892      	ldr	r0, [pc, #584]	; (8000720 <main+0x36c>)
 80004d8:	f000 fd18 	bl	8000f0c <SPI_ReceiveData>

			//insert some delay so that slave can ready with the data
			delay();
 80004dc:	f7ff ff44 	bl	8000368 <delay>

			//send some dummy bits (1 byte) to fetch the response from the slave
			//gửi một số bit giả (1 byte) để lấy phản hồi từ slave
			SPI_SendData(SPI2, &dummy_write, 1);
 80004e0:	f107 0333 	add.w	r3, r7, #51	; 0x33
 80004e4:	2201      	movs	r2, #1
 80004e6:	4619      	mov	r1, r3
 80004e8:	488d      	ldr	r0, [pc, #564]	; (8000720 <main+0x36c>)
 80004ea:	f000 fcd8 	bl	8000e9e <SPI_SendData>

			uint8_t analog_read;			//biến nhận giá trị đọc đc
			SPI_SendData(SPI2, &analog_read, 1);
 80004ee:	1dfb      	adds	r3, r7, #7
 80004f0:	2201      	movs	r2, #1
 80004f2:	4619      	mov	r1, r3
 80004f4:	488a      	ldr	r0, [pc, #552]	; (8000720 <main+0x36c>)
 80004f6:	f000 fcd2 	bl	8000e9e <SPI_SendData>
		}
		//end of CMD_SENSOR_READ

		//(3)  CMD_LED_READ 	 <pin no(1) >
		//wait till button is pressed
		while( ! GPIO_ReadFromInputPin(GPIOA,GPIO_PIN_NO_0) );
 80004fa:	bf00      	nop
 80004fc:	2100      	movs	r1, #0
 80004fe:	4889      	ldr	r0, [pc, #548]	; (8000724 <main+0x370>)
 8000500:	f000 fc1a 	bl	8000d38 <GPIO_ReadFromInputPin>
 8000504:	4603      	mov	r3, r0
 8000506:	2b00      	cmp	r3, #0
 8000508:	d0f8      	beq.n	80004fc <main+0x148>

		//to avoid button de-bouncing related issues 200ms of delay
		delay();
 800050a:	f7ff ff2d 	bl	8000368 <delay>

		commandcode = COMMAND_LED_READ;
 800050e:	2352      	movs	r3, #82	; 0x52
 8000510:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31

		//send command
		SPI_SendData(SPI2,&commandcode,1);
 8000514:	f107 0331 	add.w	r3, r7, #49	; 0x31
 8000518:	2201      	movs	r2, #1
 800051a:	4619      	mov	r1, r3
 800051c:	4880      	ldr	r0, [pc, #512]	; (8000720 <main+0x36c>)
 800051e:	f000 fcbe 	bl	8000e9e <SPI_SendData>

		//do dummy read to clear off the RXNE
		SPI_ReceiveData(SPI2,&dummy_read,1);
 8000522:	f107 0332 	add.w	r3, r7, #50	; 0x32
 8000526:	2201      	movs	r2, #1
 8000528:	4619      	mov	r1, r3
 800052a:	487d      	ldr	r0, [pc, #500]	; (8000720 <main+0x36c>)
 800052c:	f000 fcee 	bl	8000f0c <SPI_ReceiveData>

		//Send some dummy byte to fetch the response from the slave
		SPI_SendData(SPI2,&dummy_write,1);
 8000530:	f107 0333 	add.w	r3, r7, #51	; 0x33
 8000534:	2201      	movs	r2, #1
 8000536:	4619      	mov	r1, r3
 8000538:	4879      	ldr	r0, [pc, #484]	; (8000720 <main+0x36c>)
 800053a:	f000 fcb0 	bl	8000e9e <SPI_SendData>

		//read the ack byte received
		SPI_ReceiveData(SPI2,&ackbyte,1);
 800053e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000542:	2201      	movs	r2, #1
 8000544:	4619      	mov	r1, r3
 8000546:	4876      	ldr	r0, [pc, #472]	; (8000720 <main+0x36c>)
 8000548:	f000 fce0 	bl	8000f0c <SPI_ReceiveData>

		if( SPI_VerifyResponse(ackbyte))
 800054c:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8000550:	4618      	mov	r0, r3
 8000552:	f7ff ff1f 	bl	8000394 <SPI_VerifyResponse>
 8000556:	4603      	mov	r3, r0
 8000558:	2b00      	cmp	r3, #0
 800055a:	d024      	beq.n	80005a6 <main+0x1f2>
		{
			args[0] = LED_PIN;
 800055c:	2309      	movs	r3, #9
 800055e:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c

			//send arguments
			SPI_SendData(SPI2,args,1); //sending one byte of
 8000562:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000566:	2201      	movs	r2, #1
 8000568:	4619      	mov	r1, r3
 800056a:	486d      	ldr	r0, [pc, #436]	; (8000720 <main+0x36c>)
 800056c:	f000 fc97 	bl	8000e9e <SPI_SendData>

			//do dummy read to clear off the RXNE
			SPI_ReceiveData(SPI2,&dummy_read,1);
 8000570:	f107 0332 	add.w	r3, r7, #50	; 0x32
 8000574:	2201      	movs	r2, #1
 8000576:	4619      	mov	r1, r3
 8000578:	4869      	ldr	r0, [pc, #420]	; (8000720 <main+0x36c>)
 800057a:	f000 fcc7 	bl	8000f0c <SPI_ReceiveData>

			//insert some delay so that slave can ready with the data
			delay();
 800057e:	f7ff fef3 	bl	8000368 <delay>

			//Send some dummy bits (1 byte) fetch the response from the slave
			SPI_SendData(SPI2,&dummy_write,1);
 8000582:	f107 0333 	add.w	r3, r7, #51	; 0x33
 8000586:	2201      	movs	r2, #1
 8000588:	4619      	mov	r1, r3
 800058a:	4865      	ldr	r0, [pc, #404]	; (8000720 <main+0x36c>)
 800058c:	f000 fc87 	bl	8000e9e <SPI_SendData>

			uint8_t led_status;
			SPI_ReceiveData(SPI2,&led_status,1);
 8000590:	1dbb      	adds	r3, r7, #6
 8000592:	2201      	movs	r2, #1
 8000594:	4619      	mov	r1, r3
 8000596:	4862      	ldr	r0, [pc, #392]	; (8000720 <main+0x36c>)
 8000598:	f000 fcb8 	bl	8000f0c <SPI_ReceiveData>

			printf("COMMAND_READ_LED %d\n",led_status);  //hiển thị data phản hồi từ Slave
 800059c:	79bb      	ldrb	r3, [r7, #6]
 800059e:	4619      	mov	r1, r3
 80005a0:	4861      	ldr	r0, [pc, #388]	; (8000728 <main+0x374>)
 80005a2:	f000 fdd1 	bl	8001148 <iprintf>
		//end of CMD_LED_READ

		//(4) CMD_PRINT 		<len(2)>  <message(len) >

		//wait till button is pressed
		while( ! GPIO_ReadFromInputPin(GPIOA,GPIO_PIN_NO_0) );
 80005a6:	bf00      	nop
 80005a8:	2100      	movs	r1, #0
 80005aa:	485e      	ldr	r0, [pc, #376]	; (8000724 <main+0x370>)
 80005ac:	f000 fbc4 	bl	8000d38 <GPIO_ReadFromInputPin>
 80005b0:	4603      	mov	r3, r0
 80005b2:	2b00      	cmp	r3, #0
 80005b4:	d0f8      	beq.n	80005a8 <main+0x1f4>

		//to avoid button de-bouncing related issues 200ms of delay
		delay();
 80005b6:	f7ff fed7 	bl	8000368 <delay>

		commandcode = COMMAND_PRINT;
 80005ba:	2353      	movs	r3, #83	; 0x53
 80005bc:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31

		//send command
		SPI_SendData(SPI2,&commandcode,1);
 80005c0:	f107 0331 	add.w	r3, r7, #49	; 0x31
 80005c4:	2201      	movs	r2, #1
 80005c6:	4619      	mov	r1, r3
 80005c8:	4855      	ldr	r0, [pc, #340]	; (8000720 <main+0x36c>)
 80005ca:	f000 fc68 	bl	8000e9e <SPI_SendData>

		//do dummy read to clear off the RXNE
		SPI_ReceiveData(SPI2,&dummy_read,1);
 80005ce:	f107 0332 	add.w	r3, r7, #50	; 0x32
 80005d2:	2201      	movs	r2, #1
 80005d4:	4619      	mov	r1, r3
 80005d6:	4852      	ldr	r0, [pc, #328]	; (8000720 <main+0x36c>)
 80005d8:	f000 fc98 	bl	8000f0c <SPI_ReceiveData>

		//Send some dummy byte to fetch the response from the slave
		SPI_SendData(SPI2,&dummy_write,1);
 80005dc:	f107 0333 	add.w	r3, r7, #51	; 0x33
 80005e0:	2201      	movs	r2, #1
 80005e2:	4619      	mov	r1, r3
 80005e4:	484e      	ldr	r0, [pc, #312]	; (8000720 <main+0x36c>)
 80005e6:	f000 fc5a 	bl	8000e9e <SPI_SendData>

		//read the ack byte received
		SPI_ReceiveData(SPI2,&ackbyte,1);
 80005ea:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80005ee:	2201      	movs	r2, #1
 80005f0:	4619      	mov	r1, r3
 80005f2:	484b      	ldr	r0, [pc, #300]	; (8000720 <main+0x36c>)
 80005f4:	f000 fc8a 	bl	8000f0c <SPI_ReceiveData>

		uint8_t message[] = "Hello ! How are you ??";
 80005f8:	4b4c      	ldr	r3, [pc, #304]	; (800072c <main+0x378>)
 80005fa:	f107 0414 	add.w	r4, r7, #20
 80005fe:	461d      	mov	r5, r3
 8000600:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000602:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000604:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000608:	6020      	str	r0, [r4, #0]
 800060a:	3404      	adds	r4, #4
 800060c:	8021      	strh	r1, [r4, #0]
 800060e:	3402      	adds	r4, #2
 8000610:	0c0b      	lsrs	r3, r1, #16
 8000612:	7023      	strb	r3, [r4, #0]
		if( SPI_VerifyResponse(ackbyte))
 8000614:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8000618:	4618      	mov	r0, r3
 800061a:	f7ff febb 	bl	8000394 <SPI_VerifyResponse>
 800061e:	4603      	mov	r3, r0
 8000620:	2b00      	cmp	r3, #0
 8000622:	d01b      	beq.n	800065c <main+0x2a8>
		{
			args[0] = strlen((char*)message);
 8000624:	f107 0314 	add.w	r3, r7, #20
 8000628:	4618      	mov	r0, r3
 800062a:	f7ff fde1 	bl	80001f0 <strlen>
 800062e:	4603      	mov	r3, r0
 8000630:	b2db      	uxtb	r3, r3
 8000632:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c

			//send arguments
			SPI_SendData(SPI2,args,1); //sending length
 8000636:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800063a:	2201      	movs	r2, #1
 800063c:	4619      	mov	r1, r3
 800063e:	4838      	ldr	r0, [pc, #224]	; (8000720 <main+0x36c>)
 8000640:	f000 fc2d 	bl	8000e9e <SPI_SendData>

			//send message
			SPI_SendData(SPI2,message,args[0]);
 8000644:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8000648:	461a      	mov	r2, r3
 800064a:	f107 0314 	add.w	r3, r7, #20
 800064e:	4619      	mov	r1, r3
 8000650:	4833      	ldr	r0, [pc, #204]	; (8000720 <main+0x36c>)
 8000652:	f000 fc24 	bl	8000e9e <SPI_SendData>

			printf("COMMAND_PRINT Executed \n");
 8000656:	4836      	ldr	r0, [pc, #216]	; (8000730 <main+0x37c>)
 8000658:	f000 fddc 	bl	8001214 <puts>
		}
		//end of CMD_PRINT

		//(5) CMD_ID_READ
		//wait till button is pressed
		while( ! GPIO_ReadFromInputPin(GPIOA,GPIO_PIN_NO_0) );
 800065c:	bf00      	nop
 800065e:	2100      	movs	r1, #0
 8000660:	4830      	ldr	r0, [pc, #192]	; (8000724 <main+0x370>)
 8000662:	f000 fb69 	bl	8000d38 <GPIO_ReadFromInputPin>
 8000666:	4603      	mov	r3, r0
 8000668:	2b00      	cmp	r3, #0
 800066a:	d0f8      	beq.n	800065e <main+0x2aa>

		//to avoid button de-bouncing related issues 200ms of delay
		delay();
 800066c:	f7ff fe7c 	bl	8000368 <delay>

		commandcode = COMMAND_ID_READ;
 8000670:	2354      	movs	r3, #84	; 0x54
 8000672:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31

		//send command
		SPI_SendData(SPI2,&commandcode,1);
 8000676:	f107 0331 	add.w	r3, r7, #49	; 0x31
 800067a:	2201      	movs	r2, #1
 800067c:	4619      	mov	r1, r3
 800067e:	4828      	ldr	r0, [pc, #160]	; (8000720 <main+0x36c>)
 8000680:	f000 fc0d 	bl	8000e9e <SPI_SendData>

		//do dummy read to clear off the RXNE
		SPI_ReceiveData(SPI2,&dummy_read,1);
 8000684:	f107 0332 	add.w	r3, r7, #50	; 0x32
 8000688:	2201      	movs	r2, #1
 800068a:	4619      	mov	r1, r3
 800068c:	4824      	ldr	r0, [pc, #144]	; (8000720 <main+0x36c>)
 800068e:	f000 fc3d 	bl	8000f0c <SPI_ReceiveData>

		//Send some dummy byte to fetch the response from the slave
		SPI_SendData(SPI2,&dummy_write,1);
 8000692:	f107 0333 	add.w	r3, r7, #51	; 0x33
 8000696:	2201      	movs	r2, #1
 8000698:	4619      	mov	r1, r3
 800069a:	4821      	ldr	r0, [pc, #132]	; (8000720 <main+0x36c>)
 800069c:	f000 fbff 	bl	8000e9e <SPI_SendData>

		//read the ack byte received
		SPI_ReceiveData(SPI2,&ackbyte,1);
 80006a0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80006a4:	2201      	movs	r2, #1
 80006a6:	4619      	mov	r1, r3
 80006a8:	481d      	ldr	r0, [pc, #116]	; (8000720 <main+0x36c>)
 80006aa:	f000 fc2f 	bl	8000f0c <SPI_ReceiveData>

		uint8_t id[11];
		uint32_t i=0;
 80006ae:	2300      	movs	r3, #0
 80006b0:	637b      	str	r3, [r7, #52]	; 0x34
		if( SPI_VerifyResponse(ackbyte))
 80006b2:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 80006b6:	4618      	mov	r0, r3
 80006b8:	f7ff fe6c 	bl	8000394 <SPI_VerifyResponse>
 80006bc:	4603      	mov	r3, r0
 80006be:	2b00      	cmp	r3, #0
 80006c0:	d020      	beq.n	8000704 <main+0x350>
		{
			//read 10 bytes id from the slave
			for(  i = 0 ; i < 10 ; i++)
 80006c2:	2300      	movs	r3, #0
 80006c4:	637b      	str	r3, [r7, #52]	; 0x34
 80006c6:	e012      	b.n	80006ee <main+0x33a>
			{
				//send dummy byte to fetch data from slave
				SPI_SendData(SPI2,&dummy_write,1);
 80006c8:	f107 0333 	add.w	r3, r7, #51	; 0x33
 80006cc:	2201      	movs	r2, #1
 80006ce:	4619      	mov	r1, r3
 80006d0:	4813      	ldr	r0, [pc, #76]	; (8000720 <main+0x36c>)
 80006d2:	f000 fbe4 	bl	8000e9e <SPI_SendData>
				SPI_ReceiveData(SPI2,&id[i],1);
 80006d6:	f107 0208 	add.w	r2, r7, #8
 80006da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80006dc:	4413      	add	r3, r2
 80006de:	2201      	movs	r2, #1
 80006e0:	4619      	mov	r1, r3
 80006e2:	480f      	ldr	r0, [pc, #60]	; (8000720 <main+0x36c>)
 80006e4:	f000 fc12 	bl	8000f0c <SPI_ReceiveData>
			for(  i = 0 ; i < 10 ; i++)
 80006e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80006ea:	3301      	adds	r3, #1
 80006ec:	637b      	str	r3, [r7, #52]	; 0x34
 80006ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80006f0:	2b09      	cmp	r3, #9
 80006f2:	d9e9      	bls.n	80006c8 <main+0x314>
			}

			id[11] = '\0';
 80006f4:	2300      	movs	r3, #0
 80006f6:	74fb      	strb	r3, [r7, #19]

			printf("COMMAND_ID : %s \n",id);
 80006f8:	f107 0308 	add.w	r3, r7, #8
 80006fc:	4619      	mov	r1, r3
 80006fe:	480d      	ldr	r0, [pc, #52]	; (8000734 <main+0x380>)
 8000700:	f000 fd22 	bl	8001148 <iprintf>
		}
		//end of CMD_ID_READ


		//5. Let comfirm SPI, nếu 1 trả về thì nó sẽ lặp liên tục cho đến khi 0 đc trả về
		while(SPI_GetFlagStatus(SPI2, SPI_BUSY_FLAG));
 8000704:	bf00      	nop
 8000706:	2180      	movs	r1, #128	; 0x80
 8000708:	4805      	ldr	r0, [pc, #20]	; (8000720 <main+0x36c>)
 800070a:	f000 fbb5 	bl	8000e78 <SPI_GetFlagStatus>
 800070e:	4603      	mov	r3, r0
 8000710:	2b00      	cmp	r3, #0
 8000712:	d1f8      	bne.n	8000706 <main+0x352>

		//5.1 Disable the SPI Peripheral worked
		SPI_PeripheralControl(SPI2, DISABLE);			//Đóng cổng cho phép truyền
 8000714:	2100      	movs	r1, #0
 8000716:	4802      	ldr	r0, [pc, #8]	; (8000720 <main+0x36c>)
 8000718:	f000 fc2f 	bl	8000f7a <SPI_PeripheralControl>
	{
 800071c:	e65a      	b.n	80003d4 <main+0x20>
 800071e:	bf00      	nop
 8000720:	40003800 	.word	0x40003800
 8000724:	40020000 	.word	0x40020000
 8000728:	08001eec 	.word	0x08001eec
 800072c:	08001f30 	.word	0x08001f30
 8000730:	08001f04 	.word	0x08001f04
 8000734:	08001f1c 	.word	0x08001f1c

08000738 <ITM_SendChar>:
/* ITM register addresses */
#define ITM_STIMULUS_PORT0   	*((volatile uint32_t*) 0xE0000000 )
#define ITM_TRACE_EN          	*((volatile uint32_t*) 0xE0000E00 )

void ITM_SendChar(uint8_t ch)
{
 8000738:	b480      	push	{r7}
 800073a:	b083      	sub	sp, #12
 800073c:	af00      	add	r7, sp, #0
 800073e:	4603      	mov	r3, r0
 8000740:	71fb      	strb	r3, [r7, #7]

	//Enable TRCENA
	DEMCR |= ( 1 << 24);
 8000742:	4b0e      	ldr	r3, [pc, #56]	; (800077c <ITM_SendChar+0x44>)
 8000744:	681b      	ldr	r3, [r3, #0]
 8000746:	4a0d      	ldr	r2, [pc, #52]	; (800077c <ITM_SendChar+0x44>)
 8000748:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800074c:	6013      	str	r3, [r2, #0]

	//enable stimulus port 0
	ITM_TRACE_EN |= ( 1 << 0);
 800074e:	4b0c      	ldr	r3, [pc, #48]	; (8000780 <ITM_SendChar+0x48>)
 8000750:	681b      	ldr	r3, [r3, #0]
 8000752:	4a0b      	ldr	r2, [pc, #44]	; (8000780 <ITM_SendChar+0x48>)
 8000754:	f043 0301 	orr.w	r3, r3, #1
 8000758:	6013      	str	r3, [r2, #0]

	// read FIFO status in bit [0]:
	while(!(ITM_STIMULUS_PORT0 & 1));
 800075a:	bf00      	nop
 800075c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000760:	681b      	ldr	r3, [r3, #0]
 8000762:	f003 0301 	and.w	r3, r3, #1
 8000766:	2b00      	cmp	r3, #0
 8000768:	d0f8      	beq.n	800075c <ITM_SendChar+0x24>

	//Write to ITM stimulus port0
	ITM_STIMULUS_PORT0 = ch;
 800076a:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 800076e:	79fb      	ldrb	r3, [r7, #7]
 8000770:	6013      	str	r3, [r2, #0]
}
 8000772:	bf00      	nop
 8000774:	370c      	adds	r7, #12
 8000776:	46bd      	mov	sp, r7
 8000778:	bc80      	pop	{r7}
 800077a:	4770      	bx	lr
 800077c:	e000edfc 	.word	0xe000edfc
 8000780:	e0000e00 	.word	0xe0000e00

08000784 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000784:	b580      	push	{r7, lr}
 8000786:	b086      	sub	sp, #24
 8000788:	af00      	add	r7, sp, #0
 800078a:	60f8      	str	r0, [r7, #12]
 800078c:	60b9      	str	r1, [r7, #8]
 800078e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000790:	2300      	movs	r3, #0
 8000792:	617b      	str	r3, [r7, #20]
 8000794:	e00a      	b.n	80007ac <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000796:	f3af 8000 	nop.w
 800079a:	4601      	mov	r1, r0
 800079c:	68bb      	ldr	r3, [r7, #8]
 800079e:	1c5a      	adds	r2, r3, #1
 80007a0:	60ba      	str	r2, [r7, #8]
 80007a2:	b2ca      	uxtb	r2, r1
 80007a4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80007a6:	697b      	ldr	r3, [r7, #20]
 80007a8:	3301      	adds	r3, #1
 80007aa:	617b      	str	r3, [r7, #20]
 80007ac:	697a      	ldr	r2, [r7, #20]
 80007ae:	687b      	ldr	r3, [r7, #4]
 80007b0:	429a      	cmp	r2, r3
 80007b2:	dbf0      	blt.n	8000796 <_read+0x12>
	}

return len;
 80007b4:	687b      	ldr	r3, [r7, #4]
}
 80007b6:	4618      	mov	r0, r3
 80007b8:	3718      	adds	r7, #24
 80007ba:	46bd      	mov	sp, r7
 80007bc:	bd80      	pop	{r7, pc}

080007be <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80007be:	b580      	push	{r7, lr}
 80007c0:	b086      	sub	sp, #24
 80007c2:	af00      	add	r7, sp, #0
 80007c4:	60f8      	str	r0, [r7, #12]
 80007c6:	60b9      	str	r1, [r7, #8]
 80007c8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80007ca:	2300      	movs	r3, #0
 80007cc:	617b      	str	r3, [r7, #20]
 80007ce:	e009      	b.n	80007e4 <_write+0x26>
	{
		//__io_putchar(*ptr++);
		ITM_SendChar(*ptr++);
 80007d0:	68bb      	ldr	r3, [r7, #8]
 80007d2:	1c5a      	adds	r2, r3, #1
 80007d4:	60ba      	str	r2, [r7, #8]
 80007d6:	781b      	ldrb	r3, [r3, #0]
 80007d8:	4618      	mov	r0, r3
 80007da:	f7ff ffad 	bl	8000738 <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80007de:	697b      	ldr	r3, [r7, #20]
 80007e0:	3301      	adds	r3, #1
 80007e2:	617b      	str	r3, [r7, #20]
 80007e4:	697a      	ldr	r2, [r7, #20]
 80007e6:	687b      	ldr	r3, [r7, #4]
 80007e8:	429a      	cmp	r2, r3
 80007ea:	dbf1      	blt.n	80007d0 <_write+0x12>
	}
	return len;
 80007ec:	687b      	ldr	r3, [r7, #4]
}
 80007ee:	4618      	mov	r0, r3
 80007f0:	3718      	adds	r7, #24
 80007f2:	46bd      	mov	sp, r7
 80007f4:	bd80      	pop	{r7, pc}

080007f6 <_close>:

int _close(int file)
{
 80007f6:	b480      	push	{r7}
 80007f8:	b083      	sub	sp, #12
 80007fa:	af00      	add	r7, sp, #0
 80007fc:	6078      	str	r0, [r7, #4]
	return -1;
 80007fe:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000802:	4618      	mov	r0, r3
 8000804:	370c      	adds	r7, #12
 8000806:	46bd      	mov	sp, r7
 8000808:	bc80      	pop	{r7}
 800080a:	4770      	bx	lr

0800080c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800080c:	b480      	push	{r7}
 800080e:	b083      	sub	sp, #12
 8000810:	af00      	add	r7, sp, #0
 8000812:	6078      	str	r0, [r7, #4]
 8000814:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000816:	683b      	ldr	r3, [r7, #0]
 8000818:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800081c:	605a      	str	r2, [r3, #4]
	return 0;
 800081e:	2300      	movs	r3, #0
}
 8000820:	4618      	mov	r0, r3
 8000822:	370c      	adds	r7, #12
 8000824:	46bd      	mov	sp, r7
 8000826:	bc80      	pop	{r7}
 8000828:	4770      	bx	lr

0800082a <_isatty>:

int _isatty(int file)
{
 800082a:	b480      	push	{r7}
 800082c:	b083      	sub	sp, #12
 800082e:	af00      	add	r7, sp, #0
 8000830:	6078      	str	r0, [r7, #4]
	return 1;
 8000832:	2301      	movs	r3, #1
}
 8000834:	4618      	mov	r0, r3
 8000836:	370c      	adds	r7, #12
 8000838:	46bd      	mov	sp, r7
 800083a:	bc80      	pop	{r7}
 800083c:	4770      	bx	lr

0800083e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800083e:	b480      	push	{r7}
 8000840:	b085      	sub	sp, #20
 8000842:	af00      	add	r7, sp, #0
 8000844:	60f8      	str	r0, [r7, #12]
 8000846:	60b9      	str	r1, [r7, #8]
 8000848:	607a      	str	r2, [r7, #4]
	return 0;
 800084a:	2300      	movs	r3, #0
}
 800084c:	4618      	mov	r0, r3
 800084e:	3714      	adds	r7, #20
 8000850:	46bd      	mov	sp, r7
 8000852:	bc80      	pop	{r7}
 8000854:	4770      	bx	lr
	...

08000858 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000858:	b580      	push	{r7, lr}
 800085a:	b086      	sub	sp, #24
 800085c:	af00      	add	r7, sp, #0
 800085e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000860:	4a14      	ldr	r2, [pc, #80]	; (80008b4 <_sbrk+0x5c>)
 8000862:	4b15      	ldr	r3, [pc, #84]	; (80008b8 <_sbrk+0x60>)
 8000864:	1ad3      	subs	r3, r2, r3
 8000866:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000868:	697b      	ldr	r3, [r7, #20]
 800086a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800086c:	4b13      	ldr	r3, [pc, #76]	; (80008bc <_sbrk+0x64>)
 800086e:	681b      	ldr	r3, [r3, #0]
 8000870:	2b00      	cmp	r3, #0
 8000872:	d102      	bne.n	800087a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000874:	4b11      	ldr	r3, [pc, #68]	; (80008bc <_sbrk+0x64>)
 8000876:	4a12      	ldr	r2, [pc, #72]	; (80008c0 <_sbrk+0x68>)
 8000878:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800087a:	4b10      	ldr	r3, [pc, #64]	; (80008bc <_sbrk+0x64>)
 800087c:	681a      	ldr	r2, [r3, #0]
 800087e:	687b      	ldr	r3, [r7, #4]
 8000880:	4413      	add	r3, r2
 8000882:	693a      	ldr	r2, [r7, #16]
 8000884:	429a      	cmp	r2, r3
 8000886:	d207      	bcs.n	8000898 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000888:	f000 fdf2 	bl	8001470 <__errno>
 800088c:	4603      	mov	r3, r0
 800088e:	220c      	movs	r2, #12
 8000890:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000892:	f04f 33ff 	mov.w	r3, #4294967295
 8000896:	e009      	b.n	80008ac <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000898:	4b08      	ldr	r3, [pc, #32]	; (80008bc <_sbrk+0x64>)
 800089a:	681b      	ldr	r3, [r3, #0]
 800089c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800089e:	4b07      	ldr	r3, [pc, #28]	; (80008bc <_sbrk+0x64>)
 80008a0:	681a      	ldr	r2, [r3, #0]
 80008a2:	687b      	ldr	r3, [r7, #4]
 80008a4:	4413      	add	r3, r2
 80008a6:	4a05      	ldr	r2, [pc, #20]	; (80008bc <_sbrk+0x64>)
 80008a8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80008aa:	68fb      	ldr	r3, [r7, #12]
}
 80008ac:	4618      	mov	r0, r3
 80008ae:	3718      	adds	r7, #24
 80008b0:	46bd      	mov	sp, r7
 80008b2:	bd80      	pop	{r7, pc}
 80008b4:	20020000 	.word	0x20020000
 80008b8:	00000400 	.word	0x00000400
 80008bc:	20000078 	.word	0x20000078
 80008c0:	200001c8 	.word	0x200001c8

080008c4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80008c4:	480d      	ldr	r0, [pc, #52]	; (80008fc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80008c6:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80008c8:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80008cc:	480c      	ldr	r0, [pc, #48]	; (8000900 <LoopForever+0x6>)
  ldr r1, =_edata
 80008ce:	490d      	ldr	r1, [pc, #52]	; (8000904 <LoopForever+0xa>)
  ldr r2, =_sidata
 80008d0:	4a0d      	ldr	r2, [pc, #52]	; (8000908 <LoopForever+0xe>)
  movs r3, #0
 80008d2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80008d4:	e002      	b.n	80008dc <LoopCopyDataInit>

080008d6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80008d6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80008d8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80008da:	3304      	adds	r3, #4

080008dc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80008dc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80008de:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80008e0:	d3f9      	bcc.n	80008d6 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80008e2:	4a0a      	ldr	r2, [pc, #40]	; (800090c <LoopForever+0x12>)
  ldr r4, =_ebss
 80008e4:	4c0a      	ldr	r4, [pc, #40]	; (8000910 <LoopForever+0x16>)
  movs r3, #0
 80008e6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80008e8:	e001      	b.n	80008ee <LoopFillZerobss>

080008ea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80008ea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80008ec:	3204      	adds	r2, #4

080008ee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80008ee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80008f0:	d3fb      	bcc.n	80008ea <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80008f2:	f000 fdc3 	bl	800147c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80008f6:	f7ff fd5d 	bl	80003b4 <main>

080008fa <LoopForever>:

LoopForever:
  b LoopForever
 80008fa:	e7fe      	b.n	80008fa <LoopForever>
  ldr   r0, =_estack
 80008fc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000900:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000904:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000908:	08001f84 	.word	0x08001f84
  ldr r2, =_sbss
 800090c:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000910:	200001c8 	.word	0x200001c8

08000914 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000914:	e7fe      	b.n	8000914 <ADC_IRQHandler>
	...

08000918 <GPIO_PeriClockControl>:
 * @return		- none
 *
 * @Note 		- none
 */
void GPIO_PeriClockControl(GPIO_RegDef_t *pGPIOx, uint8_t EnorDi)
{
 8000918:	b480      	push	{r7}
 800091a:	b083      	sub	sp, #12
 800091c:	af00      	add	r7, sp, #0
 800091e:	6078      	str	r0, [r7, #4]
 8000920:	460b      	mov	r3, r1
 8000922:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE)
 8000924:	78fb      	ldrb	r3, [r7, #3]
 8000926:	2b01      	cmp	r3, #1
 8000928:	d161      	bne.n	80009ee <GPIO_PeriClockControl+0xd6>
	{
		if(pGPIOx == GPIOA)
 800092a:	687b      	ldr	r3, [r7, #4]
 800092c:	4a32      	ldr	r2, [pc, #200]	; (80009f8 <GPIO_PeriClockControl+0xe0>)
 800092e:	4293      	cmp	r3, r2
 8000930:	d106      	bne.n	8000940 <GPIO_PeriClockControl+0x28>
		{
			GPIOA_PCLK_EN();		//hàm đã đc define trong stm32f407xx.h(lớp Driver)
 8000932:	4b32      	ldr	r3, [pc, #200]	; (80009fc <GPIO_PeriClockControl+0xe4>)
 8000934:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000936:	4a31      	ldr	r2, [pc, #196]	; (80009fc <GPIO_PeriClockControl+0xe4>)
 8000938:	f043 0301 	orr.w	r3, r3, #1
 800093c:	6313      	str	r3, [r2, #48]	; 0x30
	else
	{
		//Todo: (Disable Status)

	}
}
 800093e:	e056      	b.n	80009ee <GPIO_PeriClockControl+0xd6>
		else if(pGPIOx == GPIOB)
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	4a2f      	ldr	r2, [pc, #188]	; (8000a00 <GPIO_PeriClockControl+0xe8>)
 8000944:	4293      	cmp	r3, r2
 8000946:	d106      	bne.n	8000956 <GPIO_PeriClockControl+0x3e>
			GPIOB_PCLK_EN();
 8000948:	4b2c      	ldr	r3, [pc, #176]	; (80009fc <GPIO_PeriClockControl+0xe4>)
 800094a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800094c:	4a2b      	ldr	r2, [pc, #172]	; (80009fc <GPIO_PeriClockControl+0xe4>)
 800094e:	f043 0302 	orr.w	r3, r3, #2
 8000952:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000954:	e04b      	b.n	80009ee <GPIO_PeriClockControl+0xd6>
		else if(pGPIOx == GPIOC)
 8000956:	687b      	ldr	r3, [r7, #4]
 8000958:	4a2a      	ldr	r2, [pc, #168]	; (8000a04 <GPIO_PeriClockControl+0xec>)
 800095a:	4293      	cmp	r3, r2
 800095c:	d106      	bne.n	800096c <GPIO_PeriClockControl+0x54>
			GPIOC_PCLK_EN();
 800095e:	4b27      	ldr	r3, [pc, #156]	; (80009fc <GPIO_PeriClockControl+0xe4>)
 8000960:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000962:	4a26      	ldr	r2, [pc, #152]	; (80009fc <GPIO_PeriClockControl+0xe4>)
 8000964:	f043 0304 	orr.w	r3, r3, #4
 8000968:	6313      	str	r3, [r2, #48]	; 0x30
}
 800096a:	e040      	b.n	80009ee <GPIO_PeriClockControl+0xd6>
		else if(pGPIOx == GPIOD)
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	4a26      	ldr	r2, [pc, #152]	; (8000a08 <GPIO_PeriClockControl+0xf0>)
 8000970:	4293      	cmp	r3, r2
 8000972:	d106      	bne.n	8000982 <GPIO_PeriClockControl+0x6a>
			GPIOD_PCLK_EN();
 8000974:	4b21      	ldr	r3, [pc, #132]	; (80009fc <GPIO_PeriClockControl+0xe4>)
 8000976:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000978:	4a20      	ldr	r2, [pc, #128]	; (80009fc <GPIO_PeriClockControl+0xe4>)
 800097a:	f043 0308 	orr.w	r3, r3, #8
 800097e:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000980:	e035      	b.n	80009ee <GPIO_PeriClockControl+0xd6>
		else if(pGPIOx == GPIOE)
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	4a21      	ldr	r2, [pc, #132]	; (8000a0c <GPIO_PeriClockControl+0xf4>)
 8000986:	4293      	cmp	r3, r2
 8000988:	d106      	bne.n	8000998 <GPIO_PeriClockControl+0x80>
			GPIOE_PCLK_EN();
 800098a:	4b1c      	ldr	r3, [pc, #112]	; (80009fc <GPIO_PeriClockControl+0xe4>)
 800098c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800098e:	4a1b      	ldr	r2, [pc, #108]	; (80009fc <GPIO_PeriClockControl+0xe4>)
 8000990:	f043 0310 	orr.w	r3, r3, #16
 8000994:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000996:	e02a      	b.n	80009ee <GPIO_PeriClockControl+0xd6>
		else if(pGPIOx == GPIOF)
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	4a1d      	ldr	r2, [pc, #116]	; (8000a10 <GPIO_PeriClockControl+0xf8>)
 800099c:	4293      	cmp	r3, r2
 800099e:	d106      	bne.n	80009ae <GPIO_PeriClockControl+0x96>
			GPIOF_PCLK_EN();
 80009a0:	4b16      	ldr	r3, [pc, #88]	; (80009fc <GPIO_PeriClockControl+0xe4>)
 80009a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009a4:	4a15      	ldr	r2, [pc, #84]	; (80009fc <GPIO_PeriClockControl+0xe4>)
 80009a6:	f043 0320 	orr.w	r3, r3, #32
 80009aa:	6313      	str	r3, [r2, #48]	; 0x30
}
 80009ac:	e01f      	b.n	80009ee <GPIO_PeriClockControl+0xd6>
		else if(pGPIOx == GPIOG)
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	4a18      	ldr	r2, [pc, #96]	; (8000a14 <GPIO_PeriClockControl+0xfc>)
 80009b2:	4293      	cmp	r3, r2
 80009b4:	d106      	bne.n	80009c4 <GPIO_PeriClockControl+0xac>
			GPIOG_PCLK_EN();
 80009b6:	4b11      	ldr	r3, [pc, #68]	; (80009fc <GPIO_PeriClockControl+0xe4>)
 80009b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ba:	4a10      	ldr	r2, [pc, #64]	; (80009fc <GPIO_PeriClockControl+0xe4>)
 80009bc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80009c0:	6313      	str	r3, [r2, #48]	; 0x30
}
 80009c2:	e014      	b.n	80009ee <GPIO_PeriClockControl+0xd6>
		else if(pGPIOx == GPIOH)
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	4a13      	ldr	r2, [pc, #76]	; (8000a14 <GPIO_PeriClockControl+0xfc>)
 80009c8:	4293      	cmp	r3, r2
 80009ca:	d106      	bne.n	80009da <GPIO_PeriClockControl+0xc2>
			GPIOH_PCLK_EN();
 80009cc:	4b0b      	ldr	r3, [pc, #44]	; (80009fc <GPIO_PeriClockControl+0xe4>)
 80009ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009d0:	4a0a      	ldr	r2, [pc, #40]	; (80009fc <GPIO_PeriClockControl+0xe4>)
 80009d2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80009d6:	6313      	str	r3, [r2, #48]	; 0x30
}
 80009d8:	e009      	b.n	80009ee <GPIO_PeriClockControl+0xd6>
		else if(pGPIOx == GPIOI)
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	4a0e      	ldr	r2, [pc, #56]	; (8000a18 <GPIO_PeriClockControl+0x100>)
 80009de:	4293      	cmp	r3, r2
 80009e0:	d105      	bne.n	80009ee <GPIO_PeriClockControl+0xd6>
			GPIOI_PCLK_EN();
 80009e2:	4b06      	ldr	r3, [pc, #24]	; (80009fc <GPIO_PeriClockControl+0xe4>)
 80009e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009e6:	4a05      	ldr	r2, [pc, #20]	; (80009fc <GPIO_PeriClockControl+0xe4>)
 80009e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80009ec:	6313      	str	r3, [r2, #48]	; 0x30
}
 80009ee:	bf00      	nop
 80009f0:	370c      	adds	r7, #12
 80009f2:	46bd      	mov	sp, r7
 80009f4:	bc80      	pop	{r7}
 80009f6:	4770      	bx	lr
 80009f8:	40020000 	.word	0x40020000
 80009fc:	40023800 	.word	0x40023800
 8000a00:	40020400 	.word	0x40020400
 8000a04:	40020800 	.word	0x40020800
 8000a08:	40020c00 	.word	0x40020c00
 8000a0c:	40021000 	.word	0x40021000
 8000a10:	40021400 	.word	0x40021400
 8000a14:	40021800 	.word	0x40021800
 8000a18:	40022000 	.word	0x40022000

08000a1c <GPIO_Init>:
 * @return		- none
 *
 * @Note 		- none
 */
void GPIO_Init(GPIOx_Handle_t *pGPIOHandle)
{
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	b086      	sub	sp, #24
 8000a20:	af00      	add	r7, sp, #0
 8000a22:	6078      	str	r0, [r7, #4]
	uint32_t temp = 0; 	//temp. registerr
 8000a24:	2300      	movs	r3, #0
 8000a26:	617b      	str	r3, [r7, #20]

	//0. Enable the Peripheral Clock
	GPIO_PeriClockControl(pGPIOHandle->pGPIOx, ENABLE);
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	681b      	ldr	r3, [r3, #0]
 8000a2c:	2101      	movs	r1, #1
 8000a2e:	4618      	mov	r0, r3
 8000a30:	f7ff ff72 	bl	8000918 <GPIO_PeriClockControl>

	//1. configure(cấu hình) the mode of gpio pin(Datasheet 8.4.1)
	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_ANALOG)
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	795b      	ldrb	r3, [r3, #5]
 8000a38:	2b03      	cmp	r3, #3
 8000a3a:	d81f      	bhi.n	8000a7c <GPIO_Init+0x60>
	{
		//Giá trị GPIO_PinMode thuộc 1 trong 4 trường hợp bit của Mode Register
		//this is part non-interrupt mode

		//Xác định lấy vị trí MODERx cần điều khiển dựa vào số chân Pin_Number và lưu vào biến temp
		temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	795b      	ldrb	r3, [r3, #5]
 8000a40:	461a      	mov	r2, r3
 8000a42:	687b      	ldr	r3, [r7, #4]
 8000a44:	791b      	ldrb	r3, [r3, #4]
 8000a46:	005b      	lsls	r3, r3, #1
 8000a48:	fa02 f303 	lsl.w	r3, r2, r3
 8000a4c:	617b      	str	r3, [r7, #20]
		//Dịch 2 bit vì theo datasheet, mỗi 2 bit quản lý một pin number của GPIO port mode register
		//vd: GPIO_PinNumber=Pin0 thì sẽ kích hoạt MODER0(2*0=0->bắt đầu từ bit0)
		//GPIO_PinNumber=Pin1 thì sẽ kích hoạt MODER1(2*1=2->bắt đầu từ bit2)

		//Xóa(clear) value bit tại vị trí 2 bit muốn cấu hình
		pGPIOHandle->pGPIOx->MODER &= ~(0x3 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000a4e:	687b      	ldr	r3, [r7, #4]
 8000a50:	681b      	ldr	r3, [r3, #0]
 8000a52:	681a      	ldr	r2, [r3, #0]
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	791b      	ldrb	r3, [r3, #4]
 8000a58:	4619      	mov	r1, r3
 8000a5a:	2303      	movs	r3, #3
 8000a5c:	408b      	lsls	r3, r1
 8000a5e:	43db      	mvns	r3, r3
 8000a60:	4619      	mov	r1, r3
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	681b      	ldr	r3, [r3, #0]
 8000a66:	400a      	ands	r2, r1
 8000a68:	601a      	str	r2, [r3, #0]
		//Theo datasheet thì để reset MODERx thì ta cần thiết lập value bit là 00, Ta có: 0x3 = 11
		//~(0x3 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber); nghĩa là tiến hành đảo trạng thái 11 thành 00
		//vị trí chân Pin_Number

		//Lưu value temp vào trong thanh ghi MODER của biến pGPIOHandle
		pGPIOHandle->pGPIOx->MODER |= temp;
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	681b      	ldr	r3, [r3, #0]
 8000a6e:	6819      	ldr	r1, [r3, #0]
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	681b      	ldr	r3, [r3, #0]
 8000a74:	697a      	ldr	r2, [r7, #20]
 8000a76:	430a      	orrs	r2, r1
 8000a78:	601a      	str	r2, [r3, #0]
 8000a7a:	e0b8      	b.n	8000bee <GPIO_Init+0x1d2>
	}
	else
	{
		//This is part(phần) will code later (Interrupt mode) //các trường hợp khác từ 4->6

		if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_FT)
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	795b      	ldrb	r3, [r3, #5]
 8000a80:	2b04      	cmp	r3, #4
 8000a82:	d117      	bne.n	8000ab4 <GPIO_Init+0x98>
		{
			//1. configure the FTSR(Falling(xuống) Trigger Select Register)
			EXTI->FTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000a84:	4b43      	ldr	r3, [pc, #268]	; (8000b94 <GPIO_Init+0x178>)
 8000a86:	68db      	ldr	r3, [r3, #12]
 8000a88:	687a      	ldr	r2, [r7, #4]
 8000a8a:	7912      	ldrb	r2, [r2, #4]
 8000a8c:	4611      	mov	r1, r2
 8000a8e:	2201      	movs	r2, #1
 8000a90:	408a      	lsls	r2, r1
 8000a92:	4611      	mov	r1, r2
 8000a94:	4a3f      	ldr	r2, [pc, #252]	; (8000b94 <GPIO_Init+0x178>)
 8000a96:	430b      	orrs	r3, r1
 8000a98:	60d3      	str	r3, [r2, #12]

			//1.2 Clear the corresponding(tương ứng) RTSR, việc này phòng ngừa cho tình huống sử dụng RTSR trước đó
			//và có thể gây xung đột cho lần cấu hình hiện tại
			EXTI->RTSR &= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000a9a:	4b3e      	ldr	r3, [pc, #248]	; (8000b94 <GPIO_Init+0x178>)
 8000a9c:	689b      	ldr	r3, [r3, #8]
 8000a9e:	687a      	ldr	r2, [r7, #4]
 8000aa0:	7912      	ldrb	r2, [r2, #4]
 8000aa2:	4611      	mov	r1, r2
 8000aa4:	2201      	movs	r2, #1
 8000aa6:	408a      	lsls	r2, r1
 8000aa8:	43d2      	mvns	r2, r2
 8000aaa:	4611      	mov	r1, r2
 8000aac:	4a39      	ldr	r2, [pc, #228]	; (8000b94 <GPIO_Init+0x178>)
 8000aae:	400b      	ands	r3, r1
 8000ab0:	6093      	str	r3, [r2, #8]
 8000ab2:	e035      	b.n	8000b20 <GPIO_Init+0x104>
		}
		else if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RT)
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	795b      	ldrb	r3, [r3, #5]
 8000ab8:	2b05      	cmp	r3, #5
 8000aba:	d117      	bne.n	8000aec <GPIO_Init+0xd0>
		{
			//1. configure the RTSR(Rising(lên) Trigger Select Register)
			EXTI->RTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000abc:	4b35      	ldr	r3, [pc, #212]	; (8000b94 <GPIO_Init+0x178>)
 8000abe:	689b      	ldr	r3, [r3, #8]
 8000ac0:	687a      	ldr	r2, [r7, #4]
 8000ac2:	7912      	ldrb	r2, [r2, #4]
 8000ac4:	4611      	mov	r1, r2
 8000ac6:	2201      	movs	r2, #1
 8000ac8:	408a      	lsls	r2, r1
 8000aca:	4611      	mov	r1, r2
 8000acc:	4a31      	ldr	r2, [pc, #196]	; (8000b94 <GPIO_Init+0x178>)
 8000ace:	430b      	orrs	r3, r1
 8000ad0:	6093      	str	r3, [r2, #8]

			//1.2 Clear the corresponding(tương ứng) FTSR, việc này phòng ngừa cho tình huống sử dụng FTSR trước đó
			//và có thể gây xung đột cho lần cấu hình hiện tại
			EXTI->FTSR &= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000ad2:	4b30      	ldr	r3, [pc, #192]	; (8000b94 <GPIO_Init+0x178>)
 8000ad4:	68db      	ldr	r3, [r3, #12]
 8000ad6:	687a      	ldr	r2, [r7, #4]
 8000ad8:	7912      	ldrb	r2, [r2, #4]
 8000ada:	4611      	mov	r1, r2
 8000adc:	2201      	movs	r2, #1
 8000ade:	408a      	lsls	r2, r1
 8000ae0:	43d2      	mvns	r2, r2
 8000ae2:	4611      	mov	r1, r2
 8000ae4:	4a2b      	ldr	r2, [pc, #172]	; (8000b94 <GPIO_Init+0x178>)
 8000ae6:	400b      	ands	r3, r1
 8000ae8:	60d3      	str	r3, [r2, #12]
 8000aea:	e019      	b.n	8000b20 <GPIO_Init+0x104>
		}
		else if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RFT)
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	795b      	ldrb	r3, [r3, #5]
 8000af0:	2b06      	cmp	r3, #6
 8000af2:	d115      	bne.n	8000b20 <GPIO_Init+0x104>
		{
			//1. configure the FTSR and RTSR
			EXTI->FTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000af4:	4b27      	ldr	r3, [pc, #156]	; (8000b94 <GPIO_Init+0x178>)
 8000af6:	68db      	ldr	r3, [r3, #12]
 8000af8:	687a      	ldr	r2, [r7, #4]
 8000afa:	7912      	ldrb	r2, [r2, #4]
 8000afc:	4611      	mov	r1, r2
 8000afe:	2201      	movs	r2, #1
 8000b00:	408a      	lsls	r2, r1
 8000b02:	4611      	mov	r1, r2
 8000b04:	4a23      	ldr	r2, [pc, #140]	; (8000b94 <GPIO_Init+0x178>)
 8000b06:	430b      	orrs	r3, r1
 8000b08:	60d3      	str	r3, [r2, #12]
			EXTI->RTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000b0a:	4b22      	ldr	r3, [pc, #136]	; (8000b94 <GPIO_Init+0x178>)
 8000b0c:	689b      	ldr	r3, [r3, #8]
 8000b0e:	687a      	ldr	r2, [r7, #4]
 8000b10:	7912      	ldrb	r2, [r2, #4]
 8000b12:	4611      	mov	r1, r2
 8000b14:	2201      	movs	r2, #1
 8000b16:	408a      	lsls	r2, r1
 8000b18:	4611      	mov	r1, r2
 8000b1a:	4a1e      	ldr	r2, [pc, #120]	; (8000b94 <GPIO_Init+0x178>)
 8000b1c:	430b      	orrs	r3, r1
 8000b1e:	6093      	str	r3, [r2, #8]
		}

		//2. Configure the GPIO port selection in SYSCFG_EXTICR
		uint8_t temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 4;		//xác định SYSCFG_EXTICR_temp1 register
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	791b      	ldrb	r3, [r3, #4]
 8000b24:	089b      	lsrs	r3, r3, #2
 8000b26:	74fb      	strb	r3, [r7, #19]
		uint8_t temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 4;		//xác định 4bit EXTI_temp2 trong SYSCFG_EXTICR_temp1
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	791b      	ldrb	r3, [r3, #4]
 8000b2c:	f003 0303 	and.w	r3, r3, #3
 8000b30:	74bb      	strb	r3, [r7, #18]
		uint8_t portcode = GPIO_BASEADDR_TO_CODE(pGPIOHandle->pGPIOx);		//xác định mã nhị phân xxxx để xác định GPIO port sử dụng
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	681b      	ldr	r3, [r3, #0]
 8000b36:	4a18      	ldr	r2, [pc, #96]	; (8000b98 <GPIO_Init+0x17c>)
 8000b38:	4293      	cmp	r3, r2
 8000b3a:	d03b      	beq.n	8000bb4 <GPIO_Init+0x198>
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	681b      	ldr	r3, [r3, #0]
 8000b40:	4a16      	ldr	r2, [pc, #88]	; (8000b9c <GPIO_Init+0x180>)
 8000b42:	4293      	cmp	r3, r2
 8000b44:	d024      	beq.n	8000b90 <GPIO_Init+0x174>
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	681b      	ldr	r3, [r3, #0]
 8000b4a:	4a15      	ldr	r2, [pc, #84]	; (8000ba0 <GPIO_Init+0x184>)
 8000b4c:	4293      	cmp	r3, r2
 8000b4e:	d01d      	beq.n	8000b8c <GPIO_Init+0x170>
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	681b      	ldr	r3, [r3, #0]
 8000b54:	4a13      	ldr	r2, [pc, #76]	; (8000ba4 <GPIO_Init+0x188>)
 8000b56:	4293      	cmp	r3, r2
 8000b58:	d016      	beq.n	8000b88 <GPIO_Init+0x16c>
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	681b      	ldr	r3, [r3, #0]
 8000b5e:	4a12      	ldr	r2, [pc, #72]	; (8000ba8 <GPIO_Init+0x18c>)
 8000b60:	4293      	cmp	r3, r2
 8000b62:	d00f      	beq.n	8000b84 <GPIO_Init+0x168>
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	681b      	ldr	r3, [r3, #0]
 8000b68:	4a10      	ldr	r2, [pc, #64]	; (8000bac <GPIO_Init+0x190>)
 8000b6a:	4293      	cmp	r3, r2
 8000b6c:	d008      	beq.n	8000b80 <GPIO_Init+0x164>
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	681b      	ldr	r3, [r3, #0]
 8000b72:	4a0f      	ldr	r2, [pc, #60]	; (8000bb0 <GPIO_Init+0x194>)
 8000b74:	4293      	cmp	r3, r2
 8000b76:	d101      	bne.n	8000b7c <GPIO_Init+0x160>
 8000b78:	2306      	movs	r3, #6
 8000b7a:	e01c      	b.n	8000bb6 <GPIO_Init+0x19a>
 8000b7c:	2300      	movs	r3, #0
 8000b7e:	e01a      	b.n	8000bb6 <GPIO_Init+0x19a>
 8000b80:	2305      	movs	r3, #5
 8000b82:	e018      	b.n	8000bb6 <GPIO_Init+0x19a>
 8000b84:	2304      	movs	r3, #4
 8000b86:	e016      	b.n	8000bb6 <GPIO_Init+0x19a>
 8000b88:	2303      	movs	r3, #3
 8000b8a:	e014      	b.n	8000bb6 <GPIO_Init+0x19a>
 8000b8c:	2302      	movs	r3, #2
 8000b8e:	e012      	b.n	8000bb6 <GPIO_Init+0x19a>
 8000b90:	2301      	movs	r3, #1
 8000b92:	e010      	b.n	8000bb6 <GPIO_Init+0x19a>
 8000b94:	40013c00 	.word	0x40013c00
 8000b98:	40020000 	.word	0x40020000
 8000b9c:	40020400 	.word	0x40020400
 8000ba0:	40020800 	.word	0x40020800
 8000ba4:	40020c00 	.word	0x40020c00
 8000ba8:	40021000 	.word	0x40021000
 8000bac:	40021400 	.word	0x40021400
 8000bb0:	40021800 	.word	0x40021800
 8000bb4:	2300      	movs	r3, #0
 8000bb6:	747b      	strb	r3, [r7, #17]
		SYSCFG_PCLK_EN();													//Kích hoạt xung clock để cấu hình
 8000bb8:	4b5c      	ldr	r3, [pc, #368]	; (8000d2c <GPIO_Init+0x310>)
 8000bba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bbc:	4a5b      	ldr	r2, [pc, #364]	; (8000d2c <GPIO_Init+0x310>)
 8000bbe:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000bc2:	6453      	str	r3, [r2, #68]	; 0x44
		SYSCFG->EXTICR[temp1] = portcode << (temp2 * 4);					//Cấu hình thanh ghi SYSCFG_EXTICR_temp1
 8000bc4:	7c7a      	ldrb	r2, [r7, #17]
 8000bc6:	7cbb      	ldrb	r3, [r7, #18]
 8000bc8:	009b      	lsls	r3, r3, #2
 8000bca:	fa02 f103 	lsl.w	r1, r2, r3
 8000bce:	4a58      	ldr	r2, [pc, #352]	; (8000d30 <GPIO_Init+0x314>)
 8000bd0:	7cfb      	ldrb	r3, [r7, #19]
 8000bd2:	3302      	adds	r3, #2
 8000bd4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

		//3. Eanble the exti interrupt delivery(chuyển, sử dụng) by using IMR(Interrupt Masking Register)
		EXTI->IMR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000bd8:	4b56      	ldr	r3, [pc, #344]	; (8000d34 <GPIO_Init+0x318>)
 8000bda:	681b      	ldr	r3, [r3, #0]
 8000bdc:	687a      	ldr	r2, [r7, #4]
 8000bde:	7912      	ldrb	r2, [r2, #4]
 8000be0:	4611      	mov	r1, r2
 8000be2:	2201      	movs	r2, #1
 8000be4:	408a      	lsls	r2, r1
 8000be6:	4611      	mov	r1, r2
 8000be8:	4a52      	ldr	r2, [pc, #328]	; (8000d34 <GPIO_Init+0x318>)
 8000bea:	430b      	orrs	r3, r1
 8000bec:	6013      	str	r3, [r2, #0]

	}
	//Reset biến temp để sử dụng cho các lệnh khác trong hàm
	temp = 0;
 8000bee:	2300      	movs	r3, #0
 8000bf0:	617b      	str	r3, [r7, #20]

	//2. configure the speed (Datasheet 8.4.3)
	//Xác định lấy vị trí OSPEEDRx cần điều khiển dựa vào số chân Pin_Number và lưu vào biến temp
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinSpeed << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	799b      	ldrb	r3, [r3, #6]
 8000bf6:	461a      	mov	r2, r3
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	791b      	ldrb	r3, [r3, #4]
 8000bfc:	005b      	lsls	r3, r3, #1
 8000bfe:	fa02 f303 	lsl.w	r3, r2, r3
 8000c02:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OSPEEDR &=  ~(0x3 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);	//Clearing bit field
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	681b      	ldr	r3, [r3, #0]
 8000c08:	689a      	ldr	r2, [r3, #8]
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	791b      	ldrb	r3, [r3, #4]
 8000c0e:	4619      	mov	r1, r3
 8000c10:	2303      	movs	r3, #3
 8000c12:	408b      	lsls	r3, r1
 8000c14:	43db      	mvns	r3, r3
 8000c16:	4619      	mov	r1, r3
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	681b      	ldr	r3, [r3, #0]
 8000c1c:	400a      	ands	r2, r1
 8000c1e:	609a      	str	r2, [r3, #8]
	pGPIOHandle->pGPIOx->OSPEEDR |= temp;
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	681b      	ldr	r3, [r3, #0]
 8000c24:	6899      	ldr	r1, [r3, #8]
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	681b      	ldr	r3, [r3, #0]
 8000c2a:	697a      	ldr	r2, [r7, #20]
 8000c2c:	430a      	orrs	r2, r1
 8000c2e:	609a      	str	r2, [r3, #8]
	//=> Lúc này ta đã xác định(cấu hình) đc speed(OSPEEDRx) của GPIO tùy thuộc vào pin_number bạn muốn control
	temp = 0;
 8000c30:	2300      	movs	r3, #0
 8000c32:	617b      	str	r3, [r7, #20]

	//3. configure the pullup-pulldown settings (Datasheet 8.4.4)
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinPuPdControl << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	79db      	ldrb	r3, [r3, #7]
 8000c38:	461a      	mov	r2, r3
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	791b      	ldrb	r3, [r3, #4]
 8000c3e:	005b      	lsls	r3, r3, #1
 8000c40:	fa02 f303 	lsl.w	r3, r2, r3
 8000c44:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->PUPDR &=  ~(0x3 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	681b      	ldr	r3, [r3, #0]
 8000c4a:	68da      	ldr	r2, [r3, #12]
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	791b      	ldrb	r3, [r3, #4]
 8000c50:	4619      	mov	r1, r3
 8000c52:	2303      	movs	r3, #3
 8000c54:	408b      	lsls	r3, r1
 8000c56:	43db      	mvns	r3, r3
 8000c58:	4619      	mov	r1, r3
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	681b      	ldr	r3, [r3, #0]
 8000c5e:	400a      	ands	r2, r1
 8000c60:	60da      	str	r2, [r3, #12]
	pGPIOHandle->pGPIOx->PUPDR |= temp;
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	681b      	ldr	r3, [r3, #0]
 8000c66:	68d9      	ldr	r1, [r3, #12]
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	681b      	ldr	r3, [r3, #0]
 8000c6c:	697a      	ldr	r2, [r7, #20]
 8000c6e:	430a      	orrs	r2, r1
 8000c70:	60da      	str	r2, [r3, #12]
	temp = 0;
 8000c72:	2300      	movs	r3, #0
 8000c74:	617b      	str	r3, [r7, #20]

	//4. configure the optype (Datasheet 8.4.2)
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinOPType << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	7a1b      	ldrb	r3, [r3, #8]
 8000c7a:	461a      	mov	r2, r3
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	791b      	ldrb	r3, [r3, #4]
 8000c80:	fa02 f303 	lsl.w	r3, r2, r3
 8000c84:	617b      	str	r3, [r7, #20]
	//Dịch 1 bit vì theo datasheet, mỗi 1 bit quản lý một pin number của GPIO port mode register
	pGPIOHandle->pGPIOx->OTYPER &=  ~(0x1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber); //Clearing bit field
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	681b      	ldr	r3, [r3, #0]
 8000c8a:	685a      	ldr	r2, [r3, #4]
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	791b      	ldrb	r3, [r3, #4]
 8000c90:	4619      	mov	r1, r3
 8000c92:	2301      	movs	r3, #1
 8000c94:	408b      	lsls	r3, r1
 8000c96:	43db      	mvns	r3, r3
 8000c98:	4619      	mov	r1, r3
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	681b      	ldr	r3, [r3, #0]
 8000c9e:	400a      	ands	r2, r1
 8000ca0:	605a      	str	r2, [r3, #4]
	//~(0x1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber); nghĩa là tiến hành đảo trạng thái 1 thành 0
	//vị trí chân Pin_Number
	pGPIOHandle->pGPIOx->OTYPER |= temp;
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	681b      	ldr	r3, [r3, #0]
 8000ca6:	6859      	ldr	r1, [r3, #4]
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	681b      	ldr	r3, [r3, #0]
 8000cac:	697a      	ldr	r2, [r7, #20]
 8000cae:	430a      	orrs	r2, r1
 8000cb0:	605a      	str	r2, [r3, #4]
	temp = 0;
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	617b      	str	r3, [r7, #20]

	//5. configure the alt functionality
	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_ALTFN)
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	795b      	ldrb	r3, [r3, #5]
 8000cba:	2b02      	cmp	r3, #2
 8000cbc:	d132      	bne.n	8000d24 <GPIO_Init+0x308>
		//Chế độ này đc thực thi khi và chỉ khi bit MODERx đc thiết lập GPIO_MODE_ALTFN

		uint32_t temp1,temp2;

		//Xác định thanh ghi cần sử dụng là GPIOx_AFRH ->AFR[1] hay GPIOx_AFRL ->AFR[0]
		temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 8;
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	791b      	ldrb	r3, [r3, #4]
 8000cc2:	08db      	lsrs	r3, r3, #3
 8000cc4:	b2db      	uxtb	r3, r3
 8000cc6:	60fb      	str	r3, [r7, #12]

		//Xác định vị trí cụm 4bit cần sử dụng ở vị trí nào trong thanh ghi
		temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 8;
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	791b      	ldrb	r3, [r3, #4]
 8000ccc:	f003 0307 	and.w	r3, r3, #7
 8000cd0:	60bb      	str	r3, [r7, #8]

		//Clearing bit field
		pGPIOHandle->pGPIOx->AFR[temp1] &= ~(0xF << (4* temp2));   //0xF = 1111, đảo 1111->0000 tại vị trí 4*temp2
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	681b      	ldr	r3, [r3, #0]
 8000cd6:	68fa      	ldr	r2, [r7, #12]
 8000cd8:	3208      	adds	r2, #8
 8000cda:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000cde:	68bb      	ldr	r3, [r7, #8]
 8000ce0:	009b      	lsls	r3, r3, #2
 8000ce2:	210f      	movs	r1, #15
 8000ce4:	fa01 f303 	lsl.w	r3, r1, r3
 8000ce8:	43db      	mvns	r3, r3
 8000cea:	4619      	mov	r1, r3
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	681b      	ldr	r3, [r3, #0]
 8000cf0:	4011      	ands	r1, r2
 8000cf2:	68fa      	ldr	r2, [r7, #12]
 8000cf4:	3208      	adds	r2, #8
 8000cf6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

		//Lưu cấu hình AFR vào trong con trỏ pGPIOHandle
		pGPIOHandle->pGPIOx->AFR[temp1] |= (pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFunMode << (4* temp2));
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	681b      	ldr	r3, [r3, #0]
 8000cfe:	68fa      	ldr	r2, [r7, #12]
 8000d00:	3208      	adds	r2, #8
 8000d02:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	7a5b      	ldrb	r3, [r3, #9]
 8000d0a:	4619      	mov	r1, r3
 8000d0c:	68bb      	ldr	r3, [r7, #8]
 8000d0e:	009b      	lsls	r3, r3, #2
 8000d10:	fa01 f303 	lsl.w	r3, r1, r3
 8000d14:	4619      	mov	r1, r3
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	681b      	ldr	r3, [r3, #0]
 8000d1a:	4311      	orrs	r1, r2
 8000d1c:	68fa      	ldr	r2, [r7, #12]
 8000d1e:	3208      	adds	r2, #8
 8000d20:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	}
}
 8000d24:	bf00      	nop
 8000d26:	3718      	adds	r7, #24
 8000d28:	46bd      	mov	sp, r7
 8000d2a:	bd80      	pop	{r7, pc}
 8000d2c:	40023800 	.word	0x40023800
 8000d30:	40013800 	.word	0x40013800
 8000d34:	40013c00 	.word	0x40013c00

08000d38 <GPIO_ReadFromInputPin>:
 * @return		- value of read in pin_number (0 or 1)
 *
 * @Note 		- none
 */
uint8_t GPIO_ReadFromInputPin(GPIO_RegDef_t *pGPIOx, uint8_t PinNumber)
{
 8000d38:	b480      	push	{r7}
 8000d3a:	b085      	sub	sp, #20
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	6078      	str	r0, [r7, #4]
 8000d40:	460b      	mov	r3, r1
 8000d42:	70fb      	strb	r3, [r7, #3]
	uint8_t value;			//biến lưu value đọc đc từ pin
	value = (uint8_t)((pGPIOx->IDR >> PinNumber) & 0x00000001);
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	691a      	ldr	r2, [r3, #16]
 8000d48:	78fb      	ldrb	r3, [r7, #3]
 8000d4a:	fa22 f303 	lsr.w	r3, r2, r3
 8000d4e:	b2db      	uxtb	r3, r3
 8000d50:	f003 0301 	and.w	r3, r3, #1
 8000d54:	73fb      	strb	r3, [r7, #15]
	return value;
 8000d56:	7bfb      	ldrb	r3, [r7, #15]

	//((pGPIOx->IDR >> PinNumber): Phần này dịch chuyển giá trị IDR sang phải của vị trí PinNumber đầu vào,
	//căn chỉnh giá trị đầu vào của chân mong muốn về bit ngoài cùng bên phải(bit0).
	//& 0x00000001: Thao tác AND theo bit này che giấu tất cả ngoại trừ bit ngoài cùng bên phải(bit0),
	//trích xuất hiệu quả giá trị đầu vào của mã pin được chỉ định.
}
 8000d58:	4618      	mov	r0, r3
 8000d5a:	3714      	adds	r7, #20
 8000d5c:	46bd      	mov	sp, r7
 8000d5e:	bc80      	pop	{r7}
 8000d60:	4770      	bx	lr
	...

08000d64 <SPI_PeriClockControl>:
 * @return		- none
 *
 * @Note 		- none
 */
void SPI_PeriClockControl(SPI_RegDef_t *pSPIx, uint8_t EnorDi)
{
 8000d64:	b480      	push	{r7}
 8000d66:	b083      	sub	sp, #12
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	6078      	str	r0, [r7, #4]
 8000d6c:	460b      	mov	r3, r1
 8000d6e:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE)
 8000d70:	78fb      	ldrb	r3, [r7, #3]
 8000d72:	2b01      	cmp	r3, #1
 8000d74:	d11f      	bne.n	8000db6 <SPI_PeriClockControl+0x52>
	{
		if(pSPIx == SPI1)
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	4a11      	ldr	r2, [pc, #68]	; (8000dc0 <SPI_PeriClockControl+0x5c>)
 8000d7a:	4293      	cmp	r3, r2
 8000d7c:	d106      	bne.n	8000d8c <SPI_PeriClockControl+0x28>
		{
			SPI1_PCLK_EN();		//hàm đã đc define trong stm32f407xx.h(lớp Driver)
 8000d7e:	4b11      	ldr	r3, [pc, #68]	; (8000dc4 <SPI_PeriClockControl+0x60>)
 8000d80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d82:	4a10      	ldr	r2, [pc, #64]	; (8000dc4 <SPI_PeriClockControl+0x60>)
 8000d84:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000d88:	6453      	str	r3, [r2, #68]	; 0x44
	else
	{
		//Todo: (Disable Status)

	}
}
 8000d8a:	e014      	b.n	8000db6 <SPI_PeriClockControl+0x52>
		else if(pSPIx == SPI2)
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	4a0e      	ldr	r2, [pc, #56]	; (8000dc8 <SPI_PeriClockControl+0x64>)
 8000d90:	4293      	cmp	r3, r2
 8000d92:	d106      	bne.n	8000da2 <SPI_PeriClockControl+0x3e>
			SPI2_PCLK_EN();
 8000d94:	4b0b      	ldr	r3, [pc, #44]	; (8000dc4 <SPI_PeriClockControl+0x60>)
 8000d96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d98:	4a0a      	ldr	r2, [pc, #40]	; (8000dc4 <SPI_PeriClockControl+0x60>)
 8000d9a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d9e:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000da0:	e009      	b.n	8000db6 <SPI_PeriClockControl+0x52>
		else if(pSPIx == SPI3)
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	4a09      	ldr	r2, [pc, #36]	; (8000dcc <SPI_PeriClockControl+0x68>)
 8000da6:	4293      	cmp	r3, r2
 8000da8:	d105      	bne.n	8000db6 <SPI_PeriClockControl+0x52>
			SPI3_PCLK_EN();
 8000daa:	4b06      	ldr	r3, [pc, #24]	; (8000dc4 <SPI_PeriClockControl+0x60>)
 8000dac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dae:	4a05      	ldr	r2, [pc, #20]	; (8000dc4 <SPI_PeriClockControl+0x60>)
 8000db0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000db4:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000db6:	bf00      	nop
 8000db8:	370c      	adds	r7, #12
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	bc80      	pop	{r7}
 8000dbe:	4770      	bx	lr
 8000dc0:	40013000 	.word	0x40013000
 8000dc4:	40023800 	.word	0x40023800
 8000dc8:	40003800 	.word	0x40003800
 8000dcc:	40003c00 	.word	0x40003c00

08000dd0 <SPI_Init>:
 * @return		- none
 *
 * @Note 		- none
 */
void SPI_Init(SPI_Handle_t *pSPIHandle)
{
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	b084      	sub	sp, #16
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	6078      	str	r0, [r7, #4]
	//First lets configure the SPI_CR1 register, biến tạm đại diện vị trí bit muốn cấu hình CR1 Register
	uint32_t tempreg = 0;
 8000dd8:	2300      	movs	r3, #0
 8000dda:	60fb      	str	r3, [r7, #12]

	//0.Enable CLock for Peripheral SPI
	SPI_PeriClockControl(pSPIHandle->pSPIx, ENABLE);
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	2101      	movs	r1, #1
 8000de2:	4618      	mov	r0, r3
 8000de4:	f7ff ffbe 	bl	8000d64 <SPI_PeriClockControl>

	//1.Configure the device mode , MSTR[bit2]
	tempreg |=  pSPIHandle->SPIConfig.SPI_DeviceMode << SPI_CR1_MSTR;  //Chỉ dịch tới vị trí bit ko mà set bit
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	791b      	ldrb	r3, [r3, #4]
 8000dec:	009b      	lsls	r3, r3, #2
 8000dee:	461a      	mov	r2, r3
 8000df0:	68fb      	ldr	r3, [r7, #12]
 8000df2:	4313      	orrs	r3, r2
 8000df4:	60fb      	str	r3, [r7, #12]
	//Ban đầu sẽ cấu hình device là Slave và vì tempreg đã bằng 0 nên chỉ cần dịch 2 bit

	//2. Configure the bus config , cấu hình mode theo chuẩn giao tiếp
	if(pSPIHandle->SPIConfig.SPI_BusConfig == SPI_BUS_CONFIG_FD)
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	795b      	ldrb	r3, [r3, #5]
 8000dfa:	2b01      	cmp	r3, #1
 8000dfc:	d104      	bne.n	8000e08 <SPI_Init+0x38>
	{
		//BIDIMODE[bit15] should be cleared
		tempreg &= ~(1 << SPI_CR1_BIDIMODE);
 8000dfe:	68fb      	ldr	r3, [r7, #12]
 8000e00:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8000e04:	60fb      	str	r3, [r7, #12]
 8000e06:	e014      	b.n	8000e32 <SPI_Init+0x62>
	}else if(pSPIHandle->SPIConfig.SPI_BusConfig == SPI_BUS_CONFIG_HD)
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	795b      	ldrb	r3, [r3, #5]
 8000e0c:	2b02      	cmp	r3, #2
 8000e0e:	d104      	bne.n	8000e1a <SPI_Init+0x4a>
	{
		//BIDIMODE[bit15] should be set
		tempreg |= (1 << SPI_CR1_BIDIMODE);
 8000e10:	68fb      	ldr	r3, [r7, #12]
 8000e12:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000e16:	60fb      	str	r3, [r7, #12]
 8000e18:	e00b      	b.n	8000e32 <SPI_Init+0x62>

	}else if(pSPIHandle->SPIConfig.SPI_BusConfig == SPI_BUS_CONFIG_SIMPLEX_RXONLY)
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	795b      	ldrb	r3, [r3, #5]
 8000e1e:	2b03      	cmp	r3, #3
 8000e20:	d107      	bne.n	8000e32 <SPI_Init+0x62>
	{
		//BIDIMODE[bit15] should be cleared
		tempreg &= ~(1 << SPI_CR1_BIDIMODE);
 8000e22:	68fb      	ldr	r3, [r7, #12]
 8000e24:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8000e28:	60fb      	str	r3, [r7, #12]

		//RX_ONLY[bit10] must be set
		tempreg |= (1 << SPI_CR1_RXONLY);
 8000e2a:	68fb      	ldr	r3, [r7, #12]
 8000e2c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000e30:	60fb      	str	r3, [r7, #12]
	}

	//3. Configure the SPI serial clock (baud rate), BR[bit2:0], mặc định Div2, bit[2:0] = 0
	tempreg |= pSPIHandle->SPIConfig.SPI_SclkSpeed << SPI_CR1_BR;  		//Chỉ dịch tới vị trí bit mà ko set bit
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	799b      	ldrb	r3, [r3, #6]
 8000e36:	00db      	lsls	r3, r3, #3
 8000e38:	461a      	mov	r2, r3
 8000e3a:	68fb      	ldr	r3, [r7, #12]
 8000e3c:	4313      	orrs	r3, r2
 8000e3e:	60fb      	str	r3, [r7, #12]

	//4. Configure the DFF, DFF[bit11]
	tempreg |= pSPIHandle->SPIConfig.SPI_DFF << SPI_CR1_DFF;			//Chỉ dịch tới vị trí bit ko mà set bit
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	79db      	ldrb	r3, [r3, #7]
 8000e44:	02db      	lsls	r3, r3, #11
 8000e46:	461a      	mov	r2, r3
 8000e48:	68fb      	ldr	r3, [r7, #12]
 8000e4a:	4313      	orrs	r3, r2
 8000e4c:	60fb      	str	r3, [r7, #12]

	//5. Configure the CPOL, CPOL[bit1]
	tempreg |= pSPIHandle->SPIConfig.SPI_CPOL << SPI_CR1_CPOL;			//Chỉ dịch tới vị trí bit ko mà set bit
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	7a1b      	ldrb	r3, [r3, #8]
 8000e52:	005b      	lsls	r3, r3, #1
 8000e54:	461a      	mov	r2, r3
 8000e56:	68fb      	ldr	r3, [r7, #12]
 8000e58:	4313      	orrs	r3, r2
 8000e5a:	60fb      	str	r3, [r7, #12]

	//6. Configure the CPHA, CPHA[bit0]
	tempreg |= pSPIHandle->SPIConfig.SPI_CPHA << SPI_CR1_CPHA;			//Chỉ dịch tới vị trí bit ko mà set bit
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	7a5b      	ldrb	r3, [r3, #9]
 8000e60:	461a      	mov	r2, r3
 8000e62:	68fb      	ldr	r3, [r7, #12]
 8000e64:	4313      	orrs	r3, r2
 8000e66:	60fb      	str	r3, [r7, #12]

	//Sau bước 6, bạn sẽ có cấu hình tạm(theo ý muốn lập trình viên) của thanh ghi CR1 là value biến tempreg

	//7. Lưu thông tin đã cấu hình biến tempreg vào CR1 của pSPIx muốn triển khai
	pSPIHandle->pSPIx->CR1 = tempreg;
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	68fa      	ldr	r2, [r7, #12]
 8000e6e:	601a      	str	r2, [r3, #0]
}
 8000e70:	bf00      	nop
 8000e72:	3710      	adds	r7, #16
 8000e74:	46bd      	mov	sp, r7
 8000e76:	bd80      	pop	{r7, pc}

08000e78 <SPI_GetFlagStatus>:
 * @return		- Trạng thái đã empty(Set) hay not empty(reset)
 *
 * @Note 		- none
 */
uint8_t SPI_GetFlagStatus(SPI_RegDef_t *pSPIx, uint32_t FlagName)
{
 8000e78:	b480      	push	{r7}
 8000e7a:	b083      	sub	sp, #12
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	6078      	str	r0, [r7, #4]
 8000e80:	6039      	str	r1, [r7, #0]
	if(pSPIx->SR & FlagName)  //Kiểm tra value của pSPIx->SR and với FlagName
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	689a      	ldr	r2, [r3, #8]
 8000e86:	683b      	ldr	r3, [r7, #0]
 8000e88:	4013      	ands	r3, r2
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	d001      	beq.n	8000e92 <SPI_GetFlagStatus+0x1a>
	{
		return FLAG_SET; //TH1:nếu kết quả là 1 thì TXE[1]==1 -> trả về SET, thoát vòng lặp
 8000e8e:	2301      	movs	r3, #1
 8000e90:	e000      	b.n	8000e94 <SPI_GetFlagStatus+0x1c>
						 //TH2: kiểm tra BSY có đang busy truyền hay không
	}
	return FLAG_RESET;		//nếu kết quả là 0 thì tiếp tục vòng lặp
 8000e92:	2300      	movs	r3, #0
}
 8000e94:	4618      	mov	r0, r3
 8000e96:	370c      	adds	r7, #12
 8000e98:	46bd      	mov	sp, r7
 8000e9a:	bc80      	pop	{r7}
 8000e9c:	4770      	bx	lr

08000e9e <SPI_SendData>:
 * @return		- none
 *
 * @Note 		- This is Blocking Call
 */
void SPI_SendData(SPI_RegDef_t *pSPIx, uint8_t *pTxBuffer, uint32_t Len)
{
 8000e9e:	b580      	push	{r7, lr}
 8000ea0:	b084      	sub	sp, #16
 8000ea2:	af00      	add	r7, sp, #0
 8000ea4:	60f8      	str	r0, [r7, #12]
 8000ea6:	60b9      	str	r1, [r7, #8]
 8000ea8:	607a      	str	r2, [r7, #4]
	while(Len > 0)
 8000eaa:	e027      	b.n	8000efc <SPI_SendData+0x5e>
	{
		//1. Wait until TXE[1] of SPI_SR register is set
		//while(! (pSPIx->SR & (1 << 1) ));												//C1
		while(SPI_GetFlagStatus(pSPIx, SPI_TXE_FLAG) == FLAG_RESET);					//C2
 8000eac:	bf00      	nop
 8000eae:	2102      	movs	r1, #2
 8000eb0:	68f8      	ldr	r0, [r7, #12]
 8000eb2:	f7ff ffe1 	bl	8000e78 <SPI_GetFlagStatus>
 8000eb6:	4603      	mov	r3, r0
 8000eb8:	2b00      	cmp	r3, #0
 8000eba:	d0f8      	beq.n	8000eae <SPI_SendData+0x10>


		//2. Check the DFF bit in CR1
		if(pSPIx->CR1 & (1 << SPI_CR1_DFF)) //dịch bit đến vị trí 11 và And với thanh ghi CR1 để kiểm tra value DFF bit
 8000ebc:	68fb      	ldr	r3, [r7, #12]
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	d00e      	beq.n	8000ee6 <SPI_SendData+0x48>
		{
			//16 bit DFF
			//3. load the data in to the DR(SPI Data Register), đẩy data từ TxBuffer -> DR
			pSPIx->DR = *((uint16_t*)pTxBuffer);	//ép kiểu vì param pTxBuffer đầu vào chỉ 8bit
 8000ec8:	68bb      	ldr	r3, [r7, #8]
 8000eca:	881b      	ldrh	r3, [r3, #0]
 8000ecc:	461a      	mov	r2, r3
 8000ece:	68fb      	ldr	r3, [r7, #12]
 8000ed0:	60da      	str	r2, [r3, #12]
			Len--;									//Trừ 2 đơn vị độ dài vì đã gửi 2 bit
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	3b01      	subs	r3, #1
 8000ed6:	607b      	str	r3, [r7, #4]
			Len--;
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	3b01      	subs	r3, #1
 8000edc:	607b      	str	r3, [r7, #4]
			(uint16_t*)pTxBuffer++;			//tăng địa chỉ bộ đệm chuẩn bị lần gửi tiếp theo
 8000ede:	68bb      	ldr	r3, [r7, #8]
 8000ee0:	3301      	adds	r3, #1
 8000ee2:	60bb      	str	r3, [r7, #8]
 8000ee4:	e00a      	b.n	8000efc <SPI_SendData+0x5e>
		}
		else
		{
			//8 bit DFF
			//3. load the data in to the DR(SPI Data Register), đẩy data từ TxBuffer -> DR
			pSPIx->DR = *pTxBuffer;
 8000ee6:	68bb      	ldr	r3, [r7, #8]
 8000ee8:	781b      	ldrb	r3, [r3, #0]
 8000eea:	461a      	mov	r2, r3
 8000eec:	68fb      	ldr	r3, [r7, #12]
 8000eee:	60da      	str	r2, [r3, #12]
			Len--;
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	3b01      	subs	r3, #1
 8000ef4:	607b      	str	r3, [r7, #4]
			pTxBuffer++;					//tăng địa chỉ bộ đệm chuẩn bị lần gửi tiếp theo
 8000ef6:	68bb      	ldr	r3, [r7, #8]
 8000ef8:	3301      	adds	r3, #1
 8000efa:	60bb      	str	r3, [r7, #8]
	while(Len > 0)
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d1d4      	bne.n	8000eac <SPI_SendData+0xe>
		}
	}
}
 8000f02:	bf00      	nop
 8000f04:	bf00      	nop
 8000f06:	3710      	adds	r7, #16
 8000f08:	46bd      	mov	sp, r7
 8000f0a:	bd80      	pop	{r7, pc}

08000f0c <SPI_ReceiveData>:
 *
 * @return		- none
 *
 * @Note 		- none
 */
void SPI_ReceiveData(SPI_RegDef_t *pSPIx, uint8_t *pRxBuffer, uint32_t Len){
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	b084      	sub	sp, #16
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	60f8      	str	r0, [r7, #12]
 8000f14:	60b9      	str	r1, [r7, #8]
 8000f16:	607a      	str	r2, [r7, #4]
	while(Len > 0)
 8000f18:	e027      	b.n	8000f6a <SPI_ReceiveData+0x5e>
	{
		//1. Wait until RXNE[0] of SPI_SR register is set
		//while(! (pSPIx->SR & (1 << 1) ));												//C1
		while(SPI_GetFlagStatus(pSPIx, SPI_RXNE_FLAG) == FLAG_RESET);					//C2
 8000f1a:	bf00      	nop
 8000f1c:	2101      	movs	r1, #1
 8000f1e:	68f8      	ldr	r0, [r7, #12]
 8000f20:	f7ff ffaa 	bl	8000e78 <SPI_GetFlagStatus>
 8000f24:	4603      	mov	r3, r0
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	d0f8      	beq.n	8000f1c <SPI_ReceiveData+0x10>


		//2. Check the DFF bit in CR1
		if(pSPIx->CR1 & (1 << SPI_CR1_DFF)) //dịch bit đến vị trí 11 và And với thanh ghi CR1 để kiểm tra value DFF bit
 8000f2a:	68fb      	ldr	r3, [r7, #12]
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d00e      	beq.n	8000f54 <SPI_ReceiveData+0x48>
		{
			//16 bit DFF
			//3. load the data from the DR(SPI Data Register) to RxBuffer, đẩy data từ  DR -> RxBuffer
			*((uint16_t*)pRxBuffer) = pSPIx->DR ;	//ép kiểu vì param pRxBuffer đầu vào chỉ 8bit
 8000f36:	68fb      	ldr	r3, [r7, #12]
 8000f38:	68db      	ldr	r3, [r3, #12]
 8000f3a:	b29a      	uxth	r2, r3
 8000f3c:	68bb      	ldr	r3, [r7, #8]
 8000f3e:	801a      	strh	r2, [r3, #0]
			Len--;									//Trừ 2 đơn vị độ dài vì đã nhận 2 bit
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	3b01      	subs	r3, #1
 8000f44:	607b      	str	r3, [r7, #4]
			Len--;
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	3b01      	subs	r3, #1
 8000f4a:	607b      	str	r3, [r7, #4]
			(uint16_t*)pRxBuffer++;			//tăng địa chỉ bộ đệm chuẩn bị lần gửi tiếp theo
 8000f4c:	68bb      	ldr	r3, [r7, #8]
 8000f4e:	3301      	adds	r3, #1
 8000f50:	60bb      	str	r3, [r7, #8]
 8000f52:	e00a      	b.n	8000f6a <SPI_ReceiveData+0x5e>
		}
		else
		{
			//8 bit DFF
			//3. load the data from the DR(SPI Data Register) to RxBuffer, đẩy data từ  DR -> RxBuffer
			*(pRxBuffer) = pSPIx->DR ;
 8000f54:	68fb      	ldr	r3, [r7, #12]
 8000f56:	68db      	ldr	r3, [r3, #12]
 8000f58:	b2da      	uxtb	r2, r3
 8000f5a:	68bb      	ldr	r3, [r7, #8]
 8000f5c:	701a      	strb	r2, [r3, #0]
			Len--;
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	3b01      	subs	r3, #1
 8000f62:	607b      	str	r3, [r7, #4]
			pRxBuffer++;					//tăng địa chỉ bộ đệm chuẩn bị lần gửi tiếp theo
 8000f64:	68bb      	ldr	r3, [r7, #8]
 8000f66:	3301      	adds	r3, #1
 8000f68:	60bb      	str	r3, [r7, #8]
	while(Len > 0)
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	d1d4      	bne.n	8000f1a <SPI_ReceiveData+0xe>
		}
	}
}
 8000f70:	bf00      	nop
 8000f72:	bf00      	nop
 8000f74:	3710      	adds	r7, #16
 8000f76:	46bd      	mov	sp, r7
 8000f78:	bd80      	pop	{r7, pc}

08000f7a <SPI_PeripheralControl>:
 * @return		- none
 *
 * @Note 		- none
 */
void SPI_PeripheralControl(SPI_RegDef_t *pSPIx, uint8_t EnorDi)
{
 8000f7a:	b480      	push	{r7}
 8000f7c:	b083      	sub	sp, #12
 8000f7e:	af00      	add	r7, sp, #0
 8000f80:	6078      	str	r0, [r7, #4]
 8000f82:	460b      	mov	r3, r1
 8000f84:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE)
 8000f86:	78fb      	ldrb	r3, [r7, #3]
 8000f88:	2b01      	cmp	r3, #1
 8000f8a:	d106      	bne.n	8000f9a <SPI_PeripheralControl+0x20>
	{
		pSPIx->CR1 |= (1 << SPI_CR1_SPE); 		//1= Enable SPI
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	601a      	str	r2, [r3, #0]
	}
	else
	{
		pSPIx->CR1 &= ~(1 << SPI_CR1_SPE); 		//0= Disable SPI
	}
}
 8000f98:	e005      	b.n	8000fa6 <SPI_PeripheralControl+0x2c>
		pSPIx->CR1 &= ~(1 << SPI_CR1_SPE); 		//0= Disable SPI
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	601a      	str	r2, [r3, #0]
}
 8000fa6:	bf00      	nop
 8000fa8:	370c      	adds	r7, #12
 8000faa:	46bd      	mov	sp, r7
 8000fac:	bc80      	pop	{r7}
 8000fae:	4770      	bx	lr

08000fb0 <SPI_SSOEConfig>:
 * @return		- none
 *
 * @Note 		- none
 */
void SPI_SSOEConfig(SPI_RegDef_t *pSPIx, uint8_t EnorDi)
{
 8000fb0:	b480      	push	{r7}
 8000fb2:	b083      	sub	sp, #12
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	6078      	str	r0, [r7, #4]
 8000fb8:	460b      	mov	r3, r1
 8000fba:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE)
 8000fbc:	78fb      	ldrb	r3, [r7, #3]
 8000fbe:	2b01      	cmp	r3, #1
 8000fc0:	d106      	bne.n	8000fd0 <SPI_SSOEConfig+0x20>
	{
		pSPIx->CR2 |= (1 << SPI_CR2_SSOE); 		//Enable SSOE=1(điều kiện) -> NSS=Low
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	685b      	ldr	r3, [r3, #4]
 8000fc6:	f043 0204 	orr.w	r2, r3, #4
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	605a      	str	r2, [r3, #4]
	}
	else
	{
		pSPIx->CR2 &= ~(1 << SPI_CR2_SSOE); 		//Disable SSOE=0(điều kiện) -> NSS=High
	}
}
 8000fce:	e005      	b.n	8000fdc <SPI_SSOEConfig+0x2c>
		pSPIx->CR2 &= ~(1 << SPI_CR2_SSOE); 		//Disable SSOE=0(điều kiện) -> NSS=High
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	685b      	ldr	r3, [r3, #4]
 8000fd4:	f023 0204 	bic.w	r2, r3, #4
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	605a      	str	r2, [r3, #4]
}
 8000fdc:	bf00      	nop
 8000fde:	370c      	adds	r7, #12
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	bc80      	pop	{r7}
 8000fe4:	4770      	bx	lr
	...

08000fe8 <std>:
 8000fe8:	2300      	movs	r3, #0
 8000fea:	b510      	push	{r4, lr}
 8000fec:	4604      	mov	r4, r0
 8000fee:	e9c0 3300 	strd	r3, r3, [r0]
 8000ff2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8000ff6:	6083      	str	r3, [r0, #8]
 8000ff8:	8181      	strh	r1, [r0, #12]
 8000ffa:	6643      	str	r3, [r0, #100]	; 0x64
 8000ffc:	81c2      	strh	r2, [r0, #14]
 8000ffe:	6183      	str	r3, [r0, #24]
 8001000:	4619      	mov	r1, r3
 8001002:	2208      	movs	r2, #8
 8001004:	305c      	adds	r0, #92	; 0x5c
 8001006:	f000 f9e5 	bl	80013d4 <memset>
 800100a:	4b05      	ldr	r3, [pc, #20]	; (8001020 <std+0x38>)
 800100c:	6263      	str	r3, [r4, #36]	; 0x24
 800100e:	4b05      	ldr	r3, [pc, #20]	; (8001024 <std+0x3c>)
 8001010:	62a3      	str	r3, [r4, #40]	; 0x28
 8001012:	4b05      	ldr	r3, [pc, #20]	; (8001028 <std+0x40>)
 8001014:	62e3      	str	r3, [r4, #44]	; 0x2c
 8001016:	4b05      	ldr	r3, [pc, #20]	; (800102c <std+0x44>)
 8001018:	6224      	str	r4, [r4, #32]
 800101a:	6323      	str	r3, [r4, #48]	; 0x30
 800101c:	bd10      	pop	{r4, pc}
 800101e:	bf00      	nop
 8001020:	08001225 	.word	0x08001225
 8001024:	08001247 	.word	0x08001247
 8001028:	0800127f 	.word	0x0800127f
 800102c:	080012a3 	.word	0x080012a3

08001030 <stdio_exit_handler>:
 8001030:	4a02      	ldr	r2, [pc, #8]	; (800103c <stdio_exit_handler+0xc>)
 8001032:	4903      	ldr	r1, [pc, #12]	; (8001040 <stdio_exit_handler+0x10>)
 8001034:	4803      	ldr	r0, [pc, #12]	; (8001044 <stdio_exit_handler+0x14>)
 8001036:	f000 b869 	b.w	800110c <_fwalk_sglue>
 800103a:	bf00      	nop
 800103c:	20000000 	.word	0x20000000
 8001040:	08001d5d 	.word	0x08001d5d
 8001044:	2000000c 	.word	0x2000000c

08001048 <cleanup_stdio>:
 8001048:	6841      	ldr	r1, [r0, #4]
 800104a:	4b0c      	ldr	r3, [pc, #48]	; (800107c <cleanup_stdio+0x34>)
 800104c:	4299      	cmp	r1, r3
 800104e:	b510      	push	{r4, lr}
 8001050:	4604      	mov	r4, r0
 8001052:	d001      	beq.n	8001058 <cleanup_stdio+0x10>
 8001054:	f000 fe82 	bl	8001d5c <_fflush_r>
 8001058:	68a1      	ldr	r1, [r4, #8]
 800105a:	4b09      	ldr	r3, [pc, #36]	; (8001080 <cleanup_stdio+0x38>)
 800105c:	4299      	cmp	r1, r3
 800105e:	d002      	beq.n	8001066 <cleanup_stdio+0x1e>
 8001060:	4620      	mov	r0, r4
 8001062:	f000 fe7b 	bl	8001d5c <_fflush_r>
 8001066:	68e1      	ldr	r1, [r4, #12]
 8001068:	4b06      	ldr	r3, [pc, #24]	; (8001084 <cleanup_stdio+0x3c>)
 800106a:	4299      	cmp	r1, r3
 800106c:	d004      	beq.n	8001078 <cleanup_stdio+0x30>
 800106e:	4620      	mov	r0, r4
 8001070:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001074:	f000 be72 	b.w	8001d5c <_fflush_r>
 8001078:	bd10      	pop	{r4, pc}
 800107a:	bf00      	nop
 800107c:	2000007c 	.word	0x2000007c
 8001080:	200000e4 	.word	0x200000e4
 8001084:	2000014c 	.word	0x2000014c

08001088 <global_stdio_init.part.0>:
 8001088:	b510      	push	{r4, lr}
 800108a:	4b0b      	ldr	r3, [pc, #44]	; (80010b8 <global_stdio_init.part.0+0x30>)
 800108c:	4c0b      	ldr	r4, [pc, #44]	; (80010bc <global_stdio_init.part.0+0x34>)
 800108e:	4a0c      	ldr	r2, [pc, #48]	; (80010c0 <global_stdio_init.part.0+0x38>)
 8001090:	601a      	str	r2, [r3, #0]
 8001092:	4620      	mov	r0, r4
 8001094:	2200      	movs	r2, #0
 8001096:	2104      	movs	r1, #4
 8001098:	f7ff ffa6 	bl	8000fe8 <std>
 800109c:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80010a0:	2201      	movs	r2, #1
 80010a2:	2109      	movs	r1, #9
 80010a4:	f7ff ffa0 	bl	8000fe8 <std>
 80010a8:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80010ac:	2202      	movs	r2, #2
 80010ae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80010b2:	2112      	movs	r1, #18
 80010b4:	f7ff bf98 	b.w	8000fe8 <std>
 80010b8:	200001b4 	.word	0x200001b4
 80010bc:	2000007c 	.word	0x2000007c
 80010c0:	08001031 	.word	0x08001031

080010c4 <__sfp_lock_acquire>:
 80010c4:	4801      	ldr	r0, [pc, #4]	; (80010cc <__sfp_lock_acquire+0x8>)
 80010c6:	f000 b9fd 	b.w	80014c4 <__retarget_lock_acquire_recursive>
 80010ca:	bf00      	nop
 80010cc:	200001bd 	.word	0x200001bd

080010d0 <__sfp_lock_release>:
 80010d0:	4801      	ldr	r0, [pc, #4]	; (80010d8 <__sfp_lock_release+0x8>)
 80010d2:	f000 b9f8 	b.w	80014c6 <__retarget_lock_release_recursive>
 80010d6:	bf00      	nop
 80010d8:	200001bd 	.word	0x200001bd

080010dc <__sinit>:
 80010dc:	b510      	push	{r4, lr}
 80010de:	4604      	mov	r4, r0
 80010e0:	f7ff fff0 	bl	80010c4 <__sfp_lock_acquire>
 80010e4:	6a23      	ldr	r3, [r4, #32]
 80010e6:	b11b      	cbz	r3, 80010f0 <__sinit+0x14>
 80010e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80010ec:	f7ff bff0 	b.w	80010d0 <__sfp_lock_release>
 80010f0:	4b04      	ldr	r3, [pc, #16]	; (8001104 <__sinit+0x28>)
 80010f2:	6223      	str	r3, [r4, #32]
 80010f4:	4b04      	ldr	r3, [pc, #16]	; (8001108 <__sinit+0x2c>)
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d1f5      	bne.n	80010e8 <__sinit+0xc>
 80010fc:	f7ff ffc4 	bl	8001088 <global_stdio_init.part.0>
 8001100:	e7f2      	b.n	80010e8 <__sinit+0xc>
 8001102:	bf00      	nop
 8001104:	08001049 	.word	0x08001049
 8001108:	200001b4 	.word	0x200001b4

0800110c <_fwalk_sglue>:
 800110c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001110:	4607      	mov	r7, r0
 8001112:	4688      	mov	r8, r1
 8001114:	4614      	mov	r4, r2
 8001116:	2600      	movs	r6, #0
 8001118:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800111c:	f1b9 0901 	subs.w	r9, r9, #1
 8001120:	d505      	bpl.n	800112e <_fwalk_sglue+0x22>
 8001122:	6824      	ldr	r4, [r4, #0]
 8001124:	2c00      	cmp	r4, #0
 8001126:	d1f7      	bne.n	8001118 <_fwalk_sglue+0xc>
 8001128:	4630      	mov	r0, r6
 800112a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800112e:	89ab      	ldrh	r3, [r5, #12]
 8001130:	2b01      	cmp	r3, #1
 8001132:	d907      	bls.n	8001144 <_fwalk_sglue+0x38>
 8001134:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8001138:	3301      	adds	r3, #1
 800113a:	d003      	beq.n	8001144 <_fwalk_sglue+0x38>
 800113c:	4629      	mov	r1, r5
 800113e:	4638      	mov	r0, r7
 8001140:	47c0      	blx	r8
 8001142:	4306      	orrs	r6, r0
 8001144:	3568      	adds	r5, #104	; 0x68
 8001146:	e7e9      	b.n	800111c <_fwalk_sglue+0x10>

08001148 <iprintf>:
 8001148:	b40f      	push	{r0, r1, r2, r3}
 800114a:	b507      	push	{r0, r1, r2, lr}
 800114c:	4906      	ldr	r1, [pc, #24]	; (8001168 <iprintf+0x20>)
 800114e:	ab04      	add	r3, sp, #16
 8001150:	6808      	ldr	r0, [r1, #0]
 8001152:	f853 2b04 	ldr.w	r2, [r3], #4
 8001156:	6881      	ldr	r1, [r0, #8]
 8001158:	9301      	str	r3, [sp, #4]
 800115a:	f000 fad3 	bl	8001704 <_vfiprintf_r>
 800115e:	b003      	add	sp, #12
 8001160:	f85d eb04 	ldr.w	lr, [sp], #4
 8001164:	b004      	add	sp, #16
 8001166:	4770      	bx	lr
 8001168:	20000058 	.word	0x20000058

0800116c <_puts_r>:
 800116c:	6a03      	ldr	r3, [r0, #32]
 800116e:	b570      	push	{r4, r5, r6, lr}
 8001170:	6884      	ldr	r4, [r0, #8]
 8001172:	4605      	mov	r5, r0
 8001174:	460e      	mov	r6, r1
 8001176:	b90b      	cbnz	r3, 800117c <_puts_r+0x10>
 8001178:	f7ff ffb0 	bl	80010dc <__sinit>
 800117c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800117e:	07db      	lsls	r3, r3, #31
 8001180:	d405      	bmi.n	800118e <_puts_r+0x22>
 8001182:	89a3      	ldrh	r3, [r4, #12]
 8001184:	0598      	lsls	r0, r3, #22
 8001186:	d402      	bmi.n	800118e <_puts_r+0x22>
 8001188:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800118a:	f000 f99b 	bl	80014c4 <__retarget_lock_acquire_recursive>
 800118e:	89a3      	ldrh	r3, [r4, #12]
 8001190:	0719      	lsls	r1, r3, #28
 8001192:	d513      	bpl.n	80011bc <_puts_r+0x50>
 8001194:	6923      	ldr	r3, [r4, #16]
 8001196:	b18b      	cbz	r3, 80011bc <_puts_r+0x50>
 8001198:	3e01      	subs	r6, #1
 800119a:	68a3      	ldr	r3, [r4, #8]
 800119c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80011a0:	3b01      	subs	r3, #1
 80011a2:	60a3      	str	r3, [r4, #8]
 80011a4:	b9e9      	cbnz	r1, 80011e2 <_puts_r+0x76>
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	da2e      	bge.n	8001208 <_puts_r+0x9c>
 80011aa:	4622      	mov	r2, r4
 80011ac:	210a      	movs	r1, #10
 80011ae:	4628      	mov	r0, r5
 80011b0:	f000 f87b 	bl	80012aa <__swbuf_r>
 80011b4:	3001      	adds	r0, #1
 80011b6:	d007      	beq.n	80011c8 <_puts_r+0x5c>
 80011b8:	250a      	movs	r5, #10
 80011ba:	e007      	b.n	80011cc <_puts_r+0x60>
 80011bc:	4621      	mov	r1, r4
 80011be:	4628      	mov	r0, r5
 80011c0:	f000 f8b0 	bl	8001324 <__swsetup_r>
 80011c4:	2800      	cmp	r0, #0
 80011c6:	d0e7      	beq.n	8001198 <_puts_r+0x2c>
 80011c8:	f04f 35ff 	mov.w	r5, #4294967295
 80011cc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80011ce:	07da      	lsls	r2, r3, #31
 80011d0:	d405      	bmi.n	80011de <_puts_r+0x72>
 80011d2:	89a3      	ldrh	r3, [r4, #12]
 80011d4:	059b      	lsls	r3, r3, #22
 80011d6:	d402      	bmi.n	80011de <_puts_r+0x72>
 80011d8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80011da:	f000 f974 	bl	80014c6 <__retarget_lock_release_recursive>
 80011de:	4628      	mov	r0, r5
 80011e0:	bd70      	pop	{r4, r5, r6, pc}
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	da04      	bge.n	80011f0 <_puts_r+0x84>
 80011e6:	69a2      	ldr	r2, [r4, #24]
 80011e8:	429a      	cmp	r2, r3
 80011ea:	dc06      	bgt.n	80011fa <_puts_r+0x8e>
 80011ec:	290a      	cmp	r1, #10
 80011ee:	d004      	beq.n	80011fa <_puts_r+0x8e>
 80011f0:	6823      	ldr	r3, [r4, #0]
 80011f2:	1c5a      	adds	r2, r3, #1
 80011f4:	6022      	str	r2, [r4, #0]
 80011f6:	7019      	strb	r1, [r3, #0]
 80011f8:	e7cf      	b.n	800119a <_puts_r+0x2e>
 80011fa:	4622      	mov	r2, r4
 80011fc:	4628      	mov	r0, r5
 80011fe:	f000 f854 	bl	80012aa <__swbuf_r>
 8001202:	3001      	adds	r0, #1
 8001204:	d1c9      	bne.n	800119a <_puts_r+0x2e>
 8001206:	e7df      	b.n	80011c8 <_puts_r+0x5c>
 8001208:	6823      	ldr	r3, [r4, #0]
 800120a:	250a      	movs	r5, #10
 800120c:	1c5a      	adds	r2, r3, #1
 800120e:	6022      	str	r2, [r4, #0]
 8001210:	701d      	strb	r5, [r3, #0]
 8001212:	e7db      	b.n	80011cc <_puts_r+0x60>

08001214 <puts>:
 8001214:	4b02      	ldr	r3, [pc, #8]	; (8001220 <puts+0xc>)
 8001216:	4601      	mov	r1, r0
 8001218:	6818      	ldr	r0, [r3, #0]
 800121a:	f7ff bfa7 	b.w	800116c <_puts_r>
 800121e:	bf00      	nop
 8001220:	20000058 	.word	0x20000058

08001224 <__sread>:
 8001224:	b510      	push	{r4, lr}
 8001226:	460c      	mov	r4, r1
 8001228:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800122c:	f000 f8fc 	bl	8001428 <_read_r>
 8001230:	2800      	cmp	r0, #0
 8001232:	bfab      	itete	ge
 8001234:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8001236:	89a3      	ldrhlt	r3, [r4, #12]
 8001238:	181b      	addge	r3, r3, r0
 800123a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800123e:	bfac      	ite	ge
 8001240:	6563      	strge	r3, [r4, #84]	; 0x54
 8001242:	81a3      	strhlt	r3, [r4, #12]
 8001244:	bd10      	pop	{r4, pc}

08001246 <__swrite>:
 8001246:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800124a:	461f      	mov	r7, r3
 800124c:	898b      	ldrh	r3, [r1, #12]
 800124e:	05db      	lsls	r3, r3, #23
 8001250:	4605      	mov	r5, r0
 8001252:	460c      	mov	r4, r1
 8001254:	4616      	mov	r6, r2
 8001256:	d505      	bpl.n	8001264 <__swrite+0x1e>
 8001258:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800125c:	2302      	movs	r3, #2
 800125e:	2200      	movs	r2, #0
 8001260:	f000 f8d0 	bl	8001404 <_lseek_r>
 8001264:	89a3      	ldrh	r3, [r4, #12]
 8001266:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800126a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800126e:	81a3      	strh	r3, [r4, #12]
 8001270:	4632      	mov	r2, r6
 8001272:	463b      	mov	r3, r7
 8001274:	4628      	mov	r0, r5
 8001276:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800127a:	f000 b8e7 	b.w	800144c <_write_r>

0800127e <__sseek>:
 800127e:	b510      	push	{r4, lr}
 8001280:	460c      	mov	r4, r1
 8001282:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001286:	f000 f8bd 	bl	8001404 <_lseek_r>
 800128a:	1c43      	adds	r3, r0, #1
 800128c:	89a3      	ldrh	r3, [r4, #12]
 800128e:	bf15      	itete	ne
 8001290:	6560      	strne	r0, [r4, #84]	; 0x54
 8001292:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8001296:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800129a:	81a3      	strheq	r3, [r4, #12]
 800129c:	bf18      	it	ne
 800129e:	81a3      	strhne	r3, [r4, #12]
 80012a0:	bd10      	pop	{r4, pc}

080012a2 <__sclose>:
 80012a2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80012a6:	f000 b89d 	b.w	80013e4 <_close_r>

080012aa <__swbuf_r>:
 80012aa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80012ac:	460e      	mov	r6, r1
 80012ae:	4614      	mov	r4, r2
 80012b0:	4605      	mov	r5, r0
 80012b2:	b118      	cbz	r0, 80012bc <__swbuf_r+0x12>
 80012b4:	6a03      	ldr	r3, [r0, #32]
 80012b6:	b90b      	cbnz	r3, 80012bc <__swbuf_r+0x12>
 80012b8:	f7ff ff10 	bl	80010dc <__sinit>
 80012bc:	69a3      	ldr	r3, [r4, #24]
 80012be:	60a3      	str	r3, [r4, #8]
 80012c0:	89a3      	ldrh	r3, [r4, #12]
 80012c2:	071a      	lsls	r2, r3, #28
 80012c4:	d525      	bpl.n	8001312 <__swbuf_r+0x68>
 80012c6:	6923      	ldr	r3, [r4, #16]
 80012c8:	b31b      	cbz	r3, 8001312 <__swbuf_r+0x68>
 80012ca:	6823      	ldr	r3, [r4, #0]
 80012cc:	6922      	ldr	r2, [r4, #16]
 80012ce:	1a98      	subs	r0, r3, r2
 80012d0:	6963      	ldr	r3, [r4, #20]
 80012d2:	b2f6      	uxtb	r6, r6
 80012d4:	4283      	cmp	r3, r0
 80012d6:	4637      	mov	r7, r6
 80012d8:	dc04      	bgt.n	80012e4 <__swbuf_r+0x3a>
 80012da:	4621      	mov	r1, r4
 80012dc:	4628      	mov	r0, r5
 80012de:	f000 fd3d 	bl	8001d5c <_fflush_r>
 80012e2:	b9e0      	cbnz	r0, 800131e <__swbuf_r+0x74>
 80012e4:	68a3      	ldr	r3, [r4, #8]
 80012e6:	3b01      	subs	r3, #1
 80012e8:	60a3      	str	r3, [r4, #8]
 80012ea:	6823      	ldr	r3, [r4, #0]
 80012ec:	1c5a      	adds	r2, r3, #1
 80012ee:	6022      	str	r2, [r4, #0]
 80012f0:	701e      	strb	r6, [r3, #0]
 80012f2:	6962      	ldr	r2, [r4, #20]
 80012f4:	1c43      	adds	r3, r0, #1
 80012f6:	429a      	cmp	r2, r3
 80012f8:	d004      	beq.n	8001304 <__swbuf_r+0x5a>
 80012fa:	89a3      	ldrh	r3, [r4, #12]
 80012fc:	07db      	lsls	r3, r3, #31
 80012fe:	d506      	bpl.n	800130e <__swbuf_r+0x64>
 8001300:	2e0a      	cmp	r6, #10
 8001302:	d104      	bne.n	800130e <__swbuf_r+0x64>
 8001304:	4621      	mov	r1, r4
 8001306:	4628      	mov	r0, r5
 8001308:	f000 fd28 	bl	8001d5c <_fflush_r>
 800130c:	b938      	cbnz	r0, 800131e <__swbuf_r+0x74>
 800130e:	4638      	mov	r0, r7
 8001310:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001312:	4621      	mov	r1, r4
 8001314:	4628      	mov	r0, r5
 8001316:	f000 f805 	bl	8001324 <__swsetup_r>
 800131a:	2800      	cmp	r0, #0
 800131c:	d0d5      	beq.n	80012ca <__swbuf_r+0x20>
 800131e:	f04f 37ff 	mov.w	r7, #4294967295
 8001322:	e7f4      	b.n	800130e <__swbuf_r+0x64>

08001324 <__swsetup_r>:
 8001324:	b538      	push	{r3, r4, r5, lr}
 8001326:	4b2a      	ldr	r3, [pc, #168]	; (80013d0 <__swsetup_r+0xac>)
 8001328:	4605      	mov	r5, r0
 800132a:	6818      	ldr	r0, [r3, #0]
 800132c:	460c      	mov	r4, r1
 800132e:	b118      	cbz	r0, 8001338 <__swsetup_r+0x14>
 8001330:	6a03      	ldr	r3, [r0, #32]
 8001332:	b90b      	cbnz	r3, 8001338 <__swsetup_r+0x14>
 8001334:	f7ff fed2 	bl	80010dc <__sinit>
 8001338:	89a3      	ldrh	r3, [r4, #12]
 800133a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800133e:	0718      	lsls	r0, r3, #28
 8001340:	d422      	bmi.n	8001388 <__swsetup_r+0x64>
 8001342:	06d9      	lsls	r1, r3, #27
 8001344:	d407      	bmi.n	8001356 <__swsetup_r+0x32>
 8001346:	2309      	movs	r3, #9
 8001348:	602b      	str	r3, [r5, #0]
 800134a:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800134e:	81a3      	strh	r3, [r4, #12]
 8001350:	f04f 30ff 	mov.w	r0, #4294967295
 8001354:	e034      	b.n	80013c0 <__swsetup_r+0x9c>
 8001356:	0758      	lsls	r0, r3, #29
 8001358:	d512      	bpl.n	8001380 <__swsetup_r+0x5c>
 800135a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800135c:	b141      	cbz	r1, 8001370 <__swsetup_r+0x4c>
 800135e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8001362:	4299      	cmp	r1, r3
 8001364:	d002      	beq.n	800136c <__swsetup_r+0x48>
 8001366:	4628      	mov	r0, r5
 8001368:	f000 f8ae 	bl	80014c8 <_free_r>
 800136c:	2300      	movs	r3, #0
 800136e:	6363      	str	r3, [r4, #52]	; 0x34
 8001370:	89a3      	ldrh	r3, [r4, #12]
 8001372:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8001376:	81a3      	strh	r3, [r4, #12]
 8001378:	2300      	movs	r3, #0
 800137a:	6063      	str	r3, [r4, #4]
 800137c:	6923      	ldr	r3, [r4, #16]
 800137e:	6023      	str	r3, [r4, #0]
 8001380:	89a3      	ldrh	r3, [r4, #12]
 8001382:	f043 0308 	orr.w	r3, r3, #8
 8001386:	81a3      	strh	r3, [r4, #12]
 8001388:	6923      	ldr	r3, [r4, #16]
 800138a:	b94b      	cbnz	r3, 80013a0 <__swsetup_r+0x7c>
 800138c:	89a3      	ldrh	r3, [r4, #12]
 800138e:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8001392:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001396:	d003      	beq.n	80013a0 <__swsetup_r+0x7c>
 8001398:	4621      	mov	r1, r4
 800139a:	4628      	mov	r0, r5
 800139c:	f000 fd2c 	bl	8001df8 <__smakebuf_r>
 80013a0:	89a0      	ldrh	r0, [r4, #12]
 80013a2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80013a6:	f010 0301 	ands.w	r3, r0, #1
 80013aa:	d00a      	beq.n	80013c2 <__swsetup_r+0x9e>
 80013ac:	2300      	movs	r3, #0
 80013ae:	60a3      	str	r3, [r4, #8]
 80013b0:	6963      	ldr	r3, [r4, #20]
 80013b2:	425b      	negs	r3, r3
 80013b4:	61a3      	str	r3, [r4, #24]
 80013b6:	6923      	ldr	r3, [r4, #16]
 80013b8:	b943      	cbnz	r3, 80013cc <__swsetup_r+0xa8>
 80013ba:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80013be:	d1c4      	bne.n	800134a <__swsetup_r+0x26>
 80013c0:	bd38      	pop	{r3, r4, r5, pc}
 80013c2:	0781      	lsls	r1, r0, #30
 80013c4:	bf58      	it	pl
 80013c6:	6963      	ldrpl	r3, [r4, #20]
 80013c8:	60a3      	str	r3, [r4, #8]
 80013ca:	e7f4      	b.n	80013b6 <__swsetup_r+0x92>
 80013cc:	2000      	movs	r0, #0
 80013ce:	e7f7      	b.n	80013c0 <__swsetup_r+0x9c>
 80013d0:	20000058 	.word	0x20000058

080013d4 <memset>:
 80013d4:	4402      	add	r2, r0
 80013d6:	4603      	mov	r3, r0
 80013d8:	4293      	cmp	r3, r2
 80013da:	d100      	bne.n	80013de <memset+0xa>
 80013dc:	4770      	bx	lr
 80013de:	f803 1b01 	strb.w	r1, [r3], #1
 80013e2:	e7f9      	b.n	80013d8 <memset+0x4>

080013e4 <_close_r>:
 80013e4:	b538      	push	{r3, r4, r5, lr}
 80013e6:	4d06      	ldr	r5, [pc, #24]	; (8001400 <_close_r+0x1c>)
 80013e8:	2300      	movs	r3, #0
 80013ea:	4604      	mov	r4, r0
 80013ec:	4608      	mov	r0, r1
 80013ee:	602b      	str	r3, [r5, #0]
 80013f0:	f7ff fa01 	bl	80007f6 <_close>
 80013f4:	1c43      	adds	r3, r0, #1
 80013f6:	d102      	bne.n	80013fe <_close_r+0x1a>
 80013f8:	682b      	ldr	r3, [r5, #0]
 80013fa:	b103      	cbz	r3, 80013fe <_close_r+0x1a>
 80013fc:	6023      	str	r3, [r4, #0]
 80013fe:	bd38      	pop	{r3, r4, r5, pc}
 8001400:	200001b8 	.word	0x200001b8

08001404 <_lseek_r>:
 8001404:	b538      	push	{r3, r4, r5, lr}
 8001406:	4d07      	ldr	r5, [pc, #28]	; (8001424 <_lseek_r+0x20>)
 8001408:	4604      	mov	r4, r0
 800140a:	4608      	mov	r0, r1
 800140c:	4611      	mov	r1, r2
 800140e:	2200      	movs	r2, #0
 8001410:	602a      	str	r2, [r5, #0]
 8001412:	461a      	mov	r2, r3
 8001414:	f7ff fa13 	bl	800083e <_lseek>
 8001418:	1c43      	adds	r3, r0, #1
 800141a:	d102      	bne.n	8001422 <_lseek_r+0x1e>
 800141c:	682b      	ldr	r3, [r5, #0]
 800141e:	b103      	cbz	r3, 8001422 <_lseek_r+0x1e>
 8001420:	6023      	str	r3, [r4, #0]
 8001422:	bd38      	pop	{r3, r4, r5, pc}
 8001424:	200001b8 	.word	0x200001b8

08001428 <_read_r>:
 8001428:	b538      	push	{r3, r4, r5, lr}
 800142a:	4d07      	ldr	r5, [pc, #28]	; (8001448 <_read_r+0x20>)
 800142c:	4604      	mov	r4, r0
 800142e:	4608      	mov	r0, r1
 8001430:	4611      	mov	r1, r2
 8001432:	2200      	movs	r2, #0
 8001434:	602a      	str	r2, [r5, #0]
 8001436:	461a      	mov	r2, r3
 8001438:	f7ff f9a4 	bl	8000784 <_read>
 800143c:	1c43      	adds	r3, r0, #1
 800143e:	d102      	bne.n	8001446 <_read_r+0x1e>
 8001440:	682b      	ldr	r3, [r5, #0]
 8001442:	b103      	cbz	r3, 8001446 <_read_r+0x1e>
 8001444:	6023      	str	r3, [r4, #0]
 8001446:	bd38      	pop	{r3, r4, r5, pc}
 8001448:	200001b8 	.word	0x200001b8

0800144c <_write_r>:
 800144c:	b538      	push	{r3, r4, r5, lr}
 800144e:	4d07      	ldr	r5, [pc, #28]	; (800146c <_write_r+0x20>)
 8001450:	4604      	mov	r4, r0
 8001452:	4608      	mov	r0, r1
 8001454:	4611      	mov	r1, r2
 8001456:	2200      	movs	r2, #0
 8001458:	602a      	str	r2, [r5, #0]
 800145a:	461a      	mov	r2, r3
 800145c:	f7ff f9af 	bl	80007be <_write>
 8001460:	1c43      	adds	r3, r0, #1
 8001462:	d102      	bne.n	800146a <_write_r+0x1e>
 8001464:	682b      	ldr	r3, [r5, #0]
 8001466:	b103      	cbz	r3, 800146a <_write_r+0x1e>
 8001468:	6023      	str	r3, [r4, #0]
 800146a:	bd38      	pop	{r3, r4, r5, pc}
 800146c:	200001b8 	.word	0x200001b8

08001470 <__errno>:
 8001470:	4b01      	ldr	r3, [pc, #4]	; (8001478 <__errno+0x8>)
 8001472:	6818      	ldr	r0, [r3, #0]
 8001474:	4770      	bx	lr
 8001476:	bf00      	nop
 8001478:	20000058 	.word	0x20000058

0800147c <__libc_init_array>:
 800147c:	b570      	push	{r4, r5, r6, lr}
 800147e:	4d0d      	ldr	r5, [pc, #52]	; (80014b4 <__libc_init_array+0x38>)
 8001480:	4c0d      	ldr	r4, [pc, #52]	; (80014b8 <__libc_init_array+0x3c>)
 8001482:	1b64      	subs	r4, r4, r5
 8001484:	10a4      	asrs	r4, r4, #2
 8001486:	2600      	movs	r6, #0
 8001488:	42a6      	cmp	r6, r4
 800148a:	d109      	bne.n	80014a0 <__libc_init_array+0x24>
 800148c:	4d0b      	ldr	r5, [pc, #44]	; (80014bc <__libc_init_array+0x40>)
 800148e:	4c0c      	ldr	r4, [pc, #48]	; (80014c0 <__libc_init_array+0x44>)
 8001490:	f000 fd20 	bl	8001ed4 <_init>
 8001494:	1b64      	subs	r4, r4, r5
 8001496:	10a4      	asrs	r4, r4, #2
 8001498:	2600      	movs	r6, #0
 800149a:	42a6      	cmp	r6, r4
 800149c:	d105      	bne.n	80014aa <__libc_init_array+0x2e>
 800149e:	bd70      	pop	{r4, r5, r6, pc}
 80014a0:	f855 3b04 	ldr.w	r3, [r5], #4
 80014a4:	4798      	blx	r3
 80014a6:	3601      	adds	r6, #1
 80014a8:	e7ee      	b.n	8001488 <__libc_init_array+0xc>
 80014aa:	f855 3b04 	ldr.w	r3, [r5], #4
 80014ae:	4798      	blx	r3
 80014b0:	3601      	adds	r6, #1
 80014b2:	e7f2      	b.n	800149a <__libc_init_array+0x1e>
 80014b4:	08001f7c 	.word	0x08001f7c
 80014b8:	08001f7c 	.word	0x08001f7c
 80014bc:	08001f7c 	.word	0x08001f7c
 80014c0:	08001f80 	.word	0x08001f80

080014c4 <__retarget_lock_acquire_recursive>:
 80014c4:	4770      	bx	lr

080014c6 <__retarget_lock_release_recursive>:
 80014c6:	4770      	bx	lr

080014c8 <_free_r>:
 80014c8:	b538      	push	{r3, r4, r5, lr}
 80014ca:	4605      	mov	r5, r0
 80014cc:	2900      	cmp	r1, #0
 80014ce:	d041      	beq.n	8001554 <_free_r+0x8c>
 80014d0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80014d4:	1f0c      	subs	r4, r1, #4
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	bfb8      	it	lt
 80014da:	18e4      	addlt	r4, r4, r3
 80014dc:	f000 f8de 	bl	800169c <__malloc_lock>
 80014e0:	4a1d      	ldr	r2, [pc, #116]	; (8001558 <_free_r+0x90>)
 80014e2:	6813      	ldr	r3, [r2, #0]
 80014e4:	b933      	cbnz	r3, 80014f4 <_free_r+0x2c>
 80014e6:	6063      	str	r3, [r4, #4]
 80014e8:	6014      	str	r4, [r2, #0]
 80014ea:	4628      	mov	r0, r5
 80014ec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80014f0:	f000 b8da 	b.w	80016a8 <__malloc_unlock>
 80014f4:	42a3      	cmp	r3, r4
 80014f6:	d908      	bls.n	800150a <_free_r+0x42>
 80014f8:	6820      	ldr	r0, [r4, #0]
 80014fa:	1821      	adds	r1, r4, r0
 80014fc:	428b      	cmp	r3, r1
 80014fe:	bf01      	itttt	eq
 8001500:	6819      	ldreq	r1, [r3, #0]
 8001502:	685b      	ldreq	r3, [r3, #4]
 8001504:	1809      	addeq	r1, r1, r0
 8001506:	6021      	streq	r1, [r4, #0]
 8001508:	e7ed      	b.n	80014e6 <_free_r+0x1e>
 800150a:	461a      	mov	r2, r3
 800150c:	685b      	ldr	r3, [r3, #4]
 800150e:	b10b      	cbz	r3, 8001514 <_free_r+0x4c>
 8001510:	42a3      	cmp	r3, r4
 8001512:	d9fa      	bls.n	800150a <_free_r+0x42>
 8001514:	6811      	ldr	r1, [r2, #0]
 8001516:	1850      	adds	r0, r2, r1
 8001518:	42a0      	cmp	r0, r4
 800151a:	d10b      	bne.n	8001534 <_free_r+0x6c>
 800151c:	6820      	ldr	r0, [r4, #0]
 800151e:	4401      	add	r1, r0
 8001520:	1850      	adds	r0, r2, r1
 8001522:	4283      	cmp	r3, r0
 8001524:	6011      	str	r1, [r2, #0]
 8001526:	d1e0      	bne.n	80014ea <_free_r+0x22>
 8001528:	6818      	ldr	r0, [r3, #0]
 800152a:	685b      	ldr	r3, [r3, #4]
 800152c:	6053      	str	r3, [r2, #4]
 800152e:	4408      	add	r0, r1
 8001530:	6010      	str	r0, [r2, #0]
 8001532:	e7da      	b.n	80014ea <_free_r+0x22>
 8001534:	d902      	bls.n	800153c <_free_r+0x74>
 8001536:	230c      	movs	r3, #12
 8001538:	602b      	str	r3, [r5, #0]
 800153a:	e7d6      	b.n	80014ea <_free_r+0x22>
 800153c:	6820      	ldr	r0, [r4, #0]
 800153e:	1821      	adds	r1, r4, r0
 8001540:	428b      	cmp	r3, r1
 8001542:	bf04      	itt	eq
 8001544:	6819      	ldreq	r1, [r3, #0]
 8001546:	685b      	ldreq	r3, [r3, #4]
 8001548:	6063      	str	r3, [r4, #4]
 800154a:	bf04      	itt	eq
 800154c:	1809      	addeq	r1, r1, r0
 800154e:	6021      	streq	r1, [r4, #0]
 8001550:	6054      	str	r4, [r2, #4]
 8001552:	e7ca      	b.n	80014ea <_free_r+0x22>
 8001554:	bd38      	pop	{r3, r4, r5, pc}
 8001556:	bf00      	nop
 8001558:	200001c0 	.word	0x200001c0

0800155c <sbrk_aligned>:
 800155c:	b570      	push	{r4, r5, r6, lr}
 800155e:	4e0e      	ldr	r6, [pc, #56]	; (8001598 <sbrk_aligned+0x3c>)
 8001560:	460c      	mov	r4, r1
 8001562:	6831      	ldr	r1, [r6, #0]
 8001564:	4605      	mov	r5, r0
 8001566:	b911      	cbnz	r1, 800156e <sbrk_aligned+0x12>
 8001568:	f000 fca4 	bl	8001eb4 <_sbrk_r>
 800156c:	6030      	str	r0, [r6, #0]
 800156e:	4621      	mov	r1, r4
 8001570:	4628      	mov	r0, r5
 8001572:	f000 fc9f 	bl	8001eb4 <_sbrk_r>
 8001576:	1c43      	adds	r3, r0, #1
 8001578:	d00a      	beq.n	8001590 <sbrk_aligned+0x34>
 800157a:	1cc4      	adds	r4, r0, #3
 800157c:	f024 0403 	bic.w	r4, r4, #3
 8001580:	42a0      	cmp	r0, r4
 8001582:	d007      	beq.n	8001594 <sbrk_aligned+0x38>
 8001584:	1a21      	subs	r1, r4, r0
 8001586:	4628      	mov	r0, r5
 8001588:	f000 fc94 	bl	8001eb4 <_sbrk_r>
 800158c:	3001      	adds	r0, #1
 800158e:	d101      	bne.n	8001594 <sbrk_aligned+0x38>
 8001590:	f04f 34ff 	mov.w	r4, #4294967295
 8001594:	4620      	mov	r0, r4
 8001596:	bd70      	pop	{r4, r5, r6, pc}
 8001598:	200001c4 	.word	0x200001c4

0800159c <_malloc_r>:
 800159c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80015a0:	1ccd      	adds	r5, r1, #3
 80015a2:	f025 0503 	bic.w	r5, r5, #3
 80015a6:	3508      	adds	r5, #8
 80015a8:	2d0c      	cmp	r5, #12
 80015aa:	bf38      	it	cc
 80015ac:	250c      	movcc	r5, #12
 80015ae:	2d00      	cmp	r5, #0
 80015b0:	4607      	mov	r7, r0
 80015b2:	db01      	blt.n	80015b8 <_malloc_r+0x1c>
 80015b4:	42a9      	cmp	r1, r5
 80015b6:	d905      	bls.n	80015c4 <_malloc_r+0x28>
 80015b8:	230c      	movs	r3, #12
 80015ba:	603b      	str	r3, [r7, #0]
 80015bc:	2600      	movs	r6, #0
 80015be:	4630      	mov	r0, r6
 80015c0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80015c4:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8001698 <_malloc_r+0xfc>
 80015c8:	f000 f868 	bl	800169c <__malloc_lock>
 80015cc:	f8d8 3000 	ldr.w	r3, [r8]
 80015d0:	461c      	mov	r4, r3
 80015d2:	bb5c      	cbnz	r4, 800162c <_malloc_r+0x90>
 80015d4:	4629      	mov	r1, r5
 80015d6:	4638      	mov	r0, r7
 80015d8:	f7ff ffc0 	bl	800155c <sbrk_aligned>
 80015dc:	1c43      	adds	r3, r0, #1
 80015de:	4604      	mov	r4, r0
 80015e0:	d155      	bne.n	800168e <_malloc_r+0xf2>
 80015e2:	f8d8 4000 	ldr.w	r4, [r8]
 80015e6:	4626      	mov	r6, r4
 80015e8:	2e00      	cmp	r6, #0
 80015ea:	d145      	bne.n	8001678 <_malloc_r+0xdc>
 80015ec:	2c00      	cmp	r4, #0
 80015ee:	d048      	beq.n	8001682 <_malloc_r+0xe6>
 80015f0:	6823      	ldr	r3, [r4, #0]
 80015f2:	4631      	mov	r1, r6
 80015f4:	4638      	mov	r0, r7
 80015f6:	eb04 0903 	add.w	r9, r4, r3
 80015fa:	f000 fc5b 	bl	8001eb4 <_sbrk_r>
 80015fe:	4581      	cmp	r9, r0
 8001600:	d13f      	bne.n	8001682 <_malloc_r+0xe6>
 8001602:	6821      	ldr	r1, [r4, #0]
 8001604:	1a6d      	subs	r5, r5, r1
 8001606:	4629      	mov	r1, r5
 8001608:	4638      	mov	r0, r7
 800160a:	f7ff ffa7 	bl	800155c <sbrk_aligned>
 800160e:	3001      	adds	r0, #1
 8001610:	d037      	beq.n	8001682 <_malloc_r+0xe6>
 8001612:	6823      	ldr	r3, [r4, #0]
 8001614:	442b      	add	r3, r5
 8001616:	6023      	str	r3, [r4, #0]
 8001618:	f8d8 3000 	ldr.w	r3, [r8]
 800161c:	2b00      	cmp	r3, #0
 800161e:	d038      	beq.n	8001692 <_malloc_r+0xf6>
 8001620:	685a      	ldr	r2, [r3, #4]
 8001622:	42a2      	cmp	r2, r4
 8001624:	d12b      	bne.n	800167e <_malloc_r+0xe2>
 8001626:	2200      	movs	r2, #0
 8001628:	605a      	str	r2, [r3, #4]
 800162a:	e00f      	b.n	800164c <_malloc_r+0xb0>
 800162c:	6822      	ldr	r2, [r4, #0]
 800162e:	1b52      	subs	r2, r2, r5
 8001630:	d41f      	bmi.n	8001672 <_malloc_r+0xd6>
 8001632:	2a0b      	cmp	r2, #11
 8001634:	d917      	bls.n	8001666 <_malloc_r+0xca>
 8001636:	1961      	adds	r1, r4, r5
 8001638:	42a3      	cmp	r3, r4
 800163a:	6025      	str	r5, [r4, #0]
 800163c:	bf18      	it	ne
 800163e:	6059      	strne	r1, [r3, #4]
 8001640:	6863      	ldr	r3, [r4, #4]
 8001642:	bf08      	it	eq
 8001644:	f8c8 1000 	streq.w	r1, [r8]
 8001648:	5162      	str	r2, [r4, r5]
 800164a:	604b      	str	r3, [r1, #4]
 800164c:	4638      	mov	r0, r7
 800164e:	f104 060b 	add.w	r6, r4, #11
 8001652:	f000 f829 	bl	80016a8 <__malloc_unlock>
 8001656:	f026 0607 	bic.w	r6, r6, #7
 800165a:	1d23      	adds	r3, r4, #4
 800165c:	1af2      	subs	r2, r6, r3
 800165e:	d0ae      	beq.n	80015be <_malloc_r+0x22>
 8001660:	1b9b      	subs	r3, r3, r6
 8001662:	50a3      	str	r3, [r4, r2]
 8001664:	e7ab      	b.n	80015be <_malloc_r+0x22>
 8001666:	42a3      	cmp	r3, r4
 8001668:	6862      	ldr	r2, [r4, #4]
 800166a:	d1dd      	bne.n	8001628 <_malloc_r+0x8c>
 800166c:	f8c8 2000 	str.w	r2, [r8]
 8001670:	e7ec      	b.n	800164c <_malloc_r+0xb0>
 8001672:	4623      	mov	r3, r4
 8001674:	6864      	ldr	r4, [r4, #4]
 8001676:	e7ac      	b.n	80015d2 <_malloc_r+0x36>
 8001678:	4634      	mov	r4, r6
 800167a:	6876      	ldr	r6, [r6, #4]
 800167c:	e7b4      	b.n	80015e8 <_malloc_r+0x4c>
 800167e:	4613      	mov	r3, r2
 8001680:	e7cc      	b.n	800161c <_malloc_r+0x80>
 8001682:	230c      	movs	r3, #12
 8001684:	603b      	str	r3, [r7, #0]
 8001686:	4638      	mov	r0, r7
 8001688:	f000 f80e 	bl	80016a8 <__malloc_unlock>
 800168c:	e797      	b.n	80015be <_malloc_r+0x22>
 800168e:	6025      	str	r5, [r4, #0]
 8001690:	e7dc      	b.n	800164c <_malloc_r+0xb0>
 8001692:	605b      	str	r3, [r3, #4]
 8001694:	deff      	udf	#255	; 0xff
 8001696:	bf00      	nop
 8001698:	200001c0 	.word	0x200001c0

0800169c <__malloc_lock>:
 800169c:	4801      	ldr	r0, [pc, #4]	; (80016a4 <__malloc_lock+0x8>)
 800169e:	f7ff bf11 	b.w	80014c4 <__retarget_lock_acquire_recursive>
 80016a2:	bf00      	nop
 80016a4:	200001bc 	.word	0x200001bc

080016a8 <__malloc_unlock>:
 80016a8:	4801      	ldr	r0, [pc, #4]	; (80016b0 <__malloc_unlock+0x8>)
 80016aa:	f7ff bf0c 	b.w	80014c6 <__retarget_lock_release_recursive>
 80016ae:	bf00      	nop
 80016b0:	200001bc 	.word	0x200001bc

080016b4 <__sfputc_r>:
 80016b4:	6893      	ldr	r3, [r2, #8]
 80016b6:	3b01      	subs	r3, #1
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	b410      	push	{r4}
 80016bc:	6093      	str	r3, [r2, #8]
 80016be:	da07      	bge.n	80016d0 <__sfputc_r+0x1c>
 80016c0:	6994      	ldr	r4, [r2, #24]
 80016c2:	42a3      	cmp	r3, r4
 80016c4:	db01      	blt.n	80016ca <__sfputc_r+0x16>
 80016c6:	290a      	cmp	r1, #10
 80016c8:	d102      	bne.n	80016d0 <__sfputc_r+0x1c>
 80016ca:	bc10      	pop	{r4}
 80016cc:	f7ff bded 	b.w	80012aa <__swbuf_r>
 80016d0:	6813      	ldr	r3, [r2, #0]
 80016d2:	1c58      	adds	r0, r3, #1
 80016d4:	6010      	str	r0, [r2, #0]
 80016d6:	7019      	strb	r1, [r3, #0]
 80016d8:	4608      	mov	r0, r1
 80016da:	bc10      	pop	{r4}
 80016dc:	4770      	bx	lr

080016de <__sfputs_r>:
 80016de:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80016e0:	4606      	mov	r6, r0
 80016e2:	460f      	mov	r7, r1
 80016e4:	4614      	mov	r4, r2
 80016e6:	18d5      	adds	r5, r2, r3
 80016e8:	42ac      	cmp	r4, r5
 80016ea:	d101      	bne.n	80016f0 <__sfputs_r+0x12>
 80016ec:	2000      	movs	r0, #0
 80016ee:	e007      	b.n	8001700 <__sfputs_r+0x22>
 80016f0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80016f4:	463a      	mov	r2, r7
 80016f6:	4630      	mov	r0, r6
 80016f8:	f7ff ffdc 	bl	80016b4 <__sfputc_r>
 80016fc:	1c43      	adds	r3, r0, #1
 80016fe:	d1f3      	bne.n	80016e8 <__sfputs_r+0xa>
 8001700:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08001704 <_vfiprintf_r>:
 8001704:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001708:	460d      	mov	r5, r1
 800170a:	b09d      	sub	sp, #116	; 0x74
 800170c:	4614      	mov	r4, r2
 800170e:	4698      	mov	r8, r3
 8001710:	4606      	mov	r6, r0
 8001712:	b118      	cbz	r0, 800171c <_vfiprintf_r+0x18>
 8001714:	6a03      	ldr	r3, [r0, #32]
 8001716:	b90b      	cbnz	r3, 800171c <_vfiprintf_r+0x18>
 8001718:	f7ff fce0 	bl	80010dc <__sinit>
 800171c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800171e:	07d9      	lsls	r1, r3, #31
 8001720:	d405      	bmi.n	800172e <_vfiprintf_r+0x2a>
 8001722:	89ab      	ldrh	r3, [r5, #12]
 8001724:	059a      	lsls	r2, r3, #22
 8001726:	d402      	bmi.n	800172e <_vfiprintf_r+0x2a>
 8001728:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800172a:	f7ff fecb 	bl	80014c4 <__retarget_lock_acquire_recursive>
 800172e:	89ab      	ldrh	r3, [r5, #12]
 8001730:	071b      	lsls	r3, r3, #28
 8001732:	d501      	bpl.n	8001738 <_vfiprintf_r+0x34>
 8001734:	692b      	ldr	r3, [r5, #16]
 8001736:	b99b      	cbnz	r3, 8001760 <_vfiprintf_r+0x5c>
 8001738:	4629      	mov	r1, r5
 800173a:	4630      	mov	r0, r6
 800173c:	f7ff fdf2 	bl	8001324 <__swsetup_r>
 8001740:	b170      	cbz	r0, 8001760 <_vfiprintf_r+0x5c>
 8001742:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8001744:	07dc      	lsls	r4, r3, #31
 8001746:	d504      	bpl.n	8001752 <_vfiprintf_r+0x4e>
 8001748:	f04f 30ff 	mov.w	r0, #4294967295
 800174c:	b01d      	add	sp, #116	; 0x74
 800174e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001752:	89ab      	ldrh	r3, [r5, #12]
 8001754:	0598      	lsls	r0, r3, #22
 8001756:	d4f7      	bmi.n	8001748 <_vfiprintf_r+0x44>
 8001758:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800175a:	f7ff feb4 	bl	80014c6 <__retarget_lock_release_recursive>
 800175e:	e7f3      	b.n	8001748 <_vfiprintf_r+0x44>
 8001760:	2300      	movs	r3, #0
 8001762:	9309      	str	r3, [sp, #36]	; 0x24
 8001764:	2320      	movs	r3, #32
 8001766:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800176a:	f8cd 800c 	str.w	r8, [sp, #12]
 800176e:	2330      	movs	r3, #48	; 0x30
 8001770:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8001924 <_vfiprintf_r+0x220>
 8001774:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8001778:	f04f 0901 	mov.w	r9, #1
 800177c:	4623      	mov	r3, r4
 800177e:	469a      	mov	sl, r3
 8001780:	f813 2b01 	ldrb.w	r2, [r3], #1
 8001784:	b10a      	cbz	r2, 800178a <_vfiprintf_r+0x86>
 8001786:	2a25      	cmp	r2, #37	; 0x25
 8001788:	d1f9      	bne.n	800177e <_vfiprintf_r+0x7a>
 800178a:	ebba 0b04 	subs.w	fp, sl, r4
 800178e:	d00b      	beq.n	80017a8 <_vfiprintf_r+0xa4>
 8001790:	465b      	mov	r3, fp
 8001792:	4622      	mov	r2, r4
 8001794:	4629      	mov	r1, r5
 8001796:	4630      	mov	r0, r6
 8001798:	f7ff ffa1 	bl	80016de <__sfputs_r>
 800179c:	3001      	adds	r0, #1
 800179e:	f000 80a9 	beq.w	80018f4 <_vfiprintf_r+0x1f0>
 80017a2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80017a4:	445a      	add	r2, fp
 80017a6:	9209      	str	r2, [sp, #36]	; 0x24
 80017a8:	f89a 3000 	ldrb.w	r3, [sl]
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	f000 80a1 	beq.w	80018f4 <_vfiprintf_r+0x1f0>
 80017b2:	2300      	movs	r3, #0
 80017b4:	f04f 32ff 	mov.w	r2, #4294967295
 80017b8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80017bc:	f10a 0a01 	add.w	sl, sl, #1
 80017c0:	9304      	str	r3, [sp, #16]
 80017c2:	9307      	str	r3, [sp, #28]
 80017c4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80017c8:	931a      	str	r3, [sp, #104]	; 0x68
 80017ca:	4654      	mov	r4, sl
 80017cc:	2205      	movs	r2, #5
 80017ce:	f814 1b01 	ldrb.w	r1, [r4], #1
 80017d2:	4854      	ldr	r0, [pc, #336]	; (8001924 <_vfiprintf_r+0x220>)
 80017d4:	f7fe fd14 	bl	8000200 <memchr>
 80017d8:	9a04      	ldr	r2, [sp, #16]
 80017da:	b9d8      	cbnz	r0, 8001814 <_vfiprintf_r+0x110>
 80017dc:	06d1      	lsls	r1, r2, #27
 80017de:	bf44      	itt	mi
 80017e0:	2320      	movmi	r3, #32
 80017e2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80017e6:	0713      	lsls	r3, r2, #28
 80017e8:	bf44      	itt	mi
 80017ea:	232b      	movmi	r3, #43	; 0x2b
 80017ec:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80017f0:	f89a 3000 	ldrb.w	r3, [sl]
 80017f4:	2b2a      	cmp	r3, #42	; 0x2a
 80017f6:	d015      	beq.n	8001824 <_vfiprintf_r+0x120>
 80017f8:	9a07      	ldr	r2, [sp, #28]
 80017fa:	4654      	mov	r4, sl
 80017fc:	2000      	movs	r0, #0
 80017fe:	f04f 0c0a 	mov.w	ip, #10
 8001802:	4621      	mov	r1, r4
 8001804:	f811 3b01 	ldrb.w	r3, [r1], #1
 8001808:	3b30      	subs	r3, #48	; 0x30
 800180a:	2b09      	cmp	r3, #9
 800180c:	d94d      	bls.n	80018aa <_vfiprintf_r+0x1a6>
 800180e:	b1b0      	cbz	r0, 800183e <_vfiprintf_r+0x13a>
 8001810:	9207      	str	r2, [sp, #28]
 8001812:	e014      	b.n	800183e <_vfiprintf_r+0x13a>
 8001814:	eba0 0308 	sub.w	r3, r0, r8
 8001818:	fa09 f303 	lsl.w	r3, r9, r3
 800181c:	4313      	orrs	r3, r2
 800181e:	9304      	str	r3, [sp, #16]
 8001820:	46a2      	mov	sl, r4
 8001822:	e7d2      	b.n	80017ca <_vfiprintf_r+0xc6>
 8001824:	9b03      	ldr	r3, [sp, #12]
 8001826:	1d19      	adds	r1, r3, #4
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	9103      	str	r1, [sp, #12]
 800182c:	2b00      	cmp	r3, #0
 800182e:	bfbb      	ittet	lt
 8001830:	425b      	neglt	r3, r3
 8001832:	f042 0202 	orrlt.w	r2, r2, #2
 8001836:	9307      	strge	r3, [sp, #28]
 8001838:	9307      	strlt	r3, [sp, #28]
 800183a:	bfb8      	it	lt
 800183c:	9204      	strlt	r2, [sp, #16]
 800183e:	7823      	ldrb	r3, [r4, #0]
 8001840:	2b2e      	cmp	r3, #46	; 0x2e
 8001842:	d10c      	bne.n	800185e <_vfiprintf_r+0x15a>
 8001844:	7863      	ldrb	r3, [r4, #1]
 8001846:	2b2a      	cmp	r3, #42	; 0x2a
 8001848:	d134      	bne.n	80018b4 <_vfiprintf_r+0x1b0>
 800184a:	9b03      	ldr	r3, [sp, #12]
 800184c:	1d1a      	adds	r2, r3, #4
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	9203      	str	r2, [sp, #12]
 8001852:	2b00      	cmp	r3, #0
 8001854:	bfb8      	it	lt
 8001856:	f04f 33ff 	movlt.w	r3, #4294967295
 800185a:	3402      	adds	r4, #2
 800185c:	9305      	str	r3, [sp, #20]
 800185e:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8001928 <_vfiprintf_r+0x224>
 8001862:	7821      	ldrb	r1, [r4, #0]
 8001864:	2203      	movs	r2, #3
 8001866:	4650      	mov	r0, sl
 8001868:	f7fe fcca 	bl	8000200 <memchr>
 800186c:	b138      	cbz	r0, 800187e <_vfiprintf_r+0x17a>
 800186e:	9b04      	ldr	r3, [sp, #16]
 8001870:	eba0 000a 	sub.w	r0, r0, sl
 8001874:	2240      	movs	r2, #64	; 0x40
 8001876:	4082      	lsls	r2, r0
 8001878:	4313      	orrs	r3, r2
 800187a:	3401      	adds	r4, #1
 800187c:	9304      	str	r3, [sp, #16]
 800187e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001882:	482a      	ldr	r0, [pc, #168]	; (800192c <_vfiprintf_r+0x228>)
 8001884:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8001888:	2206      	movs	r2, #6
 800188a:	f7fe fcb9 	bl	8000200 <memchr>
 800188e:	2800      	cmp	r0, #0
 8001890:	d03f      	beq.n	8001912 <_vfiprintf_r+0x20e>
 8001892:	4b27      	ldr	r3, [pc, #156]	; (8001930 <_vfiprintf_r+0x22c>)
 8001894:	bb1b      	cbnz	r3, 80018de <_vfiprintf_r+0x1da>
 8001896:	9b03      	ldr	r3, [sp, #12]
 8001898:	3307      	adds	r3, #7
 800189a:	f023 0307 	bic.w	r3, r3, #7
 800189e:	3308      	adds	r3, #8
 80018a0:	9303      	str	r3, [sp, #12]
 80018a2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80018a4:	443b      	add	r3, r7
 80018a6:	9309      	str	r3, [sp, #36]	; 0x24
 80018a8:	e768      	b.n	800177c <_vfiprintf_r+0x78>
 80018aa:	fb0c 3202 	mla	r2, ip, r2, r3
 80018ae:	460c      	mov	r4, r1
 80018b0:	2001      	movs	r0, #1
 80018b2:	e7a6      	b.n	8001802 <_vfiprintf_r+0xfe>
 80018b4:	2300      	movs	r3, #0
 80018b6:	3401      	adds	r4, #1
 80018b8:	9305      	str	r3, [sp, #20]
 80018ba:	4619      	mov	r1, r3
 80018bc:	f04f 0c0a 	mov.w	ip, #10
 80018c0:	4620      	mov	r0, r4
 80018c2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80018c6:	3a30      	subs	r2, #48	; 0x30
 80018c8:	2a09      	cmp	r2, #9
 80018ca:	d903      	bls.n	80018d4 <_vfiprintf_r+0x1d0>
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d0c6      	beq.n	800185e <_vfiprintf_r+0x15a>
 80018d0:	9105      	str	r1, [sp, #20]
 80018d2:	e7c4      	b.n	800185e <_vfiprintf_r+0x15a>
 80018d4:	fb0c 2101 	mla	r1, ip, r1, r2
 80018d8:	4604      	mov	r4, r0
 80018da:	2301      	movs	r3, #1
 80018dc:	e7f0      	b.n	80018c0 <_vfiprintf_r+0x1bc>
 80018de:	ab03      	add	r3, sp, #12
 80018e0:	9300      	str	r3, [sp, #0]
 80018e2:	462a      	mov	r2, r5
 80018e4:	4b13      	ldr	r3, [pc, #76]	; (8001934 <_vfiprintf_r+0x230>)
 80018e6:	a904      	add	r1, sp, #16
 80018e8:	4630      	mov	r0, r6
 80018ea:	f3af 8000 	nop.w
 80018ee:	4607      	mov	r7, r0
 80018f0:	1c78      	adds	r0, r7, #1
 80018f2:	d1d6      	bne.n	80018a2 <_vfiprintf_r+0x19e>
 80018f4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80018f6:	07d9      	lsls	r1, r3, #31
 80018f8:	d405      	bmi.n	8001906 <_vfiprintf_r+0x202>
 80018fa:	89ab      	ldrh	r3, [r5, #12]
 80018fc:	059a      	lsls	r2, r3, #22
 80018fe:	d402      	bmi.n	8001906 <_vfiprintf_r+0x202>
 8001900:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8001902:	f7ff fde0 	bl	80014c6 <__retarget_lock_release_recursive>
 8001906:	89ab      	ldrh	r3, [r5, #12]
 8001908:	065b      	lsls	r3, r3, #25
 800190a:	f53f af1d 	bmi.w	8001748 <_vfiprintf_r+0x44>
 800190e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8001910:	e71c      	b.n	800174c <_vfiprintf_r+0x48>
 8001912:	ab03      	add	r3, sp, #12
 8001914:	9300      	str	r3, [sp, #0]
 8001916:	462a      	mov	r2, r5
 8001918:	4b06      	ldr	r3, [pc, #24]	; (8001934 <_vfiprintf_r+0x230>)
 800191a:	a904      	add	r1, sp, #16
 800191c:	4630      	mov	r0, r6
 800191e:	f000 f879 	bl	8001a14 <_printf_i>
 8001922:	e7e4      	b.n	80018ee <_vfiprintf_r+0x1ea>
 8001924:	08001f47 	.word	0x08001f47
 8001928:	08001f4d 	.word	0x08001f4d
 800192c:	08001f51 	.word	0x08001f51
 8001930:	00000000 	.word	0x00000000
 8001934:	080016df 	.word	0x080016df

08001938 <_printf_common>:
 8001938:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800193c:	4616      	mov	r6, r2
 800193e:	4699      	mov	r9, r3
 8001940:	688a      	ldr	r2, [r1, #8]
 8001942:	690b      	ldr	r3, [r1, #16]
 8001944:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8001948:	4293      	cmp	r3, r2
 800194a:	bfb8      	it	lt
 800194c:	4613      	movlt	r3, r2
 800194e:	6033      	str	r3, [r6, #0]
 8001950:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8001954:	4607      	mov	r7, r0
 8001956:	460c      	mov	r4, r1
 8001958:	b10a      	cbz	r2, 800195e <_printf_common+0x26>
 800195a:	3301      	adds	r3, #1
 800195c:	6033      	str	r3, [r6, #0]
 800195e:	6823      	ldr	r3, [r4, #0]
 8001960:	0699      	lsls	r1, r3, #26
 8001962:	bf42      	ittt	mi
 8001964:	6833      	ldrmi	r3, [r6, #0]
 8001966:	3302      	addmi	r3, #2
 8001968:	6033      	strmi	r3, [r6, #0]
 800196a:	6825      	ldr	r5, [r4, #0]
 800196c:	f015 0506 	ands.w	r5, r5, #6
 8001970:	d106      	bne.n	8001980 <_printf_common+0x48>
 8001972:	f104 0a19 	add.w	sl, r4, #25
 8001976:	68e3      	ldr	r3, [r4, #12]
 8001978:	6832      	ldr	r2, [r6, #0]
 800197a:	1a9b      	subs	r3, r3, r2
 800197c:	42ab      	cmp	r3, r5
 800197e:	dc26      	bgt.n	80019ce <_printf_common+0x96>
 8001980:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8001984:	1e13      	subs	r3, r2, #0
 8001986:	6822      	ldr	r2, [r4, #0]
 8001988:	bf18      	it	ne
 800198a:	2301      	movne	r3, #1
 800198c:	0692      	lsls	r2, r2, #26
 800198e:	d42b      	bmi.n	80019e8 <_printf_common+0xb0>
 8001990:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8001994:	4649      	mov	r1, r9
 8001996:	4638      	mov	r0, r7
 8001998:	47c0      	blx	r8
 800199a:	3001      	adds	r0, #1
 800199c:	d01e      	beq.n	80019dc <_printf_common+0xa4>
 800199e:	6823      	ldr	r3, [r4, #0]
 80019a0:	6922      	ldr	r2, [r4, #16]
 80019a2:	f003 0306 	and.w	r3, r3, #6
 80019a6:	2b04      	cmp	r3, #4
 80019a8:	bf02      	ittt	eq
 80019aa:	68e5      	ldreq	r5, [r4, #12]
 80019ac:	6833      	ldreq	r3, [r6, #0]
 80019ae:	1aed      	subeq	r5, r5, r3
 80019b0:	68a3      	ldr	r3, [r4, #8]
 80019b2:	bf0c      	ite	eq
 80019b4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80019b8:	2500      	movne	r5, #0
 80019ba:	4293      	cmp	r3, r2
 80019bc:	bfc4      	itt	gt
 80019be:	1a9b      	subgt	r3, r3, r2
 80019c0:	18ed      	addgt	r5, r5, r3
 80019c2:	2600      	movs	r6, #0
 80019c4:	341a      	adds	r4, #26
 80019c6:	42b5      	cmp	r5, r6
 80019c8:	d11a      	bne.n	8001a00 <_printf_common+0xc8>
 80019ca:	2000      	movs	r0, #0
 80019cc:	e008      	b.n	80019e0 <_printf_common+0xa8>
 80019ce:	2301      	movs	r3, #1
 80019d0:	4652      	mov	r2, sl
 80019d2:	4649      	mov	r1, r9
 80019d4:	4638      	mov	r0, r7
 80019d6:	47c0      	blx	r8
 80019d8:	3001      	adds	r0, #1
 80019da:	d103      	bne.n	80019e4 <_printf_common+0xac>
 80019dc:	f04f 30ff 	mov.w	r0, #4294967295
 80019e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80019e4:	3501      	adds	r5, #1
 80019e6:	e7c6      	b.n	8001976 <_printf_common+0x3e>
 80019e8:	18e1      	adds	r1, r4, r3
 80019ea:	1c5a      	adds	r2, r3, #1
 80019ec:	2030      	movs	r0, #48	; 0x30
 80019ee:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80019f2:	4422      	add	r2, r4
 80019f4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80019f8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80019fc:	3302      	adds	r3, #2
 80019fe:	e7c7      	b.n	8001990 <_printf_common+0x58>
 8001a00:	2301      	movs	r3, #1
 8001a02:	4622      	mov	r2, r4
 8001a04:	4649      	mov	r1, r9
 8001a06:	4638      	mov	r0, r7
 8001a08:	47c0      	blx	r8
 8001a0a:	3001      	adds	r0, #1
 8001a0c:	d0e6      	beq.n	80019dc <_printf_common+0xa4>
 8001a0e:	3601      	adds	r6, #1
 8001a10:	e7d9      	b.n	80019c6 <_printf_common+0x8e>
	...

08001a14 <_printf_i>:
 8001a14:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8001a18:	7e0f      	ldrb	r7, [r1, #24]
 8001a1a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8001a1c:	2f78      	cmp	r7, #120	; 0x78
 8001a1e:	4691      	mov	r9, r2
 8001a20:	4680      	mov	r8, r0
 8001a22:	460c      	mov	r4, r1
 8001a24:	469a      	mov	sl, r3
 8001a26:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8001a2a:	d807      	bhi.n	8001a3c <_printf_i+0x28>
 8001a2c:	2f62      	cmp	r7, #98	; 0x62
 8001a2e:	d80a      	bhi.n	8001a46 <_printf_i+0x32>
 8001a30:	2f00      	cmp	r7, #0
 8001a32:	f000 80d4 	beq.w	8001bde <_printf_i+0x1ca>
 8001a36:	2f58      	cmp	r7, #88	; 0x58
 8001a38:	f000 80c0 	beq.w	8001bbc <_printf_i+0x1a8>
 8001a3c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8001a40:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8001a44:	e03a      	b.n	8001abc <_printf_i+0xa8>
 8001a46:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8001a4a:	2b15      	cmp	r3, #21
 8001a4c:	d8f6      	bhi.n	8001a3c <_printf_i+0x28>
 8001a4e:	a101      	add	r1, pc, #4	; (adr r1, 8001a54 <_printf_i+0x40>)
 8001a50:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8001a54:	08001aad 	.word	0x08001aad
 8001a58:	08001ac1 	.word	0x08001ac1
 8001a5c:	08001a3d 	.word	0x08001a3d
 8001a60:	08001a3d 	.word	0x08001a3d
 8001a64:	08001a3d 	.word	0x08001a3d
 8001a68:	08001a3d 	.word	0x08001a3d
 8001a6c:	08001ac1 	.word	0x08001ac1
 8001a70:	08001a3d 	.word	0x08001a3d
 8001a74:	08001a3d 	.word	0x08001a3d
 8001a78:	08001a3d 	.word	0x08001a3d
 8001a7c:	08001a3d 	.word	0x08001a3d
 8001a80:	08001bc5 	.word	0x08001bc5
 8001a84:	08001aed 	.word	0x08001aed
 8001a88:	08001b7f 	.word	0x08001b7f
 8001a8c:	08001a3d 	.word	0x08001a3d
 8001a90:	08001a3d 	.word	0x08001a3d
 8001a94:	08001be7 	.word	0x08001be7
 8001a98:	08001a3d 	.word	0x08001a3d
 8001a9c:	08001aed 	.word	0x08001aed
 8001aa0:	08001a3d 	.word	0x08001a3d
 8001aa4:	08001a3d 	.word	0x08001a3d
 8001aa8:	08001b87 	.word	0x08001b87
 8001aac:	682b      	ldr	r3, [r5, #0]
 8001aae:	1d1a      	adds	r2, r3, #4
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	602a      	str	r2, [r5, #0]
 8001ab4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8001ab8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8001abc:	2301      	movs	r3, #1
 8001abe:	e09f      	b.n	8001c00 <_printf_i+0x1ec>
 8001ac0:	6820      	ldr	r0, [r4, #0]
 8001ac2:	682b      	ldr	r3, [r5, #0]
 8001ac4:	0607      	lsls	r7, r0, #24
 8001ac6:	f103 0104 	add.w	r1, r3, #4
 8001aca:	6029      	str	r1, [r5, #0]
 8001acc:	d501      	bpl.n	8001ad2 <_printf_i+0xbe>
 8001ace:	681e      	ldr	r6, [r3, #0]
 8001ad0:	e003      	b.n	8001ada <_printf_i+0xc6>
 8001ad2:	0646      	lsls	r6, r0, #25
 8001ad4:	d5fb      	bpl.n	8001ace <_printf_i+0xba>
 8001ad6:	f9b3 6000 	ldrsh.w	r6, [r3]
 8001ada:	2e00      	cmp	r6, #0
 8001adc:	da03      	bge.n	8001ae6 <_printf_i+0xd2>
 8001ade:	232d      	movs	r3, #45	; 0x2d
 8001ae0:	4276      	negs	r6, r6
 8001ae2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001ae6:	485a      	ldr	r0, [pc, #360]	; (8001c50 <_printf_i+0x23c>)
 8001ae8:	230a      	movs	r3, #10
 8001aea:	e012      	b.n	8001b12 <_printf_i+0xfe>
 8001aec:	682b      	ldr	r3, [r5, #0]
 8001aee:	6820      	ldr	r0, [r4, #0]
 8001af0:	1d19      	adds	r1, r3, #4
 8001af2:	6029      	str	r1, [r5, #0]
 8001af4:	0605      	lsls	r5, r0, #24
 8001af6:	d501      	bpl.n	8001afc <_printf_i+0xe8>
 8001af8:	681e      	ldr	r6, [r3, #0]
 8001afa:	e002      	b.n	8001b02 <_printf_i+0xee>
 8001afc:	0641      	lsls	r1, r0, #25
 8001afe:	d5fb      	bpl.n	8001af8 <_printf_i+0xe4>
 8001b00:	881e      	ldrh	r6, [r3, #0]
 8001b02:	4853      	ldr	r0, [pc, #332]	; (8001c50 <_printf_i+0x23c>)
 8001b04:	2f6f      	cmp	r7, #111	; 0x6f
 8001b06:	bf0c      	ite	eq
 8001b08:	2308      	moveq	r3, #8
 8001b0a:	230a      	movne	r3, #10
 8001b0c:	2100      	movs	r1, #0
 8001b0e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8001b12:	6865      	ldr	r5, [r4, #4]
 8001b14:	60a5      	str	r5, [r4, #8]
 8001b16:	2d00      	cmp	r5, #0
 8001b18:	bfa2      	ittt	ge
 8001b1a:	6821      	ldrge	r1, [r4, #0]
 8001b1c:	f021 0104 	bicge.w	r1, r1, #4
 8001b20:	6021      	strge	r1, [r4, #0]
 8001b22:	b90e      	cbnz	r6, 8001b28 <_printf_i+0x114>
 8001b24:	2d00      	cmp	r5, #0
 8001b26:	d04b      	beq.n	8001bc0 <_printf_i+0x1ac>
 8001b28:	4615      	mov	r5, r2
 8001b2a:	fbb6 f1f3 	udiv	r1, r6, r3
 8001b2e:	fb03 6711 	mls	r7, r3, r1, r6
 8001b32:	5dc7      	ldrb	r7, [r0, r7]
 8001b34:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8001b38:	4637      	mov	r7, r6
 8001b3a:	42bb      	cmp	r3, r7
 8001b3c:	460e      	mov	r6, r1
 8001b3e:	d9f4      	bls.n	8001b2a <_printf_i+0x116>
 8001b40:	2b08      	cmp	r3, #8
 8001b42:	d10b      	bne.n	8001b5c <_printf_i+0x148>
 8001b44:	6823      	ldr	r3, [r4, #0]
 8001b46:	07de      	lsls	r6, r3, #31
 8001b48:	d508      	bpl.n	8001b5c <_printf_i+0x148>
 8001b4a:	6923      	ldr	r3, [r4, #16]
 8001b4c:	6861      	ldr	r1, [r4, #4]
 8001b4e:	4299      	cmp	r1, r3
 8001b50:	bfde      	ittt	le
 8001b52:	2330      	movle	r3, #48	; 0x30
 8001b54:	f805 3c01 	strble.w	r3, [r5, #-1]
 8001b58:	f105 35ff 	addle.w	r5, r5, #4294967295
 8001b5c:	1b52      	subs	r2, r2, r5
 8001b5e:	6122      	str	r2, [r4, #16]
 8001b60:	f8cd a000 	str.w	sl, [sp]
 8001b64:	464b      	mov	r3, r9
 8001b66:	aa03      	add	r2, sp, #12
 8001b68:	4621      	mov	r1, r4
 8001b6a:	4640      	mov	r0, r8
 8001b6c:	f7ff fee4 	bl	8001938 <_printf_common>
 8001b70:	3001      	adds	r0, #1
 8001b72:	d14a      	bne.n	8001c0a <_printf_i+0x1f6>
 8001b74:	f04f 30ff 	mov.w	r0, #4294967295
 8001b78:	b004      	add	sp, #16
 8001b7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001b7e:	6823      	ldr	r3, [r4, #0]
 8001b80:	f043 0320 	orr.w	r3, r3, #32
 8001b84:	6023      	str	r3, [r4, #0]
 8001b86:	4833      	ldr	r0, [pc, #204]	; (8001c54 <_printf_i+0x240>)
 8001b88:	2778      	movs	r7, #120	; 0x78
 8001b8a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8001b8e:	6823      	ldr	r3, [r4, #0]
 8001b90:	6829      	ldr	r1, [r5, #0]
 8001b92:	061f      	lsls	r7, r3, #24
 8001b94:	f851 6b04 	ldr.w	r6, [r1], #4
 8001b98:	d402      	bmi.n	8001ba0 <_printf_i+0x18c>
 8001b9a:	065f      	lsls	r7, r3, #25
 8001b9c:	bf48      	it	mi
 8001b9e:	b2b6      	uxthmi	r6, r6
 8001ba0:	07df      	lsls	r7, r3, #31
 8001ba2:	bf48      	it	mi
 8001ba4:	f043 0320 	orrmi.w	r3, r3, #32
 8001ba8:	6029      	str	r1, [r5, #0]
 8001baa:	bf48      	it	mi
 8001bac:	6023      	strmi	r3, [r4, #0]
 8001bae:	b91e      	cbnz	r6, 8001bb8 <_printf_i+0x1a4>
 8001bb0:	6823      	ldr	r3, [r4, #0]
 8001bb2:	f023 0320 	bic.w	r3, r3, #32
 8001bb6:	6023      	str	r3, [r4, #0]
 8001bb8:	2310      	movs	r3, #16
 8001bba:	e7a7      	b.n	8001b0c <_printf_i+0xf8>
 8001bbc:	4824      	ldr	r0, [pc, #144]	; (8001c50 <_printf_i+0x23c>)
 8001bbe:	e7e4      	b.n	8001b8a <_printf_i+0x176>
 8001bc0:	4615      	mov	r5, r2
 8001bc2:	e7bd      	b.n	8001b40 <_printf_i+0x12c>
 8001bc4:	682b      	ldr	r3, [r5, #0]
 8001bc6:	6826      	ldr	r6, [r4, #0]
 8001bc8:	6961      	ldr	r1, [r4, #20]
 8001bca:	1d18      	adds	r0, r3, #4
 8001bcc:	6028      	str	r0, [r5, #0]
 8001bce:	0635      	lsls	r5, r6, #24
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	d501      	bpl.n	8001bd8 <_printf_i+0x1c4>
 8001bd4:	6019      	str	r1, [r3, #0]
 8001bd6:	e002      	b.n	8001bde <_printf_i+0x1ca>
 8001bd8:	0670      	lsls	r0, r6, #25
 8001bda:	d5fb      	bpl.n	8001bd4 <_printf_i+0x1c0>
 8001bdc:	8019      	strh	r1, [r3, #0]
 8001bde:	2300      	movs	r3, #0
 8001be0:	6123      	str	r3, [r4, #16]
 8001be2:	4615      	mov	r5, r2
 8001be4:	e7bc      	b.n	8001b60 <_printf_i+0x14c>
 8001be6:	682b      	ldr	r3, [r5, #0]
 8001be8:	1d1a      	adds	r2, r3, #4
 8001bea:	602a      	str	r2, [r5, #0]
 8001bec:	681d      	ldr	r5, [r3, #0]
 8001bee:	6862      	ldr	r2, [r4, #4]
 8001bf0:	2100      	movs	r1, #0
 8001bf2:	4628      	mov	r0, r5
 8001bf4:	f7fe fb04 	bl	8000200 <memchr>
 8001bf8:	b108      	cbz	r0, 8001bfe <_printf_i+0x1ea>
 8001bfa:	1b40      	subs	r0, r0, r5
 8001bfc:	6060      	str	r0, [r4, #4]
 8001bfe:	6863      	ldr	r3, [r4, #4]
 8001c00:	6123      	str	r3, [r4, #16]
 8001c02:	2300      	movs	r3, #0
 8001c04:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001c08:	e7aa      	b.n	8001b60 <_printf_i+0x14c>
 8001c0a:	6923      	ldr	r3, [r4, #16]
 8001c0c:	462a      	mov	r2, r5
 8001c0e:	4649      	mov	r1, r9
 8001c10:	4640      	mov	r0, r8
 8001c12:	47d0      	blx	sl
 8001c14:	3001      	adds	r0, #1
 8001c16:	d0ad      	beq.n	8001b74 <_printf_i+0x160>
 8001c18:	6823      	ldr	r3, [r4, #0]
 8001c1a:	079b      	lsls	r3, r3, #30
 8001c1c:	d413      	bmi.n	8001c46 <_printf_i+0x232>
 8001c1e:	68e0      	ldr	r0, [r4, #12]
 8001c20:	9b03      	ldr	r3, [sp, #12]
 8001c22:	4298      	cmp	r0, r3
 8001c24:	bfb8      	it	lt
 8001c26:	4618      	movlt	r0, r3
 8001c28:	e7a6      	b.n	8001b78 <_printf_i+0x164>
 8001c2a:	2301      	movs	r3, #1
 8001c2c:	4632      	mov	r2, r6
 8001c2e:	4649      	mov	r1, r9
 8001c30:	4640      	mov	r0, r8
 8001c32:	47d0      	blx	sl
 8001c34:	3001      	adds	r0, #1
 8001c36:	d09d      	beq.n	8001b74 <_printf_i+0x160>
 8001c38:	3501      	adds	r5, #1
 8001c3a:	68e3      	ldr	r3, [r4, #12]
 8001c3c:	9903      	ldr	r1, [sp, #12]
 8001c3e:	1a5b      	subs	r3, r3, r1
 8001c40:	42ab      	cmp	r3, r5
 8001c42:	dcf2      	bgt.n	8001c2a <_printf_i+0x216>
 8001c44:	e7eb      	b.n	8001c1e <_printf_i+0x20a>
 8001c46:	2500      	movs	r5, #0
 8001c48:	f104 0619 	add.w	r6, r4, #25
 8001c4c:	e7f5      	b.n	8001c3a <_printf_i+0x226>
 8001c4e:	bf00      	nop
 8001c50:	08001f58 	.word	0x08001f58
 8001c54:	08001f69 	.word	0x08001f69

08001c58 <__sflush_r>:
 8001c58:	898a      	ldrh	r2, [r1, #12]
 8001c5a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001c5c:	4605      	mov	r5, r0
 8001c5e:	0710      	lsls	r0, r2, #28
 8001c60:	460c      	mov	r4, r1
 8001c62:	d457      	bmi.n	8001d14 <__sflush_r+0xbc>
 8001c64:	684b      	ldr	r3, [r1, #4]
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	dc04      	bgt.n	8001c74 <__sflush_r+0x1c>
 8001c6a:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	dc01      	bgt.n	8001c74 <__sflush_r+0x1c>
 8001c70:	2000      	movs	r0, #0
 8001c72:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001c74:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8001c76:	2e00      	cmp	r6, #0
 8001c78:	d0fa      	beq.n	8001c70 <__sflush_r+0x18>
 8001c7a:	2300      	movs	r3, #0
 8001c7c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8001c80:	682f      	ldr	r7, [r5, #0]
 8001c82:	6a21      	ldr	r1, [r4, #32]
 8001c84:	602b      	str	r3, [r5, #0]
 8001c86:	d032      	beq.n	8001cee <__sflush_r+0x96>
 8001c88:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8001c8a:	89a3      	ldrh	r3, [r4, #12]
 8001c8c:	075a      	lsls	r2, r3, #29
 8001c8e:	d505      	bpl.n	8001c9c <__sflush_r+0x44>
 8001c90:	6863      	ldr	r3, [r4, #4]
 8001c92:	1ac0      	subs	r0, r0, r3
 8001c94:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8001c96:	b10b      	cbz	r3, 8001c9c <__sflush_r+0x44>
 8001c98:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001c9a:	1ac0      	subs	r0, r0, r3
 8001c9c:	2300      	movs	r3, #0
 8001c9e:	4602      	mov	r2, r0
 8001ca0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8001ca2:	6a21      	ldr	r1, [r4, #32]
 8001ca4:	4628      	mov	r0, r5
 8001ca6:	47b0      	blx	r6
 8001ca8:	1c43      	adds	r3, r0, #1
 8001caa:	89a3      	ldrh	r3, [r4, #12]
 8001cac:	d106      	bne.n	8001cbc <__sflush_r+0x64>
 8001cae:	6829      	ldr	r1, [r5, #0]
 8001cb0:	291d      	cmp	r1, #29
 8001cb2:	d82b      	bhi.n	8001d0c <__sflush_r+0xb4>
 8001cb4:	4a28      	ldr	r2, [pc, #160]	; (8001d58 <__sflush_r+0x100>)
 8001cb6:	410a      	asrs	r2, r1
 8001cb8:	07d6      	lsls	r6, r2, #31
 8001cba:	d427      	bmi.n	8001d0c <__sflush_r+0xb4>
 8001cbc:	2200      	movs	r2, #0
 8001cbe:	6062      	str	r2, [r4, #4]
 8001cc0:	04d9      	lsls	r1, r3, #19
 8001cc2:	6922      	ldr	r2, [r4, #16]
 8001cc4:	6022      	str	r2, [r4, #0]
 8001cc6:	d504      	bpl.n	8001cd2 <__sflush_r+0x7a>
 8001cc8:	1c42      	adds	r2, r0, #1
 8001cca:	d101      	bne.n	8001cd0 <__sflush_r+0x78>
 8001ccc:	682b      	ldr	r3, [r5, #0]
 8001cce:	b903      	cbnz	r3, 8001cd2 <__sflush_r+0x7a>
 8001cd0:	6560      	str	r0, [r4, #84]	; 0x54
 8001cd2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001cd4:	602f      	str	r7, [r5, #0]
 8001cd6:	2900      	cmp	r1, #0
 8001cd8:	d0ca      	beq.n	8001c70 <__sflush_r+0x18>
 8001cda:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8001cde:	4299      	cmp	r1, r3
 8001ce0:	d002      	beq.n	8001ce8 <__sflush_r+0x90>
 8001ce2:	4628      	mov	r0, r5
 8001ce4:	f7ff fbf0 	bl	80014c8 <_free_r>
 8001ce8:	2000      	movs	r0, #0
 8001cea:	6360      	str	r0, [r4, #52]	; 0x34
 8001cec:	e7c1      	b.n	8001c72 <__sflush_r+0x1a>
 8001cee:	2301      	movs	r3, #1
 8001cf0:	4628      	mov	r0, r5
 8001cf2:	47b0      	blx	r6
 8001cf4:	1c41      	adds	r1, r0, #1
 8001cf6:	d1c8      	bne.n	8001c8a <__sflush_r+0x32>
 8001cf8:	682b      	ldr	r3, [r5, #0]
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d0c5      	beq.n	8001c8a <__sflush_r+0x32>
 8001cfe:	2b1d      	cmp	r3, #29
 8001d00:	d001      	beq.n	8001d06 <__sflush_r+0xae>
 8001d02:	2b16      	cmp	r3, #22
 8001d04:	d101      	bne.n	8001d0a <__sflush_r+0xb2>
 8001d06:	602f      	str	r7, [r5, #0]
 8001d08:	e7b2      	b.n	8001c70 <__sflush_r+0x18>
 8001d0a:	89a3      	ldrh	r3, [r4, #12]
 8001d0c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001d10:	81a3      	strh	r3, [r4, #12]
 8001d12:	e7ae      	b.n	8001c72 <__sflush_r+0x1a>
 8001d14:	690f      	ldr	r7, [r1, #16]
 8001d16:	2f00      	cmp	r7, #0
 8001d18:	d0aa      	beq.n	8001c70 <__sflush_r+0x18>
 8001d1a:	0793      	lsls	r3, r2, #30
 8001d1c:	680e      	ldr	r6, [r1, #0]
 8001d1e:	bf08      	it	eq
 8001d20:	694b      	ldreq	r3, [r1, #20]
 8001d22:	600f      	str	r7, [r1, #0]
 8001d24:	bf18      	it	ne
 8001d26:	2300      	movne	r3, #0
 8001d28:	1bf6      	subs	r6, r6, r7
 8001d2a:	608b      	str	r3, [r1, #8]
 8001d2c:	2e00      	cmp	r6, #0
 8001d2e:	dd9f      	ble.n	8001c70 <__sflush_r+0x18>
 8001d30:	6a21      	ldr	r1, [r4, #32]
 8001d32:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8001d36:	4633      	mov	r3, r6
 8001d38:	463a      	mov	r2, r7
 8001d3a:	4628      	mov	r0, r5
 8001d3c:	47e0      	blx	ip
 8001d3e:	2800      	cmp	r0, #0
 8001d40:	dc06      	bgt.n	8001d50 <__sflush_r+0xf8>
 8001d42:	89a3      	ldrh	r3, [r4, #12]
 8001d44:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001d48:	81a3      	strh	r3, [r4, #12]
 8001d4a:	f04f 30ff 	mov.w	r0, #4294967295
 8001d4e:	e790      	b.n	8001c72 <__sflush_r+0x1a>
 8001d50:	4407      	add	r7, r0
 8001d52:	1a36      	subs	r6, r6, r0
 8001d54:	e7ea      	b.n	8001d2c <__sflush_r+0xd4>
 8001d56:	bf00      	nop
 8001d58:	dfbffffe 	.word	0xdfbffffe

08001d5c <_fflush_r>:
 8001d5c:	b538      	push	{r3, r4, r5, lr}
 8001d5e:	690b      	ldr	r3, [r1, #16]
 8001d60:	4605      	mov	r5, r0
 8001d62:	460c      	mov	r4, r1
 8001d64:	b913      	cbnz	r3, 8001d6c <_fflush_r+0x10>
 8001d66:	2500      	movs	r5, #0
 8001d68:	4628      	mov	r0, r5
 8001d6a:	bd38      	pop	{r3, r4, r5, pc}
 8001d6c:	b118      	cbz	r0, 8001d76 <_fflush_r+0x1a>
 8001d6e:	6a03      	ldr	r3, [r0, #32]
 8001d70:	b90b      	cbnz	r3, 8001d76 <_fflush_r+0x1a>
 8001d72:	f7ff f9b3 	bl	80010dc <__sinit>
 8001d76:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d0f3      	beq.n	8001d66 <_fflush_r+0xa>
 8001d7e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8001d80:	07d0      	lsls	r0, r2, #31
 8001d82:	d404      	bmi.n	8001d8e <_fflush_r+0x32>
 8001d84:	0599      	lsls	r1, r3, #22
 8001d86:	d402      	bmi.n	8001d8e <_fflush_r+0x32>
 8001d88:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001d8a:	f7ff fb9b 	bl	80014c4 <__retarget_lock_acquire_recursive>
 8001d8e:	4628      	mov	r0, r5
 8001d90:	4621      	mov	r1, r4
 8001d92:	f7ff ff61 	bl	8001c58 <__sflush_r>
 8001d96:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8001d98:	07da      	lsls	r2, r3, #31
 8001d9a:	4605      	mov	r5, r0
 8001d9c:	d4e4      	bmi.n	8001d68 <_fflush_r+0xc>
 8001d9e:	89a3      	ldrh	r3, [r4, #12]
 8001da0:	059b      	lsls	r3, r3, #22
 8001da2:	d4e1      	bmi.n	8001d68 <_fflush_r+0xc>
 8001da4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001da6:	f7ff fb8e 	bl	80014c6 <__retarget_lock_release_recursive>
 8001daa:	e7dd      	b.n	8001d68 <_fflush_r+0xc>

08001dac <__swhatbuf_r>:
 8001dac:	b570      	push	{r4, r5, r6, lr}
 8001dae:	460c      	mov	r4, r1
 8001db0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001db4:	2900      	cmp	r1, #0
 8001db6:	b096      	sub	sp, #88	; 0x58
 8001db8:	4615      	mov	r5, r2
 8001dba:	461e      	mov	r6, r3
 8001dbc:	da0d      	bge.n	8001dda <__swhatbuf_r+0x2e>
 8001dbe:	89a3      	ldrh	r3, [r4, #12]
 8001dc0:	f013 0f80 	tst.w	r3, #128	; 0x80
 8001dc4:	f04f 0100 	mov.w	r1, #0
 8001dc8:	bf0c      	ite	eq
 8001dca:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8001dce:	2340      	movne	r3, #64	; 0x40
 8001dd0:	2000      	movs	r0, #0
 8001dd2:	6031      	str	r1, [r6, #0]
 8001dd4:	602b      	str	r3, [r5, #0]
 8001dd6:	b016      	add	sp, #88	; 0x58
 8001dd8:	bd70      	pop	{r4, r5, r6, pc}
 8001dda:	466a      	mov	r2, sp
 8001ddc:	f000 f848 	bl	8001e70 <_fstat_r>
 8001de0:	2800      	cmp	r0, #0
 8001de2:	dbec      	blt.n	8001dbe <__swhatbuf_r+0x12>
 8001de4:	9901      	ldr	r1, [sp, #4]
 8001de6:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8001dea:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8001dee:	4259      	negs	r1, r3
 8001df0:	4159      	adcs	r1, r3
 8001df2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001df6:	e7eb      	b.n	8001dd0 <__swhatbuf_r+0x24>

08001df8 <__smakebuf_r>:
 8001df8:	898b      	ldrh	r3, [r1, #12]
 8001dfa:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8001dfc:	079d      	lsls	r5, r3, #30
 8001dfe:	4606      	mov	r6, r0
 8001e00:	460c      	mov	r4, r1
 8001e02:	d507      	bpl.n	8001e14 <__smakebuf_r+0x1c>
 8001e04:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8001e08:	6023      	str	r3, [r4, #0]
 8001e0a:	6123      	str	r3, [r4, #16]
 8001e0c:	2301      	movs	r3, #1
 8001e0e:	6163      	str	r3, [r4, #20]
 8001e10:	b002      	add	sp, #8
 8001e12:	bd70      	pop	{r4, r5, r6, pc}
 8001e14:	ab01      	add	r3, sp, #4
 8001e16:	466a      	mov	r2, sp
 8001e18:	f7ff ffc8 	bl	8001dac <__swhatbuf_r>
 8001e1c:	9900      	ldr	r1, [sp, #0]
 8001e1e:	4605      	mov	r5, r0
 8001e20:	4630      	mov	r0, r6
 8001e22:	f7ff fbbb 	bl	800159c <_malloc_r>
 8001e26:	b948      	cbnz	r0, 8001e3c <__smakebuf_r+0x44>
 8001e28:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001e2c:	059a      	lsls	r2, r3, #22
 8001e2e:	d4ef      	bmi.n	8001e10 <__smakebuf_r+0x18>
 8001e30:	f023 0303 	bic.w	r3, r3, #3
 8001e34:	f043 0302 	orr.w	r3, r3, #2
 8001e38:	81a3      	strh	r3, [r4, #12]
 8001e3a:	e7e3      	b.n	8001e04 <__smakebuf_r+0xc>
 8001e3c:	89a3      	ldrh	r3, [r4, #12]
 8001e3e:	6020      	str	r0, [r4, #0]
 8001e40:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001e44:	81a3      	strh	r3, [r4, #12]
 8001e46:	9b00      	ldr	r3, [sp, #0]
 8001e48:	6163      	str	r3, [r4, #20]
 8001e4a:	9b01      	ldr	r3, [sp, #4]
 8001e4c:	6120      	str	r0, [r4, #16]
 8001e4e:	b15b      	cbz	r3, 8001e68 <__smakebuf_r+0x70>
 8001e50:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001e54:	4630      	mov	r0, r6
 8001e56:	f000 f81d 	bl	8001e94 <_isatty_r>
 8001e5a:	b128      	cbz	r0, 8001e68 <__smakebuf_r+0x70>
 8001e5c:	89a3      	ldrh	r3, [r4, #12]
 8001e5e:	f023 0303 	bic.w	r3, r3, #3
 8001e62:	f043 0301 	orr.w	r3, r3, #1
 8001e66:	81a3      	strh	r3, [r4, #12]
 8001e68:	89a3      	ldrh	r3, [r4, #12]
 8001e6a:	431d      	orrs	r5, r3
 8001e6c:	81a5      	strh	r5, [r4, #12]
 8001e6e:	e7cf      	b.n	8001e10 <__smakebuf_r+0x18>

08001e70 <_fstat_r>:
 8001e70:	b538      	push	{r3, r4, r5, lr}
 8001e72:	4d07      	ldr	r5, [pc, #28]	; (8001e90 <_fstat_r+0x20>)
 8001e74:	2300      	movs	r3, #0
 8001e76:	4604      	mov	r4, r0
 8001e78:	4608      	mov	r0, r1
 8001e7a:	4611      	mov	r1, r2
 8001e7c:	602b      	str	r3, [r5, #0]
 8001e7e:	f7fe fcc5 	bl	800080c <_fstat>
 8001e82:	1c43      	adds	r3, r0, #1
 8001e84:	d102      	bne.n	8001e8c <_fstat_r+0x1c>
 8001e86:	682b      	ldr	r3, [r5, #0]
 8001e88:	b103      	cbz	r3, 8001e8c <_fstat_r+0x1c>
 8001e8a:	6023      	str	r3, [r4, #0]
 8001e8c:	bd38      	pop	{r3, r4, r5, pc}
 8001e8e:	bf00      	nop
 8001e90:	200001b8 	.word	0x200001b8

08001e94 <_isatty_r>:
 8001e94:	b538      	push	{r3, r4, r5, lr}
 8001e96:	4d06      	ldr	r5, [pc, #24]	; (8001eb0 <_isatty_r+0x1c>)
 8001e98:	2300      	movs	r3, #0
 8001e9a:	4604      	mov	r4, r0
 8001e9c:	4608      	mov	r0, r1
 8001e9e:	602b      	str	r3, [r5, #0]
 8001ea0:	f7fe fcc3 	bl	800082a <_isatty>
 8001ea4:	1c43      	adds	r3, r0, #1
 8001ea6:	d102      	bne.n	8001eae <_isatty_r+0x1a>
 8001ea8:	682b      	ldr	r3, [r5, #0]
 8001eaa:	b103      	cbz	r3, 8001eae <_isatty_r+0x1a>
 8001eac:	6023      	str	r3, [r4, #0]
 8001eae:	bd38      	pop	{r3, r4, r5, pc}
 8001eb0:	200001b8 	.word	0x200001b8

08001eb4 <_sbrk_r>:
 8001eb4:	b538      	push	{r3, r4, r5, lr}
 8001eb6:	4d06      	ldr	r5, [pc, #24]	; (8001ed0 <_sbrk_r+0x1c>)
 8001eb8:	2300      	movs	r3, #0
 8001eba:	4604      	mov	r4, r0
 8001ebc:	4608      	mov	r0, r1
 8001ebe:	602b      	str	r3, [r5, #0]
 8001ec0:	f7fe fcca 	bl	8000858 <_sbrk>
 8001ec4:	1c43      	adds	r3, r0, #1
 8001ec6:	d102      	bne.n	8001ece <_sbrk_r+0x1a>
 8001ec8:	682b      	ldr	r3, [r5, #0]
 8001eca:	b103      	cbz	r3, 8001ece <_sbrk_r+0x1a>
 8001ecc:	6023      	str	r3, [r4, #0]
 8001ece:	bd38      	pop	{r3, r4, r5, pc}
 8001ed0:	200001b8 	.word	0x200001b8

08001ed4 <_init>:
 8001ed4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001ed6:	bf00      	nop
 8001ed8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001eda:	bc08      	pop	{r3}
 8001edc:	469e      	mov	lr, r3
 8001ede:	4770      	bx	lr

08001ee0 <_fini>:
 8001ee0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001ee2:	bf00      	nop
 8001ee4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001ee6:	bc08      	pop	{r3}
 8001ee8:	469e      	mov	lr, r3
 8001eea:	4770      	bx	lr
