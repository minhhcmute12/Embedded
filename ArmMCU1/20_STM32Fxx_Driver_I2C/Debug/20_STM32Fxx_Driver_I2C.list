
20_STM32Fxx_Driver_I2C.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001a8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000c48  080001a8  080001a8  000101a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000df0  08000df0  00020018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000df0  08000df0  00020018  2**0
                  CONTENTS
  4 .ARM          00000000  08000df0  08000df0  00020018  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000df0  08000df0  00020018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000df0  08000df0  00010df0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000df4  08000df4  00010df4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000018  20000000  08000df8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020018  2**0
                  CONTENTS
 10 .bss          00000048  20000018  20000018  00020018  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000060  20000060  00020018  2**0
                  ALLOC
 12 .ARM.attributes 0000002a  00000000  00000000  00020018  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020042  2**0
                  CONTENTS, READONLY
 14 .debug_info   0000133b  00000000  00000000  00020085  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000005a8  00000000  00000000  000213c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000160  00000000  00000000  00021968  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 000000fd  00000000  00000000  00021ac8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  000025c2  00000000  00000000  00021bc5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00001975  00000000  00000000  00024187  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    00009e05  00000000  00000000  00025afc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  000004d8  00000000  00000000  0002f904  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000060  00000000  00000000  0002fddc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a8 <__do_global_dtors_aux>:
 80001a8:	b510      	push	{r4, lr}
 80001aa:	4c05      	ldr	r4, [pc, #20]	; (80001c0 <__do_global_dtors_aux+0x18>)
 80001ac:	7823      	ldrb	r3, [r4, #0]
 80001ae:	b933      	cbnz	r3, 80001be <__do_global_dtors_aux+0x16>
 80001b0:	4b04      	ldr	r3, [pc, #16]	; (80001c4 <__do_global_dtors_aux+0x1c>)
 80001b2:	b113      	cbz	r3, 80001ba <__do_global_dtors_aux+0x12>
 80001b4:	4804      	ldr	r0, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x20>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	2301      	movs	r3, #1
 80001bc:	7023      	strb	r3, [r4, #0]
 80001be:	bd10      	pop	{r4, pc}
 80001c0:	20000018 	.word	0x20000018
 80001c4:	00000000 	.word	0x00000000
 80001c8:	08000dd8 	.word	0x08000dd8

080001cc <frame_dummy>:
 80001cc:	b508      	push	{r3, lr}
 80001ce:	4b03      	ldr	r3, [pc, #12]	; (80001dc <frame_dummy+0x10>)
 80001d0:	b11b      	cbz	r3, 80001da <frame_dummy+0xe>
 80001d2:	4903      	ldr	r1, [pc, #12]	; (80001e0 <frame_dummy+0x14>)
 80001d4:	4803      	ldr	r0, [pc, #12]	; (80001e4 <frame_dummy+0x18>)
 80001d6:	f3af 8000 	nop.w
 80001da:	bd08      	pop	{r3, pc}
 80001dc:	00000000 	.word	0x00000000
 80001e0:	2000001c 	.word	0x2000001c
 80001e4:	08000dd8 	.word	0x08000dd8

080001e8 <delay>:
#include "stm32f407xx_i2c_driver.h"		//Khai báo thư viện xử lý I2C peripheral
#include <stdint.h>
#include <stdio.h>

void delay(void)
{
 80001e8:	b480      	push	{r7}
 80001ea:	b083      	sub	sp, #12
 80001ec:	af00      	add	r7, sp, #0
	for(uint32_t i = 0 ; i < 500000/2 ; i ++);
 80001ee:	2300      	movs	r3, #0
 80001f0:	607b      	str	r3, [r7, #4]
 80001f2:	e002      	b.n	80001fa <delay+0x12>
 80001f4:	687b      	ldr	r3, [r7, #4]
 80001f6:	3301      	adds	r3, #1
 80001f8:	607b      	str	r3, [r7, #4]
 80001fa:	687b      	ldr	r3, [r7, #4]
 80001fc:	4a04      	ldr	r2, [pc, #16]	; (8000210 <delay+0x28>)
 80001fe:	4293      	cmp	r3, r2
 8000200:	d9f8      	bls.n	80001f4 <delay+0xc>
}
 8000202:	bf00      	nop
 8000204:	bf00      	nop
 8000206:	370c      	adds	r7, #12
 8000208:	46bd      	mov	sp, r7
 800020a:	bc80      	pop	{r7}
 800020c:	4770      	bx	lr
 800020e:	bf00      	nop
 8000210:	0003d08f 	.word	0x0003d08f

08000214 <I2C1_GPIOInits>:
 * @return      - none
 *
 * @Note        - none
 */
void I2C1_GPIOInits(void)
{
 8000214:	b580      	push	{r7, lr}
 8000216:	b084      	sub	sp, #16
 8000218:	af00      	add	r7, sp, #0
	GPIOx_Handle_t I2CPins;								//Khai báo 1 biến cấu trúc GPIO Portx muốn dùng AF

	I2CPins.pGPIOx = GPIOB;										//Port có chân làm chức năng Alternate
 800021a:	4b0e      	ldr	r3, [pc, #56]	; (8000254 <I2C1_GPIOInits+0x40>)
 800021c:	607b      	str	r3, [r7, #4]
	I2CPins.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALTFN;		//Thiết lập Port sử dụng Alternate Function
 800021e:	2302      	movs	r3, #2
 8000220:	727b      	strb	r3, [r7, #9]
	I2CPins.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_OD; 	//I2C sử dụng Open Drain
 8000222:	2301      	movs	r3, #1
 8000224:	733b      	strb	r3, [r7, #12]
	I2CPins.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PIN_PU; 	//pull up
 8000226:	2301      	movs	r3, #1
 8000228:	72fb      	strb	r3, [r7, #11]
	I2CPins.GPIO_PinConfig.GPIO_PinAltFunMode = 4;				//Column AF4(Check Datasheet)
 800022a:	2304      	movs	r3, #4
 800022c:	737b      	strb	r3, [r7, #13]
	I2CPins.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;		//Speed
 800022e:	2302      	movs	r3, #2
 8000230:	72bb      	strb	r3, [r7, #10]

	//SCL Configuration
	I2CPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_6;		//PB6 làm chân AF4 I2C_SCL
 8000232:	2306      	movs	r3, #6
 8000234:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&I2CPins);						//Thiết lập I2C_SCL cho cấu hình thanh ghi cho Processor
 8000236:	1d3b      	adds	r3, r7, #4
 8000238:	4618      	mov	r0, r3
 800023a:	f000 f921 	bl	8000480 <GPIO_Init>

	//SDA Configuration
	I2CPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_7;			//PB7 làm chân AF4 I2C_SDA
 800023e:	2307      	movs	r3, #7
 8000240:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&I2CPins);						//Thiết lập I2C_SDA cho cấu hình thanh ghi cho Processor
 8000242:	1d3b      	adds	r3, r7, #4
 8000244:	4618      	mov	r0, r3
 8000246:	f000 f91b 	bl	8000480 <GPIO_Init>
}
 800024a:	bf00      	nop
 800024c:	3710      	adds	r7, #16
 800024e:	46bd      	mov	sp, r7
 8000250:	bd80      	pop	{r7, pc}
 8000252:	bf00      	nop
 8000254:	40020400 	.word	0x40020400

08000258 <I2C1_Inits>:
 * @return      - none
 *
 * @Note        - none
 */
void I2C1_Inits(void)
{
 8000258:	b580      	push	{r7, lr}
 800025a:	af00      	add	r7, sp, #0
	I2C1_Handle.pI2Cx = I2C1;				//Sử dụng I2C1
 800025c:	4b09      	ldr	r3, [pc, #36]	; (8000284 <I2C1_Inits+0x2c>)
 800025e:	4a0a      	ldr	r2, [pc, #40]	; (8000288 <I2C1_Inits+0x30>)
 8000260:	601a      	str	r2, [r3, #0]
	I2C1_Handle.I2C_Config.I2C_AckControl = I2C_ACK_ENABLE;
 8000262:	4b08      	ldr	r3, [pc, #32]	; (8000284 <I2C1_Inits+0x2c>)
 8000264:	2201      	movs	r2, #1
 8000266:	725a      	strb	r2, [r3, #9]
	I2C1_Handle.I2C_Config.I2C_DeviceAddress = MY_ADDR;		//Cài đặt địa chỉ cho STM32 nếu nó là Slave
 8000268:	4b06      	ldr	r3, [pc, #24]	; (8000284 <I2C1_Inits+0x2c>)
 800026a:	2261      	movs	r2, #97	; 0x61
 800026c:	721a      	strb	r2, [r3, #8]
	I2C1_Handle.I2C_Config.I2C_FmDutyCycle = I2C_FM_DUTY_2; //Bộ chia tần số
 800026e:	4b05      	ldr	r3, [pc, #20]	; (8000284 <I2C1_Inits+0x2c>)
 8000270:	2200      	movs	r2, #0
 8000272:	729a      	strb	r2, [r3, #10]
	I2C1_Handle.I2C_Config.I2C_SCLSpeed = I2C_SCL_SPEED_SM;	//Standard Mode
 8000274:	4b03      	ldr	r3, [pc, #12]	; (8000284 <I2C1_Inits+0x2c>)
 8000276:	4a05      	ldr	r2, [pc, #20]	; (800028c <I2C1_Inits+0x34>)
 8000278:	605a      	str	r2, [r3, #4]

	I2C_Init(&I2C1_Handle);
 800027a:	4802      	ldr	r0, [pc, #8]	; (8000284 <I2C1_Inits+0x2c>)
 800027c:	f000 fb3c 	bl	80008f8 <I2C_Init>
}
 8000280:	bf00      	nop
 8000282:	bd80      	pop	{r7, pc}
 8000284:	20000034 	.word	0x20000034
 8000288:	40005400 	.word	0x40005400
 800028c:	000186a0 	.word	0x000186a0

08000290 <main>:

/*
 * Hàm xử lý chính
 */
int main(void)
{
 8000290:	b580      	push	{r7, lr}
 8000292:	b084      	sub	sp, #16
 8000294:	af02      	add	r7, sp, #8
	uint8_t command_code;							//biến chứa các lệnh command từ Master->Slave
	uint8_t len;									//biến chứa giá trị len từ Slave->Master

	//I2C pin Alternate Function
	I2C1_GPIOInits();
 8000296:	f7ff ffbd 	bl	8000214 <I2C1_GPIOInits>

	//I2C Peripheral User Configuration
	I2C1_Inits();
 800029a:	f7ff ffdd 	bl	8000258 <I2C1_Inits>

	//Enable the I2C Peripheral
	I2C_PeripheralControl(I2C1, ENABLE);
 800029e:	2101      	movs	r1, #1
 80002a0:	481d      	ldr	r0, [pc, #116]	; (8000318 <main+0x88>)
 80002a2:	f000 fd59 	bl	8000d58 <I2C_PeripheralControl>

	//Set Acking bit is made 1 after PE=1
	I2C_ManageAcking(I2C1, I2C_ACK_ENABLE);
 80002a6:	2101      	movs	r1, #1
 80002a8:	481b      	ldr	r0, [pc, #108]	; (8000318 <main+0x88>)
 80002aa:	f000 fd3a 	bl	8000d22 <I2C_ManageAcking>
	//printf("Application is running\n");

	while(1)
	{
		//wait till button is pressed
		while( ! GPIO_ReadFromInputPin(GPIOA,GPIO_PIN_NO_0) );
 80002ae:	bf00      	nop
 80002b0:	2100      	movs	r1, #0
 80002b2:	481a      	ldr	r0, [pc, #104]	; (800031c <main+0x8c>)
 80002b4:	f000 fa72 	bl	800079c <GPIO_ReadFromInputPin>
 80002b8:	4603      	mov	r3, r0
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d0f8      	beq.n	80002b0 <main+0x20>

		//to avoid button de-bouncing related issues 200ms of delay
		delay();
 80002be:	f7ff ff93 	bl	80001e8 <delay>

		/* 1. Master gửi mã lệnh 0x51 để đọc độ dài Len(1byte) của dữ liệu gửi từ salve */
		//thiết lập mã command code
		command_code = 0x51;
 80002c2:	2351      	movs	r3, #81	; 0x51
 80002c4:	71fb      	strb	r3, [r7, #7]
		//gửi 0x51 từ Master->Slave
		I2C_MasterSendData(&I2C1_Handle, &command_code,1, SLAVE_ADDR,I2C_ENABLE_SR);
 80002c6:	1df9      	adds	r1, r7, #7
 80002c8:	2301      	movs	r3, #1
 80002ca:	9300      	str	r3, [sp, #0]
 80002cc:	2368      	movs	r3, #104	; 0x68
 80002ce:	2201      	movs	r2, #1
 80002d0:	4813      	ldr	r0, [pc, #76]	; (8000320 <main+0x90>)
 80002d2:	f000 fbc5 	bl	8000a60 <I2C_MasterSendData>
		//nhận len từ Slave->Master
		I2C_MasterReceiveData(&I2C1_Handle,&len,1,SLAVE_ADDR,I2C_ENABLE_SR);
 80002d6:	1db9      	adds	r1, r7, #6
 80002d8:	2301      	movs	r3, #1
 80002da:	9300      	str	r3, [sp, #0]
 80002dc:	2368      	movs	r3, #104	; 0x68
 80002de:	2201      	movs	r2, #1
 80002e0:	480f      	ldr	r0, [pc, #60]	; (8000320 <main+0x90>)
 80002e2:	f000 fc22 	bl	8000b2a <I2C_MasterReceiveData>
		//&len: con trỏ, cho phép thay đổi value len trong quá trình thực thi hàm

		/* 2. Master gửi mã lệnh 0x52 để đọc dữ liệu hoàn chỉnh từ Slave */
		//thiết lập mã command code
		command_code = 0x52;
 80002e6:	2352      	movs	r3, #82	; 0x52
 80002e8:	71fb      	strb	r3, [r7, #7]
		//gửi 0x52 từ Master->Slave
		I2C_MasterSendData(&I2C1_Handle, &command_code,1, SLAVE_ADDR,I2C_ENABLE_SR);
 80002ea:	1df9      	adds	r1, r7, #7
 80002ec:	2301      	movs	r3, #1
 80002ee:	9300      	str	r3, [sp, #0]
 80002f0:	2368      	movs	r3, #104	; 0x68
 80002f2:	2201      	movs	r2, #1
 80002f4:	480a      	ldr	r0, [pc, #40]	; (8000320 <main+0x90>)
 80002f6:	f000 fbb3 	bl	8000a60 <I2C_MasterSendData>
		//nhận data từ Slave->Master
		I2C_MasterReceiveData(&I2C1_Handle,rcv_Buf,len,SLAVE_ADDR,I2C_DISABLE_SR);
 80002fa:	79bb      	ldrb	r3, [r7, #6]
 80002fc:	461a      	mov	r2, r3
 80002fe:	2300      	movs	r3, #0
 8000300:	9300      	str	r3, [sp, #0]
 8000302:	2368      	movs	r3, #104	; 0x68
 8000304:	4907      	ldr	r1, [pc, #28]	; (8000324 <main+0x94>)
 8000306:	4806      	ldr	r0, [pc, #24]	; (8000320 <main+0x90>)
 8000308:	f000 fc0f 	bl	8000b2a <I2C_MasterReceiveData>

		//Vì sử dụng %s để hiển thị nội dung data nên vị trí cuối cùng của mảng phải là giá trị null'\0'
		rcv_Buf[len+1] = '\0';
 800030c:	79bb      	ldrb	r3, [r7, #6]
 800030e:	3301      	adds	r3, #1
 8000310:	4a04      	ldr	r2, [pc, #16]	; (8000324 <main+0x94>)
 8000312:	2100      	movs	r1, #0
 8000314:	54d1      	strb	r1, [r2, r3]
		while( ! GPIO_ReadFromInputPin(GPIOA,GPIO_PIN_NO_0) );
 8000316:	e7ca      	b.n	80002ae <main+0x1e>
 8000318:	40005400 	.word	0x40005400
 800031c:	40020000 	.word	0x40020000
 8000320:	20000034 	.word	0x20000034
 8000324:	20000040 	.word	0x20000040

08000328 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000328:	480d      	ldr	r0, [pc, #52]	; (8000360 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800032a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 800032c:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000330:	480c      	ldr	r0, [pc, #48]	; (8000364 <LoopForever+0x6>)
  ldr r1, =_edata
 8000332:	490d      	ldr	r1, [pc, #52]	; (8000368 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000334:	4a0d      	ldr	r2, [pc, #52]	; (800036c <LoopForever+0xe>)
  movs r3, #0
 8000336:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000338:	e002      	b.n	8000340 <LoopCopyDataInit>

0800033a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800033a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800033c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800033e:	3304      	adds	r3, #4

08000340 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000340:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000342:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000344:	d3f9      	bcc.n	800033a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000346:	4a0a      	ldr	r2, [pc, #40]	; (8000370 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000348:	4c0a      	ldr	r4, [pc, #40]	; (8000374 <LoopForever+0x16>)
  movs r3, #0
 800034a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800034c:	e001      	b.n	8000352 <LoopFillZerobss>

0800034e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800034e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000350:	3204      	adds	r2, #4

08000352 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000352:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000354:	d3fb      	bcc.n	800034e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000356:	f000 fd1b 	bl	8000d90 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800035a:	f7ff ff99 	bl	8000290 <main>

0800035e <LoopForever>:

LoopForever:
  b LoopForever
 800035e:	e7fe      	b.n	800035e <LoopForever>
  ldr   r0, =_estack
 8000360:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000364:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000368:	20000018 	.word	0x20000018
  ldr r2, =_sidata
 800036c:	08000df8 	.word	0x08000df8
  ldr r2, =_sbss
 8000370:	20000018 	.word	0x20000018
  ldr r4, =_ebss
 8000374:	20000060 	.word	0x20000060

08000378 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000378:	e7fe      	b.n	8000378 <ADC_IRQHandler>
	...

0800037c <GPIO_PeriClockControl>:
 * @return		- none
 *
 * @Note 		- none
 */
void GPIO_PeriClockControl(GPIO_RegDef_t *pGPIOx, uint8_t EnorDi)
{
 800037c:	b480      	push	{r7}
 800037e:	b083      	sub	sp, #12
 8000380:	af00      	add	r7, sp, #0
 8000382:	6078      	str	r0, [r7, #4]
 8000384:	460b      	mov	r3, r1
 8000386:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE)
 8000388:	78fb      	ldrb	r3, [r7, #3]
 800038a:	2b01      	cmp	r3, #1
 800038c:	d161      	bne.n	8000452 <GPIO_PeriClockControl+0xd6>
	{
		if(pGPIOx == GPIOA)
 800038e:	687b      	ldr	r3, [r7, #4]
 8000390:	4a32      	ldr	r2, [pc, #200]	; (800045c <GPIO_PeriClockControl+0xe0>)
 8000392:	4293      	cmp	r3, r2
 8000394:	d106      	bne.n	80003a4 <GPIO_PeriClockControl+0x28>
		{
			GPIOA_PCLK_EN();		//hàm đã đc define trong stm32f407xx.h(lớp Driver)
 8000396:	4b32      	ldr	r3, [pc, #200]	; (8000460 <GPIO_PeriClockControl+0xe4>)
 8000398:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800039a:	4a31      	ldr	r2, [pc, #196]	; (8000460 <GPIO_PeriClockControl+0xe4>)
 800039c:	f043 0301 	orr.w	r3, r3, #1
 80003a0:	6313      	str	r3, [r2, #48]	; 0x30
	else
	{
		//Todo: (Disable Status)

	}
}
 80003a2:	e056      	b.n	8000452 <GPIO_PeriClockControl+0xd6>
		else if(pGPIOx == GPIOB)
 80003a4:	687b      	ldr	r3, [r7, #4]
 80003a6:	4a2f      	ldr	r2, [pc, #188]	; (8000464 <GPIO_PeriClockControl+0xe8>)
 80003a8:	4293      	cmp	r3, r2
 80003aa:	d106      	bne.n	80003ba <GPIO_PeriClockControl+0x3e>
			GPIOB_PCLK_EN();
 80003ac:	4b2c      	ldr	r3, [pc, #176]	; (8000460 <GPIO_PeriClockControl+0xe4>)
 80003ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003b0:	4a2b      	ldr	r2, [pc, #172]	; (8000460 <GPIO_PeriClockControl+0xe4>)
 80003b2:	f043 0302 	orr.w	r3, r3, #2
 80003b6:	6313      	str	r3, [r2, #48]	; 0x30
}
 80003b8:	e04b      	b.n	8000452 <GPIO_PeriClockControl+0xd6>
		else if(pGPIOx == GPIOC)
 80003ba:	687b      	ldr	r3, [r7, #4]
 80003bc:	4a2a      	ldr	r2, [pc, #168]	; (8000468 <GPIO_PeriClockControl+0xec>)
 80003be:	4293      	cmp	r3, r2
 80003c0:	d106      	bne.n	80003d0 <GPIO_PeriClockControl+0x54>
			GPIOC_PCLK_EN();
 80003c2:	4b27      	ldr	r3, [pc, #156]	; (8000460 <GPIO_PeriClockControl+0xe4>)
 80003c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003c6:	4a26      	ldr	r2, [pc, #152]	; (8000460 <GPIO_PeriClockControl+0xe4>)
 80003c8:	f043 0304 	orr.w	r3, r3, #4
 80003cc:	6313      	str	r3, [r2, #48]	; 0x30
}
 80003ce:	e040      	b.n	8000452 <GPIO_PeriClockControl+0xd6>
		else if(pGPIOx == GPIOD)
 80003d0:	687b      	ldr	r3, [r7, #4]
 80003d2:	4a26      	ldr	r2, [pc, #152]	; (800046c <GPIO_PeriClockControl+0xf0>)
 80003d4:	4293      	cmp	r3, r2
 80003d6:	d106      	bne.n	80003e6 <GPIO_PeriClockControl+0x6a>
			GPIOD_PCLK_EN();
 80003d8:	4b21      	ldr	r3, [pc, #132]	; (8000460 <GPIO_PeriClockControl+0xe4>)
 80003da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003dc:	4a20      	ldr	r2, [pc, #128]	; (8000460 <GPIO_PeriClockControl+0xe4>)
 80003de:	f043 0308 	orr.w	r3, r3, #8
 80003e2:	6313      	str	r3, [r2, #48]	; 0x30
}
 80003e4:	e035      	b.n	8000452 <GPIO_PeriClockControl+0xd6>
		else if(pGPIOx == GPIOE)
 80003e6:	687b      	ldr	r3, [r7, #4]
 80003e8:	4a21      	ldr	r2, [pc, #132]	; (8000470 <GPIO_PeriClockControl+0xf4>)
 80003ea:	4293      	cmp	r3, r2
 80003ec:	d106      	bne.n	80003fc <GPIO_PeriClockControl+0x80>
			GPIOE_PCLK_EN();
 80003ee:	4b1c      	ldr	r3, [pc, #112]	; (8000460 <GPIO_PeriClockControl+0xe4>)
 80003f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003f2:	4a1b      	ldr	r2, [pc, #108]	; (8000460 <GPIO_PeriClockControl+0xe4>)
 80003f4:	f043 0310 	orr.w	r3, r3, #16
 80003f8:	6313      	str	r3, [r2, #48]	; 0x30
}
 80003fa:	e02a      	b.n	8000452 <GPIO_PeriClockControl+0xd6>
		else if(pGPIOx == GPIOF)
 80003fc:	687b      	ldr	r3, [r7, #4]
 80003fe:	4a1d      	ldr	r2, [pc, #116]	; (8000474 <GPIO_PeriClockControl+0xf8>)
 8000400:	4293      	cmp	r3, r2
 8000402:	d106      	bne.n	8000412 <GPIO_PeriClockControl+0x96>
			GPIOF_PCLK_EN();
 8000404:	4b16      	ldr	r3, [pc, #88]	; (8000460 <GPIO_PeriClockControl+0xe4>)
 8000406:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000408:	4a15      	ldr	r2, [pc, #84]	; (8000460 <GPIO_PeriClockControl+0xe4>)
 800040a:	f043 0320 	orr.w	r3, r3, #32
 800040e:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000410:	e01f      	b.n	8000452 <GPIO_PeriClockControl+0xd6>
		else if(pGPIOx == GPIOG)
 8000412:	687b      	ldr	r3, [r7, #4]
 8000414:	4a18      	ldr	r2, [pc, #96]	; (8000478 <GPIO_PeriClockControl+0xfc>)
 8000416:	4293      	cmp	r3, r2
 8000418:	d106      	bne.n	8000428 <GPIO_PeriClockControl+0xac>
			GPIOG_PCLK_EN();
 800041a:	4b11      	ldr	r3, [pc, #68]	; (8000460 <GPIO_PeriClockControl+0xe4>)
 800041c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800041e:	4a10      	ldr	r2, [pc, #64]	; (8000460 <GPIO_PeriClockControl+0xe4>)
 8000420:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000424:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000426:	e014      	b.n	8000452 <GPIO_PeriClockControl+0xd6>
		else if(pGPIOx == GPIOH)
 8000428:	687b      	ldr	r3, [r7, #4]
 800042a:	4a13      	ldr	r2, [pc, #76]	; (8000478 <GPIO_PeriClockControl+0xfc>)
 800042c:	4293      	cmp	r3, r2
 800042e:	d106      	bne.n	800043e <GPIO_PeriClockControl+0xc2>
			GPIOH_PCLK_EN();
 8000430:	4b0b      	ldr	r3, [pc, #44]	; (8000460 <GPIO_PeriClockControl+0xe4>)
 8000432:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000434:	4a0a      	ldr	r2, [pc, #40]	; (8000460 <GPIO_PeriClockControl+0xe4>)
 8000436:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800043a:	6313      	str	r3, [r2, #48]	; 0x30
}
 800043c:	e009      	b.n	8000452 <GPIO_PeriClockControl+0xd6>
		else if(pGPIOx == GPIOI)
 800043e:	687b      	ldr	r3, [r7, #4]
 8000440:	4a0e      	ldr	r2, [pc, #56]	; (800047c <GPIO_PeriClockControl+0x100>)
 8000442:	4293      	cmp	r3, r2
 8000444:	d105      	bne.n	8000452 <GPIO_PeriClockControl+0xd6>
			GPIOI_PCLK_EN();
 8000446:	4b06      	ldr	r3, [pc, #24]	; (8000460 <GPIO_PeriClockControl+0xe4>)
 8000448:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800044a:	4a05      	ldr	r2, [pc, #20]	; (8000460 <GPIO_PeriClockControl+0xe4>)
 800044c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000450:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000452:	bf00      	nop
 8000454:	370c      	adds	r7, #12
 8000456:	46bd      	mov	sp, r7
 8000458:	bc80      	pop	{r7}
 800045a:	4770      	bx	lr
 800045c:	40020000 	.word	0x40020000
 8000460:	40023800 	.word	0x40023800
 8000464:	40020400 	.word	0x40020400
 8000468:	40020800 	.word	0x40020800
 800046c:	40020c00 	.word	0x40020c00
 8000470:	40021000 	.word	0x40021000
 8000474:	40021400 	.word	0x40021400
 8000478:	40021800 	.word	0x40021800
 800047c:	40022000 	.word	0x40022000

08000480 <GPIO_Init>:
 * @return		- none
 *
 * @Note 		- none
 */
void GPIO_Init(GPIOx_Handle_t *pGPIOHandle)
{
 8000480:	b580      	push	{r7, lr}
 8000482:	b086      	sub	sp, #24
 8000484:	af00      	add	r7, sp, #0
 8000486:	6078      	str	r0, [r7, #4]
	uint32_t temp = 0; 	//temp. registerr
 8000488:	2300      	movs	r3, #0
 800048a:	617b      	str	r3, [r7, #20]

	//0. Enable the Peripheral Clock
	GPIO_PeriClockControl(pGPIOHandle->pGPIOx, ENABLE);
 800048c:	687b      	ldr	r3, [r7, #4]
 800048e:	681b      	ldr	r3, [r3, #0]
 8000490:	2101      	movs	r1, #1
 8000492:	4618      	mov	r0, r3
 8000494:	f7ff ff72 	bl	800037c <GPIO_PeriClockControl>

	//1. configure(cấu hình) the mode of gpio pin(Datasheet 8.4.1)
	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_ANALOG)
 8000498:	687b      	ldr	r3, [r7, #4]
 800049a:	795b      	ldrb	r3, [r3, #5]
 800049c:	2b03      	cmp	r3, #3
 800049e:	d81f      	bhi.n	80004e0 <GPIO_Init+0x60>
	{
		//Giá trị GPIO_PinMode thuộc 1 trong 4 trường hợp bit của Mode Register
		//this is part non-interrupt mode

		//Xác định lấy vị trí MODERx cần điều khiển dựa vào số chân Pin_Number và lưu vào biến temp
		temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 80004a0:	687b      	ldr	r3, [r7, #4]
 80004a2:	795b      	ldrb	r3, [r3, #5]
 80004a4:	461a      	mov	r2, r3
 80004a6:	687b      	ldr	r3, [r7, #4]
 80004a8:	791b      	ldrb	r3, [r3, #4]
 80004aa:	005b      	lsls	r3, r3, #1
 80004ac:	fa02 f303 	lsl.w	r3, r2, r3
 80004b0:	617b      	str	r3, [r7, #20]
		//Dịch 2 bit vì theo datasheet, mỗi 2 bit quản lý một pin number của GPIO port mode register
		//vd: GPIO_PinNumber=Pin0 thì sẽ kích hoạt MODER0(2*0=0->bắt đầu từ bit0)
		//GPIO_PinNumber=Pin1 thì sẽ kích hoạt MODER1(2*1=2->bắt đầu từ bit2)

		//Xóa(clear) value bit tại vị trí 2 bit muốn cấu hình
		pGPIOHandle->pGPIOx->MODER &= ~(0x3 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80004b2:	687b      	ldr	r3, [r7, #4]
 80004b4:	681b      	ldr	r3, [r3, #0]
 80004b6:	681a      	ldr	r2, [r3, #0]
 80004b8:	687b      	ldr	r3, [r7, #4]
 80004ba:	791b      	ldrb	r3, [r3, #4]
 80004bc:	4619      	mov	r1, r3
 80004be:	2303      	movs	r3, #3
 80004c0:	408b      	lsls	r3, r1
 80004c2:	43db      	mvns	r3, r3
 80004c4:	4619      	mov	r1, r3
 80004c6:	687b      	ldr	r3, [r7, #4]
 80004c8:	681b      	ldr	r3, [r3, #0]
 80004ca:	400a      	ands	r2, r1
 80004cc:	601a      	str	r2, [r3, #0]
		//Theo datasheet thì để reset MODERx thì ta cần thiết lập value bit là 00, Ta có: 0x3 = 11
		//~(0x3 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber); nghĩa là tiến hành đảo trạng thái 11 thành 00
		//vị trí chân Pin_Number

		//Lưu value temp vào trong thanh ghi MODER của biến pGPIOHandle
		pGPIOHandle->pGPIOx->MODER |= temp;
 80004ce:	687b      	ldr	r3, [r7, #4]
 80004d0:	681b      	ldr	r3, [r3, #0]
 80004d2:	6819      	ldr	r1, [r3, #0]
 80004d4:	687b      	ldr	r3, [r7, #4]
 80004d6:	681b      	ldr	r3, [r3, #0]
 80004d8:	697a      	ldr	r2, [r7, #20]
 80004da:	430a      	orrs	r2, r1
 80004dc:	601a      	str	r2, [r3, #0]
 80004de:	e0b8      	b.n	8000652 <GPIO_Init+0x1d2>
	}
	else
	{
		//This is part(phần) will code later (Interrupt mode) //các trường hợp khác từ 4->6

		if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_FT)
 80004e0:	687b      	ldr	r3, [r7, #4]
 80004e2:	795b      	ldrb	r3, [r3, #5]
 80004e4:	2b04      	cmp	r3, #4
 80004e6:	d117      	bne.n	8000518 <GPIO_Init+0x98>
		{
			//1. configure the FTSR(Falling(xuống) Trigger Select Register)
			EXTI->FTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80004e8:	4b43      	ldr	r3, [pc, #268]	; (80005f8 <GPIO_Init+0x178>)
 80004ea:	68db      	ldr	r3, [r3, #12]
 80004ec:	687a      	ldr	r2, [r7, #4]
 80004ee:	7912      	ldrb	r2, [r2, #4]
 80004f0:	4611      	mov	r1, r2
 80004f2:	2201      	movs	r2, #1
 80004f4:	408a      	lsls	r2, r1
 80004f6:	4611      	mov	r1, r2
 80004f8:	4a3f      	ldr	r2, [pc, #252]	; (80005f8 <GPIO_Init+0x178>)
 80004fa:	430b      	orrs	r3, r1
 80004fc:	60d3      	str	r3, [r2, #12]

			//1.2 Clear the corresponding(tương ứng) RTSR, việc này phòng ngừa cho tình huống sử dụng RTSR trước đó
			//và có thể gây xung đột cho lần cấu hình hiện tại
			EXTI->RTSR &= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80004fe:	4b3e      	ldr	r3, [pc, #248]	; (80005f8 <GPIO_Init+0x178>)
 8000500:	689b      	ldr	r3, [r3, #8]
 8000502:	687a      	ldr	r2, [r7, #4]
 8000504:	7912      	ldrb	r2, [r2, #4]
 8000506:	4611      	mov	r1, r2
 8000508:	2201      	movs	r2, #1
 800050a:	408a      	lsls	r2, r1
 800050c:	43d2      	mvns	r2, r2
 800050e:	4611      	mov	r1, r2
 8000510:	4a39      	ldr	r2, [pc, #228]	; (80005f8 <GPIO_Init+0x178>)
 8000512:	400b      	ands	r3, r1
 8000514:	6093      	str	r3, [r2, #8]
 8000516:	e035      	b.n	8000584 <GPIO_Init+0x104>
		}
		else if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RT)
 8000518:	687b      	ldr	r3, [r7, #4]
 800051a:	795b      	ldrb	r3, [r3, #5]
 800051c:	2b05      	cmp	r3, #5
 800051e:	d117      	bne.n	8000550 <GPIO_Init+0xd0>
		{
			//1. configure the RTSR(Rising(lên) Trigger Select Register)
			EXTI->RTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000520:	4b35      	ldr	r3, [pc, #212]	; (80005f8 <GPIO_Init+0x178>)
 8000522:	689b      	ldr	r3, [r3, #8]
 8000524:	687a      	ldr	r2, [r7, #4]
 8000526:	7912      	ldrb	r2, [r2, #4]
 8000528:	4611      	mov	r1, r2
 800052a:	2201      	movs	r2, #1
 800052c:	408a      	lsls	r2, r1
 800052e:	4611      	mov	r1, r2
 8000530:	4a31      	ldr	r2, [pc, #196]	; (80005f8 <GPIO_Init+0x178>)
 8000532:	430b      	orrs	r3, r1
 8000534:	6093      	str	r3, [r2, #8]

			//1.2 Clear the corresponding(tương ứng) FTSR, việc này phòng ngừa cho tình huống sử dụng FTSR trước đó
			//và có thể gây xung đột cho lần cấu hình hiện tại
			EXTI->FTSR &= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000536:	4b30      	ldr	r3, [pc, #192]	; (80005f8 <GPIO_Init+0x178>)
 8000538:	68db      	ldr	r3, [r3, #12]
 800053a:	687a      	ldr	r2, [r7, #4]
 800053c:	7912      	ldrb	r2, [r2, #4]
 800053e:	4611      	mov	r1, r2
 8000540:	2201      	movs	r2, #1
 8000542:	408a      	lsls	r2, r1
 8000544:	43d2      	mvns	r2, r2
 8000546:	4611      	mov	r1, r2
 8000548:	4a2b      	ldr	r2, [pc, #172]	; (80005f8 <GPIO_Init+0x178>)
 800054a:	400b      	ands	r3, r1
 800054c:	60d3      	str	r3, [r2, #12]
 800054e:	e019      	b.n	8000584 <GPIO_Init+0x104>
		}
		else if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RFT)
 8000550:	687b      	ldr	r3, [r7, #4]
 8000552:	795b      	ldrb	r3, [r3, #5]
 8000554:	2b06      	cmp	r3, #6
 8000556:	d115      	bne.n	8000584 <GPIO_Init+0x104>
		{
			//1. configure the FTSR and RTSR
			EXTI->FTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000558:	4b27      	ldr	r3, [pc, #156]	; (80005f8 <GPIO_Init+0x178>)
 800055a:	68db      	ldr	r3, [r3, #12]
 800055c:	687a      	ldr	r2, [r7, #4]
 800055e:	7912      	ldrb	r2, [r2, #4]
 8000560:	4611      	mov	r1, r2
 8000562:	2201      	movs	r2, #1
 8000564:	408a      	lsls	r2, r1
 8000566:	4611      	mov	r1, r2
 8000568:	4a23      	ldr	r2, [pc, #140]	; (80005f8 <GPIO_Init+0x178>)
 800056a:	430b      	orrs	r3, r1
 800056c:	60d3      	str	r3, [r2, #12]
			EXTI->RTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800056e:	4b22      	ldr	r3, [pc, #136]	; (80005f8 <GPIO_Init+0x178>)
 8000570:	689b      	ldr	r3, [r3, #8]
 8000572:	687a      	ldr	r2, [r7, #4]
 8000574:	7912      	ldrb	r2, [r2, #4]
 8000576:	4611      	mov	r1, r2
 8000578:	2201      	movs	r2, #1
 800057a:	408a      	lsls	r2, r1
 800057c:	4611      	mov	r1, r2
 800057e:	4a1e      	ldr	r2, [pc, #120]	; (80005f8 <GPIO_Init+0x178>)
 8000580:	430b      	orrs	r3, r1
 8000582:	6093      	str	r3, [r2, #8]
		}

		//2. Configure the GPIO port selection in SYSCFG_EXTICR
		uint8_t temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 4;		//xác định SYSCFG_EXTICR_temp1 register
 8000584:	687b      	ldr	r3, [r7, #4]
 8000586:	791b      	ldrb	r3, [r3, #4]
 8000588:	089b      	lsrs	r3, r3, #2
 800058a:	74fb      	strb	r3, [r7, #19]
		uint8_t temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 4;		//xác định 4bit EXTI_temp2 trong SYSCFG_EXTICR_temp1
 800058c:	687b      	ldr	r3, [r7, #4]
 800058e:	791b      	ldrb	r3, [r3, #4]
 8000590:	f003 0303 	and.w	r3, r3, #3
 8000594:	74bb      	strb	r3, [r7, #18]
		uint8_t portcode = GPIO_BASEADDR_TO_CODE(pGPIOHandle->pGPIOx);		//xác định mã nhị phân xxxx để xác định GPIO port sử dụng
 8000596:	687b      	ldr	r3, [r7, #4]
 8000598:	681b      	ldr	r3, [r3, #0]
 800059a:	4a18      	ldr	r2, [pc, #96]	; (80005fc <GPIO_Init+0x17c>)
 800059c:	4293      	cmp	r3, r2
 800059e:	d03b      	beq.n	8000618 <GPIO_Init+0x198>
 80005a0:	687b      	ldr	r3, [r7, #4]
 80005a2:	681b      	ldr	r3, [r3, #0]
 80005a4:	4a16      	ldr	r2, [pc, #88]	; (8000600 <GPIO_Init+0x180>)
 80005a6:	4293      	cmp	r3, r2
 80005a8:	d024      	beq.n	80005f4 <GPIO_Init+0x174>
 80005aa:	687b      	ldr	r3, [r7, #4]
 80005ac:	681b      	ldr	r3, [r3, #0]
 80005ae:	4a15      	ldr	r2, [pc, #84]	; (8000604 <GPIO_Init+0x184>)
 80005b0:	4293      	cmp	r3, r2
 80005b2:	d01d      	beq.n	80005f0 <GPIO_Init+0x170>
 80005b4:	687b      	ldr	r3, [r7, #4]
 80005b6:	681b      	ldr	r3, [r3, #0]
 80005b8:	4a13      	ldr	r2, [pc, #76]	; (8000608 <GPIO_Init+0x188>)
 80005ba:	4293      	cmp	r3, r2
 80005bc:	d016      	beq.n	80005ec <GPIO_Init+0x16c>
 80005be:	687b      	ldr	r3, [r7, #4]
 80005c0:	681b      	ldr	r3, [r3, #0]
 80005c2:	4a12      	ldr	r2, [pc, #72]	; (800060c <GPIO_Init+0x18c>)
 80005c4:	4293      	cmp	r3, r2
 80005c6:	d00f      	beq.n	80005e8 <GPIO_Init+0x168>
 80005c8:	687b      	ldr	r3, [r7, #4]
 80005ca:	681b      	ldr	r3, [r3, #0]
 80005cc:	4a10      	ldr	r2, [pc, #64]	; (8000610 <GPIO_Init+0x190>)
 80005ce:	4293      	cmp	r3, r2
 80005d0:	d008      	beq.n	80005e4 <GPIO_Init+0x164>
 80005d2:	687b      	ldr	r3, [r7, #4]
 80005d4:	681b      	ldr	r3, [r3, #0]
 80005d6:	4a0f      	ldr	r2, [pc, #60]	; (8000614 <GPIO_Init+0x194>)
 80005d8:	4293      	cmp	r3, r2
 80005da:	d101      	bne.n	80005e0 <GPIO_Init+0x160>
 80005dc:	2306      	movs	r3, #6
 80005de:	e01c      	b.n	800061a <GPIO_Init+0x19a>
 80005e0:	2300      	movs	r3, #0
 80005e2:	e01a      	b.n	800061a <GPIO_Init+0x19a>
 80005e4:	2305      	movs	r3, #5
 80005e6:	e018      	b.n	800061a <GPIO_Init+0x19a>
 80005e8:	2304      	movs	r3, #4
 80005ea:	e016      	b.n	800061a <GPIO_Init+0x19a>
 80005ec:	2303      	movs	r3, #3
 80005ee:	e014      	b.n	800061a <GPIO_Init+0x19a>
 80005f0:	2302      	movs	r3, #2
 80005f2:	e012      	b.n	800061a <GPIO_Init+0x19a>
 80005f4:	2301      	movs	r3, #1
 80005f6:	e010      	b.n	800061a <GPIO_Init+0x19a>
 80005f8:	40013c00 	.word	0x40013c00
 80005fc:	40020000 	.word	0x40020000
 8000600:	40020400 	.word	0x40020400
 8000604:	40020800 	.word	0x40020800
 8000608:	40020c00 	.word	0x40020c00
 800060c:	40021000 	.word	0x40021000
 8000610:	40021400 	.word	0x40021400
 8000614:	40021800 	.word	0x40021800
 8000618:	2300      	movs	r3, #0
 800061a:	747b      	strb	r3, [r7, #17]
		SYSCFG_PCLK_EN();													//Kích hoạt xung clock để cấu hình
 800061c:	4b5c      	ldr	r3, [pc, #368]	; (8000790 <GPIO_Init+0x310>)
 800061e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000620:	4a5b      	ldr	r2, [pc, #364]	; (8000790 <GPIO_Init+0x310>)
 8000622:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000626:	6453      	str	r3, [r2, #68]	; 0x44
		SYSCFG->EXTICR[temp1] = portcode << (temp2 * 4);					//Cấu hình thanh ghi SYSCFG_EXTICR_temp1
 8000628:	7c7a      	ldrb	r2, [r7, #17]
 800062a:	7cbb      	ldrb	r3, [r7, #18]
 800062c:	009b      	lsls	r3, r3, #2
 800062e:	fa02 f103 	lsl.w	r1, r2, r3
 8000632:	4a58      	ldr	r2, [pc, #352]	; (8000794 <GPIO_Init+0x314>)
 8000634:	7cfb      	ldrb	r3, [r7, #19]
 8000636:	3302      	adds	r3, #2
 8000638:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

		//3. Eanble the exti interrupt delivery(chuyển, sử dụng) by using IMR(Interrupt Masking Register)
		EXTI->IMR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800063c:	4b56      	ldr	r3, [pc, #344]	; (8000798 <GPIO_Init+0x318>)
 800063e:	681b      	ldr	r3, [r3, #0]
 8000640:	687a      	ldr	r2, [r7, #4]
 8000642:	7912      	ldrb	r2, [r2, #4]
 8000644:	4611      	mov	r1, r2
 8000646:	2201      	movs	r2, #1
 8000648:	408a      	lsls	r2, r1
 800064a:	4611      	mov	r1, r2
 800064c:	4a52      	ldr	r2, [pc, #328]	; (8000798 <GPIO_Init+0x318>)
 800064e:	430b      	orrs	r3, r1
 8000650:	6013      	str	r3, [r2, #0]

	}
	//Reset biến temp để sử dụng cho các lệnh khác trong hàm
	temp = 0;
 8000652:	2300      	movs	r3, #0
 8000654:	617b      	str	r3, [r7, #20]

	//2. configure the speed (Datasheet 8.4.3)
	//Xác định lấy vị trí OSPEEDRx cần điều khiển dựa vào số chân Pin_Number và lưu vào biến temp
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinSpeed << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000656:	687b      	ldr	r3, [r7, #4]
 8000658:	799b      	ldrb	r3, [r3, #6]
 800065a:	461a      	mov	r2, r3
 800065c:	687b      	ldr	r3, [r7, #4]
 800065e:	791b      	ldrb	r3, [r3, #4]
 8000660:	005b      	lsls	r3, r3, #1
 8000662:	fa02 f303 	lsl.w	r3, r2, r3
 8000666:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OSPEEDR &=  ~(0x3 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);	//Clearing bit field
 8000668:	687b      	ldr	r3, [r7, #4]
 800066a:	681b      	ldr	r3, [r3, #0]
 800066c:	689a      	ldr	r2, [r3, #8]
 800066e:	687b      	ldr	r3, [r7, #4]
 8000670:	791b      	ldrb	r3, [r3, #4]
 8000672:	4619      	mov	r1, r3
 8000674:	2303      	movs	r3, #3
 8000676:	408b      	lsls	r3, r1
 8000678:	43db      	mvns	r3, r3
 800067a:	4619      	mov	r1, r3
 800067c:	687b      	ldr	r3, [r7, #4]
 800067e:	681b      	ldr	r3, [r3, #0]
 8000680:	400a      	ands	r2, r1
 8000682:	609a      	str	r2, [r3, #8]
	pGPIOHandle->pGPIOx->OSPEEDR |= temp;
 8000684:	687b      	ldr	r3, [r7, #4]
 8000686:	681b      	ldr	r3, [r3, #0]
 8000688:	6899      	ldr	r1, [r3, #8]
 800068a:	687b      	ldr	r3, [r7, #4]
 800068c:	681b      	ldr	r3, [r3, #0]
 800068e:	697a      	ldr	r2, [r7, #20]
 8000690:	430a      	orrs	r2, r1
 8000692:	609a      	str	r2, [r3, #8]
	//=> Lúc này ta đã xác định(cấu hình) đc speed(OSPEEDRx) của GPIO tùy thuộc vào pin_number bạn muốn control
	temp = 0;
 8000694:	2300      	movs	r3, #0
 8000696:	617b      	str	r3, [r7, #20]

	//3. configure the pullup-pulldown settings (Datasheet 8.4.4)
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinPuPdControl << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000698:	687b      	ldr	r3, [r7, #4]
 800069a:	79db      	ldrb	r3, [r3, #7]
 800069c:	461a      	mov	r2, r3
 800069e:	687b      	ldr	r3, [r7, #4]
 80006a0:	791b      	ldrb	r3, [r3, #4]
 80006a2:	005b      	lsls	r3, r3, #1
 80006a4:	fa02 f303 	lsl.w	r3, r2, r3
 80006a8:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->PUPDR &=  ~(0x3 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80006aa:	687b      	ldr	r3, [r7, #4]
 80006ac:	681b      	ldr	r3, [r3, #0]
 80006ae:	68da      	ldr	r2, [r3, #12]
 80006b0:	687b      	ldr	r3, [r7, #4]
 80006b2:	791b      	ldrb	r3, [r3, #4]
 80006b4:	4619      	mov	r1, r3
 80006b6:	2303      	movs	r3, #3
 80006b8:	408b      	lsls	r3, r1
 80006ba:	43db      	mvns	r3, r3
 80006bc:	4619      	mov	r1, r3
 80006be:	687b      	ldr	r3, [r7, #4]
 80006c0:	681b      	ldr	r3, [r3, #0]
 80006c2:	400a      	ands	r2, r1
 80006c4:	60da      	str	r2, [r3, #12]
	pGPIOHandle->pGPIOx->PUPDR |= temp;
 80006c6:	687b      	ldr	r3, [r7, #4]
 80006c8:	681b      	ldr	r3, [r3, #0]
 80006ca:	68d9      	ldr	r1, [r3, #12]
 80006cc:	687b      	ldr	r3, [r7, #4]
 80006ce:	681b      	ldr	r3, [r3, #0]
 80006d0:	697a      	ldr	r2, [r7, #20]
 80006d2:	430a      	orrs	r2, r1
 80006d4:	60da      	str	r2, [r3, #12]
	temp = 0;
 80006d6:	2300      	movs	r3, #0
 80006d8:	617b      	str	r3, [r7, #20]

	//4. configure the optype (Datasheet 8.4.2)
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinOPType << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80006da:	687b      	ldr	r3, [r7, #4]
 80006dc:	7a1b      	ldrb	r3, [r3, #8]
 80006de:	461a      	mov	r2, r3
 80006e0:	687b      	ldr	r3, [r7, #4]
 80006e2:	791b      	ldrb	r3, [r3, #4]
 80006e4:	fa02 f303 	lsl.w	r3, r2, r3
 80006e8:	617b      	str	r3, [r7, #20]
	//Dịch 1 bit vì theo datasheet, mỗi 1 bit quản lý một pin number của GPIO port mode register
	pGPIOHandle->pGPIOx->OTYPER &=  ~(0x1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber); //Clearing bit field
 80006ea:	687b      	ldr	r3, [r7, #4]
 80006ec:	681b      	ldr	r3, [r3, #0]
 80006ee:	685a      	ldr	r2, [r3, #4]
 80006f0:	687b      	ldr	r3, [r7, #4]
 80006f2:	791b      	ldrb	r3, [r3, #4]
 80006f4:	4619      	mov	r1, r3
 80006f6:	2301      	movs	r3, #1
 80006f8:	408b      	lsls	r3, r1
 80006fa:	43db      	mvns	r3, r3
 80006fc:	4619      	mov	r1, r3
 80006fe:	687b      	ldr	r3, [r7, #4]
 8000700:	681b      	ldr	r3, [r3, #0]
 8000702:	400a      	ands	r2, r1
 8000704:	605a      	str	r2, [r3, #4]
	//~(0x1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber); nghĩa là tiến hành đảo trạng thái 1 thành 0
	//vị trí chân Pin_Number
	pGPIOHandle->pGPIOx->OTYPER |= temp;
 8000706:	687b      	ldr	r3, [r7, #4]
 8000708:	681b      	ldr	r3, [r3, #0]
 800070a:	6859      	ldr	r1, [r3, #4]
 800070c:	687b      	ldr	r3, [r7, #4]
 800070e:	681b      	ldr	r3, [r3, #0]
 8000710:	697a      	ldr	r2, [r7, #20]
 8000712:	430a      	orrs	r2, r1
 8000714:	605a      	str	r2, [r3, #4]
	temp = 0;
 8000716:	2300      	movs	r3, #0
 8000718:	617b      	str	r3, [r7, #20]

	//5. configure the alt functionality
	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_ALTFN)
 800071a:	687b      	ldr	r3, [r7, #4]
 800071c:	795b      	ldrb	r3, [r3, #5]
 800071e:	2b02      	cmp	r3, #2
 8000720:	d132      	bne.n	8000788 <GPIO_Init+0x308>
		//Chế độ này đc thực thi khi và chỉ khi bit MODERx đc thiết lập GPIO_MODE_ALTFN

		uint32_t temp1,temp2;

		//Xác định thanh ghi cần sử dụng là GPIOx_AFRH ->AFR[1] hay GPIOx_AFRL ->AFR[0]
		temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 8;
 8000722:	687b      	ldr	r3, [r7, #4]
 8000724:	791b      	ldrb	r3, [r3, #4]
 8000726:	08db      	lsrs	r3, r3, #3
 8000728:	b2db      	uxtb	r3, r3
 800072a:	60fb      	str	r3, [r7, #12]

		//Xác định vị trí cụm 4bit cần sử dụng ở vị trí nào trong thanh ghi
		temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 8;
 800072c:	687b      	ldr	r3, [r7, #4]
 800072e:	791b      	ldrb	r3, [r3, #4]
 8000730:	f003 0307 	and.w	r3, r3, #7
 8000734:	60bb      	str	r3, [r7, #8]

		//Clearing bit field
		pGPIOHandle->pGPIOx->AFR[temp1] &= ~(0xF << (4* temp2));   //0xF = 1111, đảo 1111->0000 tại vị trí 4*temp2
 8000736:	687b      	ldr	r3, [r7, #4]
 8000738:	681b      	ldr	r3, [r3, #0]
 800073a:	68fa      	ldr	r2, [r7, #12]
 800073c:	3208      	adds	r2, #8
 800073e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000742:	68bb      	ldr	r3, [r7, #8]
 8000744:	009b      	lsls	r3, r3, #2
 8000746:	210f      	movs	r1, #15
 8000748:	fa01 f303 	lsl.w	r3, r1, r3
 800074c:	43db      	mvns	r3, r3
 800074e:	4619      	mov	r1, r3
 8000750:	687b      	ldr	r3, [r7, #4]
 8000752:	681b      	ldr	r3, [r3, #0]
 8000754:	4011      	ands	r1, r2
 8000756:	68fa      	ldr	r2, [r7, #12]
 8000758:	3208      	adds	r2, #8
 800075a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

		//Lưu cấu hình AFR vào trong con trỏ pGPIOHandle
		pGPIOHandle->pGPIOx->AFR[temp1] |= (pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFunMode << (4* temp2));
 800075e:	687b      	ldr	r3, [r7, #4]
 8000760:	681b      	ldr	r3, [r3, #0]
 8000762:	68fa      	ldr	r2, [r7, #12]
 8000764:	3208      	adds	r2, #8
 8000766:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800076a:	687b      	ldr	r3, [r7, #4]
 800076c:	7a5b      	ldrb	r3, [r3, #9]
 800076e:	4619      	mov	r1, r3
 8000770:	68bb      	ldr	r3, [r7, #8]
 8000772:	009b      	lsls	r3, r3, #2
 8000774:	fa01 f303 	lsl.w	r3, r1, r3
 8000778:	4619      	mov	r1, r3
 800077a:	687b      	ldr	r3, [r7, #4]
 800077c:	681b      	ldr	r3, [r3, #0]
 800077e:	4311      	orrs	r1, r2
 8000780:	68fa      	ldr	r2, [r7, #12]
 8000782:	3208      	adds	r2, #8
 8000784:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	}
}
 8000788:	bf00      	nop
 800078a:	3718      	adds	r7, #24
 800078c:	46bd      	mov	sp, r7
 800078e:	bd80      	pop	{r7, pc}
 8000790:	40023800 	.word	0x40023800
 8000794:	40013800 	.word	0x40013800
 8000798:	40013c00 	.word	0x40013c00

0800079c <GPIO_ReadFromInputPin>:
 * @return		- value of read in pin_number (0 or 1)
 *
 * @Note 		- none
 */
uint8_t GPIO_ReadFromInputPin(GPIO_RegDef_t *pGPIOx, uint8_t PinNumber)
{
 800079c:	b480      	push	{r7}
 800079e:	b085      	sub	sp, #20
 80007a0:	af00      	add	r7, sp, #0
 80007a2:	6078      	str	r0, [r7, #4]
 80007a4:	460b      	mov	r3, r1
 80007a6:	70fb      	strb	r3, [r7, #3]
	uint8_t value;			//biến lưu value đọc đc từ pin
	value = (uint8_t)((pGPIOx->IDR >> PinNumber) & 0x00000001);
 80007a8:	687b      	ldr	r3, [r7, #4]
 80007aa:	691a      	ldr	r2, [r3, #16]
 80007ac:	78fb      	ldrb	r3, [r7, #3]
 80007ae:	fa22 f303 	lsr.w	r3, r2, r3
 80007b2:	b2db      	uxtb	r3, r3
 80007b4:	f003 0301 	and.w	r3, r3, #1
 80007b8:	73fb      	strb	r3, [r7, #15]
	return value;
 80007ba:	7bfb      	ldrb	r3, [r7, #15]

	//((pGPIOx->IDR >> PinNumber): Phần này dịch chuyển giá trị IDR sang phải của vị trí PinNumber đầu vào,
	//căn chỉnh giá trị đầu vào của chân mong muốn về bit ngoài cùng bên phải(bit0).
	//& 0x00000001: Thao tác AND theo bit này che giấu tất cả ngoại trừ bit ngoài cùng bên phải(bit0),
	//trích xuất hiệu quả giá trị đầu vào của mã pin được chỉ định.
}
 80007bc:	4618      	mov	r0, r3
 80007be:	3714      	adds	r7, #20
 80007c0:	46bd      	mov	sp, r7
 80007c2:	bc80      	pop	{r7}
 80007c4:	4770      	bx	lr
	...

080007c8 <I2C_PeriClockControl>:
 *
 * @Note        - none

 */
void I2C_PeriClockControl(I2C_RegDef_t *pI2Cx, uint8_t EnorDi)
{
 80007c8:	b480      	push	{r7}
 80007ca:	b083      	sub	sp, #12
 80007cc:	af00      	add	r7, sp, #0
 80007ce:	6078      	str	r0, [r7, #4]
 80007d0:	460b      	mov	r3, r1
 80007d2:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE)
 80007d4:	78fb      	ldrb	r3, [r7, #3]
 80007d6:	2b01      	cmp	r3, #1
 80007d8:	d11f      	bne.n	800081a <I2C_PeriClockControl+0x52>
	{
		if(pI2Cx == I2C1)
 80007da:	687b      	ldr	r3, [r7, #4]
 80007dc:	4a11      	ldr	r2, [pc, #68]	; (8000824 <I2C_PeriClockControl+0x5c>)
 80007de:	4293      	cmp	r3, r2
 80007e0:	d106      	bne.n	80007f0 <I2C_PeriClockControl+0x28>
		{
			I2C1_PCLK_EN();
 80007e2:	4b11      	ldr	r3, [pc, #68]	; (8000828 <I2C_PeriClockControl+0x60>)
 80007e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007e6:	4a10      	ldr	r2, [pc, #64]	; (8000828 <I2C_PeriClockControl+0x60>)
 80007e8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80007ec:	6413      	str	r3, [r2, #64]	; 0x40
	}
	else
	{
		//TODO
	}
}
 80007ee:	e014      	b.n	800081a <I2C_PeriClockControl+0x52>
		else if (pI2Cx == I2C2)
 80007f0:	687b      	ldr	r3, [r7, #4]
 80007f2:	4a0e      	ldr	r2, [pc, #56]	; (800082c <I2C_PeriClockControl+0x64>)
 80007f4:	4293      	cmp	r3, r2
 80007f6:	d106      	bne.n	8000806 <I2C_PeriClockControl+0x3e>
			I2C2_PCLK_EN();
 80007f8:	4b0b      	ldr	r3, [pc, #44]	; (8000828 <I2C_PeriClockControl+0x60>)
 80007fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007fc:	4a0a      	ldr	r2, [pc, #40]	; (8000828 <I2C_PeriClockControl+0x60>)
 80007fe:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000802:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000804:	e009      	b.n	800081a <I2C_PeriClockControl+0x52>
		else if (pI2Cx == I2C3)
 8000806:	687b      	ldr	r3, [r7, #4]
 8000808:	4a09      	ldr	r2, [pc, #36]	; (8000830 <I2C_PeriClockControl+0x68>)
 800080a:	4293      	cmp	r3, r2
 800080c:	d105      	bne.n	800081a <I2C_PeriClockControl+0x52>
			I2C3_PCLK_EN();
 800080e:	4b06      	ldr	r3, [pc, #24]	; (8000828 <I2C_PeriClockControl+0x60>)
 8000810:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000812:	4a05      	ldr	r2, [pc, #20]	; (8000828 <I2C_PeriClockControl+0x60>)
 8000814:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000818:	6413      	str	r3, [r2, #64]	; 0x40
}
 800081a:	bf00      	nop
 800081c:	370c      	adds	r7, #12
 800081e:	46bd      	mov	sp, r7
 8000820:	bc80      	pop	{r7}
 8000822:	4770      	bx	lr
 8000824:	40005400 	.word	0x40005400
 8000828:	40023800 	.word	0x40023800
 800082c:	40005800 	.word	0x40005800
 8000830:	40005c00 	.word	0x40005c00

08000834 <RCC_GetPLLOutputClock>:
 *
 * @Note        - Không sử dụng xung clock dạng PLL trong khóa học

 */
uint32_t RCC_GetPLLOutputClock(void)
{
 8000834:	b480      	push	{r7}
 8000836:	af00      	add	r7, sp, #0
	return 0;
 8000838:	2300      	movs	r3, #0
}
 800083a:	4618      	mov	r0, r3
 800083c:	46bd      	mov	sp, r7
 800083e:	bc80      	pop	{r7}
 8000840:	4770      	bx	lr
	...

08000844 <RCC_GetPCLK1Value>:
 *
 * @Note        - Sử dụng sơ đồ khối liên quan đến xung Clock của System Clock
 * 				- Thanh ghi CFGR thuộc RCC Register đc sử dụng
 */
uint32_t RCC_GetPCLK1Value(void)
{
 8000844:	b580      	push	{r7, lr}
 8000846:	b084      	sub	sp, #16
 8000848:	af00      	add	r7, sp, #0

	uint8_t clksrc,temp,ahbp,abp1p;				//biến xung clock cho khối system clock

	//Kiểm tra xem SWS[3:2] đang có giá trị bit là bao nhiêu, từ đó xác định khối
	//Oscillator đang đc sử dụng là System Clock
	clksrc = (RCC->CFGR >> 2) & 0x3;	//0x03=0011, nghĩa là đọc 2 vị trí bit liền nhau từ vị trí bit số 2
 800084a:	4b26      	ldr	r3, [pc, #152]	; (80008e4 <RCC_GetPCLK1Value+0xa0>)
 800084c:	689b      	ldr	r3, [r3, #8]
 800084e:	089b      	lsrs	r3, r3, #2
 8000850:	b2db      	uxtb	r3, r3
 8000852:	f003 0303 	and.w	r3, r3, #3
 8000856:	727b      	strb	r3, [r7, #9]


	//1. Xác định tần số xung clock tổng của System Clock
	if(clksrc == 0)    		 	//HSI Oscillator
 8000858:	7a7b      	ldrb	r3, [r7, #9]
 800085a:	2b00      	cmp	r3, #0
 800085c:	d102      	bne.n	8000864 <RCC_GetPCLK1Value+0x20>
	{
		SystemClk = 16000000;
 800085e:	4b22      	ldr	r3, [pc, #136]	; (80008e8 <RCC_GetPCLK1Value+0xa4>)
 8000860:	60fb      	str	r3, [r7, #12]
 8000862:	e00b      	b.n	800087c <RCC_GetPCLK1Value+0x38>
	}
	else if(clksrc == 1)		//HSE Oscillator
 8000864:	7a7b      	ldrb	r3, [r7, #9]
 8000866:	2b01      	cmp	r3, #1
 8000868:	d102      	bne.n	8000870 <RCC_GetPCLK1Value+0x2c>
	{
		SystemClk = 8000000;
 800086a:	4b20      	ldr	r3, [pc, #128]	; (80008ec <RCC_GetPCLK1Value+0xa8>)
 800086c:	60fb      	str	r3, [r7, #12]
 800086e:	e005      	b.n	800087c <RCC_GetPCLK1Value+0x38>
	}
	else if(clksrc == 2)		//PLL Oscillator
 8000870:	7a7b      	ldrb	r3, [r7, #9]
 8000872:	2b02      	cmp	r3, #2
 8000874:	d102      	bne.n	800087c <RCC_GetPCLK1Value+0x38>
	{
		SystemClk = RCC_GetPLLOutputClock();
 8000876:	f7ff ffdd 	bl	8000834 <RCC_GetPLLOutputClock>
 800087a:	60f8      	str	r0, [r7, #12]
	}

	//2. Xác định bộ chia của AHBP Prescaler, bit field HPRE[7:4] của CFGR register
	temp = ((RCC->CFGR >> 4) & 0xF);	//0xF=1111, nghĩa là đọc 4 vị trí bit liền nhau từ vị trí bit số 4
 800087c:	4b19      	ldr	r3, [pc, #100]	; (80008e4 <RCC_GetPCLK1Value+0xa0>)
 800087e:	689b      	ldr	r3, [r3, #8]
 8000880:	091b      	lsrs	r3, r3, #4
 8000882:	b2db      	uxtb	r3, r3
 8000884:	f003 030f 	and.w	r3, r3, #15
 8000888:	723b      	strb	r3, [r7, #8]
	if(temp < 4)
 800088a:	7a3b      	ldrb	r3, [r7, #8]
 800088c:	2b03      	cmp	r3, #3
 800088e:	d802      	bhi.n	8000896 <RCC_GetPCLK1Value+0x52>
	{
		ahbp = 1;			//Không sử dụng bộ chia
 8000890:	2301      	movs	r3, #1
 8000892:	72fb      	strb	r3, [r7, #11]
 8000894:	e005      	b.n	80008a2 <RCC_GetPCLK1Value+0x5e>
	}
	else
	{
		//Có sử dụng bộ chia, nếu temp=8 thì 8-8=0, sử dụng bộ chia 2,...
		ahbp = AHB_PreScaler[temp - 8];
 8000896:	7a3b      	ldrb	r3, [r7, #8]
 8000898:	3b08      	subs	r3, #8
 800089a:	4a15      	ldr	r2, [pc, #84]	; (80008f0 <RCC_GetPCLK1Value+0xac>)
 800089c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80008a0:	72fb      	strb	r3, [r7, #11]
	}

	//3. Xác định bộ chia của APB1 PreScaler,bit ffield PPRE[12:10] của CFGR register
	temp = ((RCC->CFGR >> 10) & 0x7);	//0xF=1111, nghĩa là đọc 3 vị trí bit liền nhau từ vị trí bit số 10
 80008a2:	4b10      	ldr	r3, [pc, #64]	; (80008e4 <RCC_GetPCLK1Value+0xa0>)
 80008a4:	689b      	ldr	r3, [r3, #8]
 80008a6:	0a9b      	lsrs	r3, r3, #10
 80008a8:	b2db      	uxtb	r3, r3
 80008aa:	f003 0307 	and.w	r3, r3, #7
 80008ae:	723b      	strb	r3, [r7, #8]
	if(temp < 8)
 80008b0:	7a3b      	ldrb	r3, [r7, #8]
 80008b2:	2b07      	cmp	r3, #7
 80008b4:	d802      	bhi.n	80008bc <RCC_GetPCLK1Value+0x78>
	{
		abp1p = 1;			//Không sử dụng bộ chia
 80008b6:	2301      	movs	r3, #1
 80008b8:	72bb      	strb	r3, [r7, #10]
 80008ba:	e005      	b.n	80008c8 <RCC_GetPCLK1Value+0x84>
	}
	else
	{
		//Có sử dụng bộ chia, nếu temp=8 thì 8-8=0, sử dụng bộ chia 2,...
		abp1p = APB1_PreScaler[temp - 4];
 80008bc:	7a3b      	ldrb	r3, [r7, #8]
 80008be:	3b04      	subs	r3, #4
 80008c0:	4a0c      	ldr	r2, [pc, #48]	; (80008f4 <RCC_GetPCLK1Value+0xb0>)
 80008c2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80008c6:	72bb      	strb	r3, [r7, #10]
	}

	//4. Xác định xung PCLK1 dùng cho I2C đc lấy từ từ System Clock
	pclk1 = (SystemClk / ahbp) / abp1p;
 80008c8:	7afb      	ldrb	r3, [r7, #11]
 80008ca:	68fa      	ldr	r2, [r7, #12]
 80008cc:	fbb2 f2f3 	udiv	r2, r2, r3
 80008d0:	7abb      	ldrb	r3, [r7, #10]
 80008d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80008d6:	607b      	str	r3, [r7, #4]

	return pclk1;
 80008d8:	687b      	ldr	r3, [r7, #4]
}
 80008da:	4618      	mov	r0, r3
 80008dc:	3710      	adds	r7, #16
 80008de:	46bd      	mov	sp, r7
 80008e0:	bd80      	pop	{r7, pc}
 80008e2:	bf00      	nop
 80008e4:	40023800 	.word	0x40023800
 80008e8:	00f42400 	.word	0x00f42400
 80008ec:	007a1200 	.word	0x007a1200
 80008f0:	20000000 	.word	0x20000000
 80008f4:	20000010 	.word	0x20000010

080008f8 <I2C_Init>:
 *
 * @Note        - none

 */
void I2C_Init(I2C_Handle_t *pI2CHandle)
{
 80008f8:	b580      	push	{r7, lr}
 80008fa:	b084      	sub	sp, #16
 80008fc:	af00      	add	r7, sp, #0
 80008fe:	6078      	str	r0, [r7, #4]
	uint32_t tempreg = 0;		//biến tạm 32 bit temp register
 8000900:	2300      	movs	r3, #0
 8000902:	60fb      	str	r3, [r7, #12]

	//Enable the Clock for the I2Cx peripheral - Kích hoạt xung clock cho I2Cx
	I2C_PeriClockControl(pI2CHandle->pI2Cx, ENABLE);
 8000904:	687b      	ldr	r3, [r7, #4]
 8000906:	681b      	ldr	r3, [r3, #0]
 8000908:	2101      	movs	r1, #1
 800090a:	4618      	mov	r0, r3
 800090c:	f7ff ff5c 	bl	80007c8 <I2C_PeriClockControl>

	//Đọc và Lưu giá trị của I2C_AckControl(sẽ đc set khi init) vào vị trí bit thứ 10 biến tạm tempreg
	tempreg |= pI2CHandle->I2C_Config.I2C_AckControl << 10;				//Ack control bit
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	7a5b      	ldrb	r3, [r3, #9]
 8000914:	029b      	lsls	r3, r3, #10
 8000916:	461a      	mov	r2, r3
 8000918:	68fb      	ldr	r3, [r7, #12]
 800091a:	4313      	orrs	r3, r2
 800091c:	60fb      	str	r3, [r7, #12]
	//Kích hoạt hoặc vô hiệu hóa theo yêu cầu của User

	//Thiết lập giá trị bit thứ 10 của thanh ghi CR1 với giá trị biến tempreg
	pI2CHandle->pI2Cx->CR1 = tempreg;
 800091e:	687b      	ldr	r3, [r7, #4]
 8000920:	681b      	ldr	r3, [r3, #0]
 8000922:	68fa      	ldr	r2, [r7, #12]
 8000924:	601a      	str	r2, [r3, #0]

	/* Cấu hình bit field FREQ của CR2 register */
	tempreg = 0;
 8000926:	2300      	movs	r3, #0
 8000928:	60fb      	str	r3, [r7, #12]
	tempreg |= RCC_GetPCLK1Value() / 1000000U;
 800092a:	f7ff ff8b 	bl	8000844 <RCC_GetPCLK1Value>
 800092e:	4603      	mov	r3, r0
 8000930:	4a48      	ldr	r2, [pc, #288]	; (8000a54 <I2C_Init+0x15c>)
 8000932:	fba2 2303 	umull	r2, r3, r2, r3
 8000936:	0c9b      	lsrs	r3, r3, #18
 8000938:	68fa      	ldr	r2, [r7, #12]
 800093a:	4313      	orrs	r3, r2
 800093c:	60fb      	str	r3, [r7, #12]
	//Giải thích: vì giá trị trả về là 16MHz nên ta chia 1MHz để lấy giá trị 16

	pI2CHandle->pI2Cx->CR2 = (tempreg & 0x3F);  //0x3F = 0011 1111
 800093e:	687b      	ldr	r3, [r7, #4]
 8000940:	681b      	ldr	r3, [r3, #0]
 8000942:	68fa      	ldr	r2, [r7, #12]
 8000944:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8000948:	605a      	str	r2, [r3, #4]
	//Giá trị 16 của tempreg khi biên dịch sẽ đc trình biên dịch tách thành mã nhị phân
	//sau đó & với 0x3F vì bit field FREQ sử dụng 6 bit đầu của CR2 Register

	/* Lập trình định dạng địa chỉ và địa chỉ của thiết bị , OAR1 register */
	tempreg |= pI2CHandle->I2C_Config.I2C_DeviceAddress << 1;	// ADD[7:1] : lấy giá trị từ bit thứ 2
 800094a:	687b      	ldr	r3, [r7, #4]
 800094c:	7a1b      	ldrb	r3, [r3, #8]
 800094e:	005b      	lsls	r3, r3, #1
 8000950:	461a      	mov	r2, r3
 8000952:	68fb      	ldr	r3, [r7, #12]
 8000954:	4313      	orrs	r3, r2
 8000956:	60fb      	str	r3, [r7, #12]
	tempreg |= (1 << 14);								//Lệnh bắt buộc bit thứ 14 luôn là 1 khi cấu hình
 8000958:	68fb      	ldr	r3, [r7, #12]
 800095a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800095e:	60fb      	str	r3, [r7, #12]
	pI2CHandle->pI2Cx->OAR1 = tempreg;					//Đưa vào cấu hình thanh ghi OAR1 bằng giá trị tempreg
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	681b      	ldr	r3, [r3, #0]
 8000964:	68fa      	ldr	r2, [r7, #12]
 8000966:	609a      	str	r2, [r3, #8]

	/* CCR Calculations, Tính toán tần số cho Clock control register */
	uint16_t ccr_value = 0;					//giá trị tần số tạm
 8000968:	2300      	movs	r3, #0
 800096a:	817b      	strh	r3, [r7, #10]
	tempreg = 0;
 800096c:	2300      	movs	r3, #0
 800096e:	60fb      	str	r3, [r7, #12]

	//Kiểm tra speed đc cài đặt đầu vào ở tần số nào từ đó suy ra chế độ đang sử dụng
	if(pI2CHandle->I2C_Config.I2C_SCLSpeed <= I2C_SCL_SPEED_SM)
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	685b      	ldr	r3, [r3, #4]
 8000974:	4a38      	ldr	r2, [pc, #224]	; (8000a58 <I2C_Init+0x160>)
 8000976:	4293      	cmp	r3, r2
 8000978:	d80f      	bhi.n	800099a <I2C_Init+0xa2>
	{
		//Nếu ở Standard Mode
		ccr_value = (RCC_GetPCLK1Value() / (2 * pI2CHandle->I2C_Config.I2C_SCLSpeed));
 800097a:	f7ff ff63 	bl	8000844 <RCC_GetPCLK1Value>
 800097e:	4602      	mov	r2, r0
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	685b      	ldr	r3, [r3, #4]
 8000984:	005b      	lsls	r3, r3, #1
 8000986:	fbb2 f3f3 	udiv	r3, r2, r3
 800098a:	817b      	strh	r3, [r7, #10]
		tempreg |= ccr_value & 0xFFF;	//0xFFF: CCR[11:0] của CCR Register (If Standard Mode)
 800098c:	897b      	ldrh	r3, [r7, #10]
 800098e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000992:	68fa      	ldr	r2, [r7, #12]
 8000994:	4313      	orrs	r3, r2
 8000996:	60fb      	str	r3, [r7, #12]
 8000998:	e02d      	b.n	80009f6 <I2C_Init+0xfe>
	}
	else
	{
		//Nếu ở Fast Mode
		tempreg |= ( 1 << 15);	//Đưa bit field F/S[15] lên 1 của CCR Register, kích hoạt chế độ Fast Mode
 800099a:	68fb      	ldr	r3, [r7, #12]
 800099c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80009a0:	60fb      	str	r3, [r7, #12]
		tempreg |= (pI2CHandle->I2C_Config.I2C_FmDutyCycle << 14); //Set value Duty đã đc user input khi init
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	7a9b      	ldrb	r3, [r3, #10]
 80009a6:	039b      	lsls	r3, r3, #14
 80009a8:	461a      	mov	r2, r3
 80009aa:	68fb      	ldr	r3, [r7, #12]
 80009ac:	4313      	orrs	r3, r2
 80009ae:	60fb      	str	r3, [r7, #12]
		//vào bit field DUTY[14]

		//Kiểm tra DUTY đang ở trạng thái nào để áp dụng công thức
		if(pI2CHandle->I2C_Config.I2C_FmDutyCycle == I2C_FM_DUTY_2)
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	7a9b      	ldrb	r3, [r3, #10]
 80009b4:	2b00      	cmp	r3, #0
 80009b6:	d10b      	bne.n	80009d0 <I2C_Init+0xd8>
		{
			//Nếu Duty = 0
			ccr_value = (RCC_GetPCLK1Value() / (3 * pI2CHandle->I2C_Config.I2C_SCLSpeed));
 80009b8:	f7ff ff44 	bl	8000844 <RCC_GetPCLK1Value>
 80009bc:	4601      	mov	r1, r0
 80009be:	687b      	ldr	r3, [r7, #4]
 80009c0:	685a      	ldr	r2, [r3, #4]
 80009c2:	4613      	mov	r3, r2
 80009c4:	005b      	lsls	r3, r3, #1
 80009c6:	4413      	add	r3, r2
 80009c8:	fbb1 f3f3 	udiv	r3, r1, r3
 80009cc:	817b      	strh	r3, [r7, #10]
 80009ce:	e00c      	b.n	80009ea <I2C_Init+0xf2>
		}
		else
		{
			//Nếu Duty = 1
			ccr_value = (RCC_GetPCLK1Value() / (25 * pI2CHandle->I2C_Config.I2C_SCLSpeed));
 80009d0:	f7ff ff38 	bl	8000844 <RCC_GetPCLK1Value>
 80009d4:	4601      	mov	r1, r0
 80009d6:	687b      	ldr	r3, [r7, #4]
 80009d8:	685a      	ldr	r2, [r3, #4]
 80009da:	4613      	mov	r3, r2
 80009dc:	009b      	lsls	r3, r3, #2
 80009de:	4413      	add	r3, r2
 80009e0:	009a      	lsls	r2, r3, #2
 80009e2:	4413      	add	r3, r2
 80009e4:	fbb1 f3f3 	udiv	r3, r1, r3
 80009e8:	817b      	strh	r3, [r7, #10]
		}

		tempreg |= ccr_value & 0xFFF;	//0xFFF: CCR[11:0] của CCR Register (If Fast Mode)
 80009ea:	897b      	ldrh	r3, [r7, #10]
 80009ec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80009f0:	68fa      	ldr	r2, [r7, #12]
 80009f2:	4313      	orrs	r3, r2
 80009f4:	60fb      	str	r3, [r7, #12]
	}
	pI2CHandle->pI2Cx->CCR |= tempreg;		//Cấu hình thanh ghi CCR cho processor
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	681b      	ldr	r3, [r3, #0]
 80009fa:	69d9      	ldr	r1, [r3, #28]
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	681b      	ldr	r3, [r3, #0]
 8000a00:	68fa      	ldr	r2, [r7, #12]
 8000a02:	430a      	orrs	r2, r1
 8000a04:	61da      	str	r2, [r3, #28]

	/* TRISE Configuration TRISE register (I2C_TRISE) */
	//Kiểm tra speed đc cài đặt đầu vào ở tần số nào từ đó suy ra chế độ đang sử dụng
	if(pI2CHandle->I2C_Config.I2C_SCLSpeed <= I2C_SCL_SPEED_SM)
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	685b      	ldr	r3, [r3, #4]
 8000a0a:	4a13      	ldr	r2, [pc, #76]	; (8000a58 <I2C_Init+0x160>)
 8000a0c:	4293      	cmp	r3, r2
 8000a0e:	d809      	bhi.n	8000a24 <I2C_Init+0x12c>
	{
		//Nếu ở Standard Mode
		tempreg = (RCC_GetPCLK1Value() / 1000000U) + 1;	//công thức datasheet
 8000a10:	f7ff ff18 	bl	8000844 <RCC_GetPCLK1Value>
 8000a14:	4603      	mov	r3, r0
 8000a16:	4a0f      	ldr	r2, [pc, #60]	; (8000a54 <I2C_Init+0x15c>)
 8000a18:	fba2 2303 	umull	r2, r3, r2, r3
 8000a1c:	0c9b      	lsrs	r3, r3, #18
 8000a1e:	3301      	adds	r3, #1
 8000a20:	60fb      	str	r3, [r7, #12]
 8000a22:	e00d      	b.n	8000a40 <I2C_Init+0x148>
	}
	else
	{
		//Nếu ở Fast Mode
		tempreg = ((RCC_GetPCLK1Value() * 300) / 1000000000U) + 1; //công thức datasheet
 8000a24:	f7ff ff0e 	bl	8000844 <RCC_GetPCLK1Value>
 8000a28:	4603      	mov	r3, r0
 8000a2a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8000a2e:	fb02 f303 	mul.w	r3, r2, r3
 8000a32:	0a5b      	lsrs	r3, r3, #9
 8000a34:	4a09      	ldr	r2, [pc, #36]	; (8000a5c <I2C_Init+0x164>)
 8000a36:	fba2 2303 	umull	r2, r3, r2, r3
 8000a3a:	09db      	lsrs	r3, r3, #7
 8000a3c:	3301      	adds	r3, #1
 8000a3e:	60fb      	str	r3, [r7, #12]
	}
	//0x3F: 0011 1111, TRISE[5:0] của TRISE Register
	pI2CHandle->pI2Cx->TRISE = (tempreg & 0x3F);		//Cấu hình thanh ghi TRISE cho processor
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	681b      	ldr	r3, [r3, #0]
 8000a44:	68fa      	ldr	r2, [r7, #12]
 8000a46:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8000a4a:	621a      	str	r2, [r3, #32]
}
 8000a4c:	bf00      	nop
 8000a4e:	3710      	adds	r7, #16
 8000a50:	46bd      	mov	sp, r7
 8000a52:	bd80      	pop	{r7, pc}
 8000a54:	431bde83 	.word	0x431bde83
 8000a58:	000186a0 	.word	0x000186a0
 8000a5c:	00044b83 	.word	0x00044b83

08000a60 <I2C_MasterSendData>:
 * @return      - none
 *
 * @Note        - none
 */
void I2C_MasterSendData(I2C_Handle_t *pI2CHandle, uint8_t *pTxbuffer, uint32_t Len,uint8_t SlaveAddr,uint8_t Sr)
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	b084      	sub	sp, #16
 8000a64:	af00      	add	r7, sp, #0
 8000a66:	60f8      	str	r0, [r7, #12]
 8000a68:	60b9      	str	r1, [r7, #8]
 8000a6a:	607a      	str	r2, [r7, #4]
 8000a6c:	70fb      	strb	r3, [r7, #3]
	//1. Generate the Start Condition - Tạo điều kiện START
	I2C_GenerateStartCondition(pI2CHandle->pI2Cx);
 8000a6e:	68fb      	ldr	r3, [r7, #12]
 8000a70:	681b      	ldr	r3, [r3, #0]
 8000a72:	4618      	mov	r0, r3
 8000a74:	f000 f8eb 	bl	8000c4e <I2C_GenerateStartCondition>

	//2. Confirm that START generation is complete by checking the SB flag in the SR1
	//Note: Until SB is cleared SCL will be stretched (pulled to LOW)
	//2. Xác nhận rằng quá trình tạo START đã hoàn tất bằng cách kiểm tra cờ SB trong SR1
	//Lưu ý: Cho đến khi SB bị xóa SCL sẽ bị kéo gián đoạn (kéo về mức LOW)
	while(! I2C_GetFlagStatus(pI2CHandle->pI2Cx, I2C_FLAG_SB));
 8000a78:	bf00      	nop
 8000a7a:	68fb      	ldr	r3, [r7, #12]
 8000a7c:	681b      	ldr	r3, [r3, #0]
 8000a7e:	2101      	movs	r1, #1
 8000a80:	4618      	mov	r0, r3
 8000a82:	f000 f8f3 	bl	8000c6c <I2C_GetFlagStatus>
 8000a86:	4603      	mov	r3, r0
 8000a88:	2b00      	cmp	r3, #0
 8000a8a:	d0f6      	beq.n	8000a7a <I2C_MasterSendData+0x1a>

	//3. Send the address of the Slave with r/nw bit set to w(0) (total 8 bits)
	//3. Gửi tới địa chỉ của Slave với bit r/nw được đặt thành w(0) (tổng cộng 8 bit)
	I2C_ExecuteAddressPhaseWrite(pI2CHandle->pI2Cx, SlaveAddr);
 8000a8c:	68fb      	ldr	r3, [r7, #12]
 8000a8e:	681b      	ldr	r3, [r3, #0]
 8000a90:	78fa      	ldrb	r2, [r7, #3]
 8000a92:	4611      	mov	r1, r2
 8000a94:	4618      	mov	r0, r3
 8000a96:	f000 f8fc 	bl	8000c92 <I2C_ExecuteAddressPhaseWrite>

	//4. Confirm that address phase is completed by checking the ADDR flag in the SR1
	//4. Xác nhận rằng "address phase" đã hoàn tất bằng cách kiểm tra cờ ADDR trong SR1
	while(! I2C_GetFlagStatus(pI2CHandle->pI2Cx, I2C_FLAG_ADDR));
 8000a9a:	bf00      	nop
 8000a9c:	68fb      	ldr	r3, [r7, #12]
 8000a9e:	681b      	ldr	r3, [r3, #0]
 8000aa0:	2102      	movs	r1, #2
 8000aa2:	4618      	mov	r0, r3
 8000aa4:	f000 f8e2 	bl	8000c6c <I2C_GetFlagStatus>
 8000aa8:	4603      	mov	r3, r0
 8000aaa:	2b00      	cmp	r3, #0
 8000aac:	d0f6      	beq.n	8000a9c <I2C_MasterSendData+0x3c>

	//5. Clear the ADDR flag according to its software sequence
	//Note: Until ADDR is cleared SCL will be stretched (pulled to LOW)
	//5. Xóa cờ ADDR theo trình tự phần mềm của nó
	//Lưu ý: Cho đến khi xóa bit field ADDR, SCL sẽ bị kéo dài gián đoạn (kéo về Low)
	I2C_ClearADDRFlag(pI2CHandle->pI2Cx);
 8000aae:	68fb      	ldr	r3, [r7, #12]
 8000ab0:	681b      	ldr	r3, [r3, #0]
 8000ab2:	4618      	mov	r0, r3
 8000ab4:	f000 f917 	bl	8000ce6 <I2C_ClearADDRFlag>

	//6. Send the Data until Len becomes 0 - Gửi data cho đến khi Len==0
	while(Len > 0)				//Kiểm tra độ dài của Data(Đã gửi hết data trong pTxBuffer hay chưa)
 8000ab8:	e014      	b.n	8000ae4 <I2C_MasterSendData+0x84>
	{
		//Kiểm tra cờ Txe đã đc set, cho phép đc gửi data đi
		while(! I2C_GetFlagStatus(pI2CHandle->pI2Cx, I2C_FLAG_TXE));    //Wait till TxE is set
 8000aba:	bf00      	nop
 8000abc:	68fb      	ldr	r3, [r7, #12]
 8000abe:	681b      	ldr	r3, [r3, #0]
 8000ac0:	2180      	movs	r1, #128	; 0x80
 8000ac2:	4618      	mov	r0, r3
 8000ac4:	f000 f8d2 	bl	8000c6c <I2C_GetFlagStatus>
 8000ac8:	4603      	mov	r3, r0
 8000aca:	2b00      	cmp	r3, #0
 8000acc:	d0f6      	beq.n	8000abc <I2C_MasterSendData+0x5c>

		//Đưa nội dung data và DR Register
		pI2CHandle->pI2Cx->DR = *pTxbuffer; 		//Cấu hình thanh ghi DR cho processor(Data in DR)
 8000ace:	68bb      	ldr	r3, [r7, #8]
 8000ad0:	781a      	ldrb	r2, [r3, #0]
 8000ad2:	68fb      	ldr	r3, [r7, #12]
 8000ad4:	681b      	ldr	r3, [r3, #0]
 8000ad6:	611a      	str	r2, [r3, #16]
		pTxbuffer++;								//Mỗi lần gửi 8bit data. tăng đến ký tự data tiếp theo
 8000ad8:	68bb      	ldr	r3, [r7, #8]
 8000ada:	3301      	adds	r3, #1
 8000adc:	60bb      	str	r3, [r7, #8]
		Len--;										//Giảm 1 đơn vị data(đã truyền 1 ký tự)
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	3b01      	subs	r3, #1
 8000ae2:	607b      	str	r3, [r7, #4]
	while(Len > 0)				//Kiểm tra độ dài của Data(Đã gửi hết data trong pTxBuffer hay chưa)
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	2b00      	cmp	r3, #0
 8000ae8:	d1e7      	bne.n	8000aba <I2C_MasterSendData+0x5a>
	//Note: TXE=1, BTF=1, means that both SR and DR are empty and next transmission should begin
	//when BTF=1 SCL will be stretched(pulled to LOW)
	//7. Khi Len trở về 0, hãy đợi TXE=1 và BTF=1 trước khi tạo điều kiện STOP
	//Lưu ý: TXE=1, BTF=1, có nghĩa là cả SR và DR đều trống và quá trình truyền tiếp theo sẽ bắt đầu
	//khi BTF=1 SCL sẽ bị kéo giãn gián đoạn (kéo xuống THẤP)
	while(! I2C_GetFlagStatus(pI2CHandle->pI2Cx, I2C_FLAG_TXE));
 8000aea:	bf00      	nop
 8000aec:	68fb      	ldr	r3, [r7, #12]
 8000aee:	681b      	ldr	r3, [r3, #0]
 8000af0:	2180      	movs	r1, #128	; 0x80
 8000af2:	4618      	mov	r0, r3
 8000af4:	f000 f8ba 	bl	8000c6c <I2C_GetFlagStatus>
 8000af8:	4603      	mov	r3, r0
 8000afa:	2b00      	cmp	r3, #0
 8000afc:	d0f6      	beq.n	8000aec <I2C_MasterSendData+0x8c>
	while(! I2C_GetFlagStatus(pI2CHandle->pI2Cx, I2C_FLAG_BTF));
 8000afe:	bf00      	nop
 8000b00:	68fb      	ldr	r3, [r7, #12]
 8000b02:	681b      	ldr	r3, [r3, #0]
 8000b04:	2104      	movs	r1, #4
 8000b06:	4618      	mov	r0, r3
 8000b08:	f000 f8b0 	bl	8000c6c <I2C_GetFlagStatus>
 8000b0c:	4603      	mov	r3, r0
 8000b0e:	2b00      	cmp	r3, #0
 8000b10:	d0f6      	beq.n	8000b00 <I2C_MasterSendData+0xa0>

	//8. Generate STOP condition and master need not to wait for the completion of STOP condition
	//Note: Generating STOP, automatically clears the BTF
	//8. Tạo điều kiện STOP và Master không cần đợi hoàn thành điều kiện STOP
	//Lưu ý: Tạo STOP, tự động xóa BTF
	if(Sr == I2C_DISABLE_SR)
 8000b12:	7e3b      	ldrb	r3, [r7, #24]
 8000b14:	2b00      	cmp	r3, #0
 8000b16:	d104      	bne.n	8000b22 <I2C_MasterSendData+0xc2>
		I2C_GenerateStopCondition(pI2CHandle->pI2Cx);
 8000b18:	68fb      	ldr	r3, [r7, #12]
 8000b1a:	681b      	ldr	r3, [r3, #0]
 8000b1c:	4618      	mov	r0, r3
 8000b1e:	f000 f8f1 	bl	8000d04 <I2C_GenerateStopCondition>
}
 8000b22:	bf00      	nop
 8000b24:	3710      	adds	r7, #16
 8000b26:	46bd      	mov	sp, r7
 8000b28:	bd80      	pop	{r7, pc}

08000b2a <I2C_MasterReceiveData>:
 * @return      - none
 * @Note        - pRxbuffer: vì là con trỏ nên khi nhận đc data từ Slave sẽ nhúng trực tiếp vào
 * 				địa chỉ của con trỏ nên ko cần thiết lập biến trả về
 */
void I2C_MasterReceiveData(I2C_Handle_t *pI2CHandle, uint8_t *pRxbuffer, uint32_t Len,uint8_t SlaveAddr,uint8_t Sr)
{
 8000b2a:	b580      	push	{r7, lr}
 8000b2c:	b086      	sub	sp, #24
 8000b2e:	af00      	add	r7, sp, #0
 8000b30:	60f8      	str	r0, [r7, #12]
 8000b32:	60b9      	str	r1, [r7, #8]
 8000b34:	607a      	str	r2, [r7, #4]
 8000b36:	70fb      	strb	r3, [r7, #3]
	//1. Generate the START Condition
	I2C_GenerateStartCondition(pI2CHandle->pI2Cx);
 8000b38:	68fb      	ldr	r3, [r7, #12]
 8000b3a:	681b      	ldr	r3, [r3, #0]
 8000b3c:	4618      	mov	r0, r3
 8000b3e:	f000 f886 	bl	8000c4e <I2C_GenerateStartCondition>

	//2. Confirm the start generation is completed by the checking the SB flag in the SR1
	//Note: Until SB is cleared SCL will be stretched (pulled to LOW)
	//Xác nhận việc tạo bắt đầu được hoàn thành bằng cách kiểm tra cờ SB trong SR1
	//Lưu ý: Cho đến khi SB bị xóa SCL sẽ bị kéo giãn (kéo về THẤP)
	while(! I2C_GetFlagStatus(pI2CHandle->pI2Cx, I2C_FLAG_SB));
 8000b42:	bf00      	nop
 8000b44:	68fb      	ldr	r3, [r7, #12]
 8000b46:	681b      	ldr	r3, [r3, #0]
 8000b48:	2101      	movs	r1, #1
 8000b4a:	4618      	mov	r0, r3
 8000b4c:	f000 f88e 	bl	8000c6c <I2C_GetFlagStatus>
 8000b50:	4603      	mov	r3, r0
 8000b52:	2b00      	cmp	r3, #0
 8000b54:	d0f6      	beq.n	8000b44 <I2C_MasterReceiveData+0x1a>

	//3. Send the address of the Slave with r/nw bit set to R(1) (total 8 bits)
	//Gửi địa chỉ của Slave(gửi data đến Master) với bit r/nw được đặt thành R(1) (tổng cộng 8 bit)
	I2C_ExecuteAddressPhaseRead(pI2CHandle->pI2Cx, SlaveAddr);
 8000b56:	68fb      	ldr	r3, [r7, #12]
 8000b58:	681b      	ldr	r3, [r3, #0]
 8000b5a:	78fa      	ldrb	r2, [r7, #3]
 8000b5c:	4611      	mov	r1, r2
 8000b5e:	4618      	mov	r0, r3
 8000b60:	f000 f8ac 	bl	8000cbc <I2C_ExecuteAddressPhaseRead>

	//4. Wait until address phase is completed by checking the ADDR flag in the SR1
	//Đợi cho đến khi hoàn thành giai đoạn địa chỉ bằng cách kiểm tra cờ ADDR trong SR1
	while(! I2C_GetFlagStatus(pI2CHandle->pI2Cx, I2C_FLAG_ADDR));
 8000b64:	bf00      	nop
 8000b66:	68fb      	ldr	r3, [r7, #12]
 8000b68:	681b      	ldr	r3, [r3, #0]
 8000b6a:	2102      	movs	r1, #2
 8000b6c:	4618      	mov	r0, r3
 8000b6e:	f000 f87d 	bl	8000c6c <I2C_GetFlagStatus>
 8000b72:	4603      	mov	r3, r0
 8000b74:	2b00      	cmp	r3, #0
 8000b76:	d0f6      	beq.n	8000b66 <I2C_MasterReceiveData+0x3c>

	//TH1: Procedure to read only 1 byte from Slave(Slave gửi đến Master 1byte data)
	if(Len == 1)
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	2b01      	cmp	r3, #1
 8000b7c:	d123      	bne.n	8000bc6 <I2C_MasterReceiveData+0x9c>
	{
		//Disable Acking, thông báo cho Master ko còn data tiếp theo sau khi đã nhận 1 byte data
		I2C_ManageAcking(pI2CHandle->pI2Cx,I2C_ACK_DISABLE);
 8000b7e:	68fb      	ldr	r3, [r7, #12]
 8000b80:	681b      	ldr	r3, [r3, #0]
 8000b82:	2100      	movs	r1, #0
 8000b84:	4618      	mov	r0, r3
 8000b86:	f000 f8cc 	bl	8000d22 <I2C_ManageAcking>

		//Clear the ADDR flag
		I2C_ClearADDRFlag(pI2CHandle->pI2Cx);
 8000b8a:	68fb      	ldr	r3, [r7, #12]
 8000b8c:	681b      	ldr	r3, [r3, #0]
 8000b8e:	4618      	mov	r0, r3
 8000b90:	f000 f8a9 	bl	8000ce6 <I2C_ClearADDRFlag>

		//Wait until bit field RxNE become 1
		while(! I2C_GetFlagStatus(pI2CHandle->pI2Cx,I2C_FLAG_RXNE));
 8000b94:	bf00      	nop
 8000b96:	68fb      	ldr	r3, [r7, #12]
 8000b98:	681b      	ldr	r3, [r3, #0]
 8000b9a:	2140      	movs	r1, #64	; 0x40
 8000b9c:	4618      	mov	r0, r3
 8000b9e:	f000 f865 	bl	8000c6c <I2C_GetFlagStatus>
 8000ba2:	4603      	mov	r3, r0
 8000ba4:	2b00      	cmp	r3, #0
 8000ba6:	d0f6      	beq.n	8000b96 <I2C_MasterReceiveData+0x6c>

		//Generate STOP condition
		if(Sr == I2C_DISABLE_SR)
 8000ba8:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000bac:	2b00      	cmp	r3, #0
 8000bae:	d104      	bne.n	8000bba <I2C_MasterReceiveData+0x90>
			I2C_GenerateStopCondition(pI2CHandle->pI2Cx);
 8000bb0:	68fb      	ldr	r3, [r7, #12]
 8000bb2:	681b      	ldr	r3, [r3, #0]
 8000bb4:	4618      	mov	r0, r3
 8000bb6:	f000 f8a5 	bl	8000d04 <I2C_GenerateStopCondition>

		//Read data in to Buffer from DR Register
		*pRxbuffer = pI2CHandle->pI2Cx->DR;			//nhúng trực tiếp vào địa chỉ của param đưa vào
 8000bba:	68fb      	ldr	r3, [r7, #12]
 8000bbc:	681b      	ldr	r3, [r3, #0]
 8000bbe:	691b      	ldr	r3, [r3, #16]
 8000bc0:	b2da      	uxtb	r2, r3
 8000bc2:	68bb      	ldr	r3, [r7, #8]
 8000bc4:	701a      	strb	r2, [r3, #0]
	}

	//TH2: Procedure to read n byte from Slave(Slave gửi đến Master nbyte data)
	if(Len > 1)
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	2b01      	cmp	r3, #1
 8000bca:	d932      	bls.n	8000c32 <I2C_MasterReceiveData+0x108>
	{
		//Clear the ADDR flag
		I2C_ClearADDRFlag(pI2CHandle->pI2Cx);
 8000bcc:	68fb      	ldr	r3, [r7, #12]
 8000bce:	681b      	ldr	r3, [r3, #0]
 8000bd0:	4618      	mov	r0, r3
 8000bd2:	f000 f888 	bl	8000ce6 <I2C_ClearADDRFlag>

		//Read the data until(cho tới khi) Len becomes zero
		for(uint32_t i = Len; i > 0 ; i-- )
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	617b      	str	r3, [r7, #20]
 8000bda:	e027      	b.n	8000c2c <I2C_MasterReceiveData+0x102>
		{
			//Wait until RxNE becomes 1
			while(! I2C_GetFlagStatus(pI2CHandle->pI2Cx, I2C_FLAG_RXNE));
 8000bdc:	bf00      	nop
 8000bde:	68fb      	ldr	r3, [r7, #12]
 8000be0:	681b      	ldr	r3, [r3, #0]
 8000be2:	2140      	movs	r1, #64	; 0x40
 8000be4:	4618      	mov	r0, r3
 8000be6:	f000 f841 	bl	8000c6c <I2C_GetFlagStatus>
 8000bea:	4603      	mov	r3, r0
 8000bec:	2b00      	cmp	r3, #0
 8000bee:	d0f6      	beq.n	8000bde <I2C_MasterReceiveData+0xb4>

			//If last 2 byte are remaining
			if(i == 2)
 8000bf0:	697b      	ldr	r3, [r7, #20]
 8000bf2:	2b02      	cmp	r3, #2
 8000bf4:	d10e      	bne.n	8000c14 <I2C_MasterReceiveData+0xea>
			{
				//Clear the ack bit
				I2C_ManageAcking(pI2CHandle->pI2Cx, I2C_ACK_DISABLE);
 8000bf6:	68fb      	ldr	r3, [r7, #12]
 8000bf8:	681b      	ldr	r3, [r3, #0]
 8000bfa:	2100      	movs	r1, #0
 8000bfc:	4618      	mov	r0, r3
 8000bfe:	f000 f890 	bl	8000d22 <I2C_ManageAcking>

				//Generate STOP Condition
				if(Sr == I2C_DISABLE_SR)
 8000c02:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000c06:	2b00      	cmp	r3, #0
 8000c08:	d104      	bne.n	8000c14 <I2C_MasterReceiveData+0xea>
					I2C_GenerateStopCondition(pI2CHandle->pI2Cx);
 8000c0a:	68fb      	ldr	r3, [r7, #12]
 8000c0c:	681b      	ldr	r3, [r3, #0]
 8000c0e:	4618      	mov	r0, r3
 8000c10:	f000 f878 	bl	8000d04 <I2C_GenerateStopCondition>
			}

			//Read the Data from Data Register in to Buffer
			*pRxbuffer = pI2CHandle->pI2Cx->DR;
 8000c14:	68fb      	ldr	r3, [r7, #12]
 8000c16:	681b      	ldr	r3, [r3, #0]
 8000c18:	691b      	ldr	r3, [r3, #16]
 8000c1a:	b2da      	uxtb	r2, r3
 8000c1c:	68bb      	ldr	r3, [r7, #8]
 8000c1e:	701a      	strb	r2, [r3, #0]

			//Increment(tăng) the Buffer address, đi đến byte data kế tiếp
			pRxbuffer++;
 8000c20:	68bb      	ldr	r3, [r7, #8]
 8000c22:	3301      	adds	r3, #1
 8000c24:	60bb      	str	r3, [r7, #8]
		for(uint32_t i = Len; i > 0 ; i-- )
 8000c26:	697b      	ldr	r3, [r7, #20]
 8000c28:	3b01      	subs	r3, #1
 8000c2a:	617b      	str	r3, [r7, #20]
 8000c2c:	697b      	ldr	r3, [r7, #20]
 8000c2e:	2b00      	cmp	r3, #0
 8000c30:	d1d4      	bne.n	8000bdc <I2C_MasterReceiveData+0xb2>
		}
	}

	//Re-enable ACKing, nếu user cho phép Slave->Master
	if(pI2CHandle->I2C_Config.I2C_AckControl == I2C_ACK_ENABLE)
 8000c32:	68fb      	ldr	r3, [r7, #12]
 8000c34:	7a5b      	ldrb	r3, [r3, #9]
 8000c36:	2b01      	cmp	r3, #1
 8000c38:	d105      	bne.n	8000c46 <I2C_MasterReceiveData+0x11c>
	{
		//thông báo cho phép Master tiếp tục nhận data từ Slave ở lần kết nối sau
		I2C_ManageAcking(pI2CHandle->pI2Cx, I2C_ACK_ENABLE);
 8000c3a:	68fb      	ldr	r3, [r7, #12]
 8000c3c:	681b      	ldr	r3, [r3, #0]
 8000c3e:	2101      	movs	r1, #1
 8000c40:	4618      	mov	r0, r3
 8000c42:	f000 f86e 	bl	8000d22 <I2C_ManageAcking>
	}
}
 8000c46:	bf00      	nop
 8000c48:	3718      	adds	r7, #24
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	bd80      	pop	{r7, pc}

08000c4e <I2C_GenerateStartCondition>:
 * @return      - none
 *
 * @Note        - I2C_CR1, bit field START[8]
 */
static void I2C_GenerateStartCondition(I2C_RegDef_t *pI2Cx)
{
 8000c4e:	b480      	push	{r7}
 8000c50:	b083      	sub	sp, #12
 8000c52:	af00      	add	r7, sp, #0
 8000c54:	6078      	str	r0, [r7, #4]
	//Set bit field START[8] lên high
	pI2Cx->CR1 |= (1 << I2C_CR1_START);		//Cấu hình thanh ghi CR1 cho processor
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	681b      	ldr	r3, [r3, #0]
 8000c5a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	601a      	str	r2, [r3, #0]
}
 8000c62:	bf00      	nop
 8000c64:	370c      	adds	r7, #12
 8000c66:	46bd      	mov	sp, r7
 8000c68:	bc80      	pop	{r7}
 8000c6a:	4770      	bx	lr

08000c6c <I2C_GetFlagStatus>:
 * @return      - Trạng thái cờ_flag
 *
 * @Note        - none
 */
uint8_t I2C_GetFlagStatus(I2C_RegDef_t *pI2Cx, uint32_t FlagName)
{
 8000c6c:	b480      	push	{r7}
 8000c6e:	b083      	sub	sp, #12
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	6078      	str	r0, [r7, #4]
 8000c74:	6039      	str	r1, [r7, #0]
	if(pI2Cx->SR1 & FlagName)  //Kiểm tra value của pI2Cx->SR1 and với FlagName
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	695a      	ldr	r2, [r3, #20]
 8000c7a:	683b      	ldr	r3, [r7, #0]
 8000c7c:	4013      	ands	r3, r2
 8000c7e:	2b00      	cmp	r3, #0
 8000c80:	d001      	beq.n	8000c86 <I2C_GetFlagStatus+0x1a>
	{
		//Khi pI2Cx->SR1 & FlagName == 1 thì thực hiện if
		return FLAG_SET;		//Có cờ flag tại vị trí đó đang hoạt động 1
 8000c82:	2301      	movs	r3, #1
 8000c84:	e000      	b.n	8000c88 <I2C_GetFlagStatus+0x1c>
	}
	return FLAG_RESET;		//Nếu ko có cờ flag thì trả về 0
 8000c86:	2300      	movs	r3, #0
}
 8000c88:	4618      	mov	r0, r3
 8000c8a:	370c      	adds	r7, #12
 8000c8c:	46bd      	mov	sp, r7
 8000c8e:	bc80      	pop	{r7}
 8000c90:	4770      	bx	lr

08000c92 <I2C_ExecuteAddressPhaseWrite>:
 * @return      - none
 *
 * @Note        - SlaveAddr : sẽ đc cài đặt ở phía phần cứng làm Slave
 */
static void I2C_ExecuteAddressPhaseWrite(I2C_RegDef_t *pI2Cx,uint8_t SlaveAddr)
{
 8000c92:	b480      	push	{r7}
 8000c94:	b083      	sub	sp, #12
 8000c96:	af00      	add	r7, sp, #0
 8000c98:	6078      	str	r0, [r7, #4]
 8000c9a:	460b      	mov	r3, r1
 8000c9c:	70fb      	strb	r3, [r7, #3]
	//Tiến hành dịch biến SlaveAddr lên 1 bit vì bit0 sẽ chứa giá trị thực hiện việc read hoặc write,
	SlaveAddr = SlaveAddr << 1;			//và bit1->7chứa data địa chỉ(ko làm mất data addr khi set bit0)
 8000c9e:	78fb      	ldrb	r3, [r7, #3]
 8000ca0:	005b      	lsls	r3, r3, #1
 8000ca2:	70fb      	strb	r3, [r7, #3]
	SlaveAddr &= ~(1); 					//thiết lập bit0 = 0 = write(gửi data từ master->slave)
 8000ca4:	78fb      	ldrb	r3, [r7, #3]
 8000ca6:	f023 0301 	bic.w	r3, r3, #1
 8000caa:	70fb      	strb	r3, [r7, #3]
										//SlaveAddr: Slave Addrress + r/nw bit[0]=0

	pI2Cx->DR = SlaveAddr;				//Cấu hình thanh ghi DR cho processor DR[7:0]
 8000cac:	78fa      	ldrb	r2, [r7, #3]
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	611a      	str	r2, [r3, #16]
}
 8000cb2:	bf00      	nop
 8000cb4:	370c      	adds	r7, #12
 8000cb6:	46bd      	mov	sp, r7
 8000cb8:	bc80      	pop	{r7}
 8000cba:	4770      	bx	lr

08000cbc <I2C_ExecuteAddressPhaseRead>:
 * @return      - none
 *
 * @Note        - SlaveAddr : sẽ đc cài đặt ở phía phần cứng làm Slave
 */
static void I2C_ExecuteAddressPhaseRead(I2C_RegDef_t *pI2Cx,uint8_t SlaveAddr)
{
 8000cbc:	b480      	push	{r7}
 8000cbe:	b083      	sub	sp, #12
 8000cc0:	af00      	add	r7, sp, #0
 8000cc2:	6078      	str	r0, [r7, #4]
 8000cc4:	460b      	mov	r3, r1
 8000cc6:	70fb      	strb	r3, [r7, #3]
	//Tiến hành dịch biến SlaveAddr lên 1 bit vì bit0 sẽ chứa giá trị thực hiện việc read hoặc write,
	SlaveAddr = SlaveAddr << 1;			//và bit1->7chứa data địa chỉ(ko làm mất data addr khi set bit0)
 8000cc8:	78fb      	ldrb	r3, [r7, #3]
 8000cca:	005b      	lsls	r3, r3, #1
 8000ccc:	70fb      	strb	r3, [r7, #3]
	SlaveAddr |= 1; 					//thiết lập bit0 = 1 = read(gửi data từ slave->master)
 8000cce:	78fb      	ldrb	r3, [r7, #3]
 8000cd0:	f043 0301 	orr.w	r3, r3, #1
 8000cd4:	70fb      	strb	r3, [r7, #3]
										//SlaveAddr: Slave Addrress + r/nw bit[0]=1

	pI2Cx->DR = SlaveAddr;				//Cấu hình thanh ghi DR cho processor DR[7:0]
 8000cd6:	78fa      	ldrb	r2, [r7, #3]
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	611a      	str	r2, [r3, #16]
}
 8000cdc:	bf00      	nop
 8000cde:	370c      	adds	r7, #12
 8000ce0:	46bd      	mov	sp, r7
 8000ce2:	bc80      	pop	{r7}
 8000ce4:	4770      	bx	lr

08000ce6 <I2C_ClearADDRFlag>:
 * @return      - none
 *
 * @Note        - Đạt đc EVx Condition
 */
static void I2C_ClearADDRFlag(I2C_RegDef_t *pI2Cx)
{
 8000ce6:	b480      	push	{r7}
 8000ce8:	b085      	sub	sp, #20
 8000cea:	af00      	add	r7, sp, #0
 8000cec:	6078      	str	r0, [r7, #4]
	uint32_t dummyRead = pI2Cx->SR1;			//biến tạm lưu value SR1 Register 32bit
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	695b      	ldr	r3, [r3, #20]
 8000cf2:	60fb      	str	r3, [r7, #12]
	dummyRead = pI2Cx->SR2;						//biến tạm lưu value SR2 Register 32bit
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	699b      	ldr	r3, [r3, #24]
 8000cf8:	60fb      	str	r3, [r7, #12]
	(void)dummyRead;							//Tránh trình biên dịch tối ưu hóa vì biến đc sử dụng

	//Việc đọc(gán) giá trị của thanh ghi SR1 và SR2 sẽ làm xóa cờ ADDR.
	//Việc bỏ qua giá trị của biến tạm là để tránh lãng phí tài nguyên bộ nhớ.
}
 8000cfa:	bf00      	nop
 8000cfc:	3714      	adds	r7, #20
 8000cfe:	46bd      	mov	sp, r7
 8000d00:	bc80      	pop	{r7}
 8000d02:	4770      	bx	lr

08000d04 <I2C_GenerateStopCondition>:
 * @return      - none
 *
 * @Note        - I2C_CR1, bit field STOP[9]
 */
static void I2C_GenerateStopCondition(I2C_RegDef_t *pI2Cx)
{
 8000d04:	b480      	push	{r7}
 8000d06:	b083      	sub	sp, #12
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	6078      	str	r0, [r7, #4]
	//Set bit field STOP[9] lên high
	pI2Cx->CR1 |= (1 << I2C_CR1_STOP);		//Cấu hình thanh ghi CR1 cho processor
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	681b      	ldr	r3, [r3, #0]
 8000d10:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	601a      	str	r2, [r3, #0]
}
 8000d18:	bf00      	nop
 8000d1a:	370c      	adds	r7, #12
 8000d1c:	46bd      	mov	sp, r7
 8000d1e:	bc80      	pop	{r7}
 8000d20:	4770      	bx	lr

08000d22 <I2C_ManageAcking>:
 * 0: No acknowledge returned
   1: Acknowledge returned after a byte is received (matched address or data)
   Mặc định khi Slave->Master từ Ack=1
 */
void I2C_ManageAcking(I2C_RegDef_t *pI2Cx, uint8_t EnorDi)
{
 8000d22:	b480      	push	{r7}
 8000d24:	b083      	sub	sp, #12
 8000d26:	af00      	add	r7, sp, #0
 8000d28:	6078      	str	r0, [r7, #4]
 8000d2a:	460b      	mov	r3, r1
 8000d2c:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == I2C_ACK_ENABLE)
 8000d2e:	78fb      	ldrb	r3, [r7, #3]
 8000d30:	2b01      	cmp	r3, #1
 8000d32:	d106      	bne.n	8000d42 <I2C_ManageAcking+0x20>
	{
		//Enable the Ack(set bit)
		pI2Cx->CR1 |= (1 << I2C_CR1_ACK);	//Cấu hình thanh ghi CR1[ACK] cho processor
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	681b      	ldr	r3, [r3, #0]
 8000d38:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	601a      	str	r2, [r3, #0]
	else
	{
		//Disable the Ack(Clear bit)
		pI2Cx->CR1 &= ~(1 << I2C_CR1_ACK);	//Cấu hình thanh ghi CR1[ACK] cho processor
	}
}
 8000d40:	e005      	b.n	8000d4e <I2C_ManageAcking+0x2c>
		pI2Cx->CR1 &= ~(1 << I2C_CR1_ACK);	//Cấu hình thanh ghi CR1[ACK] cho processor
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	681b      	ldr	r3, [r3, #0]
 8000d46:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	601a      	str	r2, [r3, #0]
}
 8000d4e:	bf00      	nop
 8000d50:	370c      	adds	r7, #12
 8000d52:	46bd      	mov	sp, r7
 8000d54:	bc80      	pop	{r7}
 8000d56:	4770      	bx	lr

08000d58 <I2C_PeripheralControl>:
 * @return      - none
 *
 * @Note        - none
 */
void I2C_PeripheralControl(I2C_RegDef_t *pI2Cx, uint8_t EnOrDi)
{
 8000d58:	b480      	push	{r7}
 8000d5a:	b083      	sub	sp, #12
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	6078      	str	r0, [r7, #4]
 8000d60:	460b      	mov	r3, r1
 8000d62:	70fb      	strb	r3, [r7, #3]
	if(EnOrDi == ENABLE)
 8000d64:	78fb      	ldrb	r3, [r7, #3]
 8000d66:	2b01      	cmp	r3, #1
 8000d68:	d106      	bne.n	8000d78 <I2C_PeripheralControl+0x20>
	{
		pI2Cx->CR1 |= (1 << I2C_CR1_PE);
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	681b      	ldr	r3, [r3, #0]
 8000d6e:	f043 0201 	orr.w	r2, r3, #1
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	601a      	str	r2, [r3, #0]
	}else
	{
		pI2Cx->CR1 &= ~(1 << 0);
	}

}
 8000d76:	e005      	b.n	8000d84 <I2C_PeripheralControl+0x2c>
		pI2Cx->CR1 &= ~(1 << 0);
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	f023 0201 	bic.w	r2, r3, #1
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	601a      	str	r2, [r3, #0]
}
 8000d84:	bf00      	nop
 8000d86:	370c      	adds	r7, #12
 8000d88:	46bd      	mov	sp, r7
 8000d8a:	bc80      	pop	{r7}
 8000d8c:	4770      	bx	lr
	...

08000d90 <__libc_init_array>:
 8000d90:	b570      	push	{r4, r5, r6, lr}
 8000d92:	4d0d      	ldr	r5, [pc, #52]	; (8000dc8 <__libc_init_array+0x38>)
 8000d94:	4c0d      	ldr	r4, [pc, #52]	; (8000dcc <__libc_init_array+0x3c>)
 8000d96:	1b64      	subs	r4, r4, r5
 8000d98:	10a4      	asrs	r4, r4, #2
 8000d9a:	2600      	movs	r6, #0
 8000d9c:	42a6      	cmp	r6, r4
 8000d9e:	d109      	bne.n	8000db4 <__libc_init_array+0x24>
 8000da0:	4d0b      	ldr	r5, [pc, #44]	; (8000dd0 <__libc_init_array+0x40>)
 8000da2:	4c0c      	ldr	r4, [pc, #48]	; (8000dd4 <__libc_init_array+0x44>)
 8000da4:	f000 f818 	bl	8000dd8 <_init>
 8000da8:	1b64      	subs	r4, r4, r5
 8000daa:	10a4      	asrs	r4, r4, #2
 8000dac:	2600      	movs	r6, #0
 8000dae:	42a6      	cmp	r6, r4
 8000db0:	d105      	bne.n	8000dbe <__libc_init_array+0x2e>
 8000db2:	bd70      	pop	{r4, r5, r6, pc}
 8000db4:	f855 3b04 	ldr.w	r3, [r5], #4
 8000db8:	4798      	blx	r3
 8000dba:	3601      	adds	r6, #1
 8000dbc:	e7ee      	b.n	8000d9c <__libc_init_array+0xc>
 8000dbe:	f855 3b04 	ldr.w	r3, [r5], #4
 8000dc2:	4798      	blx	r3
 8000dc4:	3601      	adds	r6, #1
 8000dc6:	e7f2      	b.n	8000dae <__libc_init_array+0x1e>
 8000dc8:	08000df0 	.word	0x08000df0
 8000dcc:	08000df0 	.word	0x08000df0
 8000dd0:	08000df0 	.word	0x08000df0
 8000dd4:	08000df4 	.word	0x08000df4

08000dd8 <_init>:
 8000dd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000dda:	bf00      	nop
 8000ddc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000dde:	bc08      	pop	{r3}
 8000de0:	469e      	mov	lr, r3
 8000de2:	4770      	bx	lr

08000de4 <_fini>:
 8000de4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000de6:	bf00      	nop
 8000de8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000dea:	bc08      	pop	{r3}
 8000dec:	469e      	mov	lr, r3
 8000dee:	4770      	bx	lr
