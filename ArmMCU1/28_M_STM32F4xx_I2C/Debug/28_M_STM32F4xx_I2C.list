
28_M_STM32F4xx_I2C.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001a8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000ad4  080001a8  080001a8  000101a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000c7c  08000c7c  00020028  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000c7c  08000c7c  00020028  2**0
                  CONTENTS
  4 .ARM          00000000  08000c7c  08000c7c  00020028  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000c7c  08000c7c  00020028  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000c7c  08000c7c  00010c7c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000c80  08000c80  00010c80  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000028  20000000  08000c84  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020028  2**0
                  CONTENTS
 10 .bss          00000028  20000028  20000028  00020028  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000050  20000050  00020028  2**0
                  ALLOC
 12 .ARM.attributes 0000002a  00000000  00000000  00020028  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020052  2**0
                  CONTENTS, READONLY
 14 .debug_info   000012fd  00000000  00000000  00020095  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000005ae  00000000  00000000  00021392  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000160  00000000  00000000  00021940  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 000000fc  00000000  00000000  00021aa0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  000025c2  00000000  00000000  00021b9c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00001960  00000000  00000000  0002415e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    00009df3  00000000  00000000  00025abe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  000004d8  00000000  00000000  0002f8b4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000005c  00000000  00000000  0002fd8c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a8 <__do_global_dtors_aux>:
 80001a8:	b510      	push	{r4, lr}
 80001aa:	4c05      	ldr	r4, [pc, #20]	; (80001c0 <__do_global_dtors_aux+0x18>)
 80001ac:	7823      	ldrb	r3, [r4, #0]
 80001ae:	b933      	cbnz	r3, 80001be <__do_global_dtors_aux+0x16>
 80001b0:	4b04      	ldr	r3, [pc, #16]	; (80001c4 <__do_global_dtors_aux+0x1c>)
 80001b2:	b113      	cbz	r3, 80001ba <__do_global_dtors_aux+0x12>
 80001b4:	4804      	ldr	r0, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x20>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	2301      	movs	r3, #1
 80001bc:	7023      	strb	r3, [r4, #0]
 80001be:	bd10      	pop	{r4, pc}
 80001c0:	20000028 	.word	0x20000028
 80001c4:	00000000 	.word	0x00000000
 80001c8:	08000c64 	.word	0x08000c64

080001cc <frame_dummy>:
 80001cc:	b508      	push	{r3, lr}
 80001ce:	4b03      	ldr	r3, [pc, #12]	; (80001dc <frame_dummy+0x10>)
 80001d0:	b11b      	cbz	r3, 80001da <frame_dummy+0xe>
 80001d2:	4903      	ldr	r1, [pc, #12]	; (80001e0 <frame_dummy+0x14>)
 80001d4:	4803      	ldr	r0, [pc, #12]	; (80001e4 <frame_dummy+0x18>)
 80001d6:	f3af 8000 	nop.w
 80001da:	bd08      	pop	{r3, pc}
 80001dc:	00000000 	.word	0x00000000
 80001e0:	2000002c 	.word	0x2000002c
 80001e4:	08000c64 	.word	0x08000c64

080001e8 <strlen>:
 80001e8:	4603      	mov	r3, r0
 80001ea:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ee:	2a00      	cmp	r2, #0
 80001f0:	d1fb      	bne.n	80001ea <strlen+0x2>
 80001f2:	1a18      	subs	r0, r3, r0
 80001f4:	3801      	subs	r0, #1
 80001f6:	4770      	bx	lr

080001f8 <delay>:
#include "stm32f407xx_i2c_driver.h"		//Khai báo thư viện xử lý I2C peripheral
#include <stdint.h>
#include <stdio.h>

void delay(void)
{
 80001f8:	b480      	push	{r7}
 80001fa:	b083      	sub	sp, #12
 80001fc:	af00      	add	r7, sp, #0
	for(uint32_t i = 0 ; i < 500000/2 ; i ++);
 80001fe:	2300      	movs	r3, #0
 8000200:	607b      	str	r3, [r7, #4]
 8000202:	e002      	b.n	800020a <delay+0x12>
 8000204:	687b      	ldr	r3, [r7, #4]
 8000206:	3301      	adds	r3, #1
 8000208:	607b      	str	r3, [r7, #4]
 800020a:	687b      	ldr	r3, [r7, #4]
 800020c:	4a04      	ldr	r2, [pc, #16]	; (8000220 <delay+0x28>)
 800020e:	4293      	cmp	r3, r2
 8000210:	d9f8      	bls.n	8000204 <delay+0xc>
}
 8000212:	bf00      	nop
 8000214:	bf00      	nop
 8000216:	370c      	adds	r7, #12
 8000218:	46bd      	mov	sp, r7
 800021a:	bc80      	pop	{r7}
 800021c:	4770      	bx	lr
 800021e:	bf00      	nop
 8000220:	0003d08f 	.word	0x0003d08f

08000224 <I2C1_GPIOInits>:
 * @return      - none
 *
 * @Note        - none
 */
void I2C1_GPIOInits(void)
{
 8000224:	b580      	push	{r7, lr}
 8000226:	b084      	sub	sp, #16
 8000228:	af00      	add	r7, sp, #0
	GPIOx_Handle_t I2CPins;								//Khai báo 1 biến cấu trúc GPIO Portx muốn dùng AF

	I2CPins.pGPIOx = GPIOB;										//Port có chân làm chức năng Alternate
 800022a:	4b0e      	ldr	r3, [pc, #56]	; (8000264 <I2C1_GPIOInits+0x40>)
 800022c:	607b      	str	r3, [r7, #4]
	I2CPins.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALTFN;		//Thiết lập Port sử dụng Alternate Function
 800022e:	2302      	movs	r3, #2
 8000230:	727b      	strb	r3, [r7, #9]
	I2CPins.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_OD; 	//I2C sử dụng Open Drain
 8000232:	2301      	movs	r3, #1
 8000234:	733b      	strb	r3, [r7, #12]
	I2CPins.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PIN_PU; 	//pull up
 8000236:	2301      	movs	r3, #1
 8000238:	72fb      	strb	r3, [r7, #11]
	I2CPins.GPIO_PinConfig.GPIO_PinAltFunMode = 4;				//Column AF4(Check Datasheet)
 800023a:	2304      	movs	r3, #4
 800023c:	737b      	strb	r3, [r7, #13]
	I2CPins.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;		//Speed
 800023e:	2302      	movs	r3, #2
 8000240:	72bb      	strb	r3, [r7, #10]

	//SCL Configuration
	I2CPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_6;		//PB6 làm chân AF4 I2C_SCL
 8000242:	2306      	movs	r3, #6
 8000244:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&I2CPins);						//Thiết lập I2C_SCL cho cấu hình thanh ghi cho Processor
 8000246:	1d3b      	adds	r3, r7, #4
 8000248:	4618      	mov	r0, r3
 800024a:	f000 f91d 	bl	8000488 <GPIO_Init>

	//SDA Configuration
	//I2CPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_9;		//PB9 làm chân AF4 I2C_SDA
	//Pb9 như ban đầu do đang thực hiện một chức năng khác trên STM32 Board nên dễ làm nhiễu send data

	I2CPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_7;			//PB7 làm chân AF4 I2C_SDA
 800024e:	2307      	movs	r3, #7
 8000250:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&I2CPins);						//Thiết lập I2C_SDA cho cấu hình thanh ghi cho Processor
 8000252:	1d3b      	adds	r3, r7, #4
 8000254:	4618      	mov	r0, r3
 8000256:	f000 f917 	bl	8000488 <GPIO_Init>
}
 800025a:	bf00      	nop
 800025c:	3710      	adds	r7, #16
 800025e:	46bd      	mov	sp, r7
 8000260:	bd80      	pop	{r7, pc}
 8000262:	bf00      	nop
 8000264:	40020400 	.word	0x40020400

08000268 <I2C1_Inits>:
 * @return      - none
 *
 * @Note        - none
 */
void I2C1_Inits(void)
{
 8000268:	b580      	push	{r7, lr}
 800026a:	af00      	add	r7, sp, #0
	I2C1_Handle.pI2Cx = I2C1;				//Sử dụng I2C1
 800026c:	4b09      	ldr	r3, [pc, #36]	; (8000294 <I2C1_Inits+0x2c>)
 800026e:	4a0a      	ldr	r2, [pc, #40]	; (8000298 <I2C1_Inits+0x30>)
 8000270:	601a      	str	r2, [r3, #0]
	I2C1_Handle.I2C_Config.I2C_AckControl = I2C_ACK_ENABLE;
 8000272:	4b08      	ldr	r3, [pc, #32]	; (8000294 <I2C1_Inits+0x2c>)
 8000274:	2201      	movs	r2, #1
 8000276:	725a      	strb	r2, [r3, #9]
	I2C1_Handle.I2C_Config.I2C_DeviceAddress = MY_ADDR;		//Cài đặt địa chỉ cho STM32 nếu nó là Slave
 8000278:	4b06      	ldr	r3, [pc, #24]	; (8000294 <I2C1_Inits+0x2c>)
 800027a:	2261      	movs	r2, #97	; 0x61
 800027c:	721a      	strb	r2, [r3, #8]
	I2C1_Handle.I2C_Config.I2C_FmDutyCycle = I2C_FM_DUTY_2; //Bộ chia tần số
 800027e:	4b05      	ldr	r3, [pc, #20]	; (8000294 <I2C1_Inits+0x2c>)
 8000280:	2200      	movs	r2, #0
 8000282:	729a      	strb	r2, [r3, #10]
	I2C1_Handle.I2C_Config.I2C_SCLSpeed = I2C_SCL_SPEED_SM;	//Standard Mode
 8000284:	4b03      	ldr	r3, [pc, #12]	; (8000294 <I2C1_Inits+0x2c>)
 8000286:	4a05      	ldr	r2, [pc, #20]	; (800029c <I2C1_Inits+0x34>)
 8000288:	605a      	str	r2, [r3, #4]

	I2C_Init(&I2C1_Handle);
 800028a:	4802      	ldr	r0, [pc, #8]	; (8000294 <I2C1_Inits+0x2c>)
 800028c:	f000 fb38 	bl	8000900 <I2C_Init>
}
 8000290:	bf00      	nop
 8000292:	bd80      	pop	{r7, pc}
 8000294:	20000044 	.word	0x20000044
 8000298:	40005400 	.word	0x40005400
 800029c:	000186a0 	.word	0x000186a0

080002a0 <GPIO_ButtonInit>:
 * @return      - none
 *
 * @Note        - none
 */
void GPIO_ButtonInit()
{
 80002a0:	b580      	push	{r7, lr}
 80002a2:	b084      	sub	sp, #16
 80002a4:	af00      	add	r7, sp, #0
	GPIOx_Handle_t GPIOBtn;			//Khai báo biến struct chứa thông tin port và pin(input button) muốn điều khiển

	//Cấu hình thông tin hoạt động của Button muốn điều khiển
	GPIOBtn.pGPIOx = GPIOA;										//Thiết lập port muốn điều khiển
 80002a6:	4b0b      	ldr	r3, [pc, #44]	; (80002d4 <GPIO_ButtonInit+0x34>)
 80002a8:	607b      	str	r3, [r7, #4]
	GPIOBtn.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_0;		//Chân pin của port muốn điều khiển
 80002aa:	2300      	movs	r3, #0
 80002ac:	723b      	strb	r3, [r7, #8]
	GPIOBtn.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_IN;			//Chế độ xuất tín hiệu input
 80002ae:	2300      	movs	r3, #0
 80002b0:	727b      	strb	r3, [r7, #9]
	GPIOBtn.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST; 	//Tốc độ xuất tín hiệu
 80002b2:	2302      	movs	r3, #2
 80002b4:	72bb      	strb	r3, [r7, #10]

	GPIOBtn.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;		//Đầu vào ko cần điện trở kéo
 80002b6:	2300      	movs	r3, #0
 80002b8:	72fb      	strb	r3, [r7, #11]
	//Gpio_Led.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PIN_PU;	//Chọn pull-up(kéo lên)

	//Cấu hình xung Clock cho Peripheral Port Button
	GPIO_PeriClockControl(GPIOA, ENABLE);		//Port A và Enalbe=1
 80002ba:	2101      	movs	r1, #1
 80002bc:	4805      	ldr	r0, [pc, #20]	; (80002d4 <GPIO_ButtonInit+0x34>)
 80002be:	f000 f861 	bl	8000384 <GPIO_PeriClockControl>
	//Ko cần vì đã cấu hình xung clock ở hàm dưới cho SPI

	//Gọi hàm khởi tạo hoạt động cấu hình muốn điều khiển(ở đây muốn điều khiển Input Button)
	GPIO_Init(&GPIOBtn);
 80002c2:	1d3b      	adds	r3, r7, #4
 80002c4:	4618      	mov	r0, r3
 80002c6:	f000 f8df 	bl	8000488 <GPIO_Init>
}
 80002ca:	bf00      	nop
 80002cc:	3710      	adds	r7, #16
 80002ce:	46bd      	mov	sp, r7
 80002d0:	bd80      	pop	{r7, pc}
 80002d2:	bf00      	nop
 80002d4:	40020000 	.word	0x40020000

080002d8 <main>:

/*
 * Hàm xử lý chính
 */
int main(void)
{
 80002d8:	b580      	push	{r7, lr}
 80002da:	b082      	sub	sp, #8
 80002dc:	af02      	add	r7, sp, #8
	//0. Khởi tạo cấu hình nút nhấn cho phép truyền
	GPIO_ButtonInit();
 80002de:	f7ff ffdf 	bl	80002a0 <GPIO_ButtonInit>

	//I2C pin Alternate Function
	I2C1_GPIOInits();
 80002e2:	f7ff ff9f 	bl	8000224 <I2C1_GPIOInits>

	//I2C Peripheral User Configuration
	I2C1_Inits();
 80002e6:	f7ff ffbf 	bl	8000268 <I2C1_Inits>

	//Enable the I2C Peripheral
	I2C_PeripheralControl(I2C1, ENABLE);
 80002ea:	2101      	movs	r1, #1
 80002ec:	480c      	ldr	r0, [pc, #48]	; (8000320 <main+0x48>)
 80002ee:	f000 fc79 	bl	8000be4 <I2C_PeripheralControl>

	while(1)
	{
		//wait till button is pressed
		while( ! GPIO_ReadFromInputPin(GPIOA,GPIO_PIN_NO_0) );
 80002f2:	bf00      	nop
 80002f4:	2100      	movs	r1, #0
 80002f6:	480b      	ldr	r0, [pc, #44]	; (8000324 <main+0x4c>)
 80002f8:	f000 fa54 	bl	80007a4 <GPIO_ReadFromInputPin>
 80002fc:	4603      	mov	r3, r0
 80002fe:	2b00      	cmp	r3, #0
 8000300:	d0f8      	beq.n	80002f4 <main+0x1c>

		//to avoid button de-bouncing related issues 200ms of delay
		delay();
 8000302:	f7ff ff79 	bl	80001f8 <delay>

		//Send "someData" to the Slave, SLAVE_ADDR: địa chỉ của Arduino
		I2C_MasterSendData(&I2C1_Handle,some_Data, strlen((char*)some_Data),SLAVE_ADDR,I2C_DISABLE_SR);
 8000306:	4808      	ldr	r0, [pc, #32]	; (8000328 <main+0x50>)
 8000308:	f7ff ff6e 	bl	80001e8 <strlen>
 800030c:	4602      	mov	r2, r0
 800030e:	2300      	movs	r3, #0
 8000310:	9300      	str	r3, [sp, #0]
 8000312:	2368      	movs	r3, #104	; 0x68
 8000314:	4904      	ldr	r1, [pc, #16]	; (8000328 <main+0x50>)
 8000316:	4805      	ldr	r0, [pc, #20]	; (800032c <main+0x54>)
 8000318:	f000 fbaa 	bl	8000a70 <I2C_MasterSendData>
		while( ! GPIO_ReadFromInputPin(GPIOA,GPIO_PIN_NO_0) );
 800031c:	e7e9      	b.n	80002f2 <main+0x1a>
 800031e:	bf00      	nop
 8000320:	40005400 	.word	0x40005400
 8000324:	40020000 	.word	0x40020000
 8000328:	20000000 	.word	0x20000000
 800032c:	20000044 	.word	0x20000044

08000330 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000330:	480d      	ldr	r0, [pc, #52]	; (8000368 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000332:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000334:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000338:	480c      	ldr	r0, [pc, #48]	; (800036c <LoopForever+0x6>)
  ldr r1, =_edata
 800033a:	490d      	ldr	r1, [pc, #52]	; (8000370 <LoopForever+0xa>)
  ldr r2, =_sidata
 800033c:	4a0d      	ldr	r2, [pc, #52]	; (8000374 <LoopForever+0xe>)
  movs r3, #0
 800033e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000340:	e002      	b.n	8000348 <LoopCopyDataInit>

08000342 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000342:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000344:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000346:	3304      	adds	r3, #4

08000348 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000348:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800034a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800034c:	d3f9      	bcc.n	8000342 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800034e:	4a0a      	ldr	r2, [pc, #40]	; (8000378 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000350:	4c0a      	ldr	r4, [pc, #40]	; (800037c <LoopForever+0x16>)
  movs r3, #0
 8000352:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000354:	e001      	b.n	800035a <LoopFillZerobss>

08000356 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000356:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000358:	3204      	adds	r2, #4

0800035a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800035a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800035c:	d3fb      	bcc.n	8000356 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800035e:	f000 fc5d 	bl	8000c1c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000362:	f7ff ffb9 	bl	80002d8 <main>

08000366 <LoopForever>:

LoopForever:
  b LoopForever
 8000366:	e7fe      	b.n	8000366 <LoopForever>
  ldr   r0, =_estack
 8000368:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800036c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000370:	20000028 	.word	0x20000028
  ldr r2, =_sidata
 8000374:	08000c84 	.word	0x08000c84
  ldr r2, =_sbss
 8000378:	20000028 	.word	0x20000028
  ldr r4, =_ebss
 800037c:	20000050 	.word	0x20000050

08000380 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000380:	e7fe      	b.n	8000380 <ADC_IRQHandler>
	...

08000384 <GPIO_PeriClockControl>:
 * @return		- none
 *
 * @Note 		- none
 */
void GPIO_PeriClockControl(GPIO_RegDef_t *pGPIOx, uint8_t EnorDi)
{
 8000384:	b480      	push	{r7}
 8000386:	b083      	sub	sp, #12
 8000388:	af00      	add	r7, sp, #0
 800038a:	6078      	str	r0, [r7, #4]
 800038c:	460b      	mov	r3, r1
 800038e:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE)
 8000390:	78fb      	ldrb	r3, [r7, #3]
 8000392:	2b01      	cmp	r3, #1
 8000394:	d161      	bne.n	800045a <GPIO_PeriClockControl+0xd6>
	{
		if(pGPIOx == GPIOA)
 8000396:	687b      	ldr	r3, [r7, #4]
 8000398:	4a32      	ldr	r2, [pc, #200]	; (8000464 <GPIO_PeriClockControl+0xe0>)
 800039a:	4293      	cmp	r3, r2
 800039c:	d106      	bne.n	80003ac <GPIO_PeriClockControl+0x28>
		{
			GPIOA_PCLK_EN();		//hàm đã đc define trong stm32f407xx.h(lớp Driver)
 800039e:	4b32      	ldr	r3, [pc, #200]	; (8000468 <GPIO_PeriClockControl+0xe4>)
 80003a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003a2:	4a31      	ldr	r2, [pc, #196]	; (8000468 <GPIO_PeriClockControl+0xe4>)
 80003a4:	f043 0301 	orr.w	r3, r3, #1
 80003a8:	6313      	str	r3, [r2, #48]	; 0x30
	else
	{
		//Todo: (Disable Status)

	}
}
 80003aa:	e056      	b.n	800045a <GPIO_PeriClockControl+0xd6>
		else if(pGPIOx == GPIOB)
 80003ac:	687b      	ldr	r3, [r7, #4]
 80003ae:	4a2f      	ldr	r2, [pc, #188]	; (800046c <GPIO_PeriClockControl+0xe8>)
 80003b0:	4293      	cmp	r3, r2
 80003b2:	d106      	bne.n	80003c2 <GPIO_PeriClockControl+0x3e>
			GPIOB_PCLK_EN();
 80003b4:	4b2c      	ldr	r3, [pc, #176]	; (8000468 <GPIO_PeriClockControl+0xe4>)
 80003b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003b8:	4a2b      	ldr	r2, [pc, #172]	; (8000468 <GPIO_PeriClockControl+0xe4>)
 80003ba:	f043 0302 	orr.w	r3, r3, #2
 80003be:	6313      	str	r3, [r2, #48]	; 0x30
}
 80003c0:	e04b      	b.n	800045a <GPIO_PeriClockControl+0xd6>
		else if(pGPIOx == GPIOC)
 80003c2:	687b      	ldr	r3, [r7, #4]
 80003c4:	4a2a      	ldr	r2, [pc, #168]	; (8000470 <GPIO_PeriClockControl+0xec>)
 80003c6:	4293      	cmp	r3, r2
 80003c8:	d106      	bne.n	80003d8 <GPIO_PeriClockControl+0x54>
			GPIOC_PCLK_EN();
 80003ca:	4b27      	ldr	r3, [pc, #156]	; (8000468 <GPIO_PeriClockControl+0xe4>)
 80003cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003ce:	4a26      	ldr	r2, [pc, #152]	; (8000468 <GPIO_PeriClockControl+0xe4>)
 80003d0:	f043 0304 	orr.w	r3, r3, #4
 80003d4:	6313      	str	r3, [r2, #48]	; 0x30
}
 80003d6:	e040      	b.n	800045a <GPIO_PeriClockControl+0xd6>
		else if(pGPIOx == GPIOD)
 80003d8:	687b      	ldr	r3, [r7, #4]
 80003da:	4a26      	ldr	r2, [pc, #152]	; (8000474 <GPIO_PeriClockControl+0xf0>)
 80003dc:	4293      	cmp	r3, r2
 80003de:	d106      	bne.n	80003ee <GPIO_PeriClockControl+0x6a>
			GPIOD_PCLK_EN();
 80003e0:	4b21      	ldr	r3, [pc, #132]	; (8000468 <GPIO_PeriClockControl+0xe4>)
 80003e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003e4:	4a20      	ldr	r2, [pc, #128]	; (8000468 <GPIO_PeriClockControl+0xe4>)
 80003e6:	f043 0308 	orr.w	r3, r3, #8
 80003ea:	6313      	str	r3, [r2, #48]	; 0x30
}
 80003ec:	e035      	b.n	800045a <GPIO_PeriClockControl+0xd6>
		else if(pGPIOx == GPIOE)
 80003ee:	687b      	ldr	r3, [r7, #4]
 80003f0:	4a21      	ldr	r2, [pc, #132]	; (8000478 <GPIO_PeriClockControl+0xf4>)
 80003f2:	4293      	cmp	r3, r2
 80003f4:	d106      	bne.n	8000404 <GPIO_PeriClockControl+0x80>
			GPIOE_PCLK_EN();
 80003f6:	4b1c      	ldr	r3, [pc, #112]	; (8000468 <GPIO_PeriClockControl+0xe4>)
 80003f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003fa:	4a1b      	ldr	r2, [pc, #108]	; (8000468 <GPIO_PeriClockControl+0xe4>)
 80003fc:	f043 0310 	orr.w	r3, r3, #16
 8000400:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000402:	e02a      	b.n	800045a <GPIO_PeriClockControl+0xd6>
		else if(pGPIOx == GPIOF)
 8000404:	687b      	ldr	r3, [r7, #4]
 8000406:	4a1d      	ldr	r2, [pc, #116]	; (800047c <GPIO_PeriClockControl+0xf8>)
 8000408:	4293      	cmp	r3, r2
 800040a:	d106      	bne.n	800041a <GPIO_PeriClockControl+0x96>
			GPIOF_PCLK_EN();
 800040c:	4b16      	ldr	r3, [pc, #88]	; (8000468 <GPIO_PeriClockControl+0xe4>)
 800040e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000410:	4a15      	ldr	r2, [pc, #84]	; (8000468 <GPIO_PeriClockControl+0xe4>)
 8000412:	f043 0320 	orr.w	r3, r3, #32
 8000416:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000418:	e01f      	b.n	800045a <GPIO_PeriClockControl+0xd6>
		else if(pGPIOx == GPIOG)
 800041a:	687b      	ldr	r3, [r7, #4]
 800041c:	4a18      	ldr	r2, [pc, #96]	; (8000480 <GPIO_PeriClockControl+0xfc>)
 800041e:	4293      	cmp	r3, r2
 8000420:	d106      	bne.n	8000430 <GPIO_PeriClockControl+0xac>
			GPIOG_PCLK_EN();
 8000422:	4b11      	ldr	r3, [pc, #68]	; (8000468 <GPIO_PeriClockControl+0xe4>)
 8000424:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000426:	4a10      	ldr	r2, [pc, #64]	; (8000468 <GPIO_PeriClockControl+0xe4>)
 8000428:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800042c:	6313      	str	r3, [r2, #48]	; 0x30
}
 800042e:	e014      	b.n	800045a <GPIO_PeriClockControl+0xd6>
		else if(pGPIOx == GPIOH)
 8000430:	687b      	ldr	r3, [r7, #4]
 8000432:	4a13      	ldr	r2, [pc, #76]	; (8000480 <GPIO_PeriClockControl+0xfc>)
 8000434:	4293      	cmp	r3, r2
 8000436:	d106      	bne.n	8000446 <GPIO_PeriClockControl+0xc2>
			GPIOH_PCLK_EN();
 8000438:	4b0b      	ldr	r3, [pc, #44]	; (8000468 <GPIO_PeriClockControl+0xe4>)
 800043a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800043c:	4a0a      	ldr	r2, [pc, #40]	; (8000468 <GPIO_PeriClockControl+0xe4>)
 800043e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000442:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000444:	e009      	b.n	800045a <GPIO_PeriClockControl+0xd6>
		else if(pGPIOx == GPIOI)
 8000446:	687b      	ldr	r3, [r7, #4]
 8000448:	4a0e      	ldr	r2, [pc, #56]	; (8000484 <GPIO_PeriClockControl+0x100>)
 800044a:	4293      	cmp	r3, r2
 800044c:	d105      	bne.n	800045a <GPIO_PeriClockControl+0xd6>
			GPIOI_PCLK_EN();
 800044e:	4b06      	ldr	r3, [pc, #24]	; (8000468 <GPIO_PeriClockControl+0xe4>)
 8000450:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000452:	4a05      	ldr	r2, [pc, #20]	; (8000468 <GPIO_PeriClockControl+0xe4>)
 8000454:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000458:	6313      	str	r3, [r2, #48]	; 0x30
}
 800045a:	bf00      	nop
 800045c:	370c      	adds	r7, #12
 800045e:	46bd      	mov	sp, r7
 8000460:	bc80      	pop	{r7}
 8000462:	4770      	bx	lr
 8000464:	40020000 	.word	0x40020000
 8000468:	40023800 	.word	0x40023800
 800046c:	40020400 	.word	0x40020400
 8000470:	40020800 	.word	0x40020800
 8000474:	40020c00 	.word	0x40020c00
 8000478:	40021000 	.word	0x40021000
 800047c:	40021400 	.word	0x40021400
 8000480:	40021800 	.word	0x40021800
 8000484:	40022000 	.word	0x40022000

08000488 <GPIO_Init>:
 * @return		- none
 *
 * @Note 		- none
 */
void GPIO_Init(GPIOx_Handle_t *pGPIOHandle)
{
 8000488:	b580      	push	{r7, lr}
 800048a:	b086      	sub	sp, #24
 800048c:	af00      	add	r7, sp, #0
 800048e:	6078      	str	r0, [r7, #4]
	uint32_t temp = 0; 	//temp. registerr
 8000490:	2300      	movs	r3, #0
 8000492:	617b      	str	r3, [r7, #20]

	//0. Enable the Peripheral Clock
	GPIO_PeriClockControl(pGPIOHandle->pGPIOx, ENABLE);
 8000494:	687b      	ldr	r3, [r7, #4]
 8000496:	681b      	ldr	r3, [r3, #0]
 8000498:	2101      	movs	r1, #1
 800049a:	4618      	mov	r0, r3
 800049c:	f7ff ff72 	bl	8000384 <GPIO_PeriClockControl>

	//1. configure(cấu hình) the mode of gpio pin(Datasheet 8.4.1)
	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_ANALOG)
 80004a0:	687b      	ldr	r3, [r7, #4]
 80004a2:	795b      	ldrb	r3, [r3, #5]
 80004a4:	2b03      	cmp	r3, #3
 80004a6:	d81f      	bhi.n	80004e8 <GPIO_Init+0x60>
	{
		//Giá trị GPIO_PinMode thuộc 1 trong 4 trường hợp bit của Mode Register
		//this is part non-interrupt mode

		//Xác định lấy vị trí MODERx cần điều khiển dựa vào số chân Pin_Number và lưu vào biến temp
		temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 80004a8:	687b      	ldr	r3, [r7, #4]
 80004aa:	795b      	ldrb	r3, [r3, #5]
 80004ac:	461a      	mov	r2, r3
 80004ae:	687b      	ldr	r3, [r7, #4]
 80004b0:	791b      	ldrb	r3, [r3, #4]
 80004b2:	005b      	lsls	r3, r3, #1
 80004b4:	fa02 f303 	lsl.w	r3, r2, r3
 80004b8:	617b      	str	r3, [r7, #20]
		//Dịch 2 bit vì theo datasheet, mỗi 2 bit quản lý một pin number của GPIO port mode register
		//vd: GPIO_PinNumber=Pin0 thì sẽ kích hoạt MODER0(2*0=0->bắt đầu từ bit0)
		//GPIO_PinNumber=Pin1 thì sẽ kích hoạt MODER1(2*1=2->bắt đầu từ bit2)

		//Xóa(clear) value bit tại vị trí 2 bit muốn cấu hình
		pGPIOHandle->pGPIOx->MODER &= ~(0x3 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80004ba:	687b      	ldr	r3, [r7, #4]
 80004bc:	681b      	ldr	r3, [r3, #0]
 80004be:	681a      	ldr	r2, [r3, #0]
 80004c0:	687b      	ldr	r3, [r7, #4]
 80004c2:	791b      	ldrb	r3, [r3, #4]
 80004c4:	4619      	mov	r1, r3
 80004c6:	2303      	movs	r3, #3
 80004c8:	408b      	lsls	r3, r1
 80004ca:	43db      	mvns	r3, r3
 80004cc:	4619      	mov	r1, r3
 80004ce:	687b      	ldr	r3, [r7, #4]
 80004d0:	681b      	ldr	r3, [r3, #0]
 80004d2:	400a      	ands	r2, r1
 80004d4:	601a      	str	r2, [r3, #0]
		//Theo datasheet thì để reset MODERx thì ta cần thiết lập value bit là 00, Ta có: 0x3 = 11
		//~(0x3 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber); nghĩa là tiến hành đảo trạng thái 11 thành 00
		//vị trí chân Pin_Number

		//Lưu value temp vào trong thanh ghi MODER của biến pGPIOHandle
		pGPIOHandle->pGPIOx->MODER |= temp;
 80004d6:	687b      	ldr	r3, [r7, #4]
 80004d8:	681b      	ldr	r3, [r3, #0]
 80004da:	6819      	ldr	r1, [r3, #0]
 80004dc:	687b      	ldr	r3, [r7, #4]
 80004de:	681b      	ldr	r3, [r3, #0]
 80004e0:	697a      	ldr	r2, [r7, #20]
 80004e2:	430a      	orrs	r2, r1
 80004e4:	601a      	str	r2, [r3, #0]
 80004e6:	e0b8      	b.n	800065a <GPIO_Init+0x1d2>
	}
	else
	{
		//This is part(phần) will code later (Interrupt mode) //các trường hợp khác từ 4->6

		if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_FT)
 80004e8:	687b      	ldr	r3, [r7, #4]
 80004ea:	795b      	ldrb	r3, [r3, #5]
 80004ec:	2b04      	cmp	r3, #4
 80004ee:	d117      	bne.n	8000520 <GPIO_Init+0x98>
		{
			//1. configure the FTSR(Falling(xuống) Trigger Select Register)
			EXTI->FTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80004f0:	4b43      	ldr	r3, [pc, #268]	; (8000600 <GPIO_Init+0x178>)
 80004f2:	68db      	ldr	r3, [r3, #12]
 80004f4:	687a      	ldr	r2, [r7, #4]
 80004f6:	7912      	ldrb	r2, [r2, #4]
 80004f8:	4611      	mov	r1, r2
 80004fa:	2201      	movs	r2, #1
 80004fc:	408a      	lsls	r2, r1
 80004fe:	4611      	mov	r1, r2
 8000500:	4a3f      	ldr	r2, [pc, #252]	; (8000600 <GPIO_Init+0x178>)
 8000502:	430b      	orrs	r3, r1
 8000504:	60d3      	str	r3, [r2, #12]

			//1.2 Clear the corresponding(tương ứng) RTSR, việc này phòng ngừa cho tình huống sử dụng RTSR trước đó
			//và có thể gây xung đột cho lần cấu hình hiện tại
			EXTI->RTSR &= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000506:	4b3e      	ldr	r3, [pc, #248]	; (8000600 <GPIO_Init+0x178>)
 8000508:	689b      	ldr	r3, [r3, #8]
 800050a:	687a      	ldr	r2, [r7, #4]
 800050c:	7912      	ldrb	r2, [r2, #4]
 800050e:	4611      	mov	r1, r2
 8000510:	2201      	movs	r2, #1
 8000512:	408a      	lsls	r2, r1
 8000514:	43d2      	mvns	r2, r2
 8000516:	4611      	mov	r1, r2
 8000518:	4a39      	ldr	r2, [pc, #228]	; (8000600 <GPIO_Init+0x178>)
 800051a:	400b      	ands	r3, r1
 800051c:	6093      	str	r3, [r2, #8]
 800051e:	e035      	b.n	800058c <GPIO_Init+0x104>
		}
		else if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RT)
 8000520:	687b      	ldr	r3, [r7, #4]
 8000522:	795b      	ldrb	r3, [r3, #5]
 8000524:	2b05      	cmp	r3, #5
 8000526:	d117      	bne.n	8000558 <GPIO_Init+0xd0>
		{
			//1. configure the RTSR(Rising(lên) Trigger Select Register)
			EXTI->RTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000528:	4b35      	ldr	r3, [pc, #212]	; (8000600 <GPIO_Init+0x178>)
 800052a:	689b      	ldr	r3, [r3, #8]
 800052c:	687a      	ldr	r2, [r7, #4]
 800052e:	7912      	ldrb	r2, [r2, #4]
 8000530:	4611      	mov	r1, r2
 8000532:	2201      	movs	r2, #1
 8000534:	408a      	lsls	r2, r1
 8000536:	4611      	mov	r1, r2
 8000538:	4a31      	ldr	r2, [pc, #196]	; (8000600 <GPIO_Init+0x178>)
 800053a:	430b      	orrs	r3, r1
 800053c:	6093      	str	r3, [r2, #8]

			//1.2 Clear the corresponding(tương ứng) FTSR, việc này phòng ngừa cho tình huống sử dụng FTSR trước đó
			//và có thể gây xung đột cho lần cấu hình hiện tại
			EXTI->FTSR &= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800053e:	4b30      	ldr	r3, [pc, #192]	; (8000600 <GPIO_Init+0x178>)
 8000540:	68db      	ldr	r3, [r3, #12]
 8000542:	687a      	ldr	r2, [r7, #4]
 8000544:	7912      	ldrb	r2, [r2, #4]
 8000546:	4611      	mov	r1, r2
 8000548:	2201      	movs	r2, #1
 800054a:	408a      	lsls	r2, r1
 800054c:	43d2      	mvns	r2, r2
 800054e:	4611      	mov	r1, r2
 8000550:	4a2b      	ldr	r2, [pc, #172]	; (8000600 <GPIO_Init+0x178>)
 8000552:	400b      	ands	r3, r1
 8000554:	60d3      	str	r3, [r2, #12]
 8000556:	e019      	b.n	800058c <GPIO_Init+0x104>
		}
		else if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RFT)
 8000558:	687b      	ldr	r3, [r7, #4]
 800055a:	795b      	ldrb	r3, [r3, #5]
 800055c:	2b06      	cmp	r3, #6
 800055e:	d115      	bne.n	800058c <GPIO_Init+0x104>
		{
			//1. configure the FTSR and RTSR
			EXTI->FTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000560:	4b27      	ldr	r3, [pc, #156]	; (8000600 <GPIO_Init+0x178>)
 8000562:	68db      	ldr	r3, [r3, #12]
 8000564:	687a      	ldr	r2, [r7, #4]
 8000566:	7912      	ldrb	r2, [r2, #4]
 8000568:	4611      	mov	r1, r2
 800056a:	2201      	movs	r2, #1
 800056c:	408a      	lsls	r2, r1
 800056e:	4611      	mov	r1, r2
 8000570:	4a23      	ldr	r2, [pc, #140]	; (8000600 <GPIO_Init+0x178>)
 8000572:	430b      	orrs	r3, r1
 8000574:	60d3      	str	r3, [r2, #12]
			EXTI->RTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000576:	4b22      	ldr	r3, [pc, #136]	; (8000600 <GPIO_Init+0x178>)
 8000578:	689b      	ldr	r3, [r3, #8]
 800057a:	687a      	ldr	r2, [r7, #4]
 800057c:	7912      	ldrb	r2, [r2, #4]
 800057e:	4611      	mov	r1, r2
 8000580:	2201      	movs	r2, #1
 8000582:	408a      	lsls	r2, r1
 8000584:	4611      	mov	r1, r2
 8000586:	4a1e      	ldr	r2, [pc, #120]	; (8000600 <GPIO_Init+0x178>)
 8000588:	430b      	orrs	r3, r1
 800058a:	6093      	str	r3, [r2, #8]
		}

		//2. Configure the GPIO port selection in SYSCFG_EXTICR
		uint8_t temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 4;		//xác định SYSCFG_EXTICR_temp1 register
 800058c:	687b      	ldr	r3, [r7, #4]
 800058e:	791b      	ldrb	r3, [r3, #4]
 8000590:	089b      	lsrs	r3, r3, #2
 8000592:	74fb      	strb	r3, [r7, #19]
		uint8_t temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 4;		//xác định 4bit EXTI_temp2 trong SYSCFG_EXTICR_temp1
 8000594:	687b      	ldr	r3, [r7, #4]
 8000596:	791b      	ldrb	r3, [r3, #4]
 8000598:	f003 0303 	and.w	r3, r3, #3
 800059c:	74bb      	strb	r3, [r7, #18]
		uint8_t portcode = GPIO_BASEADDR_TO_CODE(pGPIOHandle->pGPIOx);		//xác định mã nhị phân xxxx để xác định GPIO port sử dụng
 800059e:	687b      	ldr	r3, [r7, #4]
 80005a0:	681b      	ldr	r3, [r3, #0]
 80005a2:	4a18      	ldr	r2, [pc, #96]	; (8000604 <GPIO_Init+0x17c>)
 80005a4:	4293      	cmp	r3, r2
 80005a6:	d03b      	beq.n	8000620 <GPIO_Init+0x198>
 80005a8:	687b      	ldr	r3, [r7, #4]
 80005aa:	681b      	ldr	r3, [r3, #0]
 80005ac:	4a16      	ldr	r2, [pc, #88]	; (8000608 <GPIO_Init+0x180>)
 80005ae:	4293      	cmp	r3, r2
 80005b0:	d024      	beq.n	80005fc <GPIO_Init+0x174>
 80005b2:	687b      	ldr	r3, [r7, #4]
 80005b4:	681b      	ldr	r3, [r3, #0]
 80005b6:	4a15      	ldr	r2, [pc, #84]	; (800060c <GPIO_Init+0x184>)
 80005b8:	4293      	cmp	r3, r2
 80005ba:	d01d      	beq.n	80005f8 <GPIO_Init+0x170>
 80005bc:	687b      	ldr	r3, [r7, #4]
 80005be:	681b      	ldr	r3, [r3, #0]
 80005c0:	4a13      	ldr	r2, [pc, #76]	; (8000610 <GPIO_Init+0x188>)
 80005c2:	4293      	cmp	r3, r2
 80005c4:	d016      	beq.n	80005f4 <GPIO_Init+0x16c>
 80005c6:	687b      	ldr	r3, [r7, #4]
 80005c8:	681b      	ldr	r3, [r3, #0]
 80005ca:	4a12      	ldr	r2, [pc, #72]	; (8000614 <GPIO_Init+0x18c>)
 80005cc:	4293      	cmp	r3, r2
 80005ce:	d00f      	beq.n	80005f0 <GPIO_Init+0x168>
 80005d0:	687b      	ldr	r3, [r7, #4]
 80005d2:	681b      	ldr	r3, [r3, #0]
 80005d4:	4a10      	ldr	r2, [pc, #64]	; (8000618 <GPIO_Init+0x190>)
 80005d6:	4293      	cmp	r3, r2
 80005d8:	d008      	beq.n	80005ec <GPIO_Init+0x164>
 80005da:	687b      	ldr	r3, [r7, #4]
 80005dc:	681b      	ldr	r3, [r3, #0]
 80005de:	4a0f      	ldr	r2, [pc, #60]	; (800061c <GPIO_Init+0x194>)
 80005e0:	4293      	cmp	r3, r2
 80005e2:	d101      	bne.n	80005e8 <GPIO_Init+0x160>
 80005e4:	2306      	movs	r3, #6
 80005e6:	e01c      	b.n	8000622 <GPIO_Init+0x19a>
 80005e8:	2300      	movs	r3, #0
 80005ea:	e01a      	b.n	8000622 <GPIO_Init+0x19a>
 80005ec:	2305      	movs	r3, #5
 80005ee:	e018      	b.n	8000622 <GPIO_Init+0x19a>
 80005f0:	2304      	movs	r3, #4
 80005f2:	e016      	b.n	8000622 <GPIO_Init+0x19a>
 80005f4:	2303      	movs	r3, #3
 80005f6:	e014      	b.n	8000622 <GPIO_Init+0x19a>
 80005f8:	2302      	movs	r3, #2
 80005fa:	e012      	b.n	8000622 <GPIO_Init+0x19a>
 80005fc:	2301      	movs	r3, #1
 80005fe:	e010      	b.n	8000622 <GPIO_Init+0x19a>
 8000600:	40013c00 	.word	0x40013c00
 8000604:	40020000 	.word	0x40020000
 8000608:	40020400 	.word	0x40020400
 800060c:	40020800 	.word	0x40020800
 8000610:	40020c00 	.word	0x40020c00
 8000614:	40021000 	.word	0x40021000
 8000618:	40021400 	.word	0x40021400
 800061c:	40021800 	.word	0x40021800
 8000620:	2300      	movs	r3, #0
 8000622:	747b      	strb	r3, [r7, #17]
		SYSCFG_PCLK_EN();													//Kích hoạt xung clock để cấu hình
 8000624:	4b5c      	ldr	r3, [pc, #368]	; (8000798 <GPIO_Init+0x310>)
 8000626:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000628:	4a5b      	ldr	r2, [pc, #364]	; (8000798 <GPIO_Init+0x310>)
 800062a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800062e:	6453      	str	r3, [r2, #68]	; 0x44
		SYSCFG->EXTICR[temp1] = portcode << (temp2 * 4);					//Cấu hình thanh ghi SYSCFG_EXTICR_temp1
 8000630:	7c7a      	ldrb	r2, [r7, #17]
 8000632:	7cbb      	ldrb	r3, [r7, #18]
 8000634:	009b      	lsls	r3, r3, #2
 8000636:	fa02 f103 	lsl.w	r1, r2, r3
 800063a:	4a58      	ldr	r2, [pc, #352]	; (800079c <GPIO_Init+0x314>)
 800063c:	7cfb      	ldrb	r3, [r7, #19]
 800063e:	3302      	adds	r3, #2
 8000640:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

		//3. Eanble the exti interrupt delivery(chuyển, sử dụng) by using IMR(Interrupt Masking Register)
		EXTI->IMR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000644:	4b56      	ldr	r3, [pc, #344]	; (80007a0 <GPIO_Init+0x318>)
 8000646:	681b      	ldr	r3, [r3, #0]
 8000648:	687a      	ldr	r2, [r7, #4]
 800064a:	7912      	ldrb	r2, [r2, #4]
 800064c:	4611      	mov	r1, r2
 800064e:	2201      	movs	r2, #1
 8000650:	408a      	lsls	r2, r1
 8000652:	4611      	mov	r1, r2
 8000654:	4a52      	ldr	r2, [pc, #328]	; (80007a0 <GPIO_Init+0x318>)
 8000656:	430b      	orrs	r3, r1
 8000658:	6013      	str	r3, [r2, #0]

	}
	//Reset biến temp để sử dụng cho các lệnh khác trong hàm
	temp = 0;
 800065a:	2300      	movs	r3, #0
 800065c:	617b      	str	r3, [r7, #20]

	//2. configure the speed (Datasheet 8.4.3)
	//Xác định lấy vị trí OSPEEDRx cần điều khiển dựa vào số chân Pin_Number và lưu vào biến temp
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinSpeed << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 800065e:	687b      	ldr	r3, [r7, #4]
 8000660:	799b      	ldrb	r3, [r3, #6]
 8000662:	461a      	mov	r2, r3
 8000664:	687b      	ldr	r3, [r7, #4]
 8000666:	791b      	ldrb	r3, [r3, #4]
 8000668:	005b      	lsls	r3, r3, #1
 800066a:	fa02 f303 	lsl.w	r3, r2, r3
 800066e:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OSPEEDR &=  ~(0x3 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);	//Clearing bit field
 8000670:	687b      	ldr	r3, [r7, #4]
 8000672:	681b      	ldr	r3, [r3, #0]
 8000674:	689a      	ldr	r2, [r3, #8]
 8000676:	687b      	ldr	r3, [r7, #4]
 8000678:	791b      	ldrb	r3, [r3, #4]
 800067a:	4619      	mov	r1, r3
 800067c:	2303      	movs	r3, #3
 800067e:	408b      	lsls	r3, r1
 8000680:	43db      	mvns	r3, r3
 8000682:	4619      	mov	r1, r3
 8000684:	687b      	ldr	r3, [r7, #4]
 8000686:	681b      	ldr	r3, [r3, #0]
 8000688:	400a      	ands	r2, r1
 800068a:	609a      	str	r2, [r3, #8]
	pGPIOHandle->pGPIOx->OSPEEDR |= temp;
 800068c:	687b      	ldr	r3, [r7, #4]
 800068e:	681b      	ldr	r3, [r3, #0]
 8000690:	6899      	ldr	r1, [r3, #8]
 8000692:	687b      	ldr	r3, [r7, #4]
 8000694:	681b      	ldr	r3, [r3, #0]
 8000696:	697a      	ldr	r2, [r7, #20]
 8000698:	430a      	orrs	r2, r1
 800069a:	609a      	str	r2, [r3, #8]
	//=> Lúc này ta đã xác định(cấu hình) đc speed(OSPEEDRx) của GPIO tùy thuộc vào pin_number bạn muốn control
	temp = 0;
 800069c:	2300      	movs	r3, #0
 800069e:	617b      	str	r3, [r7, #20]

	//3. configure the pullup-pulldown settings (Datasheet 8.4.4)
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinPuPdControl << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 80006a0:	687b      	ldr	r3, [r7, #4]
 80006a2:	79db      	ldrb	r3, [r3, #7]
 80006a4:	461a      	mov	r2, r3
 80006a6:	687b      	ldr	r3, [r7, #4]
 80006a8:	791b      	ldrb	r3, [r3, #4]
 80006aa:	005b      	lsls	r3, r3, #1
 80006ac:	fa02 f303 	lsl.w	r3, r2, r3
 80006b0:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->PUPDR &=  ~(0x3 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80006b2:	687b      	ldr	r3, [r7, #4]
 80006b4:	681b      	ldr	r3, [r3, #0]
 80006b6:	68da      	ldr	r2, [r3, #12]
 80006b8:	687b      	ldr	r3, [r7, #4]
 80006ba:	791b      	ldrb	r3, [r3, #4]
 80006bc:	4619      	mov	r1, r3
 80006be:	2303      	movs	r3, #3
 80006c0:	408b      	lsls	r3, r1
 80006c2:	43db      	mvns	r3, r3
 80006c4:	4619      	mov	r1, r3
 80006c6:	687b      	ldr	r3, [r7, #4]
 80006c8:	681b      	ldr	r3, [r3, #0]
 80006ca:	400a      	ands	r2, r1
 80006cc:	60da      	str	r2, [r3, #12]
	pGPIOHandle->pGPIOx->PUPDR |= temp;
 80006ce:	687b      	ldr	r3, [r7, #4]
 80006d0:	681b      	ldr	r3, [r3, #0]
 80006d2:	68d9      	ldr	r1, [r3, #12]
 80006d4:	687b      	ldr	r3, [r7, #4]
 80006d6:	681b      	ldr	r3, [r3, #0]
 80006d8:	697a      	ldr	r2, [r7, #20]
 80006da:	430a      	orrs	r2, r1
 80006dc:	60da      	str	r2, [r3, #12]
	temp = 0;
 80006de:	2300      	movs	r3, #0
 80006e0:	617b      	str	r3, [r7, #20]

	//4. configure the optype (Datasheet 8.4.2)
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinOPType << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80006e2:	687b      	ldr	r3, [r7, #4]
 80006e4:	7a1b      	ldrb	r3, [r3, #8]
 80006e6:	461a      	mov	r2, r3
 80006e8:	687b      	ldr	r3, [r7, #4]
 80006ea:	791b      	ldrb	r3, [r3, #4]
 80006ec:	fa02 f303 	lsl.w	r3, r2, r3
 80006f0:	617b      	str	r3, [r7, #20]
	//Dịch 1 bit vì theo datasheet, mỗi 1 bit quản lý một pin number của GPIO port mode register
	pGPIOHandle->pGPIOx->OTYPER &=  ~(0x1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber); //Clearing bit field
 80006f2:	687b      	ldr	r3, [r7, #4]
 80006f4:	681b      	ldr	r3, [r3, #0]
 80006f6:	685a      	ldr	r2, [r3, #4]
 80006f8:	687b      	ldr	r3, [r7, #4]
 80006fa:	791b      	ldrb	r3, [r3, #4]
 80006fc:	4619      	mov	r1, r3
 80006fe:	2301      	movs	r3, #1
 8000700:	408b      	lsls	r3, r1
 8000702:	43db      	mvns	r3, r3
 8000704:	4619      	mov	r1, r3
 8000706:	687b      	ldr	r3, [r7, #4]
 8000708:	681b      	ldr	r3, [r3, #0]
 800070a:	400a      	ands	r2, r1
 800070c:	605a      	str	r2, [r3, #4]
	//~(0x1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber); nghĩa là tiến hành đảo trạng thái 1 thành 0
	//vị trí chân Pin_Number
	pGPIOHandle->pGPIOx->OTYPER |= temp;
 800070e:	687b      	ldr	r3, [r7, #4]
 8000710:	681b      	ldr	r3, [r3, #0]
 8000712:	6859      	ldr	r1, [r3, #4]
 8000714:	687b      	ldr	r3, [r7, #4]
 8000716:	681b      	ldr	r3, [r3, #0]
 8000718:	697a      	ldr	r2, [r7, #20]
 800071a:	430a      	orrs	r2, r1
 800071c:	605a      	str	r2, [r3, #4]
	temp = 0;
 800071e:	2300      	movs	r3, #0
 8000720:	617b      	str	r3, [r7, #20]

	//5. configure the alt functionality
	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_ALTFN)
 8000722:	687b      	ldr	r3, [r7, #4]
 8000724:	795b      	ldrb	r3, [r3, #5]
 8000726:	2b02      	cmp	r3, #2
 8000728:	d132      	bne.n	8000790 <GPIO_Init+0x308>
		//Chế độ này đc thực thi khi và chỉ khi bit MODERx đc thiết lập GPIO_MODE_ALTFN

		uint32_t temp1,temp2;

		//Xác định thanh ghi cần sử dụng là GPIOx_AFRH ->AFR[1] hay GPIOx_AFRL ->AFR[0]
		temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 8;
 800072a:	687b      	ldr	r3, [r7, #4]
 800072c:	791b      	ldrb	r3, [r3, #4]
 800072e:	08db      	lsrs	r3, r3, #3
 8000730:	b2db      	uxtb	r3, r3
 8000732:	60fb      	str	r3, [r7, #12]

		//Xác định vị trí cụm 4bit cần sử dụng ở vị trí nào trong thanh ghi
		temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 8;
 8000734:	687b      	ldr	r3, [r7, #4]
 8000736:	791b      	ldrb	r3, [r3, #4]
 8000738:	f003 0307 	and.w	r3, r3, #7
 800073c:	60bb      	str	r3, [r7, #8]

		//Clearing bit field
		pGPIOHandle->pGPIOx->AFR[temp1] &= ~(0xF << (4* temp2));   //0xF = 1111, đảo 1111->0000 tại vị trí 4*temp2
 800073e:	687b      	ldr	r3, [r7, #4]
 8000740:	681b      	ldr	r3, [r3, #0]
 8000742:	68fa      	ldr	r2, [r7, #12]
 8000744:	3208      	adds	r2, #8
 8000746:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800074a:	68bb      	ldr	r3, [r7, #8]
 800074c:	009b      	lsls	r3, r3, #2
 800074e:	210f      	movs	r1, #15
 8000750:	fa01 f303 	lsl.w	r3, r1, r3
 8000754:	43db      	mvns	r3, r3
 8000756:	4619      	mov	r1, r3
 8000758:	687b      	ldr	r3, [r7, #4]
 800075a:	681b      	ldr	r3, [r3, #0]
 800075c:	4011      	ands	r1, r2
 800075e:	68fa      	ldr	r2, [r7, #12]
 8000760:	3208      	adds	r2, #8
 8000762:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

		//Lưu cấu hình AFR vào trong con trỏ pGPIOHandle
		pGPIOHandle->pGPIOx->AFR[temp1] |= (pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFunMode << (4* temp2));
 8000766:	687b      	ldr	r3, [r7, #4]
 8000768:	681b      	ldr	r3, [r3, #0]
 800076a:	68fa      	ldr	r2, [r7, #12]
 800076c:	3208      	adds	r2, #8
 800076e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000772:	687b      	ldr	r3, [r7, #4]
 8000774:	7a5b      	ldrb	r3, [r3, #9]
 8000776:	4619      	mov	r1, r3
 8000778:	68bb      	ldr	r3, [r7, #8]
 800077a:	009b      	lsls	r3, r3, #2
 800077c:	fa01 f303 	lsl.w	r3, r1, r3
 8000780:	4619      	mov	r1, r3
 8000782:	687b      	ldr	r3, [r7, #4]
 8000784:	681b      	ldr	r3, [r3, #0]
 8000786:	4311      	orrs	r1, r2
 8000788:	68fa      	ldr	r2, [r7, #12]
 800078a:	3208      	adds	r2, #8
 800078c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	}
}
 8000790:	bf00      	nop
 8000792:	3718      	adds	r7, #24
 8000794:	46bd      	mov	sp, r7
 8000796:	bd80      	pop	{r7, pc}
 8000798:	40023800 	.word	0x40023800
 800079c:	40013800 	.word	0x40013800
 80007a0:	40013c00 	.word	0x40013c00

080007a4 <GPIO_ReadFromInputPin>:
 * @return		- value of read in pin_number (0 or 1)
 *
 * @Note 		- none
 */
uint8_t GPIO_ReadFromInputPin(GPIO_RegDef_t *pGPIOx, uint8_t PinNumber)
{
 80007a4:	b480      	push	{r7}
 80007a6:	b085      	sub	sp, #20
 80007a8:	af00      	add	r7, sp, #0
 80007aa:	6078      	str	r0, [r7, #4]
 80007ac:	460b      	mov	r3, r1
 80007ae:	70fb      	strb	r3, [r7, #3]
	uint8_t value;			//biến lưu value đọc đc từ pin
	value = (uint8_t)((pGPIOx->IDR >> PinNumber) & 0x00000001);
 80007b0:	687b      	ldr	r3, [r7, #4]
 80007b2:	691a      	ldr	r2, [r3, #16]
 80007b4:	78fb      	ldrb	r3, [r7, #3]
 80007b6:	fa22 f303 	lsr.w	r3, r2, r3
 80007ba:	b2db      	uxtb	r3, r3
 80007bc:	f003 0301 	and.w	r3, r3, #1
 80007c0:	73fb      	strb	r3, [r7, #15]
	return value;
 80007c2:	7bfb      	ldrb	r3, [r7, #15]

	//((pGPIOx->IDR >> PinNumber): Phần này dịch chuyển giá trị IDR sang phải của vị trí PinNumber đầu vào,
	//căn chỉnh giá trị đầu vào của chân mong muốn về bit ngoài cùng bên phải(bit0).
	//& 0x00000001: Thao tác AND theo bit này che giấu tất cả ngoại trừ bit ngoài cùng bên phải(bit0),
	//trích xuất hiệu quả giá trị đầu vào của mã pin được chỉ định.
}
 80007c4:	4618      	mov	r0, r3
 80007c6:	3714      	adds	r7, #20
 80007c8:	46bd      	mov	sp, r7
 80007ca:	bc80      	pop	{r7}
 80007cc:	4770      	bx	lr
	...

080007d0 <I2C_PeriClockControl>:
 *
 * @Note        - none

 */
void I2C_PeriClockControl(I2C_RegDef_t *pI2Cx, uint8_t EnorDi)
{
 80007d0:	b480      	push	{r7}
 80007d2:	b083      	sub	sp, #12
 80007d4:	af00      	add	r7, sp, #0
 80007d6:	6078      	str	r0, [r7, #4]
 80007d8:	460b      	mov	r3, r1
 80007da:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE)
 80007dc:	78fb      	ldrb	r3, [r7, #3]
 80007de:	2b01      	cmp	r3, #1
 80007e0:	d11f      	bne.n	8000822 <I2C_PeriClockControl+0x52>
	{
		if(pI2Cx == I2C1)
 80007e2:	687b      	ldr	r3, [r7, #4]
 80007e4:	4a11      	ldr	r2, [pc, #68]	; (800082c <I2C_PeriClockControl+0x5c>)
 80007e6:	4293      	cmp	r3, r2
 80007e8:	d106      	bne.n	80007f8 <I2C_PeriClockControl+0x28>
		{
			I2C1_PCLK_EN();
 80007ea:	4b11      	ldr	r3, [pc, #68]	; (8000830 <I2C_PeriClockControl+0x60>)
 80007ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007ee:	4a10      	ldr	r2, [pc, #64]	; (8000830 <I2C_PeriClockControl+0x60>)
 80007f0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80007f4:	6413      	str	r3, [r2, #64]	; 0x40
	}
	else
	{
		//TODO
	}
}
 80007f6:	e014      	b.n	8000822 <I2C_PeriClockControl+0x52>
		else if (pI2Cx == I2C2)
 80007f8:	687b      	ldr	r3, [r7, #4]
 80007fa:	4a0e      	ldr	r2, [pc, #56]	; (8000834 <I2C_PeriClockControl+0x64>)
 80007fc:	4293      	cmp	r3, r2
 80007fe:	d106      	bne.n	800080e <I2C_PeriClockControl+0x3e>
			I2C2_PCLK_EN();
 8000800:	4b0b      	ldr	r3, [pc, #44]	; (8000830 <I2C_PeriClockControl+0x60>)
 8000802:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000804:	4a0a      	ldr	r2, [pc, #40]	; (8000830 <I2C_PeriClockControl+0x60>)
 8000806:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800080a:	6413      	str	r3, [r2, #64]	; 0x40
}
 800080c:	e009      	b.n	8000822 <I2C_PeriClockControl+0x52>
		else if (pI2Cx == I2C3)
 800080e:	687b      	ldr	r3, [r7, #4]
 8000810:	4a09      	ldr	r2, [pc, #36]	; (8000838 <I2C_PeriClockControl+0x68>)
 8000812:	4293      	cmp	r3, r2
 8000814:	d105      	bne.n	8000822 <I2C_PeriClockControl+0x52>
			I2C3_PCLK_EN();
 8000816:	4b06      	ldr	r3, [pc, #24]	; (8000830 <I2C_PeriClockControl+0x60>)
 8000818:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800081a:	4a05      	ldr	r2, [pc, #20]	; (8000830 <I2C_PeriClockControl+0x60>)
 800081c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000820:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000822:	bf00      	nop
 8000824:	370c      	adds	r7, #12
 8000826:	46bd      	mov	sp, r7
 8000828:	bc80      	pop	{r7}
 800082a:	4770      	bx	lr
 800082c:	40005400 	.word	0x40005400
 8000830:	40023800 	.word	0x40023800
 8000834:	40005800 	.word	0x40005800
 8000838:	40005c00 	.word	0x40005c00

0800083c <RCC_GetPLLOutputClock>:
 *
 * @Note        - Không sử dụng xung clock dạng PLL trong khóa học

 */
uint32_t RCC_GetPLLOutputClock(void)
{
 800083c:	b480      	push	{r7}
 800083e:	af00      	add	r7, sp, #0
	return 0;
 8000840:	2300      	movs	r3, #0
}
 8000842:	4618      	mov	r0, r3
 8000844:	46bd      	mov	sp, r7
 8000846:	bc80      	pop	{r7}
 8000848:	4770      	bx	lr
	...

0800084c <RCC_GetPCLK1Value>:
 *
 * @Note        - Sử dụng sơ đồ khối liên quan đến xung Clock của System Clock
 * 				- Thanh ghi CFGR thuộc RCC Register đc sử dụng
 */
uint32_t RCC_GetPCLK1Value(void)
{
 800084c:	b580      	push	{r7, lr}
 800084e:	b084      	sub	sp, #16
 8000850:	af00      	add	r7, sp, #0

	uint8_t clksrc,temp,ahbp,apb1p;				//biến xung clock cho khối system clock

	//Kiểm tra xem SWS[3:2] đang có giá trị bit là bao nhiêu, từ đó xác định khối
	//Oscillator đang đc sử dụng là System Clock
	clksrc = (RCC->CFGR >> 2) & 0x3;	//0x03=0011, nghĩa là đọc 2 vị trí bit liền nhau từ vị trí bit số 2
 8000852:	4b26      	ldr	r3, [pc, #152]	; (80008ec <RCC_GetPCLK1Value+0xa0>)
 8000854:	689b      	ldr	r3, [r3, #8]
 8000856:	089b      	lsrs	r3, r3, #2
 8000858:	b2db      	uxtb	r3, r3
 800085a:	f003 0303 	and.w	r3, r3, #3
 800085e:	727b      	strb	r3, [r7, #9]


	//1. Xác định tần số xung clock tổng của System Clock
	if(clksrc == 0)    		 	//HSI Oscillator
 8000860:	7a7b      	ldrb	r3, [r7, #9]
 8000862:	2b00      	cmp	r3, #0
 8000864:	d102      	bne.n	800086c <RCC_GetPCLK1Value+0x20>
	{
		SystemClk = 16000000;
 8000866:	4b22      	ldr	r3, [pc, #136]	; (80008f0 <RCC_GetPCLK1Value+0xa4>)
 8000868:	60fb      	str	r3, [r7, #12]
 800086a:	e00b      	b.n	8000884 <RCC_GetPCLK1Value+0x38>
	}
	else if(clksrc == 1)		//HSE Oscillator
 800086c:	7a7b      	ldrb	r3, [r7, #9]
 800086e:	2b01      	cmp	r3, #1
 8000870:	d102      	bne.n	8000878 <RCC_GetPCLK1Value+0x2c>
	{
		SystemClk = 8000000;
 8000872:	4b20      	ldr	r3, [pc, #128]	; (80008f4 <RCC_GetPCLK1Value+0xa8>)
 8000874:	60fb      	str	r3, [r7, #12]
 8000876:	e005      	b.n	8000884 <RCC_GetPCLK1Value+0x38>
	}
	else if(clksrc == 2)		//PLL Oscillator
 8000878:	7a7b      	ldrb	r3, [r7, #9]
 800087a:	2b02      	cmp	r3, #2
 800087c:	d102      	bne.n	8000884 <RCC_GetPCLK1Value+0x38>
	{
		SystemClk = RCC_GetPLLOutputClock();
 800087e:	f7ff ffdd 	bl	800083c <RCC_GetPLLOutputClock>
 8000882:	60f8      	str	r0, [r7, #12]
	}

	//2. Xác định bộ chia của AHBP Prescaler, bit field HPRE[7:4] của CFGR register
	temp = ((RCC->CFGR >> 4) & 0xF);	//0xF=1111, nghĩa là đọc 4 vị trí bit liền nhau từ vị trí bit số 4
 8000884:	4b19      	ldr	r3, [pc, #100]	; (80008ec <RCC_GetPCLK1Value+0xa0>)
 8000886:	689b      	ldr	r3, [r3, #8]
 8000888:	091b      	lsrs	r3, r3, #4
 800088a:	b2db      	uxtb	r3, r3
 800088c:	f003 030f 	and.w	r3, r3, #15
 8000890:	723b      	strb	r3, [r7, #8]
	if(temp < 4)
 8000892:	7a3b      	ldrb	r3, [r7, #8]
 8000894:	2b03      	cmp	r3, #3
 8000896:	d802      	bhi.n	800089e <RCC_GetPCLK1Value+0x52>
	{
		ahbp = 1;			//Không sử dụng bộ chia
 8000898:	2301      	movs	r3, #1
 800089a:	72fb      	strb	r3, [r7, #11]
 800089c:	e005      	b.n	80008aa <RCC_GetPCLK1Value+0x5e>
	}
	else
	{
		//Có sử dụng bộ chia, nếu temp=8 thì 8-8=0, sử dụng bộ chia 2,...
		ahbp = AHB_PreScaler[temp - 8];
 800089e:	7a3b      	ldrb	r3, [r7, #8]
 80008a0:	3b08      	subs	r3, #8
 80008a2:	4a15      	ldr	r2, [pc, #84]	; (80008f8 <RCC_GetPCLK1Value+0xac>)
 80008a4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80008a8:	72fb      	strb	r3, [r7, #11]
	}

	//3. Xác định bộ chia của APB1 PreScaler,bit ffield PPRE[12:10] của CFGR register
	temp = ((RCC->CFGR >> 10) & 0x7);	//0xF=1111, nghĩa là đọc 3 vị trí bit liền nhau từ vị trí bit số 10
 80008aa:	4b10      	ldr	r3, [pc, #64]	; (80008ec <RCC_GetPCLK1Value+0xa0>)
 80008ac:	689b      	ldr	r3, [r3, #8]
 80008ae:	0a9b      	lsrs	r3, r3, #10
 80008b0:	b2db      	uxtb	r3, r3
 80008b2:	f003 0307 	and.w	r3, r3, #7
 80008b6:	723b      	strb	r3, [r7, #8]
	if(temp < 8)
 80008b8:	7a3b      	ldrb	r3, [r7, #8]
 80008ba:	2b07      	cmp	r3, #7
 80008bc:	d802      	bhi.n	80008c4 <RCC_GetPCLK1Value+0x78>
	{
		apb1p = 1;			//Không sử dụng bộ chia
 80008be:	2301      	movs	r3, #1
 80008c0:	72bb      	strb	r3, [r7, #10]
 80008c2:	e005      	b.n	80008d0 <RCC_GetPCLK1Value+0x84>
	}
	else
	{
		//Có sử dụng bộ chia, nếu temp=8 thì 8-8=0, sử dụng bộ chia 2,...
		apb1p = APB1_PreScaler[temp - 4];
 80008c4:	7a3b      	ldrb	r3, [r7, #8]
 80008c6:	3b04      	subs	r3, #4
 80008c8:	4a0c      	ldr	r2, [pc, #48]	; (80008fc <RCC_GetPCLK1Value+0xb0>)
 80008ca:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80008ce:	72bb      	strb	r3, [r7, #10]
	}

	//4. Xác định xung PCLK1 dùng cho I2C đc lấy từ từ System Clock
	pclk1 = (SystemClk / ahbp) / apb1p;
 80008d0:	7afb      	ldrb	r3, [r7, #11]
 80008d2:	68fa      	ldr	r2, [r7, #12]
 80008d4:	fbb2 f2f3 	udiv	r2, r2, r3
 80008d8:	7abb      	ldrb	r3, [r7, #10]
 80008da:	fbb2 f3f3 	udiv	r3, r2, r3
 80008de:	607b      	str	r3, [r7, #4]

	return pclk1;
 80008e0:	687b      	ldr	r3, [r7, #4]
}
 80008e2:	4618      	mov	r0, r3
 80008e4:	3710      	adds	r7, #16
 80008e6:	46bd      	mov	sp, r7
 80008e8:	bd80      	pop	{r7, pc}
 80008ea:	bf00      	nop
 80008ec:	40023800 	.word	0x40023800
 80008f0:	00f42400 	.word	0x00f42400
 80008f4:	007a1200 	.word	0x007a1200
 80008f8:	20000010 	.word	0x20000010
 80008fc:	20000020 	.word	0x20000020

08000900 <I2C_Init>:
 *
 * @Note        - none

 */
void I2C_Init(I2C_Handle_t *pI2CHandle)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	b084      	sub	sp, #16
 8000904:	af00      	add	r7, sp, #0
 8000906:	6078      	str	r0, [r7, #4]
	uint32_t tempreg = 0;		//biến tạm 32 bit temp register
 8000908:	2300      	movs	r3, #0
 800090a:	60fb      	str	r3, [r7, #12]

	//Enable the Clock for the I2Cx peripheral - Kích hoạt xung clock cho I2Cx
	I2C_PeriClockControl(pI2CHandle->pI2Cx, ENABLE);
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	681b      	ldr	r3, [r3, #0]
 8000910:	2101      	movs	r1, #1
 8000912:	4618      	mov	r0, r3
 8000914:	f7ff ff5c 	bl	80007d0 <I2C_PeriClockControl>

	//Đọc và Lưu giá trị của I2C_AckControl(sẽ đc set khi init) vào vị trí bit thứ 10 biến tạm tempreg
	tempreg |= pI2CHandle->I2C_Config.I2C_AckControl << 10;				//Ack control bit
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	7a5b      	ldrb	r3, [r3, #9]
 800091c:	029b      	lsls	r3, r3, #10
 800091e:	461a      	mov	r2, r3
 8000920:	68fb      	ldr	r3, [r7, #12]
 8000922:	4313      	orrs	r3, r2
 8000924:	60fb      	str	r3, [r7, #12]
	//Kích hoạt hoặc vô hiệu hóa theo yêu cầu của User

	//Thiết lập giá trị bit thứ 10 của thanh ghi CR1 với giá trị biến tempreg
	pI2CHandle->pI2Cx->CR1 = tempreg;
 8000926:	687b      	ldr	r3, [r7, #4]
 8000928:	681b      	ldr	r3, [r3, #0]
 800092a:	68fa      	ldr	r2, [r7, #12]
 800092c:	601a      	str	r2, [r3, #0]

	/* Cấu hình bit field FREQ của CR2 register */
	tempreg = 0;
 800092e:	2300      	movs	r3, #0
 8000930:	60fb      	str	r3, [r7, #12]
	tempreg |= RCC_GetPCLK1Value() / 1000000U;
 8000932:	f7ff ff8b 	bl	800084c <RCC_GetPCLK1Value>
 8000936:	4603      	mov	r3, r0
 8000938:	4a4a      	ldr	r2, [pc, #296]	; (8000a64 <I2C_Init+0x164>)
 800093a:	fba2 2303 	umull	r2, r3, r2, r3
 800093e:	0c9b      	lsrs	r3, r3, #18
 8000940:	68fa      	ldr	r2, [r7, #12]
 8000942:	4313      	orrs	r3, r2
 8000944:	60fb      	str	r3, [r7, #12]
	//Giải thích: vì giá trị trả về là 16MHz nên ta chia 1MHz để lấy giá trị 16

	pI2CHandle->pI2Cx->CR2 = (tempreg & 0x3F);  //0x3F = 0011 1111
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	681b      	ldr	r3, [r3, #0]
 800094a:	68fa      	ldr	r2, [r7, #12]
 800094c:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8000950:	605a      	str	r2, [r3, #4]
	//Giá trị 16 của tempreg khi biên dịch sẽ đc trình biên dịch tách thành mã nhị phân
	//sau đó & với 0x3F vì bit field FREQ sử dụng 6 bit đầu của CR2 Register

	/* Lập trình định dạng địa chỉ và địa chỉ của thiết bị , OAR1 register */
	tempreg = 0;
 8000952:	2300      	movs	r3, #0
 8000954:	60fb      	str	r3, [r7, #12]
	tempreg |= pI2CHandle->I2C_Config.I2C_DeviceAddress << 1;	// ADD[7:1] : lấy giá trị từ bit thứ 2
 8000956:	687b      	ldr	r3, [r7, #4]
 8000958:	7a1b      	ldrb	r3, [r3, #8]
 800095a:	005b      	lsls	r3, r3, #1
 800095c:	461a      	mov	r2, r3
 800095e:	68fb      	ldr	r3, [r7, #12]
 8000960:	4313      	orrs	r3, r2
 8000962:	60fb      	str	r3, [r7, #12]
	tempreg |= (1 << 14);								//Lệnh bắt buộc bit thứ 14 luôn là 1 khi cấu hình
 8000964:	68fb      	ldr	r3, [r7, #12]
 8000966:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800096a:	60fb      	str	r3, [r7, #12]
	pI2CHandle->pI2Cx->OAR1 = tempreg;					//Đưa vào cấu hình thanh ghi OAR1 bằng giá trị tempreg
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	681b      	ldr	r3, [r3, #0]
 8000970:	68fa      	ldr	r2, [r7, #12]
 8000972:	609a      	str	r2, [r3, #8]

	/* CCR Calculations, Tính toán tần số cho Clock control register */
	uint16_t ccr_value = 0;					//giá trị tần số tạm
 8000974:	2300      	movs	r3, #0
 8000976:	817b      	strh	r3, [r7, #10]
	tempreg = 0;
 8000978:	2300      	movs	r3, #0
 800097a:	60fb      	str	r3, [r7, #12]

	//Kiểm tra speed đc cài đặt đầu vào ở tần số nào từ đó suy ra chế độ đang sử dụng
	if(pI2CHandle->I2C_Config.I2C_SCLSpeed <= I2C_SCL_SPEED_SM)
 800097c:	687b      	ldr	r3, [r7, #4]
 800097e:	685b      	ldr	r3, [r3, #4]
 8000980:	4a39      	ldr	r2, [pc, #228]	; (8000a68 <I2C_Init+0x168>)
 8000982:	4293      	cmp	r3, r2
 8000984:	d80f      	bhi.n	80009a6 <I2C_Init+0xa6>
	{
		//Nếu ở Standard Mode
		ccr_value = (RCC_GetPCLK1Value() / (2 * pI2CHandle->I2C_Config.I2C_SCLSpeed));
 8000986:	f7ff ff61 	bl	800084c <RCC_GetPCLK1Value>
 800098a:	4602      	mov	r2, r0
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	685b      	ldr	r3, [r3, #4]
 8000990:	005b      	lsls	r3, r3, #1
 8000992:	fbb2 f3f3 	udiv	r3, r2, r3
 8000996:	817b      	strh	r3, [r7, #10]
		tempreg |= ccr_value & 0xFFF;	//0xFFF: CCR[11:0] của CCR Register (If Standard Mode)
 8000998:	897b      	ldrh	r3, [r7, #10]
 800099a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800099e:	68fa      	ldr	r2, [r7, #12]
 80009a0:	4313      	orrs	r3, r2
 80009a2:	60fb      	str	r3, [r7, #12]
 80009a4:	e02d      	b.n	8000a02 <I2C_Init+0x102>
	}
	else
	{
		//Nếu ở Fast Mode
		tempreg |= ( 1 << 15);	//Đưa bit field F/S[15] lên 1 của CCR Register, kích hoạt chế độ Fast Mode
 80009a6:	68fb      	ldr	r3, [r7, #12]
 80009a8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80009ac:	60fb      	str	r3, [r7, #12]
		tempreg |= (pI2CHandle->I2C_Config.I2C_FmDutyCycle << 14); //Set value Duty đã đc user input khi init
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	7a9b      	ldrb	r3, [r3, #10]
 80009b2:	039b      	lsls	r3, r3, #14
 80009b4:	461a      	mov	r2, r3
 80009b6:	68fb      	ldr	r3, [r7, #12]
 80009b8:	4313      	orrs	r3, r2
 80009ba:	60fb      	str	r3, [r7, #12]
		//vào bit field DUTY[14]

		//Kiểm tra DUTY đang ở trạng thái nào để áp dụng công thức
		if(pI2CHandle->I2C_Config.I2C_FmDutyCycle == I2C_FM_DUTY_2)
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	7a9b      	ldrb	r3, [r3, #10]
 80009c0:	2b00      	cmp	r3, #0
 80009c2:	d10b      	bne.n	80009dc <I2C_Init+0xdc>
		{
			//Nếu Duty = 0
			ccr_value = (RCC_GetPCLK1Value() / (3 * pI2CHandle->I2C_Config.I2C_SCLSpeed));
 80009c4:	f7ff ff42 	bl	800084c <RCC_GetPCLK1Value>
 80009c8:	4601      	mov	r1, r0
 80009ca:	687b      	ldr	r3, [r7, #4]
 80009cc:	685a      	ldr	r2, [r3, #4]
 80009ce:	4613      	mov	r3, r2
 80009d0:	005b      	lsls	r3, r3, #1
 80009d2:	4413      	add	r3, r2
 80009d4:	fbb1 f3f3 	udiv	r3, r1, r3
 80009d8:	817b      	strh	r3, [r7, #10]
 80009da:	e00c      	b.n	80009f6 <I2C_Init+0xf6>
		}
		else
		{
			//Nếu Duty = 1
			ccr_value = (RCC_GetPCLK1Value() / (25 * pI2CHandle->I2C_Config.I2C_SCLSpeed));
 80009dc:	f7ff ff36 	bl	800084c <RCC_GetPCLK1Value>
 80009e0:	4601      	mov	r1, r0
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	685a      	ldr	r2, [r3, #4]
 80009e6:	4613      	mov	r3, r2
 80009e8:	009b      	lsls	r3, r3, #2
 80009ea:	4413      	add	r3, r2
 80009ec:	009a      	lsls	r2, r3, #2
 80009ee:	4413      	add	r3, r2
 80009f0:	fbb1 f3f3 	udiv	r3, r1, r3
 80009f4:	817b      	strh	r3, [r7, #10]
		}

		tempreg |= ccr_value & 0xFFF;	//0xFFF: CCR[11:0] của CCR Register (If Fast Mode)
 80009f6:	897b      	ldrh	r3, [r7, #10]
 80009f8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80009fc:	68fa      	ldr	r2, [r7, #12]
 80009fe:	4313      	orrs	r3, r2
 8000a00:	60fb      	str	r3, [r7, #12]
	}
	pI2CHandle->pI2Cx->CCR |= tempreg;		//Cấu hình thanh ghi CCR cho processor
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	681b      	ldr	r3, [r3, #0]
 8000a06:	69d9      	ldr	r1, [r3, #28]
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	681b      	ldr	r3, [r3, #0]
 8000a0c:	68fa      	ldr	r2, [r7, #12]
 8000a0e:	430a      	orrs	r2, r1
 8000a10:	61da      	str	r2, [r3, #28]

	/* TRISE Configuration TRISE register (I2C_TRISE) */
	//Kiểm tra speed đc cài đặt đầu vào ở tần số nào từ đó suy ra chế độ đang sử dụng
	tempreg = 0;
 8000a12:	2300      	movs	r3, #0
 8000a14:	60fb      	str	r3, [r7, #12]
	if(pI2CHandle->I2C_Config.I2C_SCLSpeed <= I2C_SCL_SPEED_SM)
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	685b      	ldr	r3, [r3, #4]
 8000a1a:	4a13      	ldr	r2, [pc, #76]	; (8000a68 <I2C_Init+0x168>)
 8000a1c:	4293      	cmp	r3, r2
 8000a1e:	d809      	bhi.n	8000a34 <I2C_Init+0x134>
	{
		//Nếu ở Standard Mode
		tempreg = (RCC_GetPCLK1Value() / 1000000U) + 1;	//công thức datasheet
 8000a20:	f7ff ff14 	bl	800084c <RCC_GetPCLK1Value>
 8000a24:	4603      	mov	r3, r0
 8000a26:	4a0f      	ldr	r2, [pc, #60]	; (8000a64 <I2C_Init+0x164>)
 8000a28:	fba2 2303 	umull	r2, r3, r2, r3
 8000a2c:	0c9b      	lsrs	r3, r3, #18
 8000a2e:	3301      	adds	r3, #1
 8000a30:	60fb      	str	r3, [r7, #12]
 8000a32:	e00d      	b.n	8000a50 <I2C_Init+0x150>
	}
	else
	{
		//Nếu ở Fast Mode
		tempreg = ((RCC_GetPCLK1Value() * 300) / 1000000000U) + 1; //công thức datasheet
 8000a34:	f7ff ff0a 	bl	800084c <RCC_GetPCLK1Value>
 8000a38:	4603      	mov	r3, r0
 8000a3a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8000a3e:	fb02 f303 	mul.w	r3, r2, r3
 8000a42:	0a5b      	lsrs	r3, r3, #9
 8000a44:	4a09      	ldr	r2, [pc, #36]	; (8000a6c <I2C_Init+0x16c>)
 8000a46:	fba2 2303 	umull	r2, r3, r2, r3
 8000a4a:	09db      	lsrs	r3, r3, #7
 8000a4c:	3301      	adds	r3, #1
 8000a4e:	60fb      	str	r3, [r7, #12]
	}
	//0x3F: 0011 1111, TRISE[5:0] của TRISE Register
	pI2CHandle->pI2Cx->TRISE = (tempreg & 0x3F);		//Cấu hình thanh ghi TRISE cho processor
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	681b      	ldr	r3, [r3, #0]
 8000a54:	68fa      	ldr	r2, [r7, #12]
 8000a56:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8000a5a:	621a      	str	r2, [r3, #32]
}
 8000a5c:	bf00      	nop
 8000a5e:	3710      	adds	r7, #16
 8000a60:	46bd      	mov	sp, r7
 8000a62:	bd80      	pop	{r7, pc}
 8000a64:	431bde83 	.word	0x431bde83
 8000a68:	000186a0 	.word	0x000186a0
 8000a6c:	00044b83 	.word	0x00044b83

08000a70 <I2C_MasterSendData>:
 * @return      - none
 *
 * @Note        - none
 */
void I2C_MasterSendData(I2C_Handle_t *pI2CHandle, uint8_t *pTxbuffer, uint32_t Len,uint8_t SlaveAddr,uint8_t Sr)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	b084      	sub	sp, #16
 8000a74:	af00      	add	r7, sp, #0
 8000a76:	60f8      	str	r0, [r7, #12]
 8000a78:	60b9      	str	r1, [r7, #8]
 8000a7a:	607a      	str	r2, [r7, #4]
 8000a7c:	70fb      	strb	r3, [r7, #3]
	//1. Generate the Start Condition - Tạo điều kiện START
	I2C_GenerateStartCondition(pI2CHandle->pI2Cx);
 8000a7e:	68fb      	ldr	r3, [r7, #12]
 8000a80:	681b      	ldr	r3, [r3, #0]
 8000a82:	4618      	mov	r0, r3
 8000a84:	f000 f859 	bl	8000b3a <I2C_GenerateStartCondition>

	//2. Confirm that START generation is complete by checking the SB flag in the SR1
	//Note: Until SB is cleared SCL will be stretched (pulled to LOW)
	//2. Xác nhận rằng quá trình tạo START đã hoàn tất bằng cách kiểm tra cờ SB trong SR1
	//Lưu ý: Cho đến khi SB bị xóa SCL sẽ bị kéo gián đoạn (kéo về mức LOW)
	while(! I2C_GetFlagStatus(pI2CHandle->pI2Cx, I2C_FLAG_SB));
 8000a88:	bf00      	nop
 8000a8a:	68fb      	ldr	r3, [r7, #12]
 8000a8c:	681b      	ldr	r3, [r3, #0]
 8000a8e:	2101      	movs	r1, #1
 8000a90:	4618      	mov	r0, r3
 8000a92:	f000 f861 	bl	8000b58 <I2C_GetFlagStatus>
 8000a96:	4603      	mov	r3, r0
 8000a98:	2b00      	cmp	r3, #0
 8000a9a:	d0f6      	beq.n	8000a8a <I2C_MasterSendData+0x1a>

	//3. Send the address of the Slave with r/nw bit set to w(0) (total 8 bits)
	//3. Gửi tới địa chỉ của Slave với bit r/nw được đặt thành w(0) (tổng cộng 8 bit)
	I2C_ExecuteAddressPhaseWrite(pI2CHandle->pI2Cx, SlaveAddr);
 8000a9c:	68fb      	ldr	r3, [r7, #12]
 8000a9e:	681b      	ldr	r3, [r3, #0]
 8000aa0:	78fa      	ldrb	r2, [r7, #3]
 8000aa2:	4611      	mov	r1, r2
 8000aa4:	4618      	mov	r0, r3
 8000aa6:	f000 f86a 	bl	8000b7e <I2C_ExecuteAddressPhaseWrite>

	//4. Confirm that address phase is completed by checking the ADDR flag in the SR1
	//4. Xác nhận rằng "address phase" đã hoàn tất bằng cách kiểm tra cờ ADDR trong SR1
	while(! I2C_GetFlagStatus(pI2CHandle->pI2Cx, I2C_FLAG_ADDR));
 8000aaa:	bf00      	nop
 8000aac:	68fb      	ldr	r3, [r7, #12]
 8000aae:	681b      	ldr	r3, [r3, #0]
 8000ab0:	2102      	movs	r1, #2
 8000ab2:	4618      	mov	r0, r3
 8000ab4:	f000 f850 	bl	8000b58 <I2C_GetFlagStatus>
 8000ab8:	4603      	mov	r3, r0
 8000aba:	2b00      	cmp	r3, #0
 8000abc:	d0f6      	beq.n	8000aac <I2C_MasterSendData+0x3c>

	//5. Clear the ADDR flag according to its software sequence
	//Note: Until ADDR is cleared SCL will be stretched (pulled to LOW)
	//5. Xóa cờ ADDR theo trình tự phần mềm của nó
	//Lưu ý: Cho đến khi xóa bit field ADDR, SCL sẽ bị kéo dài gián đoạn (kéo về Low)
	I2C_ClearADDRFlag(pI2CHandle->pI2Cx);
 8000abe:	68fb      	ldr	r3, [r7, #12]
 8000ac0:	681b      	ldr	r3, [r3, #0]
 8000ac2:	4618      	mov	r0, r3
 8000ac4:	f000 f870 	bl	8000ba8 <I2C_ClearADDRFlag>

	//6. Send the Data until Len becomes 0 - Gửi data cho đến khi Len==0
	while(Len > 0)				//Kiểm tra độ dài của Data(Đã gửi hết data trong pTxBuffer hay chưa)
 8000ac8:	e014      	b.n	8000af4 <I2C_MasterSendData+0x84>
	{
		//Kiểm tra cờ Txe đã đc set, cho phép đc gửi data đi
		while(! I2C_GetFlagStatus(pI2CHandle->pI2Cx, I2C_FLAG_TXE));    //Wait till TxE is set
 8000aca:	bf00      	nop
 8000acc:	68fb      	ldr	r3, [r7, #12]
 8000ace:	681b      	ldr	r3, [r3, #0]
 8000ad0:	2180      	movs	r1, #128	; 0x80
 8000ad2:	4618      	mov	r0, r3
 8000ad4:	f000 f840 	bl	8000b58 <I2C_GetFlagStatus>
 8000ad8:	4603      	mov	r3, r0
 8000ada:	2b00      	cmp	r3, #0
 8000adc:	d0f6      	beq.n	8000acc <I2C_MasterSendData+0x5c>

		//Đưa nội dung data và DR Register
		pI2CHandle->pI2Cx->DR = *pTxbuffer; 		//Cấu hình thanh ghi DR cho processor(Data in DR)
 8000ade:	68bb      	ldr	r3, [r7, #8]
 8000ae0:	781a      	ldrb	r2, [r3, #0]
 8000ae2:	68fb      	ldr	r3, [r7, #12]
 8000ae4:	681b      	ldr	r3, [r3, #0]
 8000ae6:	611a      	str	r2, [r3, #16]
		pTxbuffer++;								//Mỗi lần gửi 8bit data. tăng đến ký tự data tiếp theo
 8000ae8:	68bb      	ldr	r3, [r7, #8]
 8000aea:	3301      	adds	r3, #1
 8000aec:	60bb      	str	r3, [r7, #8]
		Len--;										//Giảm 1 đơn vị data(đã truyền 1 ký tự)
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	3b01      	subs	r3, #1
 8000af2:	607b      	str	r3, [r7, #4]
	while(Len > 0)				//Kiểm tra độ dài của Data(Đã gửi hết data trong pTxBuffer hay chưa)
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	2b00      	cmp	r3, #0
 8000af8:	d1e7      	bne.n	8000aca <I2C_MasterSendData+0x5a>
	//Note: TXE=1, BTF=1, means that both SR and DR are empty and next transmission should begin
	//when BTF=1 SCL will be stretched(pulled to LOW)
	//7. Khi Len trở về 0, hãy đợi TXE=1 và BTF=1 trước khi tạo điều kiện STOP
	//Lưu ý: TXE=1, BTF=1, có nghĩa là cả SR và DR đều trống và quá trình truyền tiếp theo sẽ bắt đầu
	//khi BTF=1 SCL sẽ bị kéo giãn gián đoạn (kéo xuống THẤP)
	while(! I2C_GetFlagStatus(pI2CHandle->pI2Cx, I2C_FLAG_TXE));
 8000afa:	bf00      	nop
 8000afc:	68fb      	ldr	r3, [r7, #12]
 8000afe:	681b      	ldr	r3, [r3, #0]
 8000b00:	2180      	movs	r1, #128	; 0x80
 8000b02:	4618      	mov	r0, r3
 8000b04:	f000 f828 	bl	8000b58 <I2C_GetFlagStatus>
 8000b08:	4603      	mov	r3, r0
 8000b0a:	2b00      	cmp	r3, #0
 8000b0c:	d0f6      	beq.n	8000afc <I2C_MasterSendData+0x8c>
	while(! I2C_GetFlagStatus(pI2CHandle->pI2Cx, I2C_FLAG_BTF));
 8000b0e:	bf00      	nop
 8000b10:	68fb      	ldr	r3, [r7, #12]
 8000b12:	681b      	ldr	r3, [r3, #0]
 8000b14:	2104      	movs	r1, #4
 8000b16:	4618      	mov	r0, r3
 8000b18:	f000 f81e 	bl	8000b58 <I2C_GetFlagStatus>
 8000b1c:	4603      	mov	r3, r0
 8000b1e:	2b00      	cmp	r3, #0
 8000b20:	d0f6      	beq.n	8000b10 <I2C_MasterSendData+0xa0>

	//8. Generate STOP condition and master need not to wait for the completion of STOP condition
	//Note: Generating STOP, automatically clears the BTF
	//8. Tạo điều kiện STOP và Master không cần đợi hoàn thành điều kiện STOP
	//Lưu ý: Tạo STOP, tự động xóa BTF
	if(Sr == I2C_DISABLE_SR)
 8000b22:	7e3b      	ldrb	r3, [r7, #24]
 8000b24:	2b00      	cmp	r3, #0
 8000b26:	d104      	bne.n	8000b32 <I2C_MasterSendData+0xc2>
		I2C_GenerateStopCondition(pI2CHandle->pI2Cx);
 8000b28:	68fb      	ldr	r3, [r7, #12]
 8000b2a:	681b      	ldr	r3, [r3, #0]
 8000b2c:	4618      	mov	r0, r3
 8000b2e:	f000 f84a 	bl	8000bc6 <I2C_GenerateStopCondition>
}
 8000b32:	bf00      	nop
 8000b34:	3710      	adds	r7, #16
 8000b36:	46bd      	mov	sp, r7
 8000b38:	bd80      	pop	{r7, pc}

08000b3a <I2C_GenerateStartCondition>:
 * @return      - none
 *
 * @Note        - I2C_CR1, bit field START[8]
 */
static void I2C_GenerateStartCondition(I2C_RegDef_t *pI2Cx)
{
 8000b3a:	b480      	push	{r7}
 8000b3c:	b083      	sub	sp, #12
 8000b3e:	af00      	add	r7, sp, #0
 8000b40:	6078      	str	r0, [r7, #4]
	//Set bit field START[8] lên high
	pI2Cx->CR1 |= (1 << I2C_CR1_START);		//Cấu hình thanh ghi CR1 cho processor
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	681b      	ldr	r3, [r3, #0]
 8000b46:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	601a      	str	r2, [r3, #0]
}
 8000b4e:	bf00      	nop
 8000b50:	370c      	adds	r7, #12
 8000b52:	46bd      	mov	sp, r7
 8000b54:	bc80      	pop	{r7}
 8000b56:	4770      	bx	lr

08000b58 <I2C_GetFlagStatus>:
 * @return      - Trạng thái cờ_flag
 *
 * @Note        - none
 */
uint8_t I2C_GetFlagStatus(I2C_RegDef_t *pI2Cx, uint32_t FlagName)
{
 8000b58:	b480      	push	{r7}
 8000b5a:	b083      	sub	sp, #12
 8000b5c:	af00      	add	r7, sp, #0
 8000b5e:	6078      	str	r0, [r7, #4]
 8000b60:	6039      	str	r1, [r7, #0]
	if(pI2Cx->SR1 & FlagName)  //Kiểm tra value của pI2Cx->SR1 and với FlagName
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	695a      	ldr	r2, [r3, #20]
 8000b66:	683b      	ldr	r3, [r7, #0]
 8000b68:	4013      	ands	r3, r2
 8000b6a:	2b00      	cmp	r3, #0
 8000b6c:	d001      	beq.n	8000b72 <I2C_GetFlagStatus+0x1a>
	{
		//Khi pI2Cx->SR1 & FlagName == 1 thì thực hiện if
		return FLAG_SET;		//Có cờ flag tại vị trí đó đang hoạt động 1
 8000b6e:	2301      	movs	r3, #1
 8000b70:	e000      	b.n	8000b74 <I2C_GetFlagStatus+0x1c>
	}
	return FLAG_RESET;		//Nếu ko có cờ flag thì trả về 0
 8000b72:	2300      	movs	r3, #0
}
 8000b74:	4618      	mov	r0, r3
 8000b76:	370c      	adds	r7, #12
 8000b78:	46bd      	mov	sp, r7
 8000b7a:	bc80      	pop	{r7}
 8000b7c:	4770      	bx	lr

08000b7e <I2C_ExecuteAddressPhaseWrite>:
 * @return      - none
 *
 * @Note        - SlaveAddr : sẽ đc cài đặt ở phía phần cứng làm Slave
 */
static void I2C_ExecuteAddressPhaseWrite(I2C_RegDef_t *pI2Cx,uint8_t SlaveAddr)
{
 8000b7e:	b480      	push	{r7}
 8000b80:	b083      	sub	sp, #12
 8000b82:	af00      	add	r7, sp, #0
 8000b84:	6078      	str	r0, [r7, #4]
 8000b86:	460b      	mov	r3, r1
 8000b88:	70fb      	strb	r3, [r7, #3]
	//Tiến hành dịch biến SlaveAddr lên 1 bit vì bit0 sẽ chứa giá trị thực hiện việc read hoặc write,
	SlaveAddr = SlaveAddr << 1;			//và bit1->7chứa data địa chỉ(ko làm mất data addr khi set bit0)
 8000b8a:	78fb      	ldrb	r3, [r7, #3]
 8000b8c:	005b      	lsls	r3, r3, #1
 8000b8e:	70fb      	strb	r3, [r7, #3]
	SlaveAddr &= ~(1); 					//thiết lập bit0 = 0 = write(gửi data từ master->slave)
 8000b90:	78fb      	ldrb	r3, [r7, #3]
 8000b92:	f023 0301 	bic.w	r3, r3, #1
 8000b96:	70fb      	strb	r3, [r7, #3]
										//SlaveAddr: Slave Addrress + r/nw bit[0]=0

	pI2Cx->DR = SlaveAddr;				//Cấu hình thanh ghi DR cho processor DR[7:0]
 8000b98:	78fa      	ldrb	r2, [r7, #3]
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	611a      	str	r2, [r3, #16]
}
 8000b9e:	bf00      	nop
 8000ba0:	370c      	adds	r7, #12
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	bc80      	pop	{r7}
 8000ba6:	4770      	bx	lr

08000ba8 <I2C_ClearADDRFlag>:
 * @return      - none
 *
 * @Note        - Đạt đc EVx Condition
 */
static void I2C_ClearADDRFlag(I2C_RegDef_t *pI2Cx)
{
 8000ba8:	b480      	push	{r7}
 8000baa:	b085      	sub	sp, #20
 8000bac:	af00      	add	r7, sp, #0
 8000bae:	6078      	str	r0, [r7, #4]
	uint32_t dummyRead = pI2Cx->SR1;			//biến tạm lưu value SR1 Register 32bit
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	695b      	ldr	r3, [r3, #20]
 8000bb4:	60fb      	str	r3, [r7, #12]
	dummyRead = pI2Cx->SR2;						//biến tạm lưu value SR2 Register 32bit
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	699b      	ldr	r3, [r3, #24]
 8000bba:	60fb      	str	r3, [r7, #12]
	(void)dummyRead;							//Tránh trình biên dịch tối ưu hóa vì biến đc sử dụng

	//Việc đọc(gán) giá trị của thanh ghi SR1 và SR2 sẽ làm xóa cờ ADDR.
	//Việc bỏ qua giá trị của biến tạm là để tránh lãng phí tài nguyên bộ nhớ.
}
 8000bbc:	bf00      	nop
 8000bbe:	3714      	adds	r7, #20
 8000bc0:	46bd      	mov	sp, r7
 8000bc2:	bc80      	pop	{r7}
 8000bc4:	4770      	bx	lr

08000bc6 <I2C_GenerateStopCondition>:
 * @return      - none
 *
 * @Note        - I2C_CR1, bit field STOP[9]
 */
static void I2C_GenerateStopCondition(I2C_RegDef_t *pI2Cx)
{
 8000bc6:	b480      	push	{r7}
 8000bc8:	b083      	sub	sp, #12
 8000bca:	af00      	add	r7, sp, #0
 8000bcc:	6078      	str	r0, [r7, #4]
	//Set bit field STOP[9] lên high
	pI2Cx->CR1 |= (1 << I2C_CR1_STOP);		//Cấu hình thanh ghi CR1 cho processor
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	681b      	ldr	r3, [r3, #0]
 8000bd2:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	601a      	str	r2, [r3, #0]
}
 8000bda:	bf00      	nop
 8000bdc:	370c      	adds	r7, #12
 8000bde:	46bd      	mov	sp, r7
 8000be0:	bc80      	pop	{r7}
 8000be2:	4770      	bx	lr

08000be4 <I2C_PeripheralControl>:
 * @return      - none
 *
 * @Note        - none
 */
void I2C_PeripheralControl(I2C_RegDef_t *pI2Cx, uint8_t EnOrDi)
{
 8000be4:	b480      	push	{r7}
 8000be6:	b083      	sub	sp, #12
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	6078      	str	r0, [r7, #4]
 8000bec:	460b      	mov	r3, r1
 8000bee:	70fb      	strb	r3, [r7, #3]
	if(EnOrDi == ENABLE)
 8000bf0:	78fb      	ldrb	r3, [r7, #3]
 8000bf2:	2b01      	cmp	r3, #1
 8000bf4:	d106      	bne.n	8000c04 <I2C_PeripheralControl+0x20>
	{
		pI2Cx->CR1 |= (1 << I2C_CR1_PE);
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	681b      	ldr	r3, [r3, #0]
 8000bfa:	f043 0201 	orr.w	r2, r3, #1
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	601a      	str	r2, [r3, #0]
	}else
	{
		pI2Cx->CR1 &= ~(1 << 0);
	}

}
 8000c02:	e005      	b.n	8000c10 <I2C_PeripheralControl+0x2c>
		pI2Cx->CR1 &= ~(1 << 0);
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	681b      	ldr	r3, [r3, #0]
 8000c08:	f023 0201 	bic.w	r2, r3, #1
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	601a      	str	r2, [r3, #0]
}
 8000c10:	bf00      	nop
 8000c12:	370c      	adds	r7, #12
 8000c14:	46bd      	mov	sp, r7
 8000c16:	bc80      	pop	{r7}
 8000c18:	4770      	bx	lr
	...

08000c1c <__libc_init_array>:
 8000c1c:	b570      	push	{r4, r5, r6, lr}
 8000c1e:	4d0d      	ldr	r5, [pc, #52]	; (8000c54 <__libc_init_array+0x38>)
 8000c20:	4c0d      	ldr	r4, [pc, #52]	; (8000c58 <__libc_init_array+0x3c>)
 8000c22:	1b64      	subs	r4, r4, r5
 8000c24:	10a4      	asrs	r4, r4, #2
 8000c26:	2600      	movs	r6, #0
 8000c28:	42a6      	cmp	r6, r4
 8000c2a:	d109      	bne.n	8000c40 <__libc_init_array+0x24>
 8000c2c:	4d0b      	ldr	r5, [pc, #44]	; (8000c5c <__libc_init_array+0x40>)
 8000c2e:	4c0c      	ldr	r4, [pc, #48]	; (8000c60 <__libc_init_array+0x44>)
 8000c30:	f000 f818 	bl	8000c64 <_init>
 8000c34:	1b64      	subs	r4, r4, r5
 8000c36:	10a4      	asrs	r4, r4, #2
 8000c38:	2600      	movs	r6, #0
 8000c3a:	42a6      	cmp	r6, r4
 8000c3c:	d105      	bne.n	8000c4a <__libc_init_array+0x2e>
 8000c3e:	bd70      	pop	{r4, r5, r6, pc}
 8000c40:	f855 3b04 	ldr.w	r3, [r5], #4
 8000c44:	4798      	blx	r3
 8000c46:	3601      	adds	r6, #1
 8000c48:	e7ee      	b.n	8000c28 <__libc_init_array+0xc>
 8000c4a:	f855 3b04 	ldr.w	r3, [r5], #4
 8000c4e:	4798      	blx	r3
 8000c50:	3601      	adds	r6, #1
 8000c52:	e7f2      	b.n	8000c3a <__libc_init_array+0x1e>
 8000c54:	08000c7c 	.word	0x08000c7c
 8000c58:	08000c7c 	.word	0x08000c7c
 8000c5c:	08000c7c 	.word	0x08000c7c
 8000c60:	08000c80 	.word	0x08000c80

08000c64 <_init>:
 8000c64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000c66:	bf00      	nop
 8000c68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000c6a:	bc08      	pop	{r3}
 8000c6c:	469e      	mov	lr, r3
 8000c6e:	4770      	bx	lr

08000c70 <_fini>:
 8000c70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000c72:	bf00      	nop
 8000c74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000c76:	bc08      	pop	{r3}
 8000c78:	469e      	mov	lr, r3
 8000c7a:	4770      	bx	lr
