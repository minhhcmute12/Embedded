
23_STM32Fxx_RTC_LCD_Project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001a8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000022b4  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000100  08002464  08002464  00012464  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002564  08002564  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  08002564  08002564  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002564  08002564  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002564  08002564  00012564  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002568  08002568  00012568  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  0800256c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020074  2**0
                  CONTENTS
 10 .bss          000001ac  20000074  20000074  00020074  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000220  20000220  00020074  2**0
                  ALLOC
 12 .ARM.attributes 0000002a  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  0002009e  2**0
                  CONTENTS, READONLY
 14 .debug_info   000027a2  00000000  00000000  000200e1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00000b64  00000000  00000000  00022883  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000330  00000000  00000000  000233e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 0000024f  00000000  00000000  00023718  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00003c56  00000000  00000000  00023967  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00003ad4  00000000  00000000  000275bd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    0000ce2d  00000000  00000000  0002b091  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  000013bc  00000000  00000000  00037ec0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000065  00000000  00000000  0003927c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000074 	.word	0x20000074
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800244c 	.word	0x0800244c

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000078 	.word	0x20000078
 80001ec:	0800244c 	.word	0x0800244c

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <init_systick_timer>:
 * @return		- none
 *
 * @Note 		- none
 */
void init_systick_timer(uint32_t tick_hz)
{
 8000290:	b480      	push	{r7}
 8000292:	b087      	sub	sp, #28
 8000294:	af00      	add	r7, sp, #0
 8000296:	6078      	str	r0, [r7, #4]
	//Cài đặt các địa chỉ timer của hệ thống
	uint32_t *pSRVR = (uint32_t*)0xE000E014;
 8000298:	4b14      	ldr	r3, [pc, #80]	; (80002ec <init_systick_timer+0x5c>)
 800029a:	617b      	str	r3, [r7, #20]
	uint32_t *pSCSR = (uint32_t*)0xE000E010;
 800029c:	4b14      	ldr	r3, [pc, #80]	; (80002f0 <init_systick_timer+0x60>)
 800029e:	613b      	str	r3, [r7, #16]

    /* calculation of reload value */
    uint32_t count_value = (SYSTICK_TIM_CLK/tick_hz)-1;
 80002a0:	4a14      	ldr	r2, [pc, #80]	; (80002f4 <init_systick_timer+0x64>)
 80002a2:	687b      	ldr	r3, [r7, #4]
 80002a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80002a8:	3b01      	subs	r3, #1
 80002aa:	60fb      	str	r3, [r7, #12]

    //Clear the value of SVR
    *pSRVR &= ~(0x00FFFFFFFF);
 80002ac:	697b      	ldr	r3, [r7, #20]
 80002ae:	2200      	movs	r2, #0
 80002b0:	601a      	str	r2, [r3, #0]

    //load the value in to SVR
    *pSRVR |= count_value;
 80002b2:	697b      	ldr	r3, [r7, #20]
 80002b4:	681a      	ldr	r2, [r3, #0]
 80002b6:	68fb      	ldr	r3, [r7, #12]
 80002b8:	431a      	orrs	r2, r3
 80002ba:	697b      	ldr	r3, [r7, #20]
 80002bc:	601a      	str	r2, [r3, #0]

    //do some settings
    *pSCSR |= ( 1 << 1); //Enables SysTick exception request:
 80002be:	693b      	ldr	r3, [r7, #16]
 80002c0:	681b      	ldr	r3, [r3, #0]
 80002c2:	f043 0202 	orr.w	r2, r3, #2
 80002c6:	693b      	ldr	r3, [r7, #16]
 80002c8:	601a      	str	r2, [r3, #0]
    *pSCSR |= ( 1 << 2);  //Indicates the clock source, processor clock source
 80002ca:	693b      	ldr	r3, [r7, #16]
 80002cc:	681b      	ldr	r3, [r3, #0]
 80002ce:	f043 0204 	orr.w	r2, r3, #4
 80002d2:	693b      	ldr	r3, [r7, #16]
 80002d4:	601a      	str	r2, [r3, #0]

    //enable the systick
    *pSCSR |= ( 1 << 0); //enables the counter
 80002d6:	693b      	ldr	r3, [r7, #16]
 80002d8:	681b      	ldr	r3, [r3, #0]
 80002da:	f043 0201 	orr.w	r2, r3, #1
 80002de:	693b      	ldr	r3, [r7, #16]
 80002e0:	601a      	str	r2, [r3, #0]

}
 80002e2:	bf00      	nop
 80002e4:	371c      	adds	r7, #28
 80002e6:	46bd      	mov	sp, r7
 80002e8:	bc80      	pop	{r7}
 80002ea:	4770      	bx	lr
 80002ec:	e000e014 	.word	0xe000e014
 80002f0:	e000e010 	.word	0xe000e010
 80002f4:	00f42400 	.word	0x00f42400

080002f8 <get_day_of_week>:
 * @return		- thứ đc chuyển đổi sang string
 *
 * @Note 		- none
 */
char *get_day_of_week(uint8_t i)
{
 80002f8:	b4b0      	push	{r4, r5, r7}
 80002fa:	b08b      	sub	sp, #44	; 0x2c
 80002fc:	af00      	add	r7, sp, #0
 80002fe:	4603      	mov	r3, r0
 8000300:	71fb      	strb	r3, [r7, #7]
	//Chuỗi chứa ký tự thứ có thể có
	char* days[] = {"Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"};
 8000302:	4b0b      	ldr	r3, [pc, #44]	; (8000330 <get_day_of_week+0x38>)
 8000304:	f107 040c 	add.w	r4, r7, #12
 8000308:	461d      	mov	r5, r3
 800030a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800030c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800030e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000312:	e884 0007 	stmia.w	r4, {r0, r1, r2}

	return days[i-1];	//vì i đã đc định nghĩa trong file "ds1307.h"
 8000316:	79fb      	ldrb	r3, [r7, #7]
 8000318:	3b01      	subs	r3, #1
 800031a:	009b      	lsls	r3, r3, #2
 800031c:	3328      	adds	r3, #40	; 0x28
 800031e:	443b      	add	r3, r7
 8000320:	f853 3c1c 	ldr.w	r3, [r3, #-28]
}
 8000324:	4618      	mov	r0, r3
 8000326:	372c      	adds	r7, #44	; 0x2c
 8000328:	46bd      	mov	sp, r7
 800032a:	bcb0      	pop	{r4, r5, r7}
 800032c:	4770      	bx	lr
 800032e:	bf00      	nop
 8000330:	080024a8 	.word	0x080024a8

08000334 <number_to_string>:
 * @return		- none
 *
 * @Note 		- none
 */
void number_to_string(uint8_t num, char* buf)
{
 8000334:	b480      	push	{r7}
 8000336:	b083      	sub	sp, #12
 8000338:	af00      	add	r7, sp, #0
 800033a:	4603      	mov	r3, r0
 800033c:	6039      	str	r1, [r7, #0]
 800033e:	71fb      	strb	r3, [r7, #7]
	if(num > 10)
 8000340:	79fb      	ldrb	r3, [r7, #7]
 8000342:	2b0a      	cmp	r3, #10
 8000344:	d909      	bls.n	800035a <number_to_string+0x26>
	{
		buf[0] = '0';
 8000346:	683b      	ldr	r3, [r7, #0]
 8000348:	2230      	movs	r2, #48	; 0x30
 800034a:	701a      	strb	r2, [r3, #0]
		buf[1] = num + 48;
 800034c:	683b      	ldr	r3, [r7, #0]
 800034e:	3301      	adds	r3, #1
 8000350:	79fa      	ldrb	r2, [r7, #7]
 8000352:	3230      	adds	r2, #48	; 0x30
 8000354:	b2d2      	uxtb	r2, r2
 8000356:	701a      	strb	r2, [r3, #0]

	//buf[0] và buf[1] ở đây ko phải là vị trí 0 và 1 của buf[9] đưa vào
	//mà là vị trí 0 và 1 bắt đầu từ địa chỉ vị trí mà &buf[] đưa vào

	//48: số chênh lệch vị trí trong bảng mã ASCII giữa giá trị số(9) và ký tự số(9)
}
 8000358:	e01f      	b.n	800039a <number_to_string+0x66>
	else if(num >= 10 && num < 99)
 800035a:	79fb      	ldrb	r3, [r7, #7]
 800035c:	2b09      	cmp	r3, #9
 800035e:	d91c      	bls.n	800039a <number_to_string+0x66>
 8000360:	79fb      	ldrb	r3, [r7, #7]
 8000362:	2b62      	cmp	r3, #98	; 0x62
 8000364:	d819      	bhi.n	800039a <number_to_string+0x66>
		buf[0] = (num / 10) + 48;
 8000366:	79fb      	ldrb	r3, [r7, #7]
 8000368:	4a0e      	ldr	r2, [pc, #56]	; (80003a4 <number_to_string+0x70>)
 800036a:	fba2 2303 	umull	r2, r3, r2, r3
 800036e:	08db      	lsrs	r3, r3, #3
 8000370:	b2db      	uxtb	r3, r3
 8000372:	3330      	adds	r3, #48	; 0x30
 8000374:	b2da      	uxtb	r2, r3
 8000376:	683b      	ldr	r3, [r7, #0]
 8000378:	701a      	strb	r2, [r3, #0]
		buf[1] = (num % 10) + 48;
 800037a:	79fa      	ldrb	r2, [r7, #7]
 800037c:	4b09      	ldr	r3, [pc, #36]	; (80003a4 <number_to_string+0x70>)
 800037e:	fba3 1302 	umull	r1, r3, r3, r2
 8000382:	08d9      	lsrs	r1, r3, #3
 8000384:	460b      	mov	r3, r1
 8000386:	009b      	lsls	r3, r3, #2
 8000388:	440b      	add	r3, r1
 800038a:	005b      	lsls	r3, r3, #1
 800038c:	1ad3      	subs	r3, r2, r3
 800038e:	b2da      	uxtb	r2, r3
 8000390:	683b      	ldr	r3, [r7, #0]
 8000392:	3301      	adds	r3, #1
 8000394:	3230      	adds	r2, #48	; 0x30
 8000396:	b2d2      	uxtb	r2, r2
 8000398:	701a      	strb	r2, [r3, #0]
}
 800039a:	bf00      	nop
 800039c:	370c      	adds	r7, #12
 800039e:	46bd      	mov	sp, r7
 80003a0:	bc80      	pop	{r7}
 80003a2:	4770      	bx	lr
 80003a4:	cccccccd 	.word	0xcccccccd

080003a8 <time_to_string>:
 * @return		- time đc chuyển đổi sang string
 *
 * @Note 		- hh:mm:ss -
 */
char* time_to_string(RTC_time_t *rtc_time)
{
 80003a8:	b580      	push	{r7, lr}
 80003aa:	b082      	sub	sp, #8
 80003ac:	af00      	add	r7, sp, #0
 80003ae:	6078      	str	r0, [r7, #4]
	static char buf[9]; //h h : m m : s s /0

	buf[2] = ':';
 80003b0:	4b0f      	ldr	r3, [pc, #60]	; (80003f0 <time_to_string+0x48>)
 80003b2:	223a      	movs	r2, #58	; 0x3a
 80003b4:	709a      	strb	r2, [r3, #2]
	buf[5] = ':';
 80003b6:	4b0e      	ldr	r3, [pc, #56]	; (80003f0 <time_to_string+0x48>)
 80003b8:	223a      	movs	r2, #58	; 0x3a
 80003ba:	715a      	strb	r2, [r3, #5]

	number_to_string(rtc_time->hours,buf);
 80003bc:	687b      	ldr	r3, [r7, #4]
 80003be:	789b      	ldrb	r3, [r3, #2]
 80003c0:	490b      	ldr	r1, [pc, #44]	; (80003f0 <time_to_string+0x48>)
 80003c2:	4618      	mov	r0, r3
 80003c4:	f7ff ffb6 	bl	8000334 <number_to_string>
	number_to_string(rtc_time->minutes,&buf[3]);
 80003c8:	687b      	ldr	r3, [r7, #4]
 80003ca:	785b      	ldrb	r3, [r3, #1]
 80003cc:	4909      	ldr	r1, [pc, #36]	; (80003f4 <time_to_string+0x4c>)
 80003ce:	4618      	mov	r0, r3
 80003d0:	f7ff ffb0 	bl	8000334 <number_to_string>
	number_to_string(rtc_time->seconds,&buf[6]);
 80003d4:	687b      	ldr	r3, [r7, #4]
 80003d6:	781b      	ldrb	r3, [r3, #0]
 80003d8:	4907      	ldr	r1, [pc, #28]	; (80003f8 <time_to_string+0x50>)
 80003da:	4618      	mov	r0, r3
 80003dc:	f7ff ffaa 	bl	8000334 <number_to_string>

	buf[8] = '\0';  //kết thúc chuỗi luôn là một ký tự null
 80003e0:	4b03      	ldr	r3, [pc, #12]	; (80003f0 <time_to_string+0x48>)
 80003e2:	2200      	movs	r2, #0
 80003e4:	721a      	strb	r2, [r3, #8]

	return buf;
 80003e6:	4b02      	ldr	r3, [pc, #8]	; (80003f0 <time_to_string+0x48>)
}
 80003e8:	4618      	mov	r0, r3
 80003ea:	3708      	adds	r7, #8
 80003ec:	46bd      	mov	sp, r7
 80003ee:	bd80      	pop	{r7, pc}
 80003f0:	20000090 	.word	0x20000090
 80003f4:	20000093 	.word	0x20000093
 80003f8:	20000096 	.word	0x20000096

080003fc <date_to_string>:
 * @return		- date đc chuyển đổi sang string
 *
 * @Note 		- dd/mm/yy
 */
char* date_to_string(RTC_date_t *rtc_date)
{
 80003fc:	b580      	push	{r7, lr}
 80003fe:	b082      	sub	sp, #8
 8000400:	af00      	add	r7, sp, #0
 8000402:	6078      	str	r0, [r7, #4]
	static char buf[9]; //d d : m m : y y /0

	buf[2] = ':';
 8000404:	4b0f      	ldr	r3, [pc, #60]	; (8000444 <date_to_string+0x48>)
 8000406:	223a      	movs	r2, #58	; 0x3a
 8000408:	709a      	strb	r2, [r3, #2]
	buf[5] = ':';
 800040a:	4b0e      	ldr	r3, [pc, #56]	; (8000444 <date_to_string+0x48>)
 800040c:	223a      	movs	r2, #58	; 0x3a
 800040e:	715a      	strb	r2, [r3, #5]

	number_to_string(rtc_date->date,buf);
 8000410:	687b      	ldr	r3, [r7, #4]
 8000412:	781b      	ldrb	r3, [r3, #0]
 8000414:	490b      	ldr	r1, [pc, #44]	; (8000444 <date_to_string+0x48>)
 8000416:	4618      	mov	r0, r3
 8000418:	f7ff ff8c 	bl	8000334 <number_to_string>
	number_to_string(rtc_date->month,&buf[3]);
 800041c:	687b      	ldr	r3, [r7, #4]
 800041e:	785b      	ldrb	r3, [r3, #1]
 8000420:	4909      	ldr	r1, [pc, #36]	; (8000448 <date_to_string+0x4c>)
 8000422:	4618      	mov	r0, r3
 8000424:	f7ff ff86 	bl	8000334 <number_to_string>
	number_to_string(rtc_date->year,&buf[6]);
 8000428:	687b      	ldr	r3, [r7, #4]
 800042a:	789b      	ldrb	r3, [r3, #2]
 800042c:	4907      	ldr	r1, [pc, #28]	; (800044c <date_to_string+0x50>)
 800042e:	4618      	mov	r0, r3
 8000430:	f7ff ff80 	bl	8000334 <number_to_string>

	buf[8] = '\0';  //kết thúc chuỗi luôn là một ký tự null
 8000434:	4b03      	ldr	r3, [pc, #12]	; (8000444 <date_to_string+0x48>)
 8000436:	2200      	movs	r2, #0
 8000438:	721a      	strb	r2, [r3, #8]

	return buf;
 800043a:	4b02      	ldr	r3, [pc, #8]	; (8000444 <date_to_string+0x48>)
}
 800043c:	4618      	mov	r0, r3
 800043e:	3708      	adds	r7, #8
 8000440:	46bd      	mov	sp, r7
 8000442:	bd80      	pop	{r7, pc}
 8000444:	2000009c 	.word	0x2000009c
 8000448:	2000009f 	.word	0x2000009f
 800044c:	200000a2 	.word	0x200000a2

08000450 <main>:

int main(void)
{
 8000450:	b590      	push	{r4, r7, lr}
 8000452:	b085      	sub	sp, #20
 8000454:	af00      	add	r7, sp, #0
	RTC_time_t current_time;
	RTC_date_t current_date;

	printf("RTC test\n");
 8000456:	4832      	ldr	r0, [pc, #200]	; (8000520 <main+0xd0>)
 8000458:	f001 f998 	bl	800178c <puts>

	/* Kiểm tra DS1307 có cho phép clock hoạt động hay không */
	if(ds1307_init())
 800045c:	f000 f982 	bl	8000764 <ds1307_init>
 8000460:	4603      	mov	r3, r0
 8000462:	2b00      	cmp	r3, #0
 8000464:	d003      	beq.n	800046e <main+0x1e>
	{
		printf("RTC init has field\n");
 8000466:	482f      	ldr	r0, [pc, #188]	; (8000524 <main+0xd4>)
 8000468:	f001 f990 	bl	800178c <puts>
		while(1);
 800046c:	e7fe      	b.n	800046c <main+0x1c>
	}

	/* Cấu hình timer để ngắt cập nhật đồng hồ */
	init_systick_timer(1);			//mỗi 1s cập nhật đồng hồ
 800046e:	2001      	movs	r0, #1
 8000470:	f7ff ff0e 	bl	8000290 <init_systick_timer>

	/* Cấu hình thời gian ban đầu */
	current_date.day = FRIDAY;
 8000474:	2306      	movs	r3, #6
 8000476:	71fb      	strb	r3, [r7, #7]
	current_date.date = 15;
 8000478:	230f      	movs	r3, #15
 800047a:	713b      	strb	r3, [r7, #4]
	current_date.month = 1;
 800047c:	2301      	movs	r3, #1
 800047e:	717b      	strb	r3, [r7, #5]
	current_date.year = 21;
 8000480:	2315      	movs	r3, #21
 8000482:	71bb      	strb	r3, [r7, #6]

	current_time.hours = 4;
 8000484:	2304      	movs	r3, #4
 8000486:	72bb      	strb	r3, [r7, #10]
	current_time.minutes = 25;
 8000488:	2319      	movs	r3, #25
 800048a:	727b      	strb	r3, [r7, #9]
	current_time.seconds = 41;
 800048c:	2329      	movs	r3, #41	; 0x29
 800048e:	723b      	strb	r3, [r7, #8]
	current_time.time_format = TIME_FORMAT_12HRS_PM;
 8000490:	2301      	movs	r3, #1
 8000492:	72fb      	strb	r3, [r7, #11]

	ds1307_set_current_date(&current_date);
 8000494:	1d3b      	adds	r3, r7, #4
 8000496:	4618      	mov	r0, r3
 8000498:	f000 fa14 	bl	80008c4 <ds1307_set_current_date>
	ds1307_set_current_time(&current_time);
 800049c:	f107 0308 	add.w	r3, r7, #8
 80004a0:	4618      	mov	r0, r3
 80004a2:	f000 f97d 	bl	80007a0 <ds1307_set_current_time>

	//Đọc thời gian đc cấu hình
	ds1307_get_current_time(&current_time);
 80004a6:	f107 0308 	add.w	r3, r7, #8
 80004aa:	4618      	mov	r0, r3
 80004ac:	f000 f9c1 	bl	8000832 <ds1307_get_current_time>
	ds1307_get_current_date(&current_date);
 80004b0:	1d3b      	adds	r3, r7, #4
 80004b2:	4618      	mov	r0, r3
 80004b4:	f000 fa36 	bl	8000924 <ds1307_get_current_date>

	//Biểu diễn thời gian
	char *am_pm;		//lưu ký tự biểu diễn PM hoặc AM
	if(current_time.time_format != TIME_FORMAT_24HRS)
 80004b8:	7afb      	ldrb	r3, [r7, #11]
 80004ba:	2b02      	cmp	r3, #2
 80004bc:	d012      	beq.n	80004e4 <main+0x94>
	{
		am_pm = (current_time.time_format) ? "PM" : "AM";
 80004be:	7afb      	ldrb	r3, [r7, #11]
 80004c0:	2b00      	cmp	r3, #0
 80004c2:	d001      	beq.n	80004c8 <main+0x78>
 80004c4:	4b18      	ldr	r3, [pc, #96]	; (8000528 <main+0xd8>)
 80004c6:	e000      	b.n	80004ca <main+0x7a>
 80004c8:	4b18      	ldr	r3, [pc, #96]	; (800052c <main+0xdc>)
 80004ca:	60fb      	str	r3, [r7, #12]
		printf("Current time = %s %s \n",time_to_string(&current_time),am_pm); //Vd: 04:25:41 PM
 80004cc:	f107 0308 	add.w	r3, r7, #8
 80004d0:	4618      	mov	r0, r3
 80004d2:	f7ff ff69 	bl	80003a8 <time_to_string>
 80004d6:	4603      	mov	r3, r0
 80004d8:	68fa      	ldr	r2, [r7, #12]
 80004da:	4619      	mov	r1, r3
 80004dc:	4814      	ldr	r0, [pc, #80]	; (8000530 <main+0xe0>)
 80004de:	f001 f8ef 	bl	80016c0 <iprintf>
 80004e2:	e009      	b.n	80004f8 <main+0xa8>
	}
	else
	{
		printf("Current time = %s \n",time_to_string(&current_time)); //Vd: 04:25:41
 80004e4:	f107 0308 	add.w	r3, r7, #8
 80004e8:	4618      	mov	r0, r3
 80004ea:	f7ff ff5d 	bl	80003a8 <time_to_string>
 80004ee:	4603      	mov	r3, r0
 80004f0:	4619      	mov	r1, r3
 80004f2:	4810      	ldr	r0, [pc, #64]	; (8000534 <main+0xe4>)
 80004f4:	f001 f8e4 	bl	80016c0 <iprintf>
	}

	//Biểu diễn ngày tháng: 15/01/21 <friday>
	printf("Current date: %s <%s>\n",date_to_string(&current_date),get_day_of_week(current_date.day));
 80004f8:	1d3b      	adds	r3, r7, #4
 80004fa:	4618      	mov	r0, r3
 80004fc:	f7ff ff7e 	bl	80003fc <date_to_string>
 8000500:	4604      	mov	r4, r0
 8000502:	79fb      	ldrb	r3, [r7, #7]
 8000504:	4618      	mov	r0, r3
 8000506:	f7ff fef7 	bl	80002f8 <get_day_of_week>
 800050a:	4603      	mov	r3, r0
 800050c:	461a      	mov	r2, r3
 800050e:	4621      	mov	r1, r4
 8000510:	4809      	ldr	r0, [pc, #36]	; (8000538 <main+0xe8>)
 8000512:	f001 f8d5 	bl	80016c0 <iprintf>
 8000516:	2300      	movs	r3, #0

}
 8000518:	4618      	mov	r0, r3
 800051a:	3714      	adds	r7, #20
 800051c:	46bd      	mov	sp, r7
 800051e:	bd90      	pop	{r4, r7, pc}
 8000520:	080024c4 	.word	0x080024c4
 8000524:	080024d0 	.word	0x080024d0
 8000528:	080024e4 	.word	0x080024e4
 800052c:	080024e8 	.word	0x080024e8
 8000530:	080024ec 	.word	0x080024ec
 8000534:	08002504 	.word	0x08002504
 8000538:	08002518 	.word	0x08002518

0800053c <SysTick_Handler>:
 * @Note 		- Hàm cập nhật hiển thị đồng hồ
 * 				- Việc đếm thời gian sẽ do DS1307 module thực hiện, ta chỉ cần lệnh cho MCU đọc giá trị
 * 				từ DS1307 rồi hiển thị kết quả nhận đc.
 */
void SysTick_Handler(void)
{
 800053c:	b590      	push	{r4, r7, lr}
 800053e:	b085      	sub	sp, #20
 8000540:	af00      	add	r7, sp, #0
	RTC_time_t current_time;
	RTC_date_t current_date;

	//Đọc thời gian đc cấu hình
	ds1307_get_current_time(&current_time);
 8000542:	f107 0308 	add.w	r3, r7, #8
 8000546:	4618      	mov	r0, r3
 8000548:	f000 f973 	bl	8000832 <ds1307_get_current_time>
	ds1307_get_current_date(&current_date);
 800054c:	1d3b      	adds	r3, r7, #4
 800054e:	4618      	mov	r0, r3
 8000550:	f000 f9e8 	bl	8000924 <ds1307_get_current_date>

	char *am_pm;		//lưu ký tự biểu diễn PM hoặc AM
	if(current_time.time_format != TIME_FORMAT_24HRS)
 8000554:	7afb      	ldrb	r3, [r7, #11]
 8000556:	2b02      	cmp	r3, #2
 8000558:	d012      	beq.n	8000580 <SysTick_Handler+0x44>
	{
		am_pm = (current_time.time_format) ? "PM" : "AM";
 800055a:	7afb      	ldrb	r3, [r7, #11]
 800055c:	2b00      	cmp	r3, #0
 800055e:	d001      	beq.n	8000564 <SysTick_Handler+0x28>
 8000560:	4b16      	ldr	r3, [pc, #88]	; (80005bc <SysTick_Handler+0x80>)
 8000562:	e000      	b.n	8000566 <SysTick_Handler+0x2a>
 8000564:	4b16      	ldr	r3, [pc, #88]	; (80005c0 <SysTick_Handler+0x84>)
 8000566:	60fb      	str	r3, [r7, #12]
		printf("Current time = %s %s \n",time_to_string(&current_time),am_pm); //Vd: 04:25:41 PM
 8000568:	f107 0308 	add.w	r3, r7, #8
 800056c:	4618      	mov	r0, r3
 800056e:	f7ff ff1b 	bl	80003a8 <time_to_string>
 8000572:	4603      	mov	r3, r0
 8000574:	68fa      	ldr	r2, [r7, #12]
 8000576:	4619      	mov	r1, r3
 8000578:	4812      	ldr	r0, [pc, #72]	; (80005c4 <SysTick_Handler+0x88>)
 800057a:	f001 f8a1 	bl	80016c0 <iprintf>
 800057e:	e009      	b.n	8000594 <SysTick_Handler+0x58>
	}
	else
	{
		printf("Current time = %s \n",time_to_string(&current_time)); //Vd: 04:25:41
 8000580:	f107 0308 	add.w	r3, r7, #8
 8000584:	4618      	mov	r0, r3
 8000586:	f7ff ff0f 	bl	80003a8 <time_to_string>
 800058a:	4603      	mov	r3, r0
 800058c:	4619      	mov	r1, r3
 800058e:	480e      	ldr	r0, [pc, #56]	; (80005c8 <SysTick_Handler+0x8c>)
 8000590:	f001 f896 	bl	80016c0 <iprintf>
	}

	//Biểu diễn ngày tháng: 15/01/21 <friday>
	printf("Current date: %s <%s>\n",date_to_string(&current_date),get_day_of_week(current_date.day));
 8000594:	1d3b      	adds	r3, r7, #4
 8000596:	4618      	mov	r0, r3
 8000598:	f7ff ff30 	bl	80003fc <date_to_string>
 800059c:	4604      	mov	r4, r0
 800059e:	79fb      	ldrb	r3, [r7, #7]
 80005a0:	4618      	mov	r0, r3
 80005a2:	f7ff fea9 	bl	80002f8 <get_day_of_week>
 80005a6:	4603      	mov	r3, r0
 80005a8:	461a      	mov	r2, r3
 80005aa:	4621      	mov	r1, r4
 80005ac:	4807      	ldr	r0, [pc, #28]	; (80005cc <SysTick_Handler+0x90>)
 80005ae:	f001 f887 	bl	80016c0 <iprintf>
}
 80005b2:	bf00      	nop
 80005b4:	3714      	adds	r7, #20
 80005b6:	46bd      	mov	sp, r7
 80005b8:	bd90      	pop	{r4, r7, pc}
 80005ba:	bf00      	nop
 80005bc:	080024e4 	.word	0x080024e4
 80005c0:	080024e8 	.word	0x080024e8
 80005c4:	080024ec 	.word	0x080024ec
 80005c8:	08002504 	.word	0x08002504
 80005cc:	08002518 	.word	0x08002518

080005d0 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80005d0:	b580      	push	{r7, lr}
 80005d2:	b086      	sub	sp, #24
 80005d4:	af00      	add	r7, sp, #0
 80005d6:	60f8      	str	r0, [r7, #12]
 80005d8:	60b9      	str	r1, [r7, #8]
 80005da:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80005dc:	2300      	movs	r3, #0
 80005de:	617b      	str	r3, [r7, #20]
 80005e0:	e00a      	b.n	80005f8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80005e2:	f3af 8000 	nop.w
 80005e6:	4601      	mov	r1, r0
 80005e8:	68bb      	ldr	r3, [r7, #8]
 80005ea:	1c5a      	adds	r2, r3, #1
 80005ec:	60ba      	str	r2, [r7, #8]
 80005ee:	b2ca      	uxtb	r2, r1
 80005f0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80005f2:	697b      	ldr	r3, [r7, #20]
 80005f4:	3301      	adds	r3, #1
 80005f6:	617b      	str	r3, [r7, #20]
 80005f8:	697a      	ldr	r2, [r7, #20]
 80005fa:	687b      	ldr	r3, [r7, #4]
 80005fc:	429a      	cmp	r2, r3
 80005fe:	dbf0      	blt.n	80005e2 <_read+0x12>
  }

  return len;
 8000600:	687b      	ldr	r3, [r7, #4]
}
 8000602:	4618      	mov	r0, r3
 8000604:	3718      	adds	r7, #24
 8000606:	46bd      	mov	sp, r7
 8000608:	bd80      	pop	{r7, pc}

0800060a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800060a:	b580      	push	{r7, lr}
 800060c:	b086      	sub	sp, #24
 800060e:	af00      	add	r7, sp, #0
 8000610:	60f8      	str	r0, [r7, #12]
 8000612:	60b9      	str	r1, [r7, #8]
 8000614:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000616:	2300      	movs	r3, #0
 8000618:	617b      	str	r3, [r7, #20]
 800061a:	e009      	b.n	8000630 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800061c:	68bb      	ldr	r3, [r7, #8]
 800061e:	1c5a      	adds	r2, r3, #1
 8000620:	60ba      	str	r2, [r7, #8]
 8000622:	781b      	ldrb	r3, [r3, #0]
 8000624:	4618      	mov	r0, r3
 8000626:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800062a:	697b      	ldr	r3, [r7, #20]
 800062c:	3301      	adds	r3, #1
 800062e:	617b      	str	r3, [r7, #20]
 8000630:	697a      	ldr	r2, [r7, #20]
 8000632:	687b      	ldr	r3, [r7, #4]
 8000634:	429a      	cmp	r2, r3
 8000636:	dbf1      	blt.n	800061c <_write+0x12>
  }
  return len;
 8000638:	687b      	ldr	r3, [r7, #4]
}
 800063a:	4618      	mov	r0, r3
 800063c:	3718      	adds	r7, #24
 800063e:	46bd      	mov	sp, r7
 8000640:	bd80      	pop	{r7, pc}

08000642 <_close>:

int _close(int file)
{
 8000642:	b480      	push	{r7}
 8000644:	b083      	sub	sp, #12
 8000646:	af00      	add	r7, sp, #0
 8000648:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800064a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800064e:	4618      	mov	r0, r3
 8000650:	370c      	adds	r7, #12
 8000652:	46bd      	mov	sp, r7
 8000654:	bc80      	pop	{r7}
 8000656:	4770      	bx	lr

08000658 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000658:	b480      	push	{r7}
 800065a:	b083      	sub	sp, #12
 800065c:	af00      	add	r7, sp, #0
 800065e:	6078      	str	r0, [r7, #4]
 8000660:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000662:	683b      	ldr	r3, [r7, #0]
 8000664:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000668:	605a      	str	r2, [r3, #4]
  return 0;
 800066a:	2300      	movs	r3, #0
}
 800066c:	4618      	mov	r0, r3
 800066e:	370c      	adds	r7, #12
 8000670:	46bd      	mov	sp, r7
 8000672:	bc80      	pop	{r7}
 8000674:	4770      	bx	lr

08000676 <_isatty>:

int _isatty(int file)
{
 8000676:	b480      	push	{r7}
 8000678:	b083      	sub	sp, #12
 800067a:	af00      	add	r7, sp, #0
 800067c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800067e:	2301      	movs	r3, #1
}
 8000680:	4618      	mov	r0, r3
 8000682:	370c      	adds	r7, #12
 8000684:	46bd      	mov	sp, r7
 8000686:	bc80      	pop	{r7}
 8000688:	4770      	bx	lr

0800068a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800068a:	b480      	push	{r7}
 800068c:	b085      	sub	sp, #20
 800068e:	af00      	add	r7, sp, #0
 8000690:	60f8      	str	r0, [r7, #12]
 8000692:	60b9      	str	r1, [r7, #8]
 8000694:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000696:	2300      	movs	r3, #0
}
 8000698:	4618      	mov	r0, r3
 800069a:	3714      	adds	r7, #20
 800069c:	46bd      	mov	sp, r7
 800069e:	bc80      	pop	{r7}
 80006a0:	4770      	bx	lr
	...

080006a4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80006a4:	b580      	push	{r7, lr}
 80006a6:	b086      	sub	sp, #24
 80006a8:	af00      	add	r7, sp, #0
 80006aa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80006ac:	4a14      	ldr	r2, [pc, #80]	; (8000700 <_sbrk+0x5c>)
 80006ae:	4b15      	ldr	r3, [pc, #84]	; (8000704 <_sbrk+0x60>)
 80006b0:	1ad3      	subs	r3, r2, r3
 80006b2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80006b4:	697b      	ldr	r3, [r7, #20]
 80006b6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80006b8:	4b13      	ldr	r3, [pc, #76]	; (8000708 <_sbrk+0x64>)
 80006ba:	681b      	ldr	r3, [r3, #0]
 80006bc:	2b00      	cmp	r3, #0
 80006be:	d102      	bne.n	80006c6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80006c0:	4b11      	ldr	r3, [pc, #68]	; (8000708 <_sbrk+0x64>)
 80006c2:	4a12      	ldr	r2, [pc, #72]	; (800070c <_sbrk+0x68>)
 80006c4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80006c6:	4b10      	ldr	r3, [pc, #64]	; (8000708 <_sbrk+0x64>)
 80006c8:	681a      	ldr	r2, [r3, #0]
 80006ca:	687b      	ldr	r3, [r7, #4]
 80006cc:	4413      	add	r3, r2
 80006ce:	693a      	ldr	r2, [r7, #16]
 80006d0:	429a      	cmp	r2, r3
 80006d2:	d207      	bcs.n	80006e4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80006d4:	f001 f988 	bl	80019e8 <__errno>
 80006d8:	4603      	mov	r3, r0
 80006da:	220c      	movs	r2, #12
 80006dc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80006de:	f04f 33ff 	mov.w	r3, #4294967295
 80006e2:	e009      	b.n	80006f8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80006e4:	4b08      	ldr	r3, [pc, #32]	; (8000708 <_sbrk+0x64>)
 80006e6:	681b      	ldr	r3, [r3, #0]
 80006e8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80006ea:	4b07      	ldr	r3, [pc, #28]	; (8000708 <_sbrk+0x64>)
 80006ec:	681a      	ldr	r2, [r3, #0]
 80006ee:	687b      	ldr	r3, [r7, #4]
 80006f0:	4413      	add	r3, r2
 80006f2:	4a05      	ldr	r2, [pc, #20]	; (8000708 <_sbrk+0x64>)
 80006f4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80006f6:	68fb      	ldr	r3, [r7, #12]
}
 80006f8:	4618      	mov	r0, r3
 80006fa:	3718      	adds	r7, #24
 80006fc:	46bd      	mov	sp, r7
 80006fe:	bd80      	pop	{r7, pc}
 8000700:	20020000 	.word	0x20020000
 8000704:	00000400 	.word	0x00000400
 8000708:	200000a8 	.word	0x200000a8
 800070c:	20000220 	.word	0x20000220

08000710 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000710:	480d      	ldr	r0, [pc, #52]	; (8000748 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000712:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000714:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000718:	480c      	ldr	r0, [pc, #48]	; (800074c <LoopForever+0x6>)
  ldr r1, =_edata
 800071a:	490d      	ldr	r1, [pc, #52]	; (8000750 <LoopForever+0xa>)
  ldr r2, =_sidata
 800071c:	4a0d      	ldr	r2, [pc, #52]	; (8000754 <LoopForever+0xe>)
  movs r3, #0
 800071e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000720:	e002      	b.n	8000728 <LoopCopyDataInit>

08000722 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000722:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000724:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000726:	3304      	adds	r3, #4

08000728 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000728:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800072a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800072c:	d3f9      	bcc.n	8000722 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800072e:	4a0a      	ldr	r2, [pc, #40]	; (8000758 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000730:	4c0a      	ldr	r4, [pc, #40]	; (800075c <LoopForever+0x16>)
  movs r3, #0
 8000732:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000734:	e001      	b.n	800073a <LoopFillZerobss>

08000736 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000736:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000738:	3204      	adds	r2, #4

0800073a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800073a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800073c:	d3fb      	bcc.n	8000736 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800073e:	f001 f959 	bl	80019f4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000742:	f7ff fe85 	bl	8000450 <main>

08000746 <LoopForever>:

LoopForever:
  b LoopForever
 8000746:	e7fe      	b.n	8000746 <LoopForever>
  ldr   r0, =_estack
 8000748:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800074c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000750:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8000754:	0800256c 	.word	0x0800256c
  ldr r2, =_sbss
 8000758:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 800075c:	20000220 	.word	0x20000220

08000760 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000760:	e7fe      	b.n	8000760 <ADC_IRQHandler>
	...

08000764 <ds1307_init>:
 * @return		- 1: CH=1 -> init failed
 *				  0: CH=0 -> init success
 * @Note 		- none
 */
uint8_t ds1307_init()
{
 8000764:	b580      	push	{r7, lr}
 8000766:	b082      	sub	sp, #8
 8000768:	af00      	add	r7, sp, #0
	//1. Initialize the i2c pins
	ds1307_i2c_pin_config();
 800076a:	f000 f90f 	bl	800098c <ds1307_i2c_pin_config>

	//2. Initialize the i2c peripheral
	ds1307_i2c_config();
 800076e:	f000 f949 	bl	8000a04 <ds1307_i2c_config>

	//3. Enable the I2C peripheral
	I2C_PeripheralControl(DS1307_I2C, ENABLE);
 8000772:	2101      	movs	r1, #1
 8000774:	4809      	ldr	r0, [pc, #36]	; (800079c <ds1307_init+0x38>)
 8000776:	f000 fe75 	bl	8001464 <I2C_PeripheralControl>

	//4. Make clock halt = 0, cấu hình dừng đồng hồ tại 0, cấu hình thanh ghi 00h với value 0
	ds1307_write(0x00, DS1307_ADDR_SEC);
 800077a:	2100      	movs	r1, #0
 800077c:	2000      	movs	r0, #0
 800077e:	f000 f957 	bl	8000a30 <ds1307_write>

	//5. Read back clock halt bit(đọc value thanh ghi 00h)
	uint8_t clock_state = ds1307_read(DS1307_ADDR_SEC);
 8000782:	2000      	movs	r0, #0
 8000784:	f000 f970 	bl	8000a68 <ds1307_read>
 8000788:	4603      	mov	r3, r0
 800078a:	71fb      	strb	r3, [r7, #7]

	return ((clock_state >> 7) & 0x1);		//Đọc CH bit[7] và trả về giá trị CH bit
 800078c:	79fb      	ldrb	r3, [r7, #7]
 800078e:	09db      	lsrs	r3, r3, #7
 8000790:	b2db      	uxtb	r3, r3
}
 8000792:	4618      	mov	r0, r3
 8000794:	3708      	adds	r7, #8
 8000796:	46bd      	mov	sp, r7
 8000798:	bd80      	pop	{r7, pc}
 800079a:	bf00      	nop
 800079c:	40005400 	.word	0x40005400

080007a0 <ds1307_set_current_time>:
 * @return		- none
 *
 * @Note 		- Cấu hình các thanh ghi 00h,01h,02h
 */
void ds1307_set_current_time(RTC_time_t *rtc_time)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	b084      	sub	sp, #16
 80007a4:	af00      	add	r7, sp, #0
 80007a6:	6078      	str	r0, [r7, #4]
	//Xử lý thanh ghi 00h liên quan đến second và bit7[CH]
	uint8_t seconds;
	seconds = binary_to_bcd(rtc_time->seconds);			//chuyển đổi dạng nhị phân sang bcd
 80007a8:	687b      	ldr	r3, [r7, #4]
 80007aa:	781b      	ldrb	r3, [r3, #0]
 80007ac:	4618      	mov	r0, r3
 80007ae:	f000 f993 	bl	8000ad8 <binary_to_bcd>
 80007b2:	4603      	mov	r3, r0
 80007b4:	73bb      	strb	r3, [r7, #14]
	seconds &= ~(1 << 7);			//xóa bit7[CH] của 00h register về 0, đảm bảo rằng cho phép clock hoạt động
 80007b6:	7bbb      	ldrb	r3, [r7, #14]
 80007b8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80007bc:	73bb      	strb	r3, [r7, #14]
	ds1307_write(seconds,DS1307_ADDR_SEC);				//set second 00h regíter
 80007be:	7bbb      	ldrb	r3, [r7, #14]
 80007c0:	2100      	movs	r1, #0
 80007c2:	4618      	mov	r0, r3
 80007c4:	f000 f934 	bl	8000a30 <ds1307_write>

	//minute
	ds1307_write(binary_to_bcd(rtc_time->minutes),DS1307_ADDR_MIN);		//set minute 01h register
 80007c8:	687b      	ldr	r3, [r7, #4]
 80007ca:	785b      	ldrb	r3, [r3, #1]
 80007cc:	4618      	mov	r0, r3
 80007ce:	f000 f983 	bl	8000ad8 <binary_to_bcd>
 80007d2:	4603      	mov	r3, r0
 80007d4:	2101      	movs	r1, #1
 80007d6:	4618      	mov	r0, r3
 80007d8:	f000 f92a 	bl	8000a30 <ds1307_write>

	//hour
	uint8_t hrs;
	hrs = binary_to_bcd(rtc_time->hours);
 80007dc:	687b      	ldr	r3, [r7, #4]
 80007de:	789b      	ldrb	r3, [r3, #2]
 80007e0:	4618      	mov	r0, r3
 80007e2:	f000 f979 	bl	8000ad8 <binary_to_bcd>
 80007e6:	4603      	mov	r3, r0
 80007e8:	73fb      	strb	r3, [r7, #15]

	if(rtc_time->time_format == TIME_FORMAT_24HRS)
 80007ea:	687b      	ldr	r3, [r7, #4]
 80007ec:	78db      	ldrb	r3, [r3, #3]
 80007ee:	2b02      	cmp	r3, #2
 80007f0:	d104      	bne.n	80007fc <ds1307_set_current_time+0x5c>
	{
		hrs &= ~(1 << 6);			//format 24h: clear bit6 của 01h register
 80007f2:	7bfb      	ldrb	r3, [r7, #15]
 80007f4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80007f8:	73fb      	strb	r3, [r7, #15]
 80007fa:	e011      	b.n	8000820 <ds1307_set_current_time+0x80>
	}
	else
	{
		hrs |= (1 << 6);			//format 12h: set bit6 của 01h register
 80007fc:	7bfb      	ldrb	r3, [r7, #15]
 80007fe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000802:	73fb      	strb	r3, [r7, #15]

		//toán tử ba ngôi cấu hình bit5 của 01h register
		hrs = (rtc_time->time_format == TIME_FORMAT_12HRS_PM) ? hrs | (1 << 5) : hrs & ~(1 << 5);
 8000804:	687b      	ldr	r3, [r7, #4]
 8000806:	78db      	ldrb	r3, [r3, #3]
 8000808:	2b01      	cmp	r3, #1
 800080a:	d104      	bne.n	8000816 <ds1307_set_current_time+0x76>
 800080c:	7bfb      	ldrb	r3, [r7, #15]
 800080e:	f043 0320 	orr.w	r3, r3, #32
 8000812:	b2db      	uxtb	r3, r3
 8000814:	e003      	b.n	800081e <ds1307_set_current_time+0x7e>
 8000816:	7bfb      	ldrb	r3, [r7, #15]
 8000818:	f023 0320 	bic.w	r3, r3, #32
 800081c:	b2db      	uxtb	r3, r3
 800081e:	73fb      	strb	r3, [r7, #15]
	}
	ds1307_write(hrs,DS1307_ADDR_HRS);				//set hour 02h regíter
 8000820:	7bfb      	ldrb	r3, [r7, #15]
 8000822:	2102      	movs	r1, #2
 8000824:	4618      	mov	r0, r3
 8000826:	f000 f903 	bl	8000a30 <ds1307_write>
}
 800082a:	bf00      	nop
 800082c:	3710      	adds	r7, #16
 800082e:	46bd      	mov	sp, r7
 8000830:	bd80      	pop	{r7, pc}

08000832 <ds1307_get_current_time>:
 * @return		- none
 *
 * @Note 		- Giá trị đọc đc lưu vào con trỏ rtc_time
 */
void ds1307_get_current_time(RTC_time_t *rtc_time)
{
 8000832:	b580      	push	{r7, lr}
 8000834:	b084      	sub	sp, #16
 8000836:	af00      	add	r7, sp, #0
 8000838:	6078      	str	r0, [r7, #4]
	//second
	uint8_t seconds;
	seconds = ds1307_read(DS1307_ADDR_SEC);			//lệnh read thanh ghi 00h register
 800083a:	2000      	movs	r0, #0
 800083c:	f000 f914 	bl	8000a68 <ds1307_read>
 8000840:	4603      	mov	r3, r0
 8000842:	73bb      	strb	r3, [r7, #14]
	seconds &= ~(1 << 7);							//chắc chắn rằng bit7[CH] đc clear
 8000844:	7bbb      	ldrb	r3, [r7, #14]
 8000846:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800084a:	73bb      	strb	r3, [r7, #14]
	rtc_time->seconds = bcd_to_binary(seconds);		//chuyển đổi và set seconds vào con trỏ
 800084c:	7bbb      	ldrb	r3, [r7, #14]
 800084e:	4618      	mov	r0, r3
 8000850:	f000 f928 	bl	8000aa4 <bcd_to_binary>
 8000854:	4603      	mov	r3, r0
 8000856:	461a      	mov	r2, r3
 8000858:	687b      	ldr	r3, [r7, #4]
 800085a:	701a      	strb	r2, [r3, #0]

	//minute
	rtc_time->minutes = bcd_to_binary(ds1307_read(DS1307_ADDR_MIN));  //lệnh read thanh ghi 01h register
 800085c:	2001      	movs	r0, #1
 800085e:	f000 f903 	bl	8000a68 <ds1307_read>
 8000862:	4603      	mov	r3, r0
 8000864:	4618      	mov	r0, r3
 8000866:	f000 f91d 	bl	8000aa4 <bcd_to_binary>
 800086a:	4603      	mov	r3, r0
 800086c:	461a      	mov	r2, r3
 800086e:	687b      	ldr	r3, [r7, #4]
 8000870:	705a      	strb	r2, [r3, #1]
																	//chuyển đổi và set minutes vào con trỏ

	//hour
	uint8_t hrs;
	hrs = ds1307_read(DS1307_ADDR_HRS);				//lệnh read thanh ghi 02h register
 8000872:	2002      	movs	r0, #2
 8000874:	f000 f8f8 	bl	8000a68 <ds1307_read>
 8000878:	4603      	mov	r3, r0
 800087a:	73fb      	strb	r3, [r7, #15]
	//Biện luận bit6 của 02h register đế xác định kiểu thời gian đang lưu
	if(hrs & (1 << 6))	//bit6=0
 800087c:	7bfb      	ldrb	r3, [r7, #15]
 800087e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000882:	2b00      	cmp	r3, #0
 8000884:	d00f      	beq.n	80008a6 <ds1307_get_current_time+0x74>
	{
		//set 12hrs format, check bit5 nếu 0:giờ bình thường or 1:Kiểu giờ AM-PM
		rtc_time->time_format = !((hrs & (1 << 5)) == 0);  //nếu bit5là 0 thì nó sẽ đảo lên thành 1
 8000886:	7bfb      	ldrb	r3, [r7, #15]
 8000888:	f003 0320 	and.w	r3, r3, #32
 800088c:	2b00      	cmp	r3, #0
 800088e:	bf14      	ite	ne
 8000890:	2301      	movne	r3, #1
 8000892:	2300      	moveq	r3, #0
 8000894:	b2db      	uxtb	r3, r3
 8000896:	461a      	mov	r2, r3
 8000898:	687b      	ldr	r3, [r7, #4]
 800089a:	70da      	strb	r2, [r3, #3]
														  //biến nó thành kiểu giờ AM-PM
		hrs &= ~(0x3 << 5);	//0x3=0011 : clear 6 and 5 bắt đầu từ vị trí bit5
 800089c:	7bfb      	ldrb	r3, [r7, #15]
 800089e:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 80008a2:	73fb      	strb	r3, [r7, #15]
 80008a4:	e002      	b.n	80008ac <ds1307_get_current_time+0x7a>
	}
	else
	{
		//set 24hrs format
		rtc_time->time_format = TIME_FORMAT_24HRS;
 80008a6:	687b      	ldr	r3, [r7, #4]
 80008a8:	2202      	movs	r2, #2
 80008aa:	70da      	strb	r2, [r3, #3]
	}
	rtc_time->hours = bcd_to_binary(hrs);				//chuyển đổi và set hour vào con trỏ
 80008ac:	7bfb      	ldrb	r3, [r7, #15]
 80008ae:	4618      	mov	r0, r3
 80008b0:	f000 f8f8 	bl	8000aa4 <bcd_to_binary>
 80008b4:	4603      	mov	r3, r0
 80008b6:	461a      	mov	r2, r3
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	709a      	strb	r2, [r3, #2]
}
 80008bc:	bf00      	nop
 80008be:	3710      	adds	r7, #16
 80008c0:	46bd      	mov	sp, r7
 80008c2:	bd80      	pop	{r7, pc}

080008c4 <ds1307_set_current_date>:
 * @return		- none
 *
 * @Note 		- none
 */
void ds1307_set_current_date(RTC_date_t *rtc_date)
{
 80008c4:	b580      	push	{r7, lr}
 80008c6:	b082      	sub	sp, #8
 80008c8:	af00      	add	r7, sp, #0
 80008ca:	6078      	str	r0, [r7, #4]
	//set date 04h register
	ds1307_write(binary_to_bcd(rtc_date->date),DS1307_ADDR_DATE);
 80008cc:	687b      	ldr	r3, [r7, #4]
 80008ce:	781b      	ldrb	r3, [r3, #0]
 80008d0:	4618      	mov	r0, r3
 80008d2:	f000 f901 	bl	8000ad8 <binary_to_bcd>
 80008d6:	4603      	mov	r3, r0
 80008d8:	2104      	movs	r1, #4
 80008da:	4618      	mov	r0, r3
 80008dc:	f000 f8a8 	bl	8000a30 <ds1307_write>

	//set month 05h register
	ds1307_write(binary_to_bcd(rtc_date->month),DS1307_ADDR_MONTH);
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	785b      	ldrb	r3, [r3, #1]
 80008e4:	4618      	mov	r0, r3
 80008e6:	f000 f8f7 	bl	8000ad8 <binary_to_bcd>
 80008ea:	4603      	mov	r3, r0
 80008ec:	2105      	movs	r1, #5
 80008ee:	4618      	mov	r0, r3
 80008f0:	f000 f89e 	bl	8000a30 <ds1307_write>

	//set year 06h register
	ds1307_write(binary_to_bcd(rtc_date->year),DS1307_ADDR_YEAR);
 80008f4:	687b      	ldr	r3, [r7, #4]
 80008f6:	789b      	ldrb	r3, [r3, #2]
 80008f8:	4618      	mov	r0, r3
 80008fa:	f000 f8ed 	bl	8000ad8 <binary_to_bcd>
 80008fe:	4603      	mov	r3, r0
 8000900:	2106      	movs	r1, #6
 8000902:	4618      	mov	r0, r3
 8000904:	f000 f894 	bl	8000a30 <ds1307_write>

	//set day(thứ) 03h register
	ds1307_write(binary_to_bcd(rtc_date->day),DS1307_ADDR_DAY);
 8000908:	687b      	ldr	r3, [r7, #4]
 800090a:	78db      	ldrb	r3, [r3, #3]
 800090c:	4618      	mov	r0, r3
 800090e:	f000 f8e3 	bl	8000ad8 <binary_to_bcd>
 8000912:	4603      	mov	r3, r0
 8000914:	2103      	movs	r1, #3
 8000916:	4618      	mov	r0, r3
 8000918:	f000 f88a 	bl	8000a30 <ds1307_write>
}
 800091c:	bf00      	nop
 800091e:	3708      	adds	r7, #8
 8000920:	46bd      	mov	sp, r7
 8000922:	bd80      	pop	{r7, pc}

08000924 <ds1307_get_current_date>:
 * @return		- none
 *
 * @Note 		-  Giá trị đọc đc lưu vào con trỏ rtc_date
 */
void ds1307_get_current_date(RTC_date_t *rtc_date)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	b082      	sub	sp, #8
 8000928:	af00      	add	r7, sp, #0
 800092a:	6078      	str	r0, [r7, #4]
	//date
	rtc_date->date = bcd_to_binary(ds1307_read(DS1307_ADDR_DATE));
 800092c:	2004      	movs	r0, #4
 800092e:	f000 f89b 	bl	8000a68 <ds1307_read>
 8000932:	4603      	mov	r3, r0
 8000934:	4618      	mov	r0, r3
 8000936:	f000 f8b5 	bl	8000aa4 <bcd_to_binary>
 800093a:	4603      	mov	r3, r0
 800093c:	461a      	mov	r2, r3
 800093e:	687b      	ldr	r3, [r7, #4]
 8000940:	701a      	strb	r2, [r3, #0]

	//month
	rtc_date->month = bcd_to_binary(ds1307_read(DS1307_ADDR_MONTH));
 8000942:	2005      	movs	r0, #5
 8000944:	f000 f890 	bl	8000a68 <ds1307_read>
 8000948:	4603      	mov	r3, r0
 800094a:	4618      	mov	r0, r3
 800094c:	f000 f8aa 	bl	8000aa4 <bcd_to_binary>
 8000950:	4603      	mov	r3, r0
 8000952:	461a      	mov	r2, r3
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	705a      	strb	r2, [r3, #1]

	//year
	rtc_date->year = bcd_to_binary(ds1307_read(DS1307_ADDR_YEAR));
 8000958:	2006      	movs	r0, #6
 800095a:	f000 f885 	bl	8000a68 <ds1307_read>
 800095e:	4603      	mov	r3, r0
 8000960:	4618      	mov	r0, r3
 8000962:	f000 f89f 	bl	8000aa4 <bcd_to_binary>
 8000966:	4603      	mov	r3, r0
 8000968:	461a      	mov	r2, r3
 800096a:	687b      	ldr	r3, [r7, #4]
 800096c:	709a      	strb	r2, [r3, #2]

	//day
	rtc_date->day = bcd_to_binary(ds1307_read(DS1307_ADDR_DAY));
 800096e:	2003      	movs	r0, #3
 8000970:	f000 f87a 	bl	8000a68 <ds1307_read>
 8000974:	4603      	mov	r3, r0
 8000976:	4618      	mov	r0, r3
 8000978:	f000 f894 	bl	8000aa4 <bcd_to_binary>
 800097c:	4603      	mov	r3, r0
 800097e:	461a      	mov	r2, r3
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	70da      	strb	r2, [r3, #3]
}
 8000984:	bf00      	nop
 8000986:	3708      	adds	r7, #8
 8000988:	46bd      	mov	sp, r7
 800098a:	bd80      	pop	{r7, pc}

0800098c <ds1307_i2c_pin_config>:
 * 				Nếu thay đổi cấu hình AF thì cần viết lại code hàm này
 * 				- 2. Vì hàm sử dụng GPIOx_Driver của chip STM32F407xx nên hàm ds1307_i2c_pin_config chỉ dùng
 * 				cho chip này, nếu thay đổi driver chip khác cũng cần viết lại code hàm
 */
static void ds1307_i2c_pin_config()
{
 800098c:	b580      	push	{r7, lr}
 800098e:	b086      	sub	sp, #24
 8000990:	af00      	add	r7, sp, #0
	GPIOx_Handle_t i2c_sda,i2c_scl;

	//hàm memset() sẽ ghi số 0 vào bao nhiêu vị trí sizeof(x) byte của con trỏ struct i2c_x
	memset(&i2c_sda,0,sizeof(i2c_sda));		//tất cả value trong i2c_sda đều là 0
 8000992:	f107 030c 	add.w	r3, r7, #12
 8000996:	220c      	movs	r2, #12
 8000998:	2100      	movs	r1, #0
 800099a:	4618      	mov	r0, r3
 800099c:	f000 ffd6 	bl	800194c <memset>
	memset(&i2c_scl,0,sizeof(i2c_scl));		//tất cả value trong i2c_scl đều là 0
 80009a0:	463b      	mov	r3, r7
 80009a2:	220c      	movs	r2, #12
 80009a4:	2100      	movs	r1, #0
 80009a6:	4618      	mov	r0, r3
 80009a8:	f000 ffd0 	bl	800194c <memset>

	/*
	 * I2C1_SCL(DS1307) ==> PB6(STM32)
	 * I2C1_SDA(DS1307) ==> PB7(STM32)
	 */
	i2c_sda.pGPIOx = DS1307_I2C_PORT;								//Cấu hình port dùng kết nối DS1307->MCU
 80009ac:	4b14      	ldr	r3, [pc, #80]	; (8000a00 <ds1307_i2c_pin_config+0x74>)
 80009ae:	60fb      	str	r3, [r7, #12]
	i2c_sda.GPIO_PinConfig.GPIO_PinAltFunMode = 4;
 80009b0:	2304      	movs	r3, #4
 80009b2:	757b      	strb	r3, [r7, #21]
	i2c_sda.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALTFN;
 80009b4:	2302      	movs	r3, #2
 80009b6:	747b      	strb	r3, [r7, #17]
	i2c_sda.GPIO_PinConfig.GPIO_PinNumber = DS1307_I2C_SDA_PIN;
 80009b8:	2307      	movs	r3, #7
 80009ba:	743b      	strb	r3, [r7, #16]
	i2c_sda.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_OD;
 80009bc:	2301      	movs	r3, #1
 80009be:	753b      	strb	r3, [r7, #20]
	i2c_sda.GPIO_PinConfig.GPIO_PinPuPdControl = DS1307_I2C_PUPD;
 80009c0:	2301      	movs	r3, #1
 80009c2:	74fb      	strb	r3, [r7, #19]
	i2c_sda.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 80009c4:	2302      	movs	r3, #2
 80009c6:	74bb      	strb	r3, [r7, #18]
	GPIO_Init(&i2c_sda);
 80009c8:	f107 030c 	add.w	r3, r7, #12
 80009cc:	4618      	mov	r0, r3
 80009ce:	f000 f931 	bl	8000c34 <GPIO_Init>

	i2c_scl.pGPIOx = DS1307_I2C_PORT;
 80009d2:	4b0b      	ldr	r3, [pc, #44]	; (8000a00 <ds1307_i2c_pin_config+0x74>)
 80009d4:	603b      	str	r3, [r7, #0]
	i2c_scl.GPIO_PinConfig.GPIO_PinAltFunMode = 4;
 80009d6:	2304      	movs	r3, #4
 80009d8:	727b      	strb	r3, [r7, #9]
	i2c_scl.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALTFN;
 80009da:	2302      	movs	r3, #2
 80009dc:	717b      	strb	r3, [r7, #5]
	i2c_scl.GPIO_PinConfig.GPIO_PinNumber = DS1307_I2C_SCL_PIN;
 80009de:	2306      	movs	r3, #6
 80009e0:	713b      	strb	r3, [r7, #4]
	i2c_scl.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_OD;
 80009e2:	2301      	movs	r3, #1
 80009e4:	723b      	strb	r3, [r7, #8]
	i2c_scl.GPIO_PinConfig.GPIO_PinPuPdControl = DS1307_I2C_PUPD;
 80009e6:	2301      	movs	r3, #1
 80009e8:	71fb      	strb	r3, [r7, #7]
	i2c_scl.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 80009ea:	2302      	movs	r3, #2
 80009ec:	71bb      	strb	r3, [r7, #6]
	GPIO_Init(&i2c_scl);
 80009ee:	463b      	mov	r3, r7
 80009f0:	4618      	mov	r0, r3
 80009f2:	f000 f91f 	bl	8000c34 <GPIO_Init>
}
 80009f6:	bf00      	nop
 80009f8:	3718      	adds	r7, #24
 80009fa:	46bd      	mov	sp, r7
 80009fc:	bd80      	pop	{r7, pc}
 80009fe:	bf00      	nop
 8000a00:	40020400 	.word	0x40020400

08000a04 <ds1307_i2c_config>:
 * @Note 		- 1. Tùy thuộc vào lựa chọn I2Cx_MCU mà lập trình viên sẽ triển khai code khác nhau
 * 				- 2. Vì hàm sử dụng GPIOx_Driver của chip STM32F407xx nên hàm ds1307_i2c_pin_config chỉ dùng
 * 				cho chip này, nếu thay đổi driver chip khác cũng cần viết lại code hàm
 */
static void ds1307_i2c_config(void)
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	af00      	add	r7, sp, #0
	g_ds1307I2CHandle.pI2Cx = DS1307_I2C;	//Cấu hình I2Cx_MCU sử dụng kết nối DS1307
 8000a08:	4b06      	ldr	r3, [pc, #24]	; (8000a24 <ds1307_i2c_config+0x20>)
 8000a0a:	4a07      	ldr	r2, [pc, #28]	; (8000a28 <ds1307_i2c_config+0x24>)
 8000a0c:	601a      	str	r2, [r3, #0]
	g_ds1307I2CHandle.I2C_Config.I2C_AckControl = I2C_ACK_ENABLE;
 8000a0e:	4b05      	ldr	r3, [pc, #20]	; (8000a24 <ds1307_i2c_config+0x20>)
 8000a10:	2201      	movs	r2, #1
 8000a12:	725a      	strb	r2, [r3, #9]
	g_ds1307I2CHandle.I2C_Config.I2C_SCLSpeed = DS1307_I2C_SPEED;
 8000a14:	4b03      	ldr	r3, [pc, #12]	; (8000a24 <ds1307_i2c_config+0x20>)
 8000a16:	4a05      	ldr	r2, [pc, #20]	; (8000a2c <ds1307_i2c_config+0x28>)
 8000a18:	605a      	str	r2, [r3, #4]
	I2C_Init(&g_ds1307I2CHandle);
 8000a1a:	4802      	ldr	r0, [pc, #8]	; (8000a24 <ds1307_i2c_config+0x20>)
 8000a1c:	f000 face 	bl	8000fbc <I2C_Init>
}
 8000a20:	bf00      	nop
 8000a22:	bd80      	pop	{r7, pc}
 8000a24:	200000ac 	.word	0x200000ac
 8000a28:	40005400 	.word	0x40005400
 8000a2c:	000186a0 	.word	0x000186a0

08000a30 <ds1307_write>:
 * @return		- none
 *
 * @Note 		- Frame data gửi đến DS1307: S|<Slave_address>|0(W)|Ack|<Word_Address>|A|<Data(n)>|...|A|P
 */
static void ds1307_write(uint8_t value, uint8_t reg_addr)
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	b086      	sub	sp, #24
 8000a34:	af02      	add	r7, sp, #8
 8000a36:	4603      	mov	r3, r0
 8000a38:	460a      	mov	r2, r1
 8000a3a:	71fb      	strb	r3, [r7, #7]
 8000a3c:	4613      	mov	r3, r2
 8000a3e:	71bb      	strb	r3, [r7, #6]
	uint8_t tx[2];		//Một mảng 2 phần tử, lưu 2 byte thông số
	tx[0] = reg_addr;
 8000a40:	79bb      	ldrb	r3, [r7, #6]
 8000a42:	733b      	strb	r3, [r7, #12]
	tx[1] = value;
 8000a44:	79fb      	ldrb	r3, [r7, #7]
 8000a46:	737b      	strb	r3, [r7, #13]

	//Gửi thông số muốn ghi đến DS1307
	I2C_MasterSendData(&g_ds1307I2CHandle, tx, 2, DS1307_I2C_ADDRESS, 0);	//0: ko có lặp lại Frame Data
 8000a48:	f107 010c 	add.w	r1, r7, #12
 8000a4c:	2300      	movs	r3, #0
 8000a4e:	9300      	str	r3, [sp, #0]
 8000a50:	2368      	movs	r3, #104	; 0x68
 8000a52:	2202      	movs	r2, #2
 8000a54:	4803      	ldr	r0, [pc, #12]	; (8000a64 <ds1307_write+0x34>)
 8000a56:	f000 fb67 	bl	8001128 <I2C_MasterSendData>
}
 8000a5a:	bf00      	nop
 8000a5c:	3710      	adds	r7, #16
 8000a5e:	46bd      	mov	sp, r7
 8000a60:	bd80      	pop	{r7, pc}
 8000a62:	bf00      	nop
 8000a64:	200000ac 	.word	0x200000ac

08000a68 <ds1307_read>:
 * @return		- none
 *
 * @Note 		- Frame read data DS1307: S|<Slave_address>|1(R)|Ack|<Data(n)>|...|/A|P
 */
static uint8_t ds1307_read(uint8_t reg_addr)
{
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	b086      	sub	sp, #24
 8000a6c:	af02      	add	r7, sp, #8
 8000a6e:	4603      	mov	r3, r0
 8000a70:	71fb      	strb	r3, [r7, #7]
	uint8_t data;  //biến lưu giá trị đọc đc từ nhận từ Ds1307

	//Gửi đi lệnh đọc thanh ghi tại địa chỉ reg_addr tới DS1307
	I2C_MasterSendData(&g_ds1307I2CHandle, &reg_addr, 1, DS1307_I2C_ADDRESS, 0);
 8000a72:	1df9      	adds	r1, r7, #7
 8000a74:	2300      	movs	r3, #0
 8000a76:	9300      	str	r3, [sp, #0]
 8000a78:	2368      	movs	r3, #104	; 0x68
 8000a7a:	2201      	movs	r2, #1
 8000a7c:	4808      	ldr	r0, [pc, #32]	; (8000aa0 <ds1307_read+0x38>)
 8000a7e:	f000 fb53 	bl	8001128 <I2C_MasterSendData>

	//Nhận giá trị vào biến data từ địa chỉ reg_addr của Ds1307
	I2C_MasterReceiveData(&g_ds1307I2CHandle, &data, 1, DS1307_I2C_ADDRESS, 0);
 8000a82:	f107 010f 	add.w	r1, r7, #15
 8000a86:	2300      	movs	r3, #0
 8000a88:	9300      	str	r3, [sp, #0]
 8000a8a:	2368      	movs	r3, #104	; 0x68
 8000a8c:	2201      	movs	r2, #1
 8000a8e:	4804      	ldr	r0, [pc, #16]	; (8000aa0 <ds1307_read+0x38>)
 8000a90:	f000 fbad 	bl	80011ee <I2C_MasterReceiveData>

	return data;
 8000a94:	7bfb      	ldrb	r3, [r7, #15]
}
 8000a96:	4618      	mov	r0, r3
 8000a98:	3710      	adds	r7, #16
 8000a9a:	46bd      	mov	sp, r7
 8000a9c:	bd80      	pop	{r7, pc}
 8000a9e:	bf00      	nop
 8000aa0:	200000ac 	.word	0x200000ac

08000aa4 <bcd_to_binary>:
 *
 * @Note 		- Vd: Số 12 có (b)0001100 và dạng (BCD)0001_0010 với 0001 = 1 và 0010 = 2
 * 				- Lưu ý: Máy tính sẽ hoạt động dưới dạng nhị phân và DS1307 lưu số dạng BCD
 */
static uint8_t bcd_to_binary(uint8_t value)
{
 8000aa4:	b480      	push	{r7}
 8000aa6:	b085      	sub	sp, #20
 8000aa8:	af00      	add	r7, sp, #0
 8000aaa:	4603      	mov	r3, r0
 8000aac:	71fb      	strb	r3, [r7, #7]
	uint8_t m , n;
	m = (uint8_t) ((value >> 4 ) * 10);
 8000aae:	79fb      	ldrb	r3, [r7, #7]
 8000ab0:	091b      	lsrs	r3, r3, #4
 8000ab2:	b2db      	uxtb	r3, r3
 8000ab4:	461a      	mov	r2, r3
 8000ab6:	0092      	lsls	r2, r2, #2
 8000ab8:	4413      	add	r3, r2
 8000aba:	005b      	lsls	r3, r3, #1
 8000abc:	73fb      	strb	r3, [r7, #15]
	n =  value & (uint8_t)0x0F;
 8000abe:	79fb      	ldrb	r3, [r7, #7]
 8000ac0:	f003 030f 	and.w	r3, r3, #15
 8000ac4:	73bb      	strb	r3, [r7, #14]
	return (m+n);
 8000ac6:	7bfa      	ldrb	r2, [r7, #15]
 8000ac8:	7bbb      	ldrb	r3, [r7, #14]
 8000aca:	4413      	add	r3, r2
 8000acc:	b2db      	uxtb	r3, r3
}
 8000ace:	4618      	mov	r0, r3
 8000ad0:	3714      	adds	r7, #20
 8000ad2:	46bd      	mov	sp, r7
 8000ad4:	bc80      	pop	{r7}
 8000ad6:	4770      	bx	lr

08000ad8 <binary_to_bcd>:
 * @Note 		- Vd: Số 12 có (b)0001100 và dạng (BCD)0001_0010 với 0001 = 1 và 0010 = 2
 * 				- Lưu ý: Máy tính sẽ hoạt động dưới dạng nhị phân nên 'value' đưa vào sẽ đc máy tính
 * 				chuyển sang nhị phân và và DS1307 lưu số dạng BCD
 */
static uint8_t binary_to_bcd(uint8_t value)
{
 8000ad8:	b480      	push	{r7}
 8000ada:	b085      	sub	sp, #20
 8000adc:	af00      	add	r7, sp, #0
 8000ade:	4603      	mov	r3, r0
 8000ae0:	71fb      	strb	r3, [r7, #7]
	uint8_t m , n;
	uint8_t bcd;

	bcd = value;
 8000ae2:	79fb      	ldrb	r3, [r7, #7]
 8000ae4:	73fb      	strb	r3, [r7, #15]
	if(value >= 10)
 8000ae6:	79fb      	ldrb	r3, [r7, #7]
 8000ae8:	2b09      	cmp	r3, #9
 8000aea:	d918      	bls.n	8000b1e <binary_to_bcd+0x46>
	{
		m = value /10;
 8000aec:	79fb      	ldrb	r3, [r7, #7]
 8000aee:	4a0f      	ldr	r2, [pc, #60]	; (8000b2c <binary_to_bcd+0x54>)
 8000af0:	fba2 2303 	umull	r2, r3, r2, r3
 8000af4:	08db      	lsrs	r3, r3, #3
 8000af6:	73bb      	strb	r3, [r7, #14]
		n = value % 10;
 8000af8:	79fa      	ldrb	r2, [r7, #7]
 8000afa:	4b0c      	ldr	r3, [pc, #48]	; (8000b2c <binary_to_bcd+0x54>)
 8000afc:	fba3 1302 	umull	r1, r3, r3, r2
 8000b00:	08d9      	lsrs	r1, r3, #3
 8000b02:	460b      	mov	r3, r1
 8000b04:	009b      	lsls	r3, r3, #2
 8000b06:	440b      	add	r3, r1
 8000b08:	005b      	lsls	r3, r3, #1
 8000b0a:	1ad3      	subs	r3, r2, r3
 8000b0c:	737b      	strb	r3, [r7, #13]
		bcd = (m << 4) | n ;
 8000b0e:	7bbb      	ldrb	r3, [r7, #14]
 8000b10:	011b      	lsls	r3, r3, #4
 8000b12:	b25a      	sxtb	r2, r3
 8000b14:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8000b18:	4313      	orrs	r3, r2
 8000b1a:	b25b      	sxtb	r3, r3
 8000b1c:	73fb      	strb	r3, [r7, #15]
	}

	return bcd;
 8000b1e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b20:	4618      	mov	r0, r3
 8000b22:	3714      	adds	r7, #20
 8000b24:	46bd      	mov	sp, r7
 8000b26:	bc80      	pop	{r7}
 8000b28:	4770      	bx	lr
 8000b2a:	bf00      	nop
 8000b2c:	cccccccd 	.word	0xcccccccd

08000b30 <GPIO_PeriClockControl>:
 * @return		- none
 *
 * @Note 		- none
 */
void GPIO_PeriClockControl(GPIO_RegDef_t *pGPIOx, uint8_t EnorDi)
{
 8000b30:	b480      	push	{r7}
 8000b32:	b083      	sub	sp, #12
 8000b34:	af00      	add	r7, sp, #0
 8000b36:	6078      	str	r0, [r7, #4]
 8000b38:	460b      	mov	r3, r1
 8000b3a:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE)
 8000b3c:	78fb      	ldrb	r3, [r7, #3]
 8000b3e:	2b01      	cmp	r3, #1
 8000b40:	d161      	bne.n	8000c06 <GPIO_PeriClockControl+0xd6>
	{
		if(pGPIOx == GPIOA)
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	4a32      	ldr	r2, [pc, #200]	; (8000c10 <GPIO_PeriClockControl+0xe0>)
 8000b46:	4293      	cmp	r3, r2
 8000b48:	d106      	bne.n	8000b58 <GPIO_PeriClockControl+0x28>
		{
			GPIOA_PCLK_EN();		//hàm đã đc define trong stm32f407xx.h(lớp Driver)
 8000b4a:	4b32      	ldr	r3, [pc, #200]	; (8000c14 <GPIO_PeriClockControl+0xe4>)
 8000b4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b4e:	4a31      	ldr	r2, [pc, #196]	; (8000c14 <GPIO_PeriClockControl+0xe4>)
 8000b50:	f043 0301 	orr.w	r3, r3, #1
 8000b54:	6313      	str	r3, [r2, #48]	; 0x30
	else
	{
		//Todo: (Disable Status)

	}
}
 8000b56:	e056      	b.n	8000c06 <GPIO_PeriClockControl+0xd6>
		else if(pGPIOx == GPIOB)
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	4a2f      	ldr	r2, [pc, #188]	; (8000c18 <GPIO_PeriClockControl+0xe8>)
 8000b5c:	4293      	cmp	r3, r2
 8000b5e:	d106      	bne.n	8000b6e <GPIO_PeriClockControl+0x3e>
			GPIOB_PCLK_EN();
 8000b60:	4b2c      	ldr	r3, [pc, #176]	; (8000c14 <GPIO_PeriClockControl+0xe4>)
 8000b62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b64:	4a2b      	ldr	r2, [pc, #172]	; (8000c14 <GPIO_PeriClockControl+0xe4>)
 8000b66:	f043 0302 	orr.w	r3, r3, #2
 8000b6a:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000b6c:	e04b      	b.n	8000c06 <GPIO_PeriClockControl+0xd6>
		else if(pGPIOx == GPIOC)
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	4a2a      	ldr	r2, [pc, #168]	; (8000c1c <GPIO_PeriClockControl+0xec>)
 8000b72:	4293      	cmp	r3, r2
 8000b74:	d106      	bne.n	8000b84 <GPIO_PeriClockControl+0x54>
			GPIOC_PCLK_EN();
 8000b76:	4b27      	ldr	r3, [pc, #156]	; (8000c14 <GPIO_PeriClockControl+0xe4>)
 8000b78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b7a:	4a26      	ldr	r2, [pc, #152]	; (8000c14 <GPIO_PeriClockControl+0xe4>)
 8000b7c:	f043 0304 	orr.w	r3, r3, #4
 8000b80:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000b82:	e040      	b.n	8000c06 <GPIO_PeriClockControl+0xd6>
		else if(pGPIOx == GPIOD)
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	4a26      	ldr	r2, [pc, #152]	; (8000c20 <GPIO_PeriClockControl+0xf0>)
 8000b88:	4293      	cmp	r3, r2
 8000b8a:	d106      	bne.n	8000b9a <GPIO_PeriClockControl+0x6a>
			GPIOD_PCLK_EN();
 8000b8c:	4b21      	ldr	r3, [pc, #132]	; (8000c14 <GPIO_PeriClockControl+0xe4>)
 8000b8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b90:	4a20      	ldr	r2, [pc, #128]	; (8000c14 <GPIO_PeriClockControl+0xe4>)
 8000b92:	f043 0308 	orr.w	r3, r3, #8
 8000b96:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000b98:	e035      	b.n	8000c06 <GPIO_PeriClockControl+0xd6>
		else if(pGPIOx == GPIOE)
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	4a21      	ldr	r2, [pc, #132]	; (8000c24 <GPIO_PeriClockControl+0xf4>)
 8000b9e:	4293      	cmp	r3, r2
 8000ba0:	d106      	bne.n	8000bb0 <GPIO_PeriClockControl+0x80>
			GPIOE_PCLK_EN();
 8000ba2:	4b1c      	ldr	r3, [pc, #112]	; (8000c14 <GPIO_PeriClockControl+0xe4>)
 8000ba4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ba6:	4a1b      	ldr	r2, [pc, #108]	; (8000c14 <GPIO_PeriClockControl+0xe4>)
 8000ba8:	f043 0310 	orr.w	r3, r3, #16
 8000bac:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000bae:	e02a      	b.n	8000c06 <GPIO_PeriClockControl+0xd6>
		else if(pGPIOx == GPIOF)
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	4a1d      	ldr	r2, [pc, #116]	; (8000c28 <GPIO_PeriClockControl+0xf8>)
 8000bb4:	4293      	cmp	r3, r2
 8000bb6:	d106      	bne.n	8000bc6 <GPIO_PeriClockControl+0x96>
			GPIOF_PCLK_EN();
 8000bb8:	4b16      	ldr	r3, [pc, #88]	; (8000c14 <GPIO_PeriClockControl+0xe4>)
 8000bba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bbc:	4a15      	ldr	r2, [pc, #84]	; (8000c14 <GPIO_PeriClockControl+0xe4>)
 8000bbe:	f043 0320 	orr.w	r3, r3, #32
 8000bc2:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000bc4:	e01f      	b.n	8000c06 <GPIO_PeriClockControl+0xd6>
		else if(pGPIOx == GPIOG)
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	4a18      	ldr	r2, [pc, #96]	; (8000c2c <GPIO_PeriClockControl+0xfc>)
 8000bca:	4293      	cmp	r3, r2
 8000bcc:	d106      	bne.n	8000bdc <GPIO_PeriClockControl+0xac>
			GPIOG_PCLK_EN();
 8000bce:	4b11      	ldr	r3, [pc, #68]	; (8000c14 <GPIO_PeriClockControl+0xe4>)
 8000bd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bd2:	4a10      	ldr	r2, [pc, #64]	; (8000c14 <GPIO_PeriClockControl+0xe4>)
 8000bd4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000bd8:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000bda:	e014      	b.n	8000c06 <GPIO_PeriClockControl+0xd6>
		else if(pGPIOx == GPIOH)
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	4a13      	ldr	r2, [pc, #76]	; (8000c2c <GPIO_PeriClockControl+0xfc>)
 8000be0:	4293      	cmp	r3, r2
 8000be2:	d106      	bne.n	8000bf2 <GPIO_PeriClockControl+0xc2>
			GPIOH_PCLK_EN();
 8000be4:	4b0b      	ldr	r3, [pc, #44]	; (8000c14 <GPIO_PeriClockControl+0xe4>)
 8000be6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000be8:	4a0a      	ldr	r2, [pc, #40]	; (8000c14 <GPIO_PeriClockControl+0xe4>)
 8000bea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000bee:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000bf0:	e009      	b.n	8000c06 <GPIO_PeriClockControl+0xd6>
		else if(pGPIOx == GPIOI)
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	4a0e      	ldr	r2, [pc, #56]	; (8000c30 <GPIO_PeriClockControl+0x100>)
 8000bf6:	4293      	cmp	r3, r2
 8000bf8:	d105      	bne.n	8000c06 <GPIO_PeriClockControl+0xd6>
			GPIOI_PCLK_EN();
 8000bfa:	4b06      	ldr	r3, [pc, #24]	; (8000c14 <GPIO_PeriClockControl+0xe4>)
 8000bfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bfe:	4a05      	ldr	r2, [pc, #20]	; (8000c14 <GPIO_PeriClockControl+0xe4>)
 8000c00:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c04:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000c06:	bf00      	nop
 8000c08:	370c      	adds	r7, #12
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	bc80      	pop	{r7}
 8000c0e:	4770      	bx	lr
 8000c10:	40020000 	.word	0x40020000
 8000c14:	40023800 	.word	0x40023800
 8000c18:	40020400 	.word	0x40020400
 8000c1c:	40020800 	.word	0x40020800
 8000c20:	40020c00 	.word	0x40020c00
 8000c24:	40021000 	.word	0x40021000
 8000c28:	40021400 	.word	0x40021400
 8000c2c:	40021800 	.word	0x40021800
 8000c30:	40022000 	.word	0x40022000

08000c34 <GPIO_Init>:
 * @return		- none
 *
 * @Note 		- none
 */
void GPIO_Init(GPIOx_Handle_t *pGPIOHandle)
{
 8000c34:	b580      	push	{r7, lr}
 8000c36:	b086      	sub	sp, #24
 8000c38:	af00      	add	r7, sp, #0
 8000c3a:	6078      	str	r0, [r7, #4]
	uint32_t temp = 0; 	//temp. registerr
 8000c3c:	2300      	movs	r3, #0
 8000c3e:	617b      	str	r3, [r7, #20]

	//0. Enable the Peripheral Clock
	GPIO_PeriClockControl(pGPIOHandle->pGPIOx, ENABLE);
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	681b      	ldr	r3, [r3, #0]
 8000c44:	2101      	movs	r1, #1
 8000c46:	4618      	mov	r0, r3
 8000c48:	f7ff ff72 	bl	8000b30 <GPIO_PeriClockControl>

	//1. configure(cấu hình) the mode of gpio pin(Datasheet 8.4.1)
	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_ANALOG)
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	795b      	ldrb	r3, [r3, #5]
 8000c50:	2b03      	cmp	r3, #3
 8000c52:	d81f      	bhi.n	8000c94 <GPIO_Init+0x60>
	{
		//Giá trị GPIO_PinMode thuộc 1 trong 4 trường hợp bit của Mode Register
		//this is part non-interrupt mode

		//Xác định lấy vị trí MODERx cần điều khiển dựa vào số chân Pin_Number và lưu vào biến temp
		temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	795b      	ldrb	r3, [r3, #5]
 8000c58:	461a      	mov	r2, r3
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	791b      	ldrb	r3, [r3, #4]
 8000c5e:	005b      	lsls	r3, r3, #1
 8000c60:	fa02 f303 	lsl.w	r3, r2, r3
 8000c64:	617b      	str	r3, [r7, #20]
		//Dịch 2 bit vì theo datasheet, mỗi 2 bit quản lý một pin number của GPIO port mode register
		//vd: GPIO_PinNumber=Pin0 thì sẽ kích hoạt MODER0(2*0=0->bắt đầu từ bit0)
		//GPIO_PinNumber=Pin1 thì sẽ kích hoạt MODER1(2*1=2->bắt đầu từ bit2)

		//Xóa(clear) value bit tại vị trí 2 bit muốn cấu hình
		pGPIOHandle->pGPIOx->MODER &= ~(0x3 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	681b      	ldr	r3, [r3, #0]
 8000c6a:	681a      	ldr	r2, [r3, #0]
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	791b      	ldrb	r3, [r3, #4]
 8000c70:	4619      	mov	r1, r3
 8000c72:	2303      	movs	r3, #3
 8000c74:	408b      	lsls	r3, r1
 8000c76:	43db      	mvns	r3, r3
 8000c78:	4619      	mov	r1, r3
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	681b      	ldr	r3, [r3, #0]
 8000c7e:	400a      	ands	r2, r1
 8000c80:	601a      	str	r2, [r3, #0]
		//Theo datasheet thì để reset MODERx thì ta cần thiết lập value bit là 00, Ta có: 0x3 = 11
		//~(0x3 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber); nghĩa là tiến hành đảo trạng thái 11 thành 00
		//vị trí chân Pin_Number

		//Lưu value temp vào trong thanh ghi MODER của biến pGPIOHandle
		pGPIOHandle->pGPIOx->MODER |= temp;
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	681b      	ldr	r3, [r3, #0]
 8000c86:	6819      	ldr	r1, [r3, #0]
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	681b      	ldr	r3, [r3, #0]
 8000c8c:	697a      	ldr	r2, [r7, #20]
 8000c8e:	430a      	orrs	r2, r1
 8000c90:	601a      	str	r2, [r3, #0]
 8000c92:	e0b8      	b.n	8000e06 <GPIO_Init+0x1d2>
	}
	else
	{
		//This is part(phần) will code later (Interrupt mode) //các trường hợp khác từ 4->6

		if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_FT)
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	795b      	ldrb	r3, [r3, #5]
 8000c98:	2b04      	cmp	r3, #4
 8000c9a:	d117      	bne.n	8000ccc <GPIO_Init+0x98>
		{
			//1. configure the FTSR(Falling(xuống) Trigger Select Register)
			EXTI->FTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000c9c:	4b43      	ldr	r3, [pc, #268]	; (8000dac <GPIO_Init+0x178>)
 8000c9e:	68db      	ldr	r3, [r3, #12]
 8000ca0:	687a      	ldr	r2, [r7, #4]
 8000ca2:	7912      	ldrb	r2, [r2, #4]
 8000ca4:	4611      	mov	r1, r2
 8000ca6:	2201      	movs	r2, #1
 8000ca8:	408a      	lsls	r2, r1
 8000caa:	4611      	mov	r1, r2
 8000cac:	4a3f      	ldr	r2, [pc, #252]	; (8000dac <GPIO_Init+0x178>)
 8000cae:	430b      	orrs	r3, r1
 8000cb0:	60d3      	str	r3, [r2, #12]

			//1.2 Clear the corresponding(tương ứng) RTSR, việc này phòng ngừa cho tình huống sử dụng RTSR trước đó
			//và có thể gây xung đột cho lần cấu hình hiện tại
			EXTI->RTSR &= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000cb2:	4b3e      	ldr	r3, [pc, #248]	; (8000dac <GPIO_Init+0x178>)
 8000cb4:	689b      	ldr	r3, [r3, #8]
 8000cb6:	687a      	ldr	r2, [r7, #4]
 8000cb8:	7912      	ldrb	r2, [r2, #4]
 8000cba:	4611      	mov	r1, r2
 8000cbc:	2201      	movs	r2, #1
 8000cbe:	408a      	lsls	r2, r1
 8000cc0:	43d2      	mvns	r2, r2
 8000cc2:	4611      	mov	r1, r2
 8000cc4:	4a39      	ldr	r2, [pc, #228]	; (8000dac <GPIO_Init+0x178>)
 8000cc6:	400b      	ands	r3, r1
 8000cc8:	6093      	str	r3, [r2, #8]
 8000cca:	e035      	b.n	8000d38 <GPIO_Init+0x104>
		}
		else if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RT)
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	795b      	ldrb	r3, [r3, #5]
 8000cd0:	2b05      	cmp	r3, #5
 8000cd2:	d117      	bne.n	8000d04 <GPIO_Init+0xd0>
		{
			//1. configure the RTSR(Rising(lên) Trigger Select Register)
			EXTI->RTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000cd4:	4b35      	ldr	r3, [pc, #212]	; (8000dac <GPIO_Init+0x178>)
 8000cd6:	689b      	ldr	r3, [r3, #8]
 8000cd8:	687a      	ldr	r2, [r7, #4]
 8000cda:	7912      	ldrb	r2, [r2, #4]
 8000cdc:	4611      	mov	r1, r2
 8000cde:	2201      	movs	r2, #1
 8000ce0:	408a      	lsls	r2, r1
 8000ce2:	4611      	mov	r1, r2
 8000ce4:	4a31      	ldr	r2, [pc, #196]	; (8000dac <GPIO_Init+0x178>)
 8000ce6:	430b      	orrs	r3, r1
 8000ce8:	6093      	str	r3, [r2, #8]

			//1.2 Clear the corresponding(tương ứng) FTSR, việc này phòng ngừa cho tình huống sử dụng FTSR trước đó
			//và có thể gây xung đột cho lần cấu hình hiện tại
			EXTI->FTSR &= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000cea:	4b30      	ldr	r3, [pc, #192]	; (8000dac <GPIO_Init+0x178>)
 8000cec:	68db      	ldr	r3, [r3, #12]
 8000cee:	687a      	ldr	r2, [r7, #4]
 8000cf0:	7912      	ldrb	r2, [r2, #4]
 8000cf2:	4611      	mov	r1, r2
 8000cf4:	2201      	movs	r2, #1
 8000cf6:	408a      	lsls	r2, r1
 8000cf8:	43d2      	mvns	r2, r2
 8000cfa:	4611      	mov	r1, r2
 8000cfc:	4a2b      	ldr	r2, [pc, #172]	; (8000dac <GPIO_Init+0x178>)
 8000cfe:	400b      	ands	r3, r1
 8000d00:	60d3      	str	r3, [r2, #12]
 8000d02:	e019      	b.n	8000d38 <GPIO_Init+0x104>
		}
		else if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RFT)
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	795b      	ldrb	r3, [r3, #5]
 8000d08:	2b06      	cmp	r3, #6
 8000d0a:	d115      	bne.n	8000d38 <GPIO_Init+0x104>
		{
			//1. configure the FTSR and RTSR
			EXTI->FTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000d0c:	4b27      	ldr	r3, [pc, #156]	; (8000dac <GPIO_Init+0x178>)
 8000d0e:	68db      	ldr	r3, [r3, #12]
 8000d10:	687a      	ldr	r2, [r7, #4]
 8000d12:	7912      	ldrb	r2, [r2, #4]
 8000d14:	4611      	mov	r1, r2
 8000d16:	2201      	movs	r2, #1
 8000d18:	408a      	lsls	r2, r1
 8000d1a:	4611      	mov	r1, r2
 8000d1c:	4a23      	ldr	r2, [pc, #140]	; (8000dac <GPIO_Init+0x178>)
 8000d1e:	430b      	orrs	r3, r1
 8000d20:	60d3      	str	r3, [r2, #12]
			EXTI->RTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000d22:	4b22      	ldr	r3, [pc, #136]	; (8000dac <GPIO_Init+0x178>)
 8000d24:	689b      	ldr	r3, [r3, #8]
 8000d26:	687a      	ldr	r2, [r7, #4]
 8000d28:	7912      	ldrb	r2, [r2, #4]
 8000d2a:	4611      	mov	r1, r2
 8000d2c:	2201      	movs	r2, #1
 8000d2e:	408a      	lsls	r2, r1
 8000d30:	4611      	mov	r1, r2
 8000d32:	4a1e      	ldr	r2, [pc, #120]	; (8000dac <GPIO_Init+0x178>)
 8000d34:	430b      	orrs	r3, r1
 8000d36:	6093      	str	r3, [r2, #8]
		}

		//2. Configure the GPIO port selection in SYSCFG_EXTICR
		uint8_t temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 4;		//xác định SYSCFG_EXTICR_temp1 register
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	791b      	ldrb	r3, [r3, #4]
 8000d3c:	089b      	lsrs	r3, r3, #2
 8000d3e:	74fb      	strb	r3, [r7, #19]
		uint8_t temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 4;		//xác định 4bit EXTI_temp2 trong SYSCFG_EXTICR_temp1
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	791b      	ldrb	r3, [r3, #4]
 8000d44:	f003 0303 	and.w	r3, r3, #3
 8000d48:	74bb      	strb	r3, [r7, #18]
		uint8_t portcode = GPIO_BASEADDR_TO_CODE(pGPIOHandle->pGPIOx);		//xác định mã nhị phân xxxx để xác định GPIO port sử dụng
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	681b      	ldr	r3, [r3, #0]
 8000d4e:	4a18      	ldr	r2, [pc, #96]	; (8000db0 <GPIO_Init+0x17c>)
 8000d50:	4293      	cmp	r3, r2
 8000d52:	d03b      	beq.n	8000dcc <GPIO_Init+0x198>
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	4a16      	ldr	r2, [pc, #88]	; (8000db4 <GPIO_Init+0x180>)
 8000d5a:	4293      	cmp	r3, r2
 8000d5c:	d024      	beq.n	8000da8 <GPIO_Init+0x174>
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	681b      	ldr	r3, [r3, #0]
 8000d62:	4a15      	ldr	r2, [pc, #84]	; (8000db8 <GPIO_Init+0x184>)
 8000d64:	4293      	cmp	r3, r2
 8000d66:	d01d      	beq.n	8000da4 <GPIO_Init+0x170>
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	4a13      	ldr	r2, [pc, #76]	; (8000dbc <GPIO_Init+0x188>)
 8000d6e:	4293      	cmp	r3, r2
 8000d70:	d016      	beq.n	8000da0 <GPIO_Init+0x16c>
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	681b      	ldr	r3, [r3, #0]
 8000d76:	4a12      	ldr	r2, [pc, #72]	; (8000dc0 <GPIO_Init+0x18c>)
 8000d78:	4293      	cmp	r3, r2
 8000d7a:	d00f      	beq.n	8000d9c <GPIO_Init+0x168>
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	4a10      	ldr	r2, [pc, #64]	; (8000dc4 <GPIO_Init+0x190>)
 8000d82:	4293      	cmp	r3, r2
 8000d84:	d008      	beq.n	8000d98 <GPIO_Init+0x164>
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	681b      	ldr	r3, [r3, #0]
 8000d8a:	4a0f      	ldr	r2, [pc, #60]	; (8000dc8 <GPIO_Init+0x194>)
 8000d8c:	4293      	cmp	r3, r2
 8000d8e:	d101      	bne.n	8000d94 <GPIO_Init+0x160>
 8000d90:	2306      	movs	r3, #6
 8000d92:	e01c      	b.n	8000dce <GPIO_Init+0x19a>
 8000d94:	2300      	movs	r3, #0
 8000d96:	e01a      	b.n	8000dce <GPIO_Init+0x19a>
 8000d98:	2305      	movs	r3, #5
 8000d9a:	e018      	b.n	8000dce <GPIO_Init+0x19a>
 8000d9c:	2304      	movs	r3, #4
 8000d9e:	e016      	b.n	8000dce <GPIO_Init+0x19a>
 8000da0:	2303      	movs	r3, #3
 8000da2:	e014      	b.n	8000dce <GPIO_Init+0x19a>
 8000da4:	2302      	movs	r3, #2
 8000da6:	e012      	b.n	8000dce <GPIO_Init+0x19a>
 8000da8:	2301      	movs	r3, #1
 8000daa:	e010      	b.n	8000dce <GPIO_Init+0x19a>
 8000dac:	40013c00 	.word	0x40013c00
 8000db0:	40020000 	.word	0x40020000
 8000db4:	40020400 	.word	0x40020400
 8000db8:	40020800 	.word	0x40020800
 8000dbc:	40020c00 	.word	0x40020c00
 8000dc0:	40021000 	.word	0x40021000
 8000dc4:	40021400 	.word	0x40021400
 8000dc8:	40021800 	.word	0x40021800
 8000dcc:	2300      	movs	r3, #0
 8000dce:	747b      	strb	r3, [r7, #17]
		SYSCFG_PCLK_EN();													//Kích hoạt xung clock để cấu hình
 8000dd0:	4b5c      	ldr	r3, [pc, #368]	; (8000f44 <GPIO_Init+0x310>)
 8000dd2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dd4:	4a5b      	ldr	r2, [pc, #364]	; (8000f44 <GPIO_Init+0x310>)
 8000dd6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000dda:	6453      	str	r3, [r2, #68]	; 0x44
		SYSCFG->EXTICR[temp1] = portcode << (temp2 * 4);					//Cấu hình thanh ghi SYSCFG_EXTICR_temp1
 8000ddc:	7c7a      	ldrb	r2, [r7, #17]
 8000dde:	7cbb      	ldrb	r3, [r7, #18]
 8000de0:	009b      	lsls	r3, r3, #2
 8000de2:	fa02 f103 	lsl.w	r1, r2, r3
 8000de6:	4a58      	ldr	r2, [pc, #352]	; (8000f48 <GPIO_Init+0x314>)
 8000de8:	7cfb      	ldrb	r3, [r7, #19]
 8000dea:	3302      	adds	r3, #2
 8000dec:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

		//3. Eanble the exti interrupt delivery(chuyển, sử dụng) by using IMR(Interrupt Masking Register)
		EXTI->IMR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000df0:	4b56      	ldr	r3, [pc, #344]	; (8000f4c <GPIO_Init+0x318>)
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	687a      	ldr	r2, [r7, #4]
 8000df6:	7912      	ldrb	r2, [r2, #4]
 8000df8:	4611      	mov	r1, r2
 8000dfa:	2201      	movs	r2, #1
 8000dfc:	408a      	lsls	r2, r1
 8000dfe:	4611      	mov	r1, r2
 8000e00:	4a52      	ldr	r2, [pc, #328]	; (8000f4c <GPIO_Init+0x318>)
 8000e02:	430b      	orrs	r3, r1
 8000e04:	6013      	str	r3, [r2, #0]

	}
	//Reset biến temp để sử dụng cho các lệnh khác trong hàm
	temp = 0;
 8000e06:	2300      	movs	r3, #0
 8000e08:	617b      	str	r3, [r7, #20]

	//2. configure the speed (Datasheet 8.4.3)
	//Xác định lấy vị trí OSPEEDRx cần điều khiển dựa vào số chân Pin_Number và lưu vào biến temp
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinSpeed << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	799b      	ldrb	r3, [r3, #6]
 8000e0e:	461a      	mov	r2, r3
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	791b      	ldrb	r3, [r3, #4]
 8000e14:	005b      	lsls	r3, r3, #1
 8000e16:	fa02 f303 	lsl.w	r3, r2, r3
 8000e1a:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OSPEEDR &=  ~(0x3 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);	//Clearing bit field
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	689a      	ldr	r2, [r3, #8]
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	791b      	ldrb	r3, [r3, #4]
 8000e26:	4619      	mov	r1, r3
 8000e28:	2303      	movs	r3, #3
 8000e2a:	408b      	lsls	r3, r1
 8000e2c:	43db      	mvns	r3, r3
 8000e2e:	4619      	mov	r1, r3
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	400a      	ands	r2, r1
 8000e36:	609a      	str	r2, [r3, #8]
	pGPIOHandle->pGPIOx->OSPEEDR |= temp;
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	6899      	ldr	r1, [r3, #8]
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	681b      	ldr	r3, [r3, #0]
 8000e42:	697a      	ldr	r2, [r7, #20]
 8000e44:	430a      	orrs	r2, r1
 8000e46:	609a      	str	r2, [r3, #8]
	//=> Lúc này ta đã xác định(cấu hình) đc speed(OSPEEDRx) của GPIO tùy thuộc vào pin_number bạn muốn control
	temp = 0;
 8000e48:	2300      	movs	r3, #0
 8000e4a:	617b      	str	r3, [r7, #20]

	//3. configure the pullup-pulldown settings (Datasheet 8.4.4)
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinPuPdControl << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	79db      	ldrb	r3, [r3, #7]
 8000e50:	461a      	mov	r2, r3
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	791b      	ldrb	r3, [r3, #4]
 8000e56:	005b      	lsls	r3, r3, #1
 8000e58:	fa02 f303 	lsl.w	r3, r2, r3
 8000e5c:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->PUPDR &=  ~(0x3 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	68da      	ldr	r2, [r3, #12]
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	791b      	ldrb	r3, [r3, #4]
 8000e68:	4619      	mov	r1, r3
 8000e6a:	2303      	movs	r3, #3
 8000e6c:	408b      	lsls	r3, r1
 8000e6e:	43db      	mvns	r3, r3
 8000e70:	4619      	mov	r1, r3
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	681b      	ldr	r3, [r3, #0]
 8000e76:	400a      	ands	r2, r1
 8000e78:	60da      	str	r2, [r3, #12]
	pGPIOHandle->pGPIOx->PUPDR |= temp;
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	681b      	ldr	r3, [r3, #0]
 8000e7e:	68d9      	ldr	r1, [r3, #12]
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	697a      	ldr	r2, [r7, #20]
 8000e86:	430a      	orrs	r2, r1
 8000e88:	60da      	str	r2, [r3, #12]
	temp = 0;
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	617b      	str	r3, [r7, #20]

	//4. configure the optype (Datasheet 8.4.2)
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinOPType << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	7a1b      	ldrb	r3, [r3, #8]
 8000e92:	461a      	mov	r2, r3
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	791b      	ldrb	r3, [r3, #4]
 8000e98:	fa02 f303 	lsl.w	r3, r2, r3
 8000e9c:	617b      	str	r3, [r7, #20]
	//Dịch 1 bit vì theo datasheet, mỗi 1 bit quản lý một pin number của GPIO port mode register
	pGPIOHandle->pGPIOx->OTYPER &=  ~(0x1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber); //Clearing bit field
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	681b      	ldr	r3, [r3, #0]
 8000ea2:	685a      	ldr	r2, [r3, #4]
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	791b      	ldrb	r3, [r3, #4]
 8000ea8:	4619      	mov	r1, r3
 8000eaa:	2301      	movs	r3, #1
 8000eac:	408b      	lsls	r3, r1
 8000eae:	43db      	mvns	r3, r3
 8000eb0:	4619      	mov	r1, r3
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	400a      	ands	r2, r1
 8000eb8:	605a      	str	r2, [r3, #4]
	//~(0x1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber); nghĩa là tiến hành đảo trạng thái 1 thành 0
	//vị trí chân Pin_Number
	pGPIOHandle->pGPIOx->OTYPER |= temp;
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	6859      	ldr	r1, [r3, #4]
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	697a      	ldr	r2, [r7, #20]
 8000ec6:	430a      	orrs	r2, r1
 8000ec8:	605a      	str	r2, [r3, #4]
	temp = 0;
 8000eca:	2300      	movs	r3, #0
 8000ecc:	617b      	str	r3, [r7, #20]

	//5. configure the alt functionality
	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_ALTFN)
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	795b      	ldrb	r3, [r3, #5]
 8000ed2:	2b02      	cmp	r3, #2
 8000ed4:	d132      	bne.n	8000f3c <GPIO_Init+0x308>
		//Chế độ này đc thực thi khi và chỉ khi bit MODERx đc thiết lập GPIO_MODE_ALTFN

		uint32_t temp1,temp2;

		//Xác định thanh ghi cần sử dụng là GPIOx_AFRH ->AFR[1] hay GPIOx_AFRL ->AFR[0]
		temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 8;
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	791b      	ldrb	r3, [r3, #4]
 8000eda:	08db      	lsrs	r3, r3, #3
 8000edc:	b2db      	uxtb	r3, r3
 8000ede:	60fb      	str	r3, [r7, #12]

		//Xác định vị trí cụm 4bit cần sử dụng ở vị trí nào trong thanh ghi
		temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 8;
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	791b      	ldrb	r3, [r3, #4]
 8000ee4:	f003 0307 	and.w	r3, r3, #7
 8000ee8:	60bb      	str	r3, [r7, #8]

		//Clearing bit field
		pGPIOHandle->pGPIOx->AFR[temp1] &= ~(0xF << (4* temp2));   //0xF = 1111, đảo 1111->0000 tại vị trí 4*temp2
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	68fa      	ldr	r2, [r7, #12]
 8000ef0:	3208      	adds	r2, #8
 8000ef2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000ef6:	68bb      	ldr	r3, [r7, #8]
 8000ef8:	009b      	lsls	r3, r3, #2
 8000efa:	210f      	movs	r1, #15
 8000efc:	fa01 f303 	lsl.w	r3, r1, r3
 8000f00:	43db      	mvns	r3, r3
 8000f02:	4619      	mov	r1, r3
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	4011      	ands	r1, r2
 8000f0a:	68fa      	ldr	r2, [r7, #12]
 8000f0c:	3208      	adds	r2, #8
 8000f0e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

		//Lưu cấu hình AFR vào trong con trỏ pGPIOHandle
		pGPIOHandle->pGPIOx->AFR[temp1] |= (pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFunMode << (4* temp2));
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	68fa      	ldr	r2, [r7, #12]
 8000f18:	3208      	adds	r2, #8
 8000f1a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	7a5b      	ldrb	r3, [r3, #9]
 8000f22:	4619      	mov	r1, r3
 8000f24:	68bb      	ldr	r3, [r7, #8]
 8000f26:	009b      	lsls	r3, r3, #2
 8000f28:	fa01 f303 	lsl.w	r3, r1, r3
 8000f2c:	4619      	mov	r1, r3
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	4311      	orrs	r1, r2
 8000f34:	68fa      	ldr	r2, [r7, #12]
 8000f36:	3208      	adds	r2, #8
 8000f38:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	}
}
 8000f3c:	bf00      	nop
 8000f3e:	3718      	adds	r7, #24
 8000f40:	46bd      	mov	sp, r7
 8000f42:	bd80      	pop	{r7, pc}
 8000f44:	40023800 	.word	0x40023800
 8000f48:	40013800 	.word	0x40013800
 8000f4c:	40013c00 	.word	0x40013c00

08000f50 <I2C_PeriClockControl>:
 *
 * @Note        - none

 */
void I2C_PeriClockControl(I2C_RegDef_t *pI2Cx, uint8_t EnorDi)
{
 8000f50:	b480      	push	{r7}
 8000f52:	b083      	sub	sp, #12
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	6078      	str	r0, [r7, #4]
 8000f58:	460b      	mov	r3, r1
 8000f5a:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE)
 8000f5c:	78fb      	ldrb	r3, [r7, #3]
 8000f5e:	2b01      	cmp	r3, #1
 8000f60:	d11f      	bne.n	8000fa2 <I2C_PeriClockControl+0x52>
	{
		if(pI2Cx == I2C1)
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	4a11      	ldr	r2, [pc, #68]	; (8000fac <I2C_PeriClockControl+0x5c>)
 8000f66:	4293      	cmp	r3, r2
 8000f68:	d106      	bne.n	8000f78 <I2C_PeriClockControl+0x28>
		{
			I2C1_PCLK_EN();
 8000f6a:	4b11      	ldr	r3, [pc, #68]	; (8000fb0 <I2C_PeriClockControl+0x60>)
 8000f6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f6e:	4a10      	ldr	r2, [pc, #64]	; (8000fb0 <I2C_PeriClockControl+0x60>)
 8000f70:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000f74:	6413      	str	r3, [r2, #64]	; 0x40
	}
	else
	{
		//TODO
	}
}
 8000f76:	e014      	b.n	8000fa2 <I2C_PeriClockControl+0x52>
		else if (pI2Cx == I2C2)
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	4a0e      	ldr	r2, [pc, #56]	; (8000fb4 <I2C_PeriClockControl+0x64>)
 8000f7c:	4293      	cmp	r3, r2
 8000f7e:	d106      	bne.n	8000f8e <I2C_PeriClockControl+0x3e>
			I2C2_PCLK_EN();
 8000f80:	4b0b      	ldr	r3, [pc, #44]	; (8000fb0 <I2C_PeriClockControl+0x60>)
 8000f82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f84:	4a0a      	ldr	r2, [pc, #40]	; (8000fb0 <I2C_PeriClockControl+0x60>)
 8000f86:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000f8a:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000f8c:	e009      	b.n	8000fa2 <I2C_PeriClockControl+0x52>
		else if (pI2Cx == I2C3)
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	4a09      	ldr	r2, [pc, #36]	; (8000fb8 <I2C_PeriClockControl+0x68>)
 8000f92:	4293      	cmp	r3, r2
 8000f94:	d105      	bne.n	8000fa2 <I2C_PeriClockControl+0x52>
			I2C3_PCLK_EN();
 8000f96:	4b06      	ldr	r3, [pc, #24]	; (8000fb0 <I2C_PeriClockControl+0x60>)
 8000f98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f9a:	4a05      	ldr	r2, [pc, #20]	; (8000fb0 <I2C_PeriClockControl+0x60>)
 8000f9c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000fa0:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000fa2:	bf00      	nop
 8000fa4:	370c      	adds	r7, #12
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	bc80      	pop	{r7}
 8000faa:	4770      	bx	lr
 8000fac:	40005400 	.word	0x40005400
 8000fb0:	40023800 	.word	0x40023800
 8000fb4:	40005800 	.word	0x40005800
 8000fb8:	40005c00 	.word	0x40005c00

08000fbc <I2C_Init>:
 *
 * @Note        - none

 */
void I2C_Init(I2C_Handle_t *pI2CHandle)
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	b084      	sub	sp, #16
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	6078      	str	r0, [r7, #4]
	uint32_t tempreg = 0;		//biến tạm 32 bit temp register
 8000fc4:	2300      	movs	r3, #0
 8000fc6:	60fb      	str	r3, [r7, #12]

	//Enable the Clock for the I2Cx peripheral - Kích hoạt xung clock cho I2Cx
	I2C_PeriClockControl(pI2CHandle->pI2Cx, ENABLE);
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	2101      	movs	r1, #1
 8000fce:	4618      	mov	r0, r3
 8000fd0:	f7ff ffbe 	bl	8000f50 <I2C_PeriClockControl>

	//Đọc và Lưu giá trị của I2C_AckControl(sẽ đc set khi init) vào vị trí bit thứ 10 biến tạm tempreg
	tempreg |= pI2CHandle->I2C_Config.I2C_AckControl << 10;				//Ack control bit
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	7a5b      	ldrb	r3, [r3, #9]
 8000fd8:	029b      	lsls	r3, r3, #10
 8000fda:	461a      	mov	r2, r3
 8000fdc:	68fb      	ldr	r3, [r7, #12]
 8000fde:	4313      	orrs	r3, r2
 8000fe0:	60fb      	str	r3, [r7, #12]
	//Kích hoạt hoặc vô hiệu hóa theo yêu cầu của User

	//Thiết lập giá trị bit thứ 10 của thanh ghi CR1 với giá trị biến tempreg
	pI2CHandle->pI2Cx->CR1 = tempreg;
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	68fa      	ldr	r2, [r7, #12]
 8000fe8:	601a      	str	r2, [r3, #0]

	/* Cấu hình bit field FREQ của CR2 register */
	tempreg = 0;
 8000fea:	2300      	movs	r3, #0
 8000fec:	60fb      	str	r3, [r7, #12]
	tempreg |= RCC_GetPCLK1Value() / 1000000U;
 8000fee:	f000 fa55 	bl	800149c <RCC_GetPCLK1Value>
 8000ff2:	4603      	mov	r3, r0
 8000ff4:	4a49      	ldr	r2, [pc, #292]	; (800111c <I2C_Init+0x160>)
 8000ff6:	fba2 2303 	umull	r2, r3, r2, r3
 8000ffa:	0c9b      	lsrs	r3, r3, #18
 8000ffc:	68fa      	ldr	r2, [r7, #12]
 8000ffe:	4313      	orrs	r3, r2
 8001000:	60fb      	str	r3, [r7, #12]
	//Giải thích: vì giá trị trả về là 16MHz nên ta chia 1MHz để lấy giá trị 16

	pI2CHandle->pI2Cx->CR2 = (tempreg & 0x3F);  //0x3F = 0011 1111
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	68fa      	ldr	r2, [r7, #12]
 8001008:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 800100c:	605a      	str	r2, [r3, #4]
	//Giá trị 16 của tempreg khi biên dịch sẽ đc trình biên dịch tách thành mã nhị phân
	//sau đó & với 0x3F vì bit field FREQ sử dụng 6 bit đầu của CR2 Register

	/* Lập trình định dạng địa chỉ và địa chỉ của thiết bị , OAR1 register */
	tempreg = 0;
 800100e:	2300      	movs	r3, #0
 8001010:	60fb      	str	r3, [r7, #12]
	tempreg |= pI2CHandle->I2C_Config.I2C_DeviceAddress << 1;	// ADD[7:1] : lấy giá trị từ bit thứ 2
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	7a1b      	ldrb	r3, [r3, #8]
 8001016:	005b      	lsls	r3, r3, #1
 8001018:	461a      	mov	r2, r3
 800101a:	68fb      	ldr	r3, [r7, #12]
 800101c:	4313      	orrs	r3, r2
 800101e:	60fb      	str	r3, [r7, #12]
	tempreg |= (1 << 14);								//Lệnh bắt buộc bit thứ 14 luôn là 1 khi cấu hình
 8001020:	68fb      	ldr	r3, [r7, #12]
 8001022:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001026:	60fb      	str	r3, [r7, #12]
	pI2CHandle->pI2Cx->OAR1 = tempreg;					//Đưa vào cấu hình thanh ghi OAR1 bằng giá trị tempreg
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	68fa      	ldr	r2, [r7, #12]
 800102e:	609a      	str	r2, [r3, #8]

	/* CCR Calculations, Tính toán tần số cho Clock control register */
	uint16_t ccr_value = 0;					//giá trị tần số tạm
 8001030:	2300      	movs	r3, #0
 8001032:	817b      	strh	r3, [r7, #10]
	tempreg = 0;
 8001034:	2300      	movs	r3, #0
 8001036:	60fb      	str	r3, [r7, #12]

	//Kiểm tra speed đc cài đặt đầu vào ở tần số nào từ đó suy ra chế độ đang sử dụng
	if(pI2CHandle->I2C_Config.I2C_SCLSpeed <= I2C_SCL_SPEED_SM)
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	685b      	ldr	r3, [r3, #4]
 800103c:	4a38      	ldr	r2, [pc, #224]	; (8001120 <I2C_Init+0x164>)
 800103e:	4293      	cmp	r3, r2
 8001040:	d80f      	bhi.n	8001062 <I2C_Init+0xa6>
	{
		//Nếu ở Standard Mode
		ccr_value = (RCC_GetPCLK1Value() / (2 * pI2CHandle->I2C_Config.I2C_SCLSpeed));
 8001042:	f000 fa2b 	bl	800149c <RCC_GetPCLK1Value>
 8001046:	4602      	mov	r2, r0
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	685b      	ldr	r3, [r3, #4]
 800104c:	005b      	lsls	r3, r3, #1
 800104e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001052:	817b      	strh	r3, [r7, #10]
		tempreg |= ccr_value & 0xFFF;	//0xFFF: CCR[11:0] của CCR Register (If Standard Mode)
 8001054:	897b      	ldrh	r3, [r7, #10]
 8001056:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800105a:	68fa      	ldr	r2, [r7, #12]
 800105c:	4313      	orrs	r3, r2
 800105e:	60fb      	str	r3, [r7, #12]
 8001060:	e02d      	b.n	80010be <I2C_Init+0x102>
	}
	else
	{
		//Nếu ở Fast Mode
		tempreg |= ( 1 << 15);	//Đưa bit field F/S[15] lên 1 của CCR Register, kích hoạt chế độ Fast Mode
 8001062:	68fb      	ldr	r3, [r7, #12]
 8001064:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001068:	60fb      	str	r3, [r7, #12]
		tempreg |= (pI2CHandle->I2C_Config.I2C_FmDutyCycle << 14); //Set value Duty đã đc user input khi init
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	7a9b      	ldrb	r3, [r3, #10]
 800106e:	039b      	lsls	r3, r3, #14
 8001070:	461a      	mov	r2, r3
 8001072:	68fb      	ldr	r3, [r7, #12]
 8001074:	4313      	orrs	r3, r2
 8001076:	60fb      	str	r3, [r7, #12]
		//vào bit field DUTY[14]

		//Kiểm tra DUTY đang ở trạng thái nào để áp dụng công thức
		if(pI2CHandle->I2C_Config.I2C_FmDutyCycle == I2C_FM_DUTY_2)
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	7a9b      	ldrb	r3, [r3, #10]
 800107c:	2b00      	cmp	r3, #0
 800107e:	d10b      	bne.n	8001098 <I2C_Init+0xdc>
		{
			//Nếu Duty = 0
			ccr_value = (RCC_GetPCLK1Value() / (3 * pI2CHandle->I2C_Config.I2C_SCLSpeed));
 8001080:	f000 fa0c 	bl	800149c <RCC_GetPCLK1Value>
 8001084:	4601      	mov	r1, r0
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	685a      	ldr	r2, [r3, #4]
 800108a:	4613      	mov	r3, r2
 800108c:	005b      	lsls	r3, r3, #1
 800108e:	4413      	add	r3, r2
 8001090:	fbb1 f3f3 	udiv	r3, r1, r3
 8001094:	817b      	strh	r3, [r7, #10]
 8001096:	e00c      	b.n	80010b2 <I2C_Init+0xf6>
		}
		else
		{
			//Nếu Duty = 1
			ccr_value = (RCC_GetPCLK1Value() / (25 * pI2CHandle->I2C_Config.I2C_SCLSpeed));
 8001098:	f000 fa00 	bl	800149c <RCC_GetPCLK1Value>
 800109c:	4601      	mov	r1, r0
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	685a      	ldr	r2, [r3, #4]
 80010a2:	4613      	mov	r3, r2
 80010a4:	009b      	lsls	r3, r3, #2
 80010a6:	4413      	add	r3, r2
 80010a8:	009a      	lsls	r2, r3, #2
 80010aa:	4413      	add	r3, r2
 80010ac:	fbb1 f3f3 	udiv	r3, r1, r3
 80010b0:	817b      	strh	r3, [r7, #10]
		}

		tempreg |= ccr_value & 0xFFF;	//0xFFF: CCR[11:0] của CCR Register (If Fast Mode)
 80010b2:	897b      	ldrh	r3, [r7, #10]
 80010b4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80010b8:	68fa      	ldr	r2, [r7, #12]
 80010ba:	4313      	orrs	r3, r2
 80010bc:	60fb      	str	r3, [r7, #12]
	}
	pI2CHandle->pI2Cx->CCR |= tempreg;		//Cấu hình thanh ghi CCR cho processor
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	69d9      	ldr	r1, [r3, #28]
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	68fa      	ldr	r2, [r7, #12]
 80010ca:	430a      	orrs	r2, r1
 80010cc:	61da      	str	r2, [r3, #28]

	/* TRISE Configuration TRISE register (I2C_TRISE) */
	//Kiểm tra speed đc cài đặt đầu vào ở tần số nào từ đó suy ra chế độ đang sử dụng
	if(pI2CHandle->I2C_Config.I2C_SCLSpeed <= I2C_SCL_SPEED_SM)
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	685b      	ldr	r3, [r3, #4]
 80010d2:	4a13      	ldr	r2, [pc, #76]	; (8001120 <I2C_Init+0x164>)
 80010d4:	4293      	cmp	r3, r2
 80010d6:	d809      	bhi.n	80010ec <I2C_Init+0x130>
	{
		//Nếu ở Standard Mode
		tempreg = (RCC_GetPCLK1Value() / 1000000U) + 1;	//công thức datasheet
 80010d8:	f000 f9e0 	bl	800149c <RCC_GetPCLK1Value>
 80010dc:	4603      	mov	r3, r0
 80010de:	4a0f      	ldr	r2, [pc, #60]	; (800111c <I2C_Init+0x160>)
 80010e0:	fba2 2303 	umull	r2, r3, r2, r3
 80010e4:	0c9b      	lsrs	r3, r3, #18
 80010e6:	3301      	adds	r3, #1
 80010e8:	60fb      	str	r3, [r7, #12]
 80010ea:	e00d      	b.n	8001108 <I2C_Init+0x14c>
	}
	else
	{
		//Nếu ở Fast Mode
		tempreg = ((RCC_GetPCLK1Value() * 300) / 1000000000U) + 1; //công thức datasheet
 80010ec:	f000 f9d6 	bl	800149c <RCC_GetPCLK1Value>
 80010f0:	4603      	mov	r3, r0
 80010f2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80010f6:	fb02 f303 	mul.w	r3, r2, r3
 80010fa:	0a5b      	lsrs	r3, r3, #9
 80010fc:	4a09      	ldr	r2, [pc, #36]	; (8001124 <I2C_Init+0x168>)
 80010fe:	fba2 2303 	umull	r2, r3, r2, r3
 8001102:	09db      	lsrs	r3, r3, #7
 8001104:	3301      	adds	r3, #1
 8001106:	60fb      	str	r3, [r7, #12]
	}
	//0x3F: 0011 1111, TRISE[5:0] của TRISE Register
	pI2CHandle->pI2Cx->TRISE = (tempreg & 0x3F);		//Cấu hình thanh ghi TRISE cho processor
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	68fa      	ldr	r2, [r7, #12]
 800110e:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8001112:	621a      	str	r2, [r3, #32]
}
 8001114:	bf00      	nop
 8001116:	3710      	adds	r7, #16
 8001118:	46bd      	mov	sp, r7
 800111a:	bd80      	pop	{r7, pc}
 800111c:	431bde83 	.word	0x431bde83
 8001120:	000186a0 	.word	0x000186a0
 8001124:	00044b83 	.word	0x00044b83

08001128 <I2C_MasterSendData>:
 * @return      - none
 *
 * @Note        - none
 */
void I2C_MasterSendData(I2C_Handle_t *pI2CHandle, uint8_t *pTxbuffer, uint32_t Len,uint8_t SlaveAddr,uint8_t Sr)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	b084      	sub	sp, #16
 800112c:	af00      	add	r7, sp, #0
 800112e:	60f8      	str	r0, [r7, #12]
 8001130:	60b9      	str	r1, [r7, #8]
 8001132:	607a      	str	r2, [r7, #4]
 8001134:	70fb      	strb	r3, [r7, #3]
	//1. Generate the Start Condition - Tạo điều kiện START
	I2C_GenerateStartCondition(pI2CHandle->pI2Cx);
 8001136:	68fb      	ldr	r3, [r7, #12]
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	4618      	mov	r0, r3
 800113c:	f000 f8e5 	bl	800130a <I2C_GenerateStartCondition>

	//2. Confirm that START generation is complete by checking the SB flag in the SR1
	//Note: Until SB is cleared SCL will be stretched (pulled to LOW)
	//2. Xác nhận rằng quá trình tạo START đã hoàn tất bằng cách kiểm tra cờ SB trong SR1
	//Lưu ý: Cho đến khi SB bị xóa SCL sẽ bị kéo gián đoạn (kéo về mức LOW)
	while(! I2C_GetFlagStatus(pI2CHandle->pI2Cx, I2C_FLAG_SB));
 8001140:	bf00      	nop
 8001142:	68fb      	ldr	r3, [r7, #12]
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	2101      	movs	r1, #1
 8001148:	4618      	mov	r0, r3
 800114a:	f000 f8ed 	bl	8001328 <I2C_GetFlagStatus>
 800114e:	4603      	mov	r3, r0
 8001150:	2b00      	cmp	r3, #0
 8001152:	d0f6      	beq.n	8001142 <I2C_MasterSendData+0x1a>

	//3. Send the address of the Slave with r/nw bit set to w(0) (total 8 bits)
	//3. Gửi tới địa chỉ của Slave với bit r/nw được đặt thành w(0) (tổng cộng 8 bit)
	I2C_ExecuteAddressPhaseWrite(pI2CHandle->pI2Cx, SlaveAddr);
 8001154:	68fb      	ldr	r3, [r7, #12]
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	78fa      	ldrb	r2, [r7, #3]
 800115a:	4611      	mov	r1, r2
 800115c:	4618      	mov	r0, r3
 800115e:	f000 f8f6 	bl	800134e <I2C_ExecuteAddressPhaseWrite>

	//4. Confirm that address phase is completed by checking the ADDR flag in the SR1
	//4. Xác nhận rằng "address phase" đã hoàn tất bằng cách kiểm tra cờ ADDR trong SR1
	while(! I2C_GetFlagStatus(pI2CHandle->pI2Cx, I2C_FLAG_ADDR));
 8001162:	bf00      	nop
 8001164:	68fb      	ldr	r3, [r7, #12]
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	2102      	movs	r1, #2
 800116a:	4618      	mov	r0, r3
 800116c:	f000 f8dc 	bl	8001328 <I2C_GetFlagStatus>
 8001170:	4603      	mov	r3, r0
 8001172:	2b00      	cmp	r3, #0
 8001174:	d0f6      	beq.n	8001164 <I2C_MasterSendData+0x3c>

	//5. Clear the ADDR flag according to its software sequence
	//Note: Until ADDR is cleared SCL will be stretched (pulled to LOW)
	//5. Xóa cờ ADDR theo trình tự phần mềm của nó
	//Lưu ý: Cho đến khi xóa bit field ADDR, SCL sẽ bị kéo dài gián đoạn (kéo về Low)
	I2C_ClearADDRFlag(pI2CHandle);
 8001176:	68f8      	ldr	r0, [r7, #12]
 8001178:	f000 f913 	bl	80013a2 <I2C_ClearADDRFlag>

	//6. Send the Data until Len becomes 0 - Gửi data cho đến khi Len==0
	while(Len > 0)				//Kiểm tra độ dài của Data(Đã gửi hết data trong pTxBuffer hay chưa)
 800117c:	e014      	b.n	80011a8 <I2C_MasterSendData+0x80>
	{
		//Kiểm tra cờ Txe đã đc set, cho phép đc gửi data đi
		while(! I2C_GetFlagStatus(pI2CHandle->pI2Cx, I2C_FLAG_TXE));    //Wait till TxE is set
 800117e:	bf00      	nop
 8001180:	68fb      	ldr	r3, [r7, #12]
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	2180      	movs	r1, #128	; 0x80
 8001186:	4618      	mov	r0, r3
 8001188:	f000 f8ce 	bl	8001328 <I2C_GetFlagStatus>
 800118c:	4603      	mov	r3, r0
 800118e:	2b00      	cmp	r3, #0
 8001190:	d0f6      	beq.n	8001180 <I2C_MasterSendData+0x58>

		//Đưa nội dung data và DR Register
		pI2CHandle->pI2Cx->DR = *pTxbuffer; 		//Cấu hình thanh ghi DR cho processor(Data in DR)
 8001192:	68bb      	ldr	r3, [r7, #8]
 8001194:	781a      	ldrb	r2, [r3, #0]
 8001196:	68fb      	ldr	r3, [r7, #12]
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	611a      	str	r2, [r3, #16]
		pTxbuffer++;								//Mỗi lần gửi 8bit data. tăng đến ký tự data tiếp theo
 800119c:	68bb      	ldr	r3, [r7, #8]
 800119e:	3301      	adds	r3, #1
 80011a0:	60bb      	str	r3, [r7, #8]
		Len--;										//Giảm 1 đơn vị data(đã truyền 1 ký tự)
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	3b01      	subs	r3, #1
 80011a6:	607b      	str	r3, [r7, #4]
	while(Len > 0)				//Kiểm tra độ dài của Data(Đã gửi hết data trong pTxBuffer hay chưa)
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d1e7      	bne.n	800117e <I2C_MasterSendData+0x56>
	//Note: TXE=1, BTF=1, means that both SR and DR are empty and next transmission should begin
	//when BTF=1 SCL will be stretched(pulled to LOW)
	//7. Khi Len trở về 0, hãy đợi TXE=1 và BTF=1 trước khi tạo điều kiện STOP
	//Lưu ý: TXE=1, BTF=1, có nghĩa là cả SR và DR đều trống và quá trình truyền tiếp theo sẽ bắt đầu
	//khi BTF=1 SCL sẽ bị kéo giãn gián đoạn (kéo xuống THẤP)
	while(! I2C_GetFlagStatus(pI2CHandle->pI2Cx, I2C_FLAG_TXE));
 80011ae:	bf00      	nop
 80011b0:	68fb      	ldr	r3, [r7, #12]
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	2180      	movs	r1, #128	; 0x80
 80011b6:	4618      	mov	r0, r3
 80011b8:	f000 f8b6 	bl	8001328 <I2C_GetFlagStatus>
 80011bc:	4603      	mov	r3, r0
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d0f6      	beq.n	80011b0 <I2C_MasterSendData+0x88>
	while(! I2C_GetFlagStatus(pI2CHandle->pI2Cx, I2C_FLAG_BTF));
 80011c2:	bf00      	nop
 80011c4:	68fb      	ldr	r3, [r7, #12]
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	2104      	movs	r1, #4
 80011ca:	4618      	mov	r0, r3
 80011cc:	f000 f8ac 	bl	8001328 <I2C_GetFlagStatus>
 80011d0:	4603      	mov	r3, r0
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d0f6      	beq.n	80011c4 <I2C_MasterSendData+0x9c>

	//8. Generate STOP condition and master need not to wait for the completion of STOP condition
	//Note: Generating STOP, automatically clears the BTF
	//8. Tạo điều kiện STOP và Master không cần đợi hoàn thành điều kiện STOP
	//Lưu ý: Tạo STOP, tự động xóa BTF
	if(Sr == I2C_DISABLE_SR)
 80011d6:	7e3b      	ldrb	r3, [r7, #24]
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d104      	bne.n	80011e6 <I2C_MasterSendData+0xbe>
		I2C_GenerateStopCondition(pI2CHandle->pI2Cx);
 80011dc:	68fb      	ldr	r3, [r7, #12]
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	4618      	mov	r0, r3
 80011e2:	f000 f915 	bl	8001410 <I2C_GenerateStopCondition>
}
 80011e6:	bf00      	nop
 80011e8:	3710      	adds	r7, #16
 80011ea:	46bd      	mov	sp, r7
 80011ec:	bd80      	pop	{r7, pc}

080011ee <I2C_MasterReceiveData>:
 * @return      - none
 * @Note        - pRxbuffer: vì là con trỏ nên khi nhận đc data từ Slave sẽ nhúng trực tiếp vào
 * 				địa chỉ của con trỏ nên ko cần thiết lập biến trả về
 */
void I2C_MasterReceiveData(I2C_Handle_t *pI2CHandle, uint8_t *pRxbuffer, uint32_t Len,uint8_t SlaveAddr,uint8_t Sr)
{
 80011ee:	b580      	push	{r7, lr}
 80011f0:	b086      	sub	sp, #24
 80011f2:	af00      	add	r7, sp, #0
 80011f4:	60f8      	str	r0, [r7, #12]
 80011f6:	60b9      	str	r1, [r7, #8]
 80011f8:	607a      	str	r2, [r7, #4]
 80011fa:	70fb      	strb	r3, [r7, #3]
	//1. Generate the START Condition
	I2C_GenerateStartCondition(pI2CHandle->pI2Cx);
 80011fc:	68fb      	ldr	r3, [r7, #12]
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	4618      	mov	r0, r3
 8001202:	f000 f882 	bl	800130a <I2C_GenerateStartCondition>

	//2. Confirm the start generation is completed by the checking the SB flag in the SR1
	//Note: Until SB is cleared SCL will be stretched (pulled to LOW)
	//Xác nhận việc tạo bắt đầu được hoàn thành bằng cách kiểm tra cờ SB trong SR1
	//Lưu ý: Cho đến khi SB bị xóa SCL sẽ bị kéo giãn (kéo về THẤP)
	while(! I2C_GetFlagStatus(pI2CHandle->pI2Cx, I2C_FLAG_SB));
 8001206:	bf00      	nop
 8001208:	68fb      	ldr	r3, [r7, #12]
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	2101      	movs	r1, #1
 800120e:	4618      	mov	r0, r3
 8001210:	f000 f88a 	bl	8001328 <I2C_GetFlagStatus>
 8001214:	4603      	mov	r3, r0
 8001216:	2b00      	cmp	r3, #0
 8001218:	d0f6      	beq.n	8001208 <I2C_MasterReceiveData+0x1a>

	//3. Send the address of the Slave with r/nw bit set to R(1) (total 8 bits)
	//Gửi địa chỉ của Slave(gửi data đến Master) với bit r/nw được đặt thành R(1) (tổng cộng 8 bit)
	I2C_ExecuteAddressPhaseRead(pI2CHandle->pI2Cx, SlaveAddr);
 800121a:	68fb      	ldr	r3, [r7, #12]
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	78fa      	ldrb	r2, [r7, #3]
 8001220:	4611      	mov	r1, r2
 8001222:	4618      	mov	r0, r3
 8001224:	f000 f8a8 	bl	8001378 <I2C_ExecuteAddressPhaseRead>

	//4. Wait until address phase is completed by checking the ADDR flag in the SR1
	//Đợi cho đến khi hoàn thành giai đoạn địa chỉ bằng cách kiểm tra cờ ADDR trong SR1
	while(! I2C_GetFlagStatus(pI2CHandle->pI2Cx, I2C_FLAG_ADDR));
 8001228:	bf00      	nop
 800122a:	68fb      	ldr	r3, [r7, #12]
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	2102      	movs	r1, #2
 8001230:	4618      	mov	r0, r3
 8001232:	f000 f879 	bl	8001328 <I2C_GetFlagStatus>
 8001236:	4603      	mov	r3, r0
 8001238:	2b00      	cmp	r3, #0
 800123a:	d0f6      	beq.n	800122a <I2C_MasterReceiveData+0x3c>

	//TH1: Procedure to read only 1 byte from Slave(Slave gửi đến Master 1byte data)
	if(Len == 1)
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	2b01      	cmp	r3, #1
 8001240:	d121      	bne.n	8001286 <I2C_MasterReceiveData+0x98>
	{
		//Disable Acking, thông báo cho Master ko còn data tiếp theo sau khi đã nhận 1 byte data
		I2C_ManageAcking(pI2CHandle->pI2Cx,I2C_ACK_DISABLE);
 8001242:	68fb      	ldr	r3, [r7, #12]
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	2100      	movs	r1, #0
 8001248:	4618      	mov	r0, r3
 800124a:	f000 f8f0 	bl	800142e <I2C_ManageAcking>

		//Clear the ADDR flag
		I2C_ClearADDRFlag(pI2CHandle);
 800124e:	68f8      	ldr	r0, [r7, #12]
 8001250:	f000 f8a7 	bl	80013a2 <I2C_ClearADDRFlag>

		//Wait until bit field RxNE become 1
		while(! I2C_GetFlagStatus(pI2CHandle->pI2Cx,I2C_FLAG_RXNE));
 8001254:	bf00      	nop
 8001256:	68fb      	ldr	r3, [r7, #12]
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	2140      	movs	r1, #64	; 0x40
 800125c:	4618      	mov	r0, r3
 800125e:	f000 f863 	bl	8001328 <I2C_GetFlagStatus>
 8001262:	4603      	mov	r3, r0
 8001264:	2b00      	cmp	r3, #0
 8001266:	d0f6      	beq.n	8001256 <I2C_MasterReceiveData+0x68>

		//Generate STOP condition
		if(Sr == I2C_DISABLE_SR)
 8001268:	f897 3020 	ldrb.w	r3, [r7, #32]
 800126c:	2b00      	cmp	r3, #0
 800126e:	d104      	bne.n	800127a <I2C_MasterReceiveData+0x8c>
			I2C_GenerateStopCondition(pI2CHandle->pI2Cx);
 8001270:	68fb      	ldr	r3, [r7, #12]
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	4618      	mov	r0, r3
 8001276:	f000 f8cb 	bl	8001410 <I2C_GenerateStopCondition>

		//Read data in to Buffer from DR Register
		*pRxbuffer = pI2CHandle->pI2Cx->DR;			//nhúng trực tiếp vào địa chỉ của param đưa vào
 800127a:	68fb      	ldr	r3, [r7, #12]
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	691b      	ldr	r3, [r3, #16]
 8001280:	b2da      	uxtb	r2, r3
 8001282:	68bb      	ldr	r3, [r7, #8]
 8001284:	701a      	strb	r2, [r3, #0]
	}

	//TH2: Procedure to read n byte from Slave(Slave gửi đến Master nbyte data)
	if(Len > 1)
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	2b01      	cmp	r3, #1
 800128a:	d930      	bls.n	80012ee <I2C_MasterReceiveData+0x100>
	{
		//Clear the ADDR flag
		I2C_ClearADDRFlag(pI2CHandle);
 800128c:	68f8      	ldr	r0, [r7, #12]
 800128e:	f000 f888 	bl	80013a2 <I2C_ClearADDRFlag>

		//Read the data until(cho tới khi) Len becomes zero
		for(uint32_t i = Len; i > 0 ; i-- )
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	617b      	str	r3, [r7, #20]
 8001296:	e027      	b.n	80012e8 <I2C_MasterReceiveData+0xfa>
		{
			//Wait until RxNE becomes 1
			while(! I2C_GetFlagStatus(pI2CHandle->pI2Cx, I2C_FLAG_RXNE));
 8001298:	bf00      	nop
 800129a:	68fb      	ldr	r3, [r7, #12]
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	2140      	movs	r1, #64	; 0x40
 80012a0:	4618      	mov	r0, r3
 80012a2:	f000 f841 	bl	8001328 <I2C_GetFlagStatus>
 80012a6:	4603      	mov	r3, r0
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d0f6      	beq.n	800129a <I2C_MasterReceiveData+0xac>

			//If last 2 byte are remaining
			if(i == 2)
 80012ac:	697b      	ldr	r3, [r7, #20]
 80012ae:	2b02      	cmp	r3, #2
 80012b0:	d10e      	bne.n	80012d0 <I2C_MasterReceiveData+0xe2>
			{
				//Clear the ack bit
				I2C_ManageAcking(pI2CHandle->pI2Cx, I2C_ACK_DISABLE);
 80012b2:	68fb      	ldr	r3, [r7, #12]
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	2100      	movs	r1, #0
 80012b8:	4618      	mov	r0, r3
 80012ba:	f000 f8b8 	bl	800142e <I2C_ManageAcking>

				//Generate STOP Condition
				if(Sr == I2C_DISABLE_SR)
 80012be:	f897 3020 	ldrb.w	r3, [r7, #32]
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d104      	bne.n	80012d0 <I2C_MasterReceiveData+0xe2>
					I2C_GenerateStopCondition(pI2CHandle->pI2Cx);
 80012c6:	68fb      	ldr	r3, [r7, #12]
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	4618      	mov	r0, r3
 80012cc:	f000 f8a0 	bl	8001410 <I2C_GenerateStopCondition>
			}

			//Read the Data from Data Register in to Buffer
			*pRxbuffer = pI2CHandle->pI2Cx->DR;
 80012d0:	68fb      	ldr	r3, [r7, #12]
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	691b      	ldr	r3, [r3, #16]
 80012d6:	b2da      	uxtb	r2, r3
 80012d8:	68bb      	ldr	r3, [r7, #8]
 80012da:	701a      	strb	r2, [r3, #0]

			//Increment(tăng) the Buffer address, đi đến byte data kế tiếp
			pRxbuffer++;
 80012dc:	68bb      	ldr	r3, [r7, #8]
 80012de:	3301      	adds	r3, #1
 80012e0:	60bb      	str	r3, [r7, #8]
		for(uint32_t i = Len; i > 0 ; i-- )
 80012e2:	697b      	ldr	r3, [r7, #20]
 80012e4:	3b01      	subs	r3, #1
 80012e6:	617b      	str	r3, [r7, #20]
 80012e8:	697b      	ldr	r3, [r7, #20]
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d1d4      	bne.n	8001298 <I2C_MasterReceiveData+0xaa>
		}
	}

	//Re-enable ACKing, nếu user cho phép Slave->Master
	if(pI2CHandle->I2C_Config.I2C_AckControl == I2C_ACK_ENABLE)
 80012ee:	68fb      	ldr	r3, [r7, #12]
 80012f0:	7a5b      	ldrb	r3, [r3, #9]
 80012f2:	2b01      	cmp	r3, #1
 80012f4:	d105      	bne.n	8001302 <I2C_MasterReceiveData+0x114>
	{
		//thông báo cho phép Master tiếp tục nhận data từ Slave ở lần kết nối sau
		I2C_ManageAcking(pI2CHandle->pI2Cx, I2C_ACK_ENABLE);
 80012f6:	68fb      	ldr	r3, [r7, #12]
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	2101      	movs	r1, #1
 80012fc:	4618      	mov	r0, r3
 80012fe:	f000 f896 	bl	800142e <I2C_ManageAcking>
	}
}
 8001302:	bf00      	nop
 8001304:	3718      	adds	r7, #24
 8001306:	46bd      	mov	sp, r7
 8001308:	bd80      	pop	{r7, pc}

0800130a <I2C_GenerateStartCondition>:
 * @return      - none
 *
 * @Note        - I2C_CR1, bit field START[8]
 */
static void I2C_GenerateStartCondition(I2C_RegDef_t *pI2Cx)
{
 800130a:	b480      	push	{r7}
 800130c:	b083      	sub	sp, #12
 800130e:	af00      	add	r7, sp, #0
 8001310:	6078      	str	r0, [r7, #4]
	//Set bit field START[8] lên high
	pI2Cx->CR1 |= (1 << I2C_CR1_START);		//Cấu hình thanh ghi CR1 cho processor
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	601a      	str	r2, [r3, #0]
}
 800131e:	bf00      	nop
 8001320:	370c      	adds	r7, #12
 8001322:	46bd      	mov	sp, r7
 8001324:	bc80      	pop	{r7}
 8001326:	4770      	bx	lr

08001328 <I2C_GetFlagStatus>:
 * @return      - Trạng thái cờ_flag
 *
 * @Note        - none
 */
uint8_t I2C_GetFlagStatus(I2C_RegDef_t *pI2Cx, uint32_t FlagName)
{
 8001328:	b480      	push	{r7}
 800132a:	b083      	sub	sp, #12
 800132c:	af00      	add	r7, sp, #0
 800132e:	6078      	str	r0, [r7, #4]
 8001330:	6039      	str	r1, [r7, #0]
	if(pI2Cx->SR1 & FlagName)  //Kiểm tra value của pI2Cx->SR1 and với FlagName
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	695a      	ldr	r2, [r3, #20]
 8001336:	683b      	ldr	r3, [r7, #0]
 8001338:	4013      	ands	r3, r2
 800133a:	2b00      	cmp	r3, #0
 800133c:	d001      	beq.n	8001342 <I2C_GetFlagStatus+0x1a>
	{
		//Khi pI2Cx->SR1 & FlagName == 1 thì thực hiện if
		return FLAG_SET;		//Có cờ flag tại vị trí đó đang hoạt động 1
 800133e:	2301      	movs	r3, #1
 8001340:	e000      	b.n	8001344 <I2C_GetFlagStatus+0x1c>
	}
	return FLAG_RESET;		//Nếu ko có cờ flag thì trả về 0
 8001342:	2300      	movs	r3, #0
}
 8001344:	4618      	mov	r0, r3
 8001346:	370c      	adds	r7, #12
 8001348:	46bd      	mov	sp, r7
 800134a:	bc80      	pop	{r7}
 800134c:	4770      	bx	lr

0800134e <I2C_ExecuteAddressPhaseWrite>:
 * @return      - none
 *
 * @Note        - SlaveAddr : sẽ đc cài đặt ở phía phần cứng làm Slave
 */
static void I2C_ExecuteAddressPhaseWrite(I2C_RegDef_t *pI2Cx,uint8_t SlaveAddr)
{
 800134e:	b480      	push	{r7}
 8001350:	b083      	sub	sp, #12
 8001352:	af00      	add	r7, sp, #0
 8001354:	6078      	str	r0, [r7, #4]
 8001356:	460b      	mov	r3, r1
 8001358:	70fb      	strb	r3, [r7, #3]
	//Tiến hành dịch biến SlaveAddr lên 1 bit vì bit0 sẽ chứa giá trị thực hiện việc read hoặc write,
	SlaveAddr = SlaveAddr << 1;			//và bit1->7chứa data địa chỉ(ko làm mất data addr khi set bit0)
 800135a:	78fb      	ldrb	r3, [r7, #3]
 800135c:	005b      	lsls	r3, r3, #1
 800135e:	70fb      	strb	r3, [r7, #3]
	SlaveAddr &= ~(1); 					//thiết lập bit0 = 0 = write(gửi data từ master->slave)
 8001360:	78fb      	ldrb	r3, [r7, #3]
 8001362:	f023 0301 	bic.w	r3, r3, #1
 8001366:	70fb      	strb	r3, [r7, #3]
										//SlaveAddr: Slave Addrress + r/nw bit[0]=0

	pI2Cx->DR = SlaveAddr;				//Cấu hình thanh ghi DR cho processor DR[7:0]
 8001368:	78fa      	ldrb	r2, [r7, #3]
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	611a      	str	r2, [r3, #16]
}
 800136e:	bf00      	nop
 8001370:	370c      	adds	r7, #12
 8001372:	46bd      	mov	sp, r7
 8001374:	bc80      	pop	{r7}
 8001376:	4770      	bx	lr

08001378 <I2C_ExecuteAddressPhaseRead>:
 * @return      - none
 *
 * @Note        - SlaveAddr : sẽ đc cài đặt ở phía phần cứng làm Slave
 */
static void I2C_ExecuteAddressPhaseRead(I2C_RegDef_t *pI2Cx,uint8_t SlaveAddr)
{
 8001378:	b480      	push	{r7}
 800137a:	b083      	sub	sp, #12
 800137c:	af00      	add	r7, sp, #0
 800137e:	6078      	str	r0, [r7, #4]
 8001380:	460b      	mov	r3, r1
 8001382:	70fb      	strb	r3, [r7, #3]
	//Tiến hành dịch biến SlaveAddr lên 1 bit vì bit0 sẽ chứa giá trị thực hiện việc read hoặc write,
	SlaveAddr = SlaveAddr << 1;			//và bit1->7chứa data địa chỉ(ko làm mất data addr khi set bit0)
 8001384:	78fb      	ldrb	r3, [r7, #3]
 8001386:	005b      	lsls	r3, r3, #1
 8001388:	70fb      	strb	r3, [r7, #3]
	SlaveAddr |= 1; 					//thiết lập bit0 = 1 = read(gửi data từ slave->master)
 800138a:	78fb      	ldrb	r3, [r7, #3]
 800138c:	f043 0301 	orr.w	r3, r3, #1
 8001390:	70fb      	strb	r3, [r7, #3]
										//SlaveAddr: Slave Addrress + r/nw bit[0]=1

	pI2Cx->DR = SlaveAddr;				//Cấu hình thanh ghi DR cho processor DR[7:0]
 8001392:	78fa      	ldrb	r2, [r7, #3]
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	611a      	str	r2, [r3, #16]
}
 8001398:	bf00      	nop
 800139a:	370c      	adds	r7, #12
 800139c:	46bd      	mov	sp, r7
 800139e:	bc80      	pop	{r7}
 80013a0:	4770      	bx	lr

080013a2 <I2C_ClearADDRFlag>:
 * @return      - none
 *
 * @Note        - Đạt đc EVx Condition
 */
static void I2C_ClearADDRFlag(I2C_Handle_t *pI2CHandle)
{
 80013a2:	b580      	push	{r7, lr}
 80013a4:	b084      	sub	sp, #16
 80013a6:	af00      	add	r7, sp, #0
 80013a8:	6078      	str	r0, [r7, #4]
	//Việc đọc(gán) giá trị của thanh ghi SR1 và SR2 sẽ làm xóa cờ ADDR.
	//Việc bỏ qua giá trị của biến tạm là để tránh lãng phí tài nguyên bộ nhớ.

	//New(V224)
	//Check for device mode
	if(pI2CHandle->pI2Cx->SR2 && (1 << I2C_SR2_MSL))
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	699b      	ldr	r3, [r3, #24]
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d01f      	beq.n	80013f4 <I2C_ClearADDRFlag+0x52>
	{
		//device is in Master mode
		if(pI2CHandle->TxRxState == I2C_BUSY_IN_RX)
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	7f1b      	ldrb	r3, [r3, #28]
 80013b8:	2b01      	cmp	r3, #1
 80013ba:	d112      	bne.n	80013e2 <I2C_ClearADDRFlag+0x40>
		{
			if(pI2CHandle->RxLen == 1)
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	699b      	ldr	r3, [r3, #24]
 80013c0:	2b01      	cmp	r3, #1
 80013c2:	d120      	bne.n	8001406 <I2C_ClearADDRFlag+0x64>
			{
				//first disable the ack - vô hiệu hóa ack
				I2C_ManageAcking(pI2CHandle->pI2Cx, DISABLE);
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	2100      	movs	r1, #0
 80013ca:	4618      	mov	r0, r3
 80013cc:	f000 f82f 	bl	800142e <I2C_ManageAcking>
				//vô hiệu hóa vì ở hàm I2C_MasterReceiveData thì ở TH1 len==1 ta đã vô hiệu hóa
				//nhưng lúc đó có thể ko thuộc I2C_BUSY_IN_RX nên cần làm lại

				//clear the ADDR flag (read SR1, read SR2)
				dummyRead = pI2CHandle->pI2Cx->SR1;			//biến tạm lưu value SR1 Register 32bit
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	695b      	ldr	r3, [r3, #20]
 80013d6:	60fb      	str	r3, [r7, #12]
				dummyRead = pI2CHandle->pI2Cx->SR2;			//biến tạm lưu value SR2 Register 32bit
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	699b      	ldr	r3, [r3, #24]
 80013de:	60fb      	str	r3, [r7, #12]
		if(pI2CHandle->TxRxState == I2C_BUSY_IN_RX)
 80013e0:	e011      	b.n	8001406 <I2C_ClearADDRFlag+0x64>
			}
		}
		else
		{
			//clear the ADDR flag (read SR1, read SR2)
			dummyRead = pI2CHandle->pI2Cx->SR1;			//biến tạm lưu value SR1 Register 32bit
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	695b      	ldr	r3, [r3, #20]
 80013e8:	60fb      	str	r3, [r7, #12]
			dummyRead = pI2CHandle->pI2Cx->SR2;			//biến tạm lưu value SR2 Register 32bit
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	699b      	ldr	r3, [r3, #24]
 80013f0:	60fb      	str	r3, [r7, #12]
		if(pI2CHandle->TxRxState == I2C_BUSY_IN_RX)
 80013f2:	e008      	b.n	8001406 <I2C_ClearADDRFlag+0x64>
	}
	else
	{
		//device is in Slave mode
		//clear the ADDR flag (read SR1, read SR2)
		dummyRead = pI2CHandle->pI2Cx->SR1;			//biến tạm lưu value SR1 Register 32bit
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	695b      	ldr	r3, [r3, #20]
 80013fa:	60fb      	str	r3, [r7, #12]
		dummyRead = pI2CHandle->pI2Cx->SR2;			//biến tạm lưu value SR2 Register 32bit
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	699b      	ldr	r3, [r3, #24]
 8001402:	60fb      	str	r3, [r7, #12]
		(void)dummyRead;				//Tránh trình biên dịch tối ưu hóa vì biến đã đc sử dụng
	}

}
 8001404:	e000      	b.n	8001408 <I2C_ClearADDRFlag+0x66>
		if(pI2CHandle->TxRxState == I2C_BUSY_IN_RX)
 8001406:	bf00      	nop
}
 8001408:	bf00      	nop
 800140a:	3710      	adds	r7, #16
 800140c:	46bd      	mov	sp, r7
 800140e:	bd80      	pop	{r7, pc}

08001410 <I2C_GenerateStopCondition>:
 * @return      - none
 *
 * @Note        - I2C_CR1, bit field STOP[9]
 */
void I2C_GenerateStopCondition(I2C_RegDef_t *pI2Cx)
{
 8001410:	b480      	push	{r7}
 8001412:	b083      	sub	sp, #12
 8001414:	af00      	add	r7, sp, #0
 8001416:	6078      	str	r0, [r7, #4]
	//Set bit field STOP[9] lên high
	pI2Cx->CR1 |= (1 << I2C_CR1_STOP);		//Cấu hình thanh ghi CR1 cho processor
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	601a      	str	r2, [r3, #0]
}
 8001424:	bf00      	nop
 8001426:	370c      	adds	r7, #12
 8001428:	46bd      	mov	sp, r7
 800142a:	bc80      	pop	{r7}
 800142c:	4770      	bx	lr

0800142e <I2C_ManageAcking>:
 * 0: No acknowledge returned
   1: Acknowledge returned after a byte is received (matched address or data)
   Mặc định khi Slave->Master từ Ack=1
 */
void I2C_ManageAcking(I2C_RegDef_t *pI2Cx, uint8_t EnorDi)
{
 800142e:	b480      	push	{r7}
 8001430:	b083      	sub	sp, #12
 8001432:	af00      	add	r7, sp, #0
 8001434:	6078      	str	r0, [r7, #4]
 8001436:	460b      	mov	r3, r1
 8001438:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == I2C_ACK_ENABLE)
 800143a:	78fb      	ldrb	r3, [r7, #3]
 800143c:	2b01      	cmp	r3, #1
 800143e:	d106      	bne.n	800144e <I2C_ManageAcking+0x20>
	{
		//Enable the Ack(set bit)
		pI2Cx->CR1 |= (1 << I2C_CR1_ACK);	//Cấu hình thanh ghi CR1[ACK] cho processor
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	601a      	str	r2, [r3, #0]
	else
	{
		//Disable the Ack(Clear bit)
		pI2Cx->CR1 &= ~(1 << I2C_CR1_ACK);	//Cấu hình thanh ghi CR1[ACK] cho processor
	}
}
 800144c:	e005      	b.n	800145a <I2C_ManageAcking+0x2c>
		pI2Cx->CR1 &= ~(1 << I2C_CR1_ACK);	//Cấu hình thanh ghi CR1[ACK] cho processor
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	601a      	str	r2, [r3, #0]
}
 800145a:	bf00      	nop
 800145c:	370c      	adds	r7, #12
 800145e:	46bd      	mov	sp, r7
 8001460:	bc80      	pop	{r7}
 8001462:	4770      	bx	lr

08001464 <I2C_PeripheralControl>:
 * @return      - none
 *
 * @Note        - none
 */
void I2C_PeripheralControl(I2C_RegDef_t *pI2Cx, uint8_t EnOrDi)
{
 8001464:	b480      	push	{r7}
 8001466:	b083      	sub	sp, #12
 8001468:	af00      	add	r7, sp, #0
 800146a:	6078      	str	r0, [r7, #4]
 800146c:	460b      	mov	r3, r1
 800146e:	70fb      	strb	r3, [r7, #3]
	if(EnOrDi == ENABLE)
 8001470:	78fb      	ldrb	r3, [r7, #3]
 8001472:	2b01      	cmp	r3, #1
 8001474:	d106      	bne.n	8001484 <I2C_PeripheralControl+0x20>
	{
		pI2Cx->CR1 |= (1 << I2C_CR1_PE);
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	f043 0201 	orr.w	r2, r3, #1
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	601a      	str	r2, [r3, #0]
		//pI2cBaseAddress->CR1 |= I2C_CR1_PE_Bit_Mask;
	}else
	{
		pI2Cx->CR1 &= ~(1 << 0);
	}
}
 8001482:	e005      	b.n	8001490 <I2C_PeripheralControl+0x2c>
		pI2Cx->CR1 &= ~(1 << 0);
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	f023 0201 	bic.w	r2, r3, #1
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	601a      	str	r2, [r3, #0]
}
 8001490:	bf00      	nop
 8001492:	370c      	adds	r7, #12
 8001494:	46bd      	mov	sp, r7
 8001496:	bc80      	pop	{r7}
 8001498:	4770      	bx	lr
	...

0800149c <RCC_GetPCLK1Value>:
 *
 * @Note        - Sử dụng sơ đồ khối liên quan đến xung Clock của System Clock
 * 				- Thanh ghi CFGR thuộc RCC Register đc sử dụng
 */
uint32_t RCC_GetPCLK1Value(void)
{
 800149c:	b580      	push	{r7, lr}
 800149e:	b084      	sub	sp, #16
 80014a0:	af00      	add	r7, sp, #0

	uint8_t clksrc,temp,ahbp,abp1p;				//biến xung clock cho khối system clock

	//Kiểm tra xem SWS[3:2] đang có giá trị bit là bao nhiêu, từ đó xác định khối
	//Oscillator đang đc sử dụng là System Clock
	clksrc = (RCC->CFGR >> 2) & 0x3;	//0x03=0011, nghĩa là đọc 2 vị trí bit liền nhau từ vị trí bit số 2
 80014a2:	4b26      	ldr	r3, [pc, #152]	; (800153c <RCC_GetPCLK1Value+0xa0>)
 80014a4:	689b      	ldr	r3, [r3, #8]
 80014a6:	089b      	lsrs	r3, r3, #2
 80014a8:	b2db      	uxtb	r3, r3
 80014aa:	f003 0303 	and.w	r3, r3, #3
 80014ae:	727b      	strb	r3, [r7, #9]


	//1. Xác định tần số xung clock tổng của System Clock
	if(clksrc == 0)    		 	//HSI Oscillator
 80014b0:	7a7b      	ldrb	r3, [r7, #9]
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d102      	bne.n	80014bc <RCC_GetPCLK1Value+0x20>
	{
		SystemClk = 16000000;
 80014b6:	4b22      	ldr	r3, [pc, #136]	; (8001540 <RCC_GetPCLK1Value+0xa4>)
 80014b8:	60fb      	str	r3, [r7, #12]
 80014ba:	e00b      	b.n	80014d4 <RCC_GetPCLK1Value+0x38>
	}
	else if(clksrc == 1)		//HSE Oscillator
 80014bc:	7a7b      	ldrb	r3, [r7, #9]
 80014be:	2b01      	cmp	r3, #1
 80014c0:	d102      	bne.n	80014c8 <RCC_GetPCLK1Value+0x2c>
	{
		SystemClk = 8000000;
 80014c2:	4b20      	ldr	r3, [pc, #128]	; (8001544 <RCC_GetPCLK1Value+0xa8>)
 80014c4:	60fb      	str	r3, [r7, #12]
 80014c6:	e005      	b.n	80014d4 <RCC_GetPCLK1Value+0x38>
	}
	else if(clksrc == 2)		//PLL Oscillator
 80014c8:	7a7b      	ldrb	r3, [r7, #9]
 80014ca:	2b02      	cmp	r3, #2
 80014cc:	d102      	bne.n	80014d4 <RCC_GetPCLK1Value+0x38>
	{
		SystemClk = RCC_GetPLLOutputClock();
 80014ce:	f000 f83f 	bl	8001550 <RCC_GetPLLOutputClock>
 80014d2:	60f8      	str	r0, [r7, #12]
	}

	//2. Xác định bộ chia của AHBP Prescaler, bit field HPRE[7:4] của CFGR register
	temp = ((RCC->CFGR >> 4) & 0xF);	//0xF=1111, nghĩa là đọc 4 vị trí bit liền nhau từ vị trí bit số 4
 80014d4:	4b19      	ldr	r3, [pc, #100]	; (800153c <RCC_GetPCLK1Value+0xa0>)
 80014d6:	689b      	ldr	r3, [r3, #8]
 80014d8:	091b      	lsrs	r3, r3, #4
 80014da:	b2db      	uxtb	r3, r3
 80014dc:	f003 030f 	and.w	r3, r3, #15
 80014e0:	723b      	strb	r3, [r7, #8]
	if(temp < 4)
 80014e2:	7a3b      	ldrb	r3, [r7, #8]
 80014e4:	2b03      	cmp	r3, #3
 80014e6:	d802      	bhi.n	80014ee <RCC_GetPCLK1Value+0x52>
	{
		ahbp = 1;			//Không sử dụng bộ chia
 80014e8:	2301      	movs	r3, #1
 80014ea:	72fb      	strb	r3, [r7, #11]
 80014ec:	e005      	b.n	80014fa <RCC_GetPCLK1Value+0x5e>
	}
	else
	{
		//Có sử dụng bộ chia, nếu temp=8 thì 8-8=0, sử dụng bộ chia 2,...
		ahbp = AHB_PreScaler[temp - 8];
 80014ee:	7a3b      	ldrb	r3, [r7, #8]
 80014f0:	3b08      	subs	r3, #8
 80014f2:	4a15      	ldr	r2, [pc, #84]	; (8001548 <RCC_GetPCLK1Value+0xac>)
 80014f4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80014f8:	72fb      	strb	r3, [r7, #11]
	}

	//3. Xác định bộ chia của APB1 PreScaler,bit ffield PPRE[12:10] của CFGR register
	temp = ((RCC->CFGR >> 10) & 0x7);	//0xF=1111, nghĩa là đọc 3 vị trí bit liền nhau từ vị trí bit số 10
 80014fa:	4b10      	ldr	r3, [pc, #64]	; (800153c <RCC_GetPCLK1Value+0xa0>)
 80014fc:	689b      	ldr	r3, [r3, #8]
 80014fe:	0a9b      	lsrs	r3, r3, #10
 8001500:	b2db      	uxtb	r3, r3
 8001502:	f003 0307 	and.w	r3, r3, #7
 8001506:	723b      	strb	r3, [r7, #8]
	if(temp < 8)
 8001508:	7a3b      	ldrb	r3, [r7, #8]
 800150a:	2b07      	cmp	r3, #7
 800150c:	d802      	bhi.n	8001514 <RCC_GetPCLK1Value+0x78>
	{
		abp1p = 1;			//Không sử dụng bộ chia
 800150e:	2301      	movs	r3, #1
 8001510:	72bb      	strb	r3, [r7, #10]
 8001512:	e005      	b.n	8001520 <RCC_GetPCLK1Value+0x84>
	}
	else
	{
		//Có sử dụng bộ chia, nếu temp=8 thì 8-8=0, sử dụng bộ chia 2,...
		abp1p = APB1_PreScaler[temp - 4];
 8001514:	7a3b      	ldrb	r3, [r7, #8]
 8001516:	3b04      	subs	r3, #4
 8001518:	4a0c      	ldr	r2, [pc, #48]	; (800154c <RCC_GetPCLK1Value+0xb0>)
 800151a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800151e:	72bb      	strb	r3, [r7, #10]
	}

	//4. Xác định xung PCLK1 dùng cho I2C đc lấy từ từ System Clock
	pclk1 = (SystemClk / ahbp) / abp1p;
 8001520:	7afb      	ldrb	r3, [r7, #11]
 8001522:	68fa      	ldr	r2, [r7, #12]
 8001524:	fbb2 f2f3 	udiv	r2, r2, r3
 8001528:	7abb      	ldrb	r3, [r7, #10]
 800152a:	fbb2 f3f3 	udiv	r3, r2, r3
 800152e:	607b      	str	r3, [r7, #4]

	return pclk1;
 8001530:	687b      	ldr	r3, [r7, #4]
}
 8001532:	4618      	mov	r0, r3
 8001534:	3710      	adds	r7, #16
 8001536:	46bd      	mov	sp, r7
 8001538:	bd80      	pop	{r7, pc}
 800153a:	bf00      	nop
 800153c:	40023800 	.word	0x40023800
 8001540:	00f42400 	.word	0x00f42400
 8001544:	007a1200 	.word	0x007a1200
 8001548:	20000000 	.word	0x20000000
 800154c:	20000010 	.word	0x20000010

08001550 <RCC_GetPLLOutputClock>:
 *
 * @Note        - Không sử dụng xung clock dạng PLL trong khóa học

 */
uint32_t RCC_GetPLLOutputClock(void)
{
 8001550:	b480      	push	{r7}
 8001552:	af00      	add	r7, sp, #0
	return 0;
 8001554:	2300      	movs	r3, #0
}
 8001556:	4618      	mov	r0, r3
 8001558:	46bd      	mov	sp, r7
 800155a:	bc80      	pop	{r7}
 800155c:	4770      	bx	lr
	...

08001560 <std>:
 8001560:	2300      	movs	r3, #0
 8001562:	b510      	push	{r4, lr}
 8001564:	4604      	mov	r4, r0
 8001566:	e9c0 3300 	strd	r3, r3, [r0]
 800156a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800156e:	6083      	str	r3, [r0, #8]
 8001570:	8181      	strh	r1, [r0, #12]
 8001572:	6643      	str	r3, [r0, #100]	; 0x64
 8001574:	81c2      	strh	r2, [r0, #14]
 8001576:	6183      	str	r3, [r0, #24]
 8001578:	4619      	mov	r1, r3
 800157a:	2208      	movs	r2, #8
 800157c:	305c      	adds	r0, #92	; 0x5c
 800157e:	f000 f9e5 	bl	800194c <memset>
 8001582:	4b05      	ldr	r3, [pc, #20]	; (8001598 <std+0x38>)
 8001584:	6263      	str	r3, [r4, #36]	; 0x24
 8001586:	4b05      	ldr	r3, [pc, #20]	; (800159c <std+0x3c>)
 8001588:	62a3      	str	r3, [r4, #40]	; 0x28
 800158a:	4b05      	ldr	r3, [pc, #20]	; (80015a0 <std+0x40>)
 800158c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800158e:	4b05      	ldr	r3, [pc, #20]	; (80015a4 <std+0x44>)
 8001590:	6224      	str	r4, [r4, #32]
 8001592:	6323      	str	r3, [r4, #48]	; 0x30
 8001594:	bd10      	pop	{r4, pc}
 8001596:	bf00      	nop
 8001598:	0800179d 	.word	0x0800179d
 800159c:	080017bf 	.word	0x080017bf
 80015a0:	080017f7 	.word	0x080017f7
 80015a4:	0800181b 	.word	0x0800181b

080015a8 <stdio_exit_handler>:
 80015a8:	4a02      	ldr	r2, [pc, #8]	; (80015b4 <stdio_exit_handler+0xc>)
 80015aa:	4903      	ldr	r1, [pc, #12]	; (80015b8 <stdio_exit_handler+0x10>)
 80015ac:	4803      	ldr	r0, [pc, #12]	; (80015bc <stdio_exit_handler+0x14>)
 80015ae:	f000 b869 	b.w	8001684 <_fwalk_sglue>
 80015b2:	bf00      	nop
 80015b4:	20000018 	.word	0x20000018
 80015b8:	080022d5 	.word	0x080022d5
 80015bc:	20000024 	.word	0x20000024

080015c0 <cleanup_stdio>:
 80015c0:	6841      	ldr	r1, [r0, #4]
 80015c2:	4b0c      	ldr	r3, [pc, #48]	; (80015f4 <cleanup_stdio+0x34>)
 80015c4:	4299      	cmp	r1, r3
 80015c6:	b510      	push	{r4, lr}
 80015c8:	4604      	mov	r4, r0
 80015ca:	d001      	beq.n	80015d0 <cleanup_stdio+0x10>
 80015cc:	f000 fe82 	bl	80022d4 <_fflush_r>
 80015d0:	68a1      	ldr	r1, [r4, #8]
 80015d2:	4b09      	ldr	r3, [pc, #36]	; (80015f8 <cleanup_stdio+0x38>)
 80015d4:	4299      	cmp	r1, r3
 80015d6:	d002      	beq.n	80015de <cleanup_stdio+0x1e>
 80015d8:	4620      	mov	r0, r4
 80015da:	f000 fe7b 	bl	80022d4 <_fflush_r>
 80015de:	68e1      	ldr	r1, [r4, #12]
 80015e0:	4b06      	ldr	r3, [pc, #24]	; (80015fc <cleanup_stdio+0x3c>)
 80015e2:	4299      	cmp	r1, r3
 80015e4:	d004      	beq.n	80015f0 <cleanup_stdio+0x30>
 80015e6:	4620      	mov	r0, r4
 80015e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80015ec:	f000 be72 	b.w	80022d4 <_fflush_r>
 80015f0:	bd10      	pop	{r4, pc}
 80015f2:	bf00      	nop
 80015f4:	200000d4 	.word	0x200000d4
 80015f8:	2000013c 	.word	0x2000013c
 80015fc:	200001a4 	.word	0x200001a4

08001600 <global_stdio_init.part.0>:
 8001600:	b510      	push	{r4, lr}
 8001602:	4b0b      	ldr	r3, [pc, #44]	; (8001630 <global_stdio_init.part.0+0x30>)
 8001604:	4c0b      	ldr	r4, [pc, #44]	; (8001634 <global_stdio_init.part.0+0x34>)
 8001606:	4a0c      	ldr	r2, [pc, #48]	; (8001638 <global_stdio_init.part.0+0x38>)
 8001608:	601a      	str	r2, [r3, #0]
 800160a:	4620      	mov	r0, r4
 800160c:	2200      	movs	r2, #0
 800160e:	2104      	movs	r1, #4
 8001610:	f7ff ffa6 	bl	8001560 <std>
 8001614:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8001618:	2201      	movs	r2, #1
 800161a:	2109      	movs	r1, #9
 800161c:	f7ff ffa0 	bl	8001560 <std>
 8001620:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8001624:	2202      	movs	r2, #2
 8001626:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800162a:	2112      	movs	r1, #18
 800162c:	f7ff bf98 	b.w	8001560 <std>
 8001630:	2000020c 	.word	0x2000020c
 8001634:	200000d4 	.word	0x200000d4
 8001638:	080015a9 	.word	0x080015a9

0800163c <__sfp_lock_acquire>:
 800163c:	4801      	ldr	r0, [pc, #4]	; (8001644 <__sfp_lock_acquire+0x8>)
 800163e:	f000 b9fd 	b.w	8001a3c <__retarget_lock_acquire_recursive>
 8001642:	bf00      	nop
 8001644:	20000215 	.word	0x20000215

08001648 <__sfp_lock_release>:
 8001648:	4801      	ldr	r0, [pc, #4]	; (8001650 <__sfp_lock_release+0x8>)
 800164a:	f000 b9f8 	b.w	8001a3e <__retarget_lock_release_recursive>
 800164e:	bf00      	nop
 8001650:	20000215 	.word	0x20000215

08001654 <__sinit>:
 8001654:	b510      	push	{r4, lr}
 8001656:	4604      	mov	r4, r0
 8001658:	f7ff fff0 	bl	800163c <__sfp_lock_acquire>
 800165c:	6a23      	ldr	r3, [r4, #32]
 800165e:	b11b      	cbz	r3, 8001668 <__sinit+0x14>
 8001660:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001664:	f7ff bff0 	b.w	8001648 <__sfp_lock_release>
 8001668:	4b04      	ldr	r3, [pc, #16]	; (800167c <__sinit+0x28>)
 800166a:	6223      	str	r3, [r4, #32]
 800166c:	4b04      	ldr	r3, [pc, #16]	; (8001680 <__sinit+0x2c>)
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	2b00      	cmp	r3, #0
 8001672:	d1f5      	bne.n	8001660 <__sinit+0xc>
 8001674:	f7ff ffc4 	bl	8001600 <global_stdio_init.part.0>
 8001678:	e7f2      	b.n	8001660 <__sinit+0xc>
 800167a:	bf00      	nop
 800167c:	080015c1 	.word	0x080015c1
 8001680:	2000020c 	.word	0x2000020c

08001684 <_fwalk_sglue>:
 8001684:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001688:	4607      	mov	r7, r0
 800168a:	4688      	mov	r8, r1
 800168c:	4614      	mov	r4, r2
 800168e:	2600      	movs	r6, #0
 8001690:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8001694:	f1b9 0901 	subs.w	r9, r9, #1
 8001698:	d505      	bpl.n	80016a6 <_fwalk_sglue+0x22>
 800169a:	6824      	ldr	r4, [r4, #0]
 800169c:	2c00      	cmp	r4, #0
 800169e:	d1f7      	bne.n	8001690 <_fwalk_sglue+0xc>
 80016a0:	4630      	mov	r0, r6
 80016a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80016a6:	89ab      	ldrh	r3, [r5, #12]
 80016a8:	2b01      	cmp	r3, #1
 80016aa:	d907      	bls.n	80016bc <_fwalk_sglue+0x38>
 80016ac:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80016b0:	3301      	adds	r3, #1
 80016b2:	d003      	beq.n	80016bc <_fwalk_sglue+0x38>
 80016b4:	4629      	mov	r1, r5
 80016b6:	4638      	mov	r0, r7
 80016b8:	47c0      	blx	r8
 80016ba:	4306      	orrs	r6, r0
 80016bc:	3568      	adds	r5, #104	; 0x68
 80016be:	e7e9      	b.n	8001694 <_fwalk_sglue+0x10>

080016c0 <iprintf>:
 80016c0:	b40f      	push	{r0, r1, r2, r3}
 80016c2:	b507      	push	{r0, r1, r2, lr}
 80016c4:	4906      	ldr	r1, [pc, #24]	; (80016e0 <iprintf+0x20>)
 80016c6:	ab04      	add	r3, sp, #16
 80016c8:	6808      	ldr	r0, [r1, #0]
 80016ca:	f853 2b04 	ldr.w	r2, [r3], #4
 80016ce:	6881      	ldr	r1, [r0, #8]
 80016d0:	9301      	str	r3, [sp, #4]
 80016d2:	f000 fad3 	bl	8001c7c <_vfiprintf_r>
 80016d6:	b003      	add	sp, #12
 80016d8:	f85d eb04 	ldr.w	lr, [sp], #4
 80016dc:	b004      	add	sp, #16
 80016de:	4770      	bx	lr
 80016e0:	20000070 	.word	0x20000070

080016e4 <_puts_r>:
 80016e4:	6a03      	ldr	r3, [r0, #32]
 80016e6:	b570      	push	{r4, r5, r6, lr}
 80016e8:	6884      	ldr	r4, [r0, #8]
 80016ea:	4605      	mov	r5, r0
 80016ec:	460e      	mov	r6, r1
 80016ee:	b90b      	cbnz	r3, 80016f4 <_puts_r+0x10>
 80016f0:	f7ff ffb0 	bl	8001654 <__sinit>
 80016f4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80016f6:	07db      	lsls	r3, r3, #31
 80016f8:	d405      	bmi.n	8001706 <_puts_r+0x22>
 80016fa:	89a3      	ldrh	r3, [r4, #12]
 80016fc:	0598      	lsls	r0, r3, #22
 80016fe:	d402      	bmi.n	8001706 <_puts_r+0x22>
 8001700:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001702:	f000 f99b 	bl	8001a3c <__retarget_lock_acquire_recursive>
 8001706:	89a3      	ldrh	r3, [r4, #12]
 8001708:	0719      	lsls	r1, r3, #28
 800170a:	d513      	bpl.n	8001734 <_puts_r+0x50>
 800170c:	6923      	ldr	r3, [r4, #16]
 800170e:	b18b      	cbz	r3, 8001734 <_puts_r+0x50>
 8001710:	3e01      	subs	r6, #1
 8001712:	68a3      	ldr	r3, [r4, #8]
 8001714:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8001718:	3b01      	subs	r3, #1
 800171a:	60a3      	str	r3, [r4, #8]
 800171c:	b9e9      	cbnz	r1, 800175a <_puts_r+0x76>
 800171e:	2b00      	cmp	r3, #0
 8001720:	da2e      	bge.n	8001780 <_puts_r+0x9c>
 8001722:	4622      	mov	r2, r4
 8001724:	210a      	movs	r1, #10
 8001726:	4628      	mov	r0, r5
 8001728:	f000 f87b 	bl	8001822 <__swbuf_r>
 800172c:	3001      	adds	r0, #1
 800172e:	d007      	beq.n	8001740 <_puts_r+0x5c>
 8001730:	250a      	movs	r5, #10
 8001732:	e007      	b.n	8001744 <_puts_r+0x60>
 8001734:	4621      	mov	r1, r4
 8001736:	4628      	mov	r0, r5
 8001738:	f000 f8b0 	bl	800189c <__swsetup_r>
 800173c:	2800      	cmp	r0, #0
 800173e:	d0e7      	beq.n	8001710 <_puts_r+0x2c>
 8001740:	f04f 35ff 	mov.w	r5, #4294967295
 8001744:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8001746:	07da      	lsls	r2, r3, #31
 8001748:	d405      	bmi.n	8001756 <_puts_r+0x72>
 800174a:	89a3      	ldrh	r3, [r4, #12]
 800174c:	059b      	lsls	r3, r3, #22
 800174e:	d402      	bmi.n	8001756 <_puts_r+0x72>
 8001750:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001752:	f000 f974 	bl	8001a3e <__retarget_lock_release_recursive>
 8001756:	4628      	mov	r0, r5
 8001758:	bd70      	pop	{r4, r5, r6, pc}
 800175a:	2b00      	cmp	r3, #0
 800175c:	da04      	bge.n	8001768 <_puts_r+0x84>
 800175e:	69a2      	ldr	r2, [r4, #24]
 8001760:	429a      	cmp	r2, r3
 8001762:	dc06      	bgt.n	8001772 <_puts_r+0x8e>
 8001764:	290a      	cmp	r1, #10
 8001766:	d004      	beq.n	8001772 <_puts_r+0x8e>
 8001768:	6823      	ldr	r3, [r4, #0]
 800176a:	1c5a      	adds	r2, r3, #1
 800176c:	6022      	str	r2, [r4, #0]
 800176e:	7019      	strb	r1, [r3, #0]
 8001770:	e7cf      	b.n	8001712 <_puts_r+0x2e>
 8001772:	4622      	mov	r2, r4
 8001774:	4628      	mov	r0, r5
 8001776:	f000 f854 	bl	8001822 <__swbuf_r>
 800177a:	3001      	adds	r0, #1
 800177c:	d1c9      	bne.n	8001712 <_puts_r+0x2e>
 800177e:	e7df      	b.n	8001740 <_puts_r+0x5c>
 8001780:	6823      	ldr	r3, [r4, #0]
 8001782:	250a      	movs	r5, #10
 8001784:	1c5a      	adds	r2, r3, #1
 8001786:	6022      	str	r2, [r4, #0]
 8001788:	701d      	strb	r5, [r3, #0]
 800178a:	e7db      	b.n	8001744 <_puts_r+0x60>

0800178c <puts>:
 800178c:	4b02      	ldr	r3, [pc, #8]	; (8001798 <puts+0xc>)
 800178e:	4601      	mov	r1, r0
 8001790:	6818      	ldr	r0, [r3, #0]
 8001792:	f7ff bfa7 	b.w	80016e4 <_puts_r>
 8001796:	bf00      	nop
 8001798:	20000070 	.word	0x20000070

0800179c <__sread>:
 800179c:	b510      	push	{r4, lr}
 800179e:	460c      	mov	r4, r1
 80017a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80017a4:	f000 f8fc 	bl	80019a0 <_read_r>
 80017a8:	2800      	cmp	r0, #0
 80017aa:	bfab      	itete	ge
 80017ac:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80017ae:	89a3      	ldrhlt	r3, [r4, #12]
 80017b0:	181b      	addge	r3, r3, r0
 80017b2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80017b6:	bfac      	ite	ge
 80017b8:	6563      	strge	r3, [r4, #84]	; 0x54
 80017ba:	81a3      	strhlt	r3, [r4, #12]
 80017bc:	bd10      	pop	{r4, pc}

080017be <__swrite>:
 80017be:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80017c2:	461f      	mov	r7, r3
 80017c4:	898b      	ldrh	r3, [r1, #12]
 80017c6:	05db      	lsls	r3, r3, #23
 80017c8:	4605      	mov	r5, r0
 80017ca:	460c      	mov	r4, r1
 80017cc:	4616      	mov	r6, r2
 80017ce:	d505      	bpl.n	80017dc <__swrite+0x1e>
 80017d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80017d4:	2302      	movs	r3, #2
 80017d6:	2200      	movs	r2, #0
 80017d8:	f000 f8d0 	bl	800197c <_lseek_r>
 80017dc:	89a3      	ldrh	r3, [r4, #12]
 80017de:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80017e2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80017e6:	81a3      	strh	r3, [r4, #12]
 80017e8:	4632      	mov	r2, r6
 80017ea:	463b      	mov	r3, r7
 80017ec:	4628      	mov	r0, r5
 80017ee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80017f2:	f000 b8e7 	b.w	80019c4 <_write_r>

080017f6 <__sseek>:
 80017f6:	b510      	push	{r4, lr}
 80017f8:	460c      	mov	r4, r1
 80017fa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80017fe:	f000 f8bd 	bl	800197c <_lseek_r>
 8001802:	1c43      	adds	r3, r0, #1
 8001804:	89a3      	ldrh	r3, [r4, #12]
 8001806:	bf15      	itete	ne
 8001808:	6560      	strne	r0, [r4, #84]	; 0x54
 800180a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800180e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8001812:	81a3      	strheq	r3, [r4, #12]
 8001814:	bf18      	it	ne
 8001816:	81a3      	strhne	r3, [r4, #12]
 8001818:	bd10      	pop	{r4, pc}

0800181a <__sclose>:
 800181a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800181e:	f000 b89d 	b.w	800195c <_close_r>

08001822 <__swbuf_r>:
 8001822:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001824:	460e      	mov	r6, r1
 8001826:	4614      	mov	r4, r2
 8001828:	4605      	mov	r5, r0
 800182a:	b118      	cbz	r0, 8001834 <__swbuf_r+0x12>
 800182c:	6a03      	ldr	r3, [r0, #32]
 800182e:	b90b      	cbnz	r3, 8001834 <__swbuf_r+0x12>
 8001830:	f7ff ff10 	bl	8001654 <__sinit>
 8001834:	69a3      	ldr	r3, [r4, #24]
 8001836:	60a3      	str	r3, [r4, #8]
 8001838:	89a3      	ldrh	r3, [r4, #12]
 800183a:	071a      	lsls	r2, r3, #28
 800183c:	d525      	bpl.n	800188a <__swbuf_r+0x68>
 800183e:	6923      	ldr	r3, [r4, #16]
 8001840:	b31b      	cbz	r3, 800188a <__swbuf_r+0x68>
 8001842:	6823      	ldr	r3, [r4, #0]
 8001844:	6922      	ldr	r2, [r4, #16]
 8001846:	1a98      	subs	r0, r3, r2
 8001848:	6963      	ldr	r3, [r4, #20]
 800184a:	b2f6      	uxtb	r6, r6
 800184c:	4283      	cmp	r3, r0
 800184e:	4637      	mov	r7, r6
 8001850:	dc04      	bgt.n	800185c <__swbuf_r+0x3a>
 8001852:	4621      	mov	r1, r4
 8001854:	4628      	mov	r0, r5
 8001856:	f000 fd3d 	bl	80022d4 <_fflush_r>
 800185a:	b9e0      	cbnz	r0, 8001896 <__swbuf_r+0x74>
 800185c:	68a3      	ldr	r3, [r4, #8]
 800185e:	3b01      	subs	r3, #1
 8001860:	60a3      	str	r3, [r4, #8]
 8001862:	6823      	ldr	r3, [r4, #0]
 8001864:	1c5a      	adds	r2, r3, #1
 8001866:	6022      	str	r2, [r4, #0]
 8001868:	701e      	strb	r6, [r3, #0]
 800186a:	6962      	ldr	r2, [r4, #20]
 800186c:	1c43      	adds	r3, r0, #1
 800186e:	429a      	cmp	r2, r3
 8001870:	d004      	beq.n	800187c <__swbuf_r+0x5a>
 8001872:	89a3      	ldrh	r3, [r4, #12]
 8001874:	07db      	lsls	r3, r3, #31
 8001876:	d506      	bpl.n	8001886 <__swbuf_r+0x64>
 8001878:	2e0a      	cmp	r6, #10
 800187a:	d104      	bne.n	8001886 <__swbuf_r+0x64>
 800187c:	4621      	mov	r1, r4
 800187e:	4628      	mov	r0, r5
 8001880:	f000 fd28 	bl	80022d4 <_fflush_r>
 8001884:	b938      	cbnz	r0, 8001896 <__swbuf_r+0x74>
 8001886:	4638      	mov	r0, r7
 8001888:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800188a:	4621      	mov	r1, r4
 800188c:	4628      	mov	r0, r5
 800188e:	f000 f805 	bl	800189c <__swsetup_r>
 8001892:	2800      	cmp	r0, #0
 8001894:	d0d5      	beq.n	8001842 <__swbuf_r+0x20>
 8001896:	f04f 37ff 	mov.w	r7, #4294967295
 800189a:	e7f4      	b.n	8001886 <__swbuf_r+0x64>

0800189c <__swsetup_r>:
 800189c:	b538      	push	{r3, r4, r5, lr}
 800189e:	4b2a      	ldr	r3, [pc, #168]	; (8001948 <__swsetup_r+0xac>)
 80018a0:	4605      	mov	r5, r0
 80018a2:	6818      	ldr	r0, [r3, #0]
 80018a4:	460c      	mov	r4, r1
 80018a6:	b118      	cbz	r0, 80018b0 <__swsetup_r+0x14>
 80018a8:	6a03      	ldr	r3, [r0, #32]
 80018aa:	b90b      	cbnz	r3, 80018b0 <__swsetup_r+0x14>
 80018ac:	f7ff fed2 	bl	8001654 <__sinit>
 80018b0:	89a3      	ldrh	r3, [r4, #12]
 80018b2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80018b6:	0718      	lsls	r0, r3, #28
 80018b8:	d422      	bmi.n	8001900 <__swsetup_r+0x64>
 80018ba:	06d9      	lsls	r1, r3, #27
 80018bc:	d407      	bmi.n	80018ce <__swsetup_r+0x32>
 80018be:	2309      	movs	r3, #9
 80018c0:	602b      	str	r3, [r5, #0]
 80018c2:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80018c6:	81a3      	strh	r3, [r4, #12]
 80018c8:	f04f 30ff 	mov.w	r0, #4294967295
 80018cc:	e034      	b.n	8001938 <__swsetup_r+0x9c>
 80018ce:	0758      	lsls	r0, r3, #29
 80018d0:	d512      	bpl.n	80018f8 <__swsetup_r+0x5c>
 80018d2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80018d4:	b141      	cbz	r1, 80018e8 <__swsetup_r+0x4c>
 80018d6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80018da:	4299      	cmp	r1, r3
 80018dc:	d002      	beq.n	80018e4 <__swsetup_r+0x48>
 80018de:	4628      	mov	r0, r5
 80018e0:	f000 f8ae 	bl	8001a40 <_free_r>
 80018e4:	2300      	movs	r3, #0
 80018e6:	6363      	str	r3, [r4, #52]	; 0x34
 80018e8:	89a3      	ldrh	r3, [r4, #12]
 80018ea:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80018ee:	81a3      	strh	r3, [r4, #12]
 80018f0:	2300      	movs	r3, #0
 80018f2:	6063      	str	r3, [r4, #4]
 80018f4:	6923      	ldr	r3, [r4, #16]
 80018f6:	6023      	str	r3, [r4, #0]
 80018f8:	89a3      	ldrh	r3, [r4, #12]
 80018fa:	f043 0308 	orr.w	r3, r3, #8
 80018fe:	81a3      	strh	r3, [r4, #12]
 8001900:	6923      	ldr	r3, [r4, #16]
 8001902:	b94b      	cbnz	r3, 8001918 <__swsetup_r+0x7c>
 8001904:	89a3      	ldrh	r3, [r4, #12]
 8001906:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800190a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800190e:	d003      	beq.n	8001918 <__swsetup_r+0x7c>
 8001910:	4621      	mov	r1, r4
 8001912:	4628      	mov	r0, r5
 8001914:	f000 fd2c 	bl	8002370 <__smakebuf_r>
 8001918:	89a0      	ldrh	r0, [r4, #12]
 800191a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800191e:	f010 0301 	ands.w	r3, r0, #1
 8001922:	d00a      	beq.n	800193a <__swsetup_r+0x9e>
 8001924:	2300      	movs	r3, #0
 8001926:	60a3      	str	r3, [r4, #8]
 8001928:	6963      	ldr	r3, [r4, #20]
 800192a:	425b      	negs	r3, r3
 800192c:	61a3      	str	r3, [r4, #24]
 800192e:	6923      	ldr	r3, [r4, #16]
 8001930:	b943      	cbnz	r3, 8001944 <__swsetup_r+0xa8>
 8001932:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8001936:	d1c4      	bne.n	80018c2 <__swsetup_r+0x26>
 8001938:	bd38      	pop	{r3, r4, r5, pc}
 800193a:	0781      	lsls	r1, r0, #30
 800193c:	bf58      	it	pl
 800193e:	6963      	ldrpl	r3, [r4, #20]
 8001940:	60a3      	str	r3, [r4, #8]
 8001942:	e7f4      	b.n	800192e <__swsetup_r+0x92>
 8001944:	2000      	movs	r0, #0
 8001946:	e7f7      	b.n	8001938 <__swsetup_r+0x9c>
 8001948:	20000070 	.word	0x20000070

0800194c <memset>:
 800194c:	4402      	add	r2, r0
 800194e:	4603      	mov	r3, r0
 8001950:	4293      	cmp	r3, r2
 8001952:	d100      	bne.n	8001956 <memset+0xa>
 8001954:	4770      	bx	lr
 8001956:	f803 1b01 	strb.w	r1, [r3], #1
 800195a:	e7f9      	b.n	8001950 <memset+0x4>

0800195c <_close_r>:
 800195c:	b538      	push	{r3, r4, r5, lr}
 800195e:	4d06      	ldr	r5, [pc, #24]	; (8001978 <_close_r+0x1c>)
 8001960:	2300      	movs	r3, #0
 8001962:	4604      	mov	r4, r0
 8001964:	4608      	mov	r0, r1
 8001966:	602b      	str	r3, [r5, #0]
 8001968:	f7fe fe6b 	bl	8000642 <_close>
 800196c:	1c43      	adds	r3, r0, #1
 800196e:	d102      	bne.n	8001976 <_close_r+0x1a>
 8001970:	682b      	ldr	r3, [r5, #0]
 8001972:	b103      	cbz	r3, 8001976 <_close_r+0x1a>
 8001974:	6023      	str	r3, [r4, #0]
 8001976:	bd38      	pop	{r3, r4, r5, pc}
 8001978:	20000210 	.word	0x20000210

0800197c <_lseek_r>:
 800197c:	b538      	push	{r3, r4, r5, lr}
 800197e:	4d07      	ldr	r5, [pc, #28]	; (800199c <_lseek_r+0x20>)
 8001980:	4604      	mov	r4, r0
 8001982:	4608      	mov	r0, r1
 8001984:	4611      	mov	r1, r2
 8001986:	2200      	movs	r2, #0
 8001988:	602a      	str	r2, [r5, #0]
 800198a:	461a      	mov	r2, r3
 800198c:	f7fe fe7d 	bl	800068a <_lseek>
 8001990:	1c43      	adds	r3, r0, #1
 8001992:	d102      	bne.n	800199a <_lseek_r+0x1e>
 8001994:	682b      	ldr	r3, [r5, #0]
 8001996:	b103      	cbz	r3, 800199a <_lseek_r+0x1e>
 8001998:	6023      	str	r3, [r4, #0]
 800199a:	bd38      	pop	{r3, r4, r5, pc}
 800199c:	20000210 	.word	0x20000210

080019a0 <_read_r>:
 80019a0:	b538      	push	{r3, r4, r5, lr}
 80019a2:	4d07      	ldr	r5, [pc, #28]	; (80019c0 <_read_r+0x20>)
 80019a4:	4604      	mov	r4, r0
 80019a6:	4608      	mov	r0, r1
 80019a8:	4611      	mov	r1, r2
 80019aa:	2200      	movs	r2, #0
 80019ac:	602a      	str	r2, [r5, #0]
 80019ae:	461a      	mov	r2, r3
 80019b0:	f7fe fe0e 	bl	80005d0 <_read>
 80019b4:	1c43      	adds	r3, r0, #1
 80019b6:	d102      	bne.n	80019be <_read_r+0x1e>
 80019b8:	682b      	ldr	r3, [r5, #0]
 80019ba:	b103      	cbz	r3, 80019be <_read_r+0x1e>
 80019bc:	6023      	str	r3, [r4, #0]
 80019be:	bd38      	pop	{r3, r4, r5, pc}
 80019c0:	20000210 	.word	0x20000210

080019c4 <_write_r>:
 80019c4:	b538      	push	{r3, r4, r5, lr}
 80019c6:	4d07      	ldr	r5, [pc, #28]	; (80019e4 <_write_r+0x20>)
 80019c8:	4604      	mov	r4, r0
 80019ca:	4608      	mov	r0, r1
 80019cc:	4611      	mov	r1, r2
 80019ce:	2200      	movs	r2, #0
 80019d0:	602a      	str	r2, [r5, #0]
 80019d2:	461a      	mov	r2, r3
 80019d4:	f7fe fe19 	bl	800060a <_write>
 80019d8:	1c43      	adds	r3, r0, #1
 80019da:	d102      	bne.n	80019e2 <_write_r+0x1e>
 80019dc:	682b      	ldr	r3, [r5, #0]
 80019de:	b103      	cbz	r3, 80019e2 <_write_r+0x1e>
 80019e0:	6023      	str	r3, [r4, #0]
 80019e2:	bd38      	pop	{r3, r4, r5, pc}
 80019e4:	20000210 	.word	0x20000210

080019e8 <__errno>:
 80019e8:	4b01      	ldr	r3, [pc, #4]	; (80019f0 <__errno+0x8>)
 80019ea:	6818      	ldr	r0, [r3, #0]
 80019ec:	4770      	bx	lr
 80019ee:	bf00      	nop
 80019f0:	20000070 	.word	0x20000070

080019f4 <__libc_init_array>:
 80019f4:	b570      	push	{r4, r5, r6, lr}
 80019f6:	4d0d      	ldr	r5, [pc, #52]	; (8001a2c <__libc_init_array+0x38>)
 80019f8:	4c0d      	ldr	r4, [pc, #52]	; (8001a30 <__libc_init_array+0x3c>)
 80019fa:	1b64      	subs	r4, r4, r5
 80019fc:	10a4      	asrs	r4, r4, #2
 80019fe:	2600      	movs	r6, #0
 8001a00:	42a6      	cmp	r6, r4
 8001a02:	d109      	bne.n	8001a18 <__libc_init_array+0x24>
 8001a04:	4d0b      	ldr	r5, [pc, #44]	; (8001a34 <__libc_init_array+0x40>)
 8001a06:	4c0c      	ldr	r4, [pc, #48]	; (8001a38 <__libc_init_array+0x44>)
 8001a08:	f000 fd20 	bl	800244c <_init>
 8001a0c:	1b64      	subs	r4, r4, r5
 8001a0e:	10a4      	asrs	r4, r4, #2
 8001a10:	2600      	movs	r6, #0
 8001a12:	42a6      	cmp	r6, r4
 8001a14:	d105      	bne.n	8001a22 <__libc_init_array+0x2e>
 8001a16:	bd70      	pop	{r4, r5, r6, pc}
 8001a18:	f855 3b04 	ldr.w	r3, [r5], #4
 8001a1c:	4798      	blx	r3
 8001a1e:	3601      	adds	r6, #1
 8001a20:	e7ee      	b.n	8001a00 <__libc_init_array+0xc>
 8001a22:	f855 3b04 	ldr.w	r3, [r5], #4
 8001a26:	4798      	blx	r3
 8001a28:	3601      	adds	r6, #1
 8001a2a:	e7f2      	b.n	8001a12 <__libc_init_array+0x1e>
 8001a2c:	08002564 	.word	0x08002564
 8001a30:	08002564 	.word	0x08002564
 8001a34:	08002564 	.word	0x08002564
 8001a38:	08002568 	.word	0x08002568

08001a3c <__retarget_lock_acquire_recursive>:
 8001a3c:	4770      	bx	lr

08001a3e <__retarget_lock_release_recursive>:
 8001a3e:	4770      	bx	lr

08001a40 <_free_r>:
 8001a40:	b538      	push	{r3, r4, r5, lr}
 8001a42:	4605      	mov	r5, r0
 8001a44:	2900      	cmp	r1, #0
 8001a46:	d041      	beq.n	8001acc <_free_r+0x8c>
 8001a48:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001a4c:	1f0c      	subs	r4, r1, #4
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	bfb8      	it	lt
 8001a52:	18e4      	addlt	r4, r4, r3
 8001a54:	f000 f8de 	bl	8001c14 <__malloc_lock>
 8001a58:	4a1d      	ldr	r2, [pc, #116]	; (8001ad0 <_free_r+0x90>)
 8001a5a:	6813      	ldr	r3, [r2, #0]
 8001a5c:	b933      	cbnz	r3, 8001a6c <_free_r+0x2c>
 8001a5e:	6063      	str	r3, [r4, #4]
 8001a60:	6014      	str	r4, [r2, #0]
 8001a62:	4628      	mov	r0, r5
 8001a64:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001a68:	f000 b8da 	b.w	8001c20 <__malloc_unlock>
 8001a6c:	42a3      	cmp	r3, r4
 8001a6e:	d908      	bls.n	8001a82 <_free_r+0x42>
 8001a70:	6820      	ldr	r0, [r4, #0]
 8001a72:	1821      	adds	r1, r4, r0
 8001a74:	428b      	cmp	r3, r1
 8001a76:	bf01      	itttt	eq
 8001a78:	6819      	ldreq	r1, [r3, #0]
 8001a7a:	685b      	ldreq	r3, [r3, #4]
 8001a7c:	1809      	addeq	r1, r1, r0
 8001a7e:	6021      	streq	r1, [r4, #0]
 8001a80:	e7ed      	b.n	8001a5e <_free_r+0x1e>
 8001a82:	461a      	mov	r2, r3
 8001a84:	685b      	ldr	r3, [r3, #4]
 8001a86:	b10b      	cbz	r3, 8001a8c <_free_r+0x4c>
 8001a88:	42a3      	cmp	r3, r4
 8001a8a:	d9fa      	bls.n	8001a82 <_free_r+0x42>
 8001a8c:	6811      	ldr	r1, [r2, #0]
 8001a8e:	1850      	adds	r0, r2, r1
 8001a90:	42a0      	cmp	r0, r4
 8001a92:	d10b      	bne.n	8001aac <_free_r+0x6c>
 8001a94:	6820      	ldr	r0, [r4, #0]
 8001a96:	4401      	add	r1, r0
 8001a98:	1850      	adds	r0, r2, r1
 8001a9a:	4283      	cmp	r3, r0
 8001a9c:	6011      	str	r1, [r2, #0]
 8001a9e:	d1e0      	bne.n	8001a62 <_free_r+0x22>
 8001aa0:	6818      	ldr	r0, [r3, #0]
 8001aa2:	685b      	ldr	r3, [r3, #4]
 8001aa4:	6053      	str	r3, [r2, #4]
 8001aa6:	4408      	add	r0, r1
 8001aa8:	6010      	str	r0, [r2, #0]
 8001aaa:	e7da      	b.n	8001a62 <_free_r+0x22>
 8001aac:	d902      	bls.n	8001ab4 <_free_r+0x74>
 8001aae:	230c      	movs	r3, #12
 8001ab0:	602b      	str	r3, [r5, #0]
 8001ab2:	e7d6      	b.n	8001a62 <_free_r+0x22>
 8001ab4:	6820      	ldr	r0, [r4, #0]
 8001ab6:	1821      	adds	r1, r4, r0
 8001ab8:	428b      	cmp	r3, r1
 8001aba:	bf04      	itt	eq
 8001abc:	6819      	ldreq	r1, [r3, #0]
 8001abe:	685b      	ldreq	r3, [r3, #4]
 8001ac0:	6063      	str	r3, [r4, #4]
 8001ac2:	bf04      	itt	eq
 8001ac4:	1809      	addeq	r1, r1, r0
 8001ac6:	6021      	streq	r1, [r4, #0]
 8001ac8:	6054      	str	r4, [r2, #4]
 8001aca:	e7ca      	b.n	8001a62 <_free_r+0x22>
 8001acc:	bd38      	pop	{r3, r4, r5, pc}
 8001ace:	bf00      	nop
 8001ad0:	20000218 	.word	0x20000218

08001ad4 <sbrk_aligned>:
 8001ad4:	b570      	push	{r4, r5, r6, lr}
 8001ad6:	4e0e      	ldr	r6, [pc, #56]	; (8001b10 <sbrk_aligned+0x3c>)
 8001ad8:	460c      	mov	r4, r1
 8001ada:	6831      	ldr	r1, [r6, #0]
 8001adc:	4605      	mov	r5, r0
 8001ade:	b911      	cbnz	r1, 8001ae6 <sbrk_aligned+0x12>
 8001ae0:	f000 fca4 	bl	800242c <_sbrk_r>
 8001ae4:	6030      	str	r0, [r6, #0]
 8001ae6:	4621      	mov	r1, r4
 8001ae8:	4628      	mov	r0, r5
 8001aea:	f000 fc9f 	bl	800242c <_sbrk_r>
 8001aee:	1c43      	adds	r3, r0, #1
 8001af0:	d00a      	beq.n	8001b08 <sbrk_aligned+0x34>
 8001af2:	1cc4      	adds	r4, r0, #3
 8001af4:	f024 0403 	bic.w	r4, r4, #3
 8001af8:	42a0      	cmp	r0, r4
 8001afa:	d007      	beq.n	8001b0c <sbrk_aligned+0x38>
 8001afc:	1a21      	subs	r1, r4, r0
 8001afe:	4628      	mov	r0, r5
 8001b00:	f000 fc94 	bl	800242c <_sbrk_r>
 8001b04:	3001      	adds	r0, #1
 8001b06:	d101      	bne.n	8001b0c <sbrk_aligned+0x38>
 8001b08:	f04f 34ff 	mov.w	r4, #4294967295
 8001b0c:	4620      	mov	r0, r4
 8001b0e:	bd70      	pop	{r4, r5, r6, pc}
 8001b10:	2000021c 	.word	0x2000021c

08001b14 <_malloc_r>:
 8001b14:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001b18:	1ccd      	adds	r5, r1, #3
 8001b1a:	f025 0503 	bic.w	r5, r5, #3
 8001b1e:	3508      	adds	r5, #8
 8001b20:	2d0c      	cmp	r5, #12
 8001b22:	bf38      	it	cc
 8001b24:	250c      	movcc	r5, #12
 8001b26:	2d00      	cmp	r5, #0
 8001b28:	4607      	mov	r7, r0
 8001b2a:	db01      	blt.n	8001b30 <_malloc_r+0x1c>
 8001b2c:	42a9      	cmp	r1, r5
 8001b2e:	d905      	bls.n	8001b3c <_malloc_r+0x28>
 8001b30:	230c      	movs	r3, #12
 8001b32:	603b      	str	r3, [r7, #0]
 8001b34:	2600      	movs	r6, #0
 8001b36:	4630      	mov	r0, r6
 8001b38:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001b3c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8001c10 <_malloc_r+0xfc>
 8001b40:	f000 f868 	bl	8001c14 <__malloc_lock>
 8001b44:	f8d8 3000 	ldr.w	r3, [r8]
 8001b48:	461c      	mov	r4, r3
 8001b4a:	bb5c      	cbnz	r4, 8001ba4 <_malloc_r+0x90>
 8001b4c:	4629      	mov	r1, r5
 8001b4e:	4638      	mov	r0, r7
 8001b50:	f7ff ffc0 	bl	8001ad4 <sbrk_aligned>
 8001b54:	1c43      	adds	r3, r0, #1
 8001b56:	4604      	mov	r4, r0
 8001b58:	d155      	bne.n	8001c06 <_malloc_r+0xf2>
 8001b5a:	f8d8 4000 	ldr.w	r4, [r8]
 8001b5e:	4626      	mov	r6, r4
 8001b60:	2e00      	cmp	r6, #0
 8001b62:	d145      	bne.n	8001bf0 <_malloc_r+0xdc>
 8001b64:	2c00      	cmp	r4, #0
 8001b66:	d048      	beq.n	8001bfa <_malloc_r+0xe6>
 8001b68:	6823      	ldr	r3, [r4, #0]
 8001b6a:	4631      	mov	r1, r6
 8001b6c:	4638      	mov	r0, r7
 8001b6e:	eb04 0903 	add.w	r9, r4, r3
 8001b72:	f000 fc5b 	bl	800242c <_sbrk_r>
 8001b76:	4581      	cmp	r9, r0
 8001b78:	d13f      	bne.n	8001bfa <_malloc_r+0xe6>
 8001b7a:	6821      	ldr	r1, [r4, #0]
 8001b7c:	1a6d      	subs	r5, r5, r1
 8001b7e:	4629      	mov	r1, r5
 8001b80:	4638      	mov	r0, r7
 8001b82:	f7ff ffa7 	bl	8001ad4 <sbrk_aligned>
 8001b86:	3001      	adds	r0, #1
 8001b88:	d037      	beq.n	8001bfa <_malloc_r+0xe6>
 8001b8a:	6823      	ldr	r3, [r4, #0]
 8001b8c:	442b      	add	r3, r5
 8001b8e:	6023      	str	r3, [r4, #0]
 8001b90:	f8d8 3000 	ldr.w	r3, [r8]
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d038      	beq.n	8001c0a <_malloc_r+0xf6>
 8001b98:	685a      	ldr	r2, [r3, #4]
 8001b9a:	42a2      	cmp	r2, r4
 8001b9c:	d12b      	bne.n	8001bf6 <_malloc_r+0xe2>
 8001b9e:	2200      	movs	r2, #0
 8001ba0:	605a      	str	r2, [r3, #4]
 8001ba2:	e00f      	b.n	8001bc4 <_malloc_r+0xb0>
 8001ba4:	6822      	ldr	r2, [r4, #0]
 8001ba6:	1b52      	subs	r2, r2, r5
 8001ba8:	d41f      	bmi.n	8001bea <_malloc_r+0xd6>
 8001baa:	2a0b      	cmp	r2, #11
 8001bac:	d917      	bls.n	8001bde <_malloc_r+0xca>
 8001bae:	1961      	adds	r1, r4, r5
 8001bb0:	42a3      	cmp	r3, r4
 8001bb2:	6025      	str	r5, [r4, #0]
 8001bb4:	bf18      	it	ne
 8001bb6:	6059      	strne	r1, [r3, #4]
 8001bb8:	6863      	ldr	r3, [r4, #4]
 8001bba:	bf08      	it	eq
 8001bbc:	f8c8 1000 	streq.w	r1, [r8]
 8001bc0:	5162      	str	r2, [r4, r5]
 8001bc2:	604b      	str	r3, [r1, #4]
 8001bc4:	4638      	mov	r0, r7
 8001bc6:	f104 060b 	add.w	r6, r4, #11
 8001bca:	f000 f829 	bl	8001c20 <__malloc_unlock>
 8001bce:	f026 0607 	bic.w	r6, r6, #7
 8001bd2:	1d23      	adds	r3, r4, #4
 8001bd4:	1af2      	subs	r2, r6, r3
 8001bd6:	d0ae      	beq.n	8001b36 <_malloc_r+0x22>
 8001bd8:	1b9b      	subs	r3, r3, r6
 8001bda:	50a3      	str	r3, [r4, r2]
 8001bdc:	e7ab      	b.n	8001b36 <_malloc_r+0x22>
 8001bde:	42a3      	cmp	r3, r4
 8001be0:	6862      	ldr	r2, [r4, #4]
 8001be2:	d1dd      	bne.n	8001ba0 <_malloc_r+0x8c>
 8001be4:	f8c8 2000 	str.w	r2, [r8]
 8001be8:	e7ec      	b.n	8001bc4 <_malloc_r+0xb0>
 8001bea:	4623      	mov	r3, r4
 8001bec:	6864      	ldr	r4, [r4, #4]
 8001bee:	e7ac      	b.n	8001b4a <_malloc_r+0x36>
 8001bf0:	4634      	mov	r4, r6
 8001bf2:	6876      	ldr	r6, [r6, #4]
 8001bf4:	e7b4      	b.n	8001b60 <_malloc_r+0x4c>
 8001bf6:	4613      	mov	r3, r2
 8001bf8:	e7cc      	b.n	8001b94 <_malloc_r+0x80>
 8001bfa:	230c      	movs	r3, #12
 8001bfc:	603b      	str	r3, [r7, #0]
 8001bfe:	4638      	mov	r0, r7
 8001c00:	f000 f80e 	bl	8001c20 <__malloc_unlock>
 8001c04:	e797      	b.n	8001b36 <_malloc_r+0x22>
 8001c06:	6025      	str	r5, [r4, #0]
 8001c08:	e7dc      	b.n	8001bc4 <_malloc_r+0xb0>
 8001c0a:	605b      	str	r3, [r3, #4]
 8001c0c:	deff      	udf	#255	; 0xff
 8001c0e:	bf00      	nop
 8001c10:	20000218 	.word	0x20000218

08001c14 <__malloc_lock>:
 8001c14:	4801      	ldr	r0, [pc, #4]	; (8001c1c <__malloc_lock+0x8>)
 8001c16:	f7ff bf11 	b.w	8001a3c <__retarget_lock_acquire_recursive>
 8001c1a:	bf00      	nop
 8001c1c:	20000214 	.word	0x20000214

08001c20 <__malloc_unlock>:
 8001c20:	4801      	ldr	r0, [pc, #4]	; (8001c28 <__malloc_unlock+0x8>)
 8001c22:	f7ff bf0c 	b.w	8001a3e <__retarget_lock_release_recursive>
 8001c26:	bf00      	nop
 8001c28:	20000214 	.word	0x20000214

08001c2c <__sfputc_r>:
 8001c2c:	6893      	ldr	r3, [r2, #8]
 8001c2e:	3b01      	subs	r3, #1
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	b410      	push	{r4}
 8001c34:	6093      	str	r3, [r2, #8]
 8001c36:	da07      	bge.n	8001c48 <__sfputc_r+0x1c>
 8001c38:	6994      	ldr	r4, [r2, #24]
 8001c3a:	42a3      	cmp	r3, r4
 8001c3c:	db01      	blt.n	8001c42 <__sfputc_r+0x16>
 8001c3e:	290a      	cmp	r1, #10
 8001c40:	d102      	bne.n	8001c48 <__sfputc_r+0x1c>
 8001c42:	bc10      	pop	{r4}
 8001c44:	f7ff bded 	b.w	8001822 <__swbuf_r>
 8001c48:	6813      	ldr	r3, [r2, #0]
 8001c4a:	1c58      	adds	r0, r3, #1
 8001c4c:	6010      	str	r0, [r2, #0]
 8001c4e:	7019      	strb	r1, [r3, #0]
 8001c50:	4608      	mov	r0, r1
 8001c52:	bc10      	pop	{r4}
 8001c54:	4770      	bx	lr

08001c56 <__sfputs_r>:
 8001c56:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001c58:	4606      	mov	r6, r0
 8001c5a:	460f      	mov	r7, r1
 8001c5c:	4614      	mov	r4, r2
 8001c5e:	18d5      	adds	r5, r2, r3
 8001c60:	42ac      	cmp	r4, r5
 8001c62:	d101      	bne.n	8001c68 <__sfputs_r+0x12>
 8001c64:	2000      	movs	r0, #0
 8001c66:	e007      	b.n	8001c78 <__sfputs_r+0x22>
 8001c68:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001c6c:	463a      	mov	r2, r7
 8001c6e:	4630      	mov	r0, r6
 8001c70:	f7ff ffdc 	bl	8001c2c <__sfputc_r>
 8001c74:	1c43      	adds	r3, r0, #1
 8001c76:	d1f3      	bne.n	8001c60 <__sfputs_r+0xa>
 8001c78:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08001c7c <_vfiprintf_r>:
 8001c7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001c80:	460d      	mov	r5, r1
 8001c82:	b09d      	sub	sp, #116	; 0x74
 8001c84:	4614      	mov	r4, r2
 8001c86:	4698      	mov	r8, r3
 8001c88:	4606      	mov	r6, r0
 8001c8a:	b118      	cbz	r0, 8001c94 <_vfiprintf_r+0x18>
 8001c8c:	6a03      	ldr	r3, [r0, #32]
 8001c8e:	b90b      	cbnz	r3, 8001c94 <_vfiprintf_r+0x18>
 8001c90:	f7ff fce0 	bl	8001654 <__sinit>
 8001c94:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8001c96:	07d9      	lsls	r1, r3, #31
 8001c98:	d405      	bmi.n	8001ca6 <_vfiprintf_r+0x2a>
 8001c9a:	89ab      	ldrh	r3, [r5, #12]
 8001c9c:	059a      	lsls	r2, r3, #22
 8001c9e:	d402      	bmi.n	8001ca6 <_vfiprintf_r+0x2a>
 8001ca0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8001ca2:	f7ff fecb 	bl	8001a3c <__retarget_lock_acquire_recursive>
 8001ca6:	89ab      	ldrh	r3, [r5, #12]
 8001ca8:	071b      	lsls	r3, r3, #28
 8001caa:	d501      	bpl.n	8001cb0 <_vfiprintf_r+0x34>
 8001cac:	692b      	ldr	r3, [r5, #16]
 8001cae:	b99b      	cbnz	r3, 8001cd8 <_vfiprintf_r+0x5c>
 8001cb0:	4629      	mov	r1, r5
 8001cb2:	4630      	mov	r0, r6
 8001cb4:	f7ff fdf2 	bl	800189c <__swsetup_r>
 8001cb8:	b170      	cbz	r0, 8001cd8 <_vfiprintf_r+0x5c>
 8001cba:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8001cbc:	07dc      	lsls	r4, r3, #31
 8001cbe:	d504      	bpl.n	8001cca <_vfiprintf_r+0x4e>
 8001cc0:	f04f 30ff 	mov.w	r0, #4294967295
 8001cc4:	b01d      	add	sp, #116	; 0x74
 8001cc6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001cca:	89ab      	ldrh	r3, [r5, #12]
 8001ccc:	0598      	lsls	r0, r3, #22
 8001cce:	d4f7      	bmi.n	8001cc0 <_vfiprintf_r+0x44>
 8001cd0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8001cd2:	f7ff feb4 	bl	8001a3e <__retarget_lock_release_recursive>
 8001cd6:	e7f3      	b.n	8001cc0 <_vfiprintf_r+0x44>
 8001cd8:	2300      	movs	r3, #0
 8001cda:	9309      	str	r3, [sp, #36]	; 0x24
 8001cdc:	2320      	movs	r3, #32
 8001cde:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8001ce2:	f8cd 800c 	str.w	r8, [sp, #12]
 8001ce6:	2330      	movs	r3, #48	; 0x30
 8001ce8:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8001e9c <_vfiprintf_r+0x220>
 8001cec:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8001cf0:	f04f 0901 	mov.w	r9, #1
 8001cf4:	4623      	mov	r3, r4
 8001cf6:	469a      	mov	sl, r3
 8001cf8:	f813 2b01 	ldrb.w	r2, [r3], #1
 8001cfc:	b10a      	cbz	r2, 8001d02 <_vfiprintf_r+0x86>
 8001cfe:	2a25      	cmp	r2, #37	; 0x25
 8001d00:	d1f9      	bne.n	8001cf6 <_vfiprintf_r+0x7a>
 8001d02:	ebba 0b04 	subs.w	fp, sl, r4
 8001d06:	d00b      	beq.n	8001d20 <_vfiprintf_r+0xa4>
 8001d08:	465b      	mov	r3, fp
 8001d0a:	4622      	mov	r2, r4
 8001d0c:	4629      	mov	r1, r5
 8001d0e:	4630      	mov	r0, r6
 8001d10:	f7ff ffa1 	bl	8001c56 <__sfputs_r>
 8001d14:	3001      	adds	r0, #1
 8001d16:	f000 80a9 	beq.w	8001e6c <_vfiprintf_r+0x1f0>
 8001d1a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8001d1c:	445a      	add	r2, fp
 8001d1e:	9209      	str	r2, [sp, #36]	; 0x24
 8001d20:	f89a 3000 	ldrb.w	r3, [sl]
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	f000 80a1 	beq.w	8001e6c <_vfiprintf_r+0x1f0>
 8001d2a:	2300      	movs	r3, #0
 8001d2c:	f04f 32ff 	mov.w	r2, #4294967295
 8001d30:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8001d34:	f10a 0a01 	add.w	sl, sl, #1
 8001d38:	9304      	str	r3, [sp, #16]
 8001d3a:	9307      	str	r3, [sp, #28]
 8001d3c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8001d40:	931a      	str	r3, [sp, #104]	; 0x68
 8001d42:	4654      	mov	r4, sl
 8001d44:	2205      	movs	r2, #5
 8001d46:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001d4a:	4854      	ldr	r0, [pc, #336]	; (8001e9c <_vfiprintf_r+0x220>)
 8001d4c:	f7fe fa50 	bl	80001f0 <memchr>
 8001d50:	9a04      	ldr	r2, [sp, #16]
 8001d52:	b9d8      	cbnz	r0, 8001d8c <_vfiprintf_r+0x110>
 8001d54:	06d1      	lsls	r1, r2, #27
 8001d56:	bf44      	itt	mi
 8001d58:	2320      	movmi	r3, #32
 8001d5a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8001d5e:	0713      	lsls	r3, r2, #28
 8001d60:	bf44      	itt	mi
 8001d62:	232b      	movmi	r3, #43	; 0x2b
 8001d64:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8001d68:	f89a 3000 	ldrb.w	r3, [sl]
 8001d6c:	2b2a      	cmp	r3, #42	; 0x2a
 8001d6e:	d015      	beq.n	8001d9c <_vfiprintf_r+0x120>
 8001d70:	9a07      	ldr	r2, [sp, #28]
 8001d72:	4654      	mov	r4, sl
 8001d74:	2000      	movs	r0, #0
 8001d76:	f04f 0c0a 	mov.w	ip, #10
 8001d7a:	4621      	mov	r1, r4
 8001d7c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8001d80:	3b30      	subs	r3, #48	; 0x30
 8001d82:	2b09      	cmp	r3, #9
 8001d84:	d94d      	bls.n	8001e22 <_vfiprintf_r+0x1a6>
 8001d86:	b1b0      	cbz	r0, 8001db6 <_vfiprintf_r+0x13a>
 8001d88:	9207      	str	r2, [sp, #28]
 8001d8a:	e014      	b.n	8001db6 <_vfiprintf_r+0x13a>
 8001d8c:	eba0 0308 	sub.w	r3, r0, r8
 8001d90:	fa09 f303 	lsl.w	r3, r9, r3
 8001d94:	4313      	orrs	r3, r2
 8001d96:	9304      	str	r3, [sp, #16]
 8001d98:	46a2      	mov	sl, r4
 8001d9a:	e7d2      	b.n	8001d42 <_vfiprintf_r+0xc6>
 8001d9c:	9b03      	ldr	r3, [sp, #12]
 8001d9e:	1d19      	adds	r1, r3, #4
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	9103      	str	r1, [sp, #12]
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	bfbb      	ittet	lt
 8001da8:	425b      	neglt	r3, r3
 8001daa:	f042 0202 	orrlt.w	r2, r2, #2
 8001dae:	9307      	strge	r3, [sp, #28]
 8001db0:	9307      	strlt	r3, [sp, #28]
 8001db2:	bfb8      	it	lt
 8001db4:	9204      	strlt	r2, [sp, #16]
 8001db6:	7823      	ldrb	r3, [r4, #0]
 8001db8:	2b2e      	cmp	r3, #46	; 0x2e
 8001dba:	d10c      	bne.n	8001dd6 <_vfiprintf_r+0x15a>
 8001dbc:	7863      	ldrb	r3, [r4, #1]
 8001dbe:	2b2a      	cmp	r3, #42	; 0x2a
 8001dc0:	d134      	bne.n	8001e2c <_vfiprintf_r+0x1b0>
 8001dc2:	9b03      	ldr	r3, [sp, #12]
 8001dc4:	1d1a      	adds	r2, r3, #4
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	9203      	str	r2, [sp, #12]
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	bfb8      	it	lt
 8001dce:	f04f 33ff 	movlt.w	r3, #4294967295
 8001dd2:	3402      	adds	r4, #2
 8001dd4:	9305      	str	r3, [sp, #20]
 8001dd6:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8001ea0 <_vfiprintf_r+0x224>
 8001dda:	7821      	ldrb	r1, [r4, #0]
 8001ddc:	2203      	movs	r2, #3
 8001dde:	4650      	mov	r0, sl
 8001de0:	f7fe fa06 	bl	80001f0 <memchr>
 8001de4:	b138      	cbz	r0, 8001df6 <_vfiprintf_r+0x17a>
 8001de6:	9b04      	ldr	r3, [sp, #16]
 8001de8:	eba0 000a 	sub.w	r0, r0, sl
 8001dec:	2240      	movs	r2, #64	; 0x40
 8001dee:	4082      	lsls	r2, r0
 8001df0:	4313      	orrs	r3, r2
 8001df2:	3401      	adds	r4, #1
 8001df4:	9304      	str	r3, [sp, #16]
 8001df6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001dfa:	482a      	ldr	r0, [pc, #168]	; (8001ea4 <_vfiprintf_r+0x228>)
 8001dfc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8001e00:	2206      	movs	r2, #6
 8001e02:	f7fe f9f5 	bl	80001f0 <memchr>
 8001e06:	2800      	cmp	r0, #0
 8001e08:	d03f      	beq.n	8001e8a <_vfiprintf_r+0x20e>
 8001e0a:	4b27      	ldr	r3, [pc, #156]	; (8001ea8 <_vfiprintf_r+0x22c>)
 8001e0c:	bb1b      	cbnz	r3, 8001e56 <_vfiprintf_r+0x1da>
 8001e0e:	9b03      	ldr	r3, [sp, #12]
 8001e10:	3307      	adds	r3, #7
 8001e12:	f023 0307 	bic.w	r3, r3, #7
 8001e16:	3308      	adds	r3, #8
 8001e18:	9303      	str	r3, [sp, #12]
 8001e1a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001e1c:	443b      	add	r3, r7
 8001e1e:	9309      	str	r3, [sp, #36]	; 0x24
 8001e20:	e768      	b.n	8001cf4 <_vfiprintf_r+0x78>
 8001e22:	fb0c 3202 	mla	r2, ip, r2, r3
 8001e26:	460c      	mov	r4, r1
 8001e28:	2001      	movs	r0, #1
 8001e2a:	e7a6      	b.n	8001d7a <_vfiprintf_r+0xfe>
 8001e2c:	2300      	movs	r3, #0
 8001e2e:	3401      	adds	r4, #1
 8001e30:	9305      	str	r3, [sp, #20]
 8001e32:	4619      	mov	r1, r3
 8001e34:	f04f 0c0a 	mov.w	ip, #10
 8001e38:	4620      	mov	r0, r4
 8001e3a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8001e3e:	3a30      	subs	r2, #48	; 0x30
 8001e40:	2a09      	cmp	r2, #9
 8001e42:	d903      	bls.n	8001e4c <_vfiprintf_r+0x1d0>
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d0c6      	beq.n	8001dd6 <_vfiprintf_r+0x15a>
 8001e48:	9105      	str	r1, [sp, #20]
 8001e4a:	e7c4      	b.n	8001dd6 <_vfiprintf_r+0x15a>
 8001e4c:	fb0c 2101 	mla	r1, ip, r1, r2
 8001e50:	4604      	mov	r4, r0
 8001e52:	2301      	movs	r3, #1
 8001e54:	e7f0      	b.n	8001e38 <_vfiprintf_r+0x1bc>
 8001e56:	ab03      	add	r3, sp, #12
 8001e58:	9300      	str	r3, [sp, #0]
 8001e5a:	462a      	mov	r2, r5
 8001e5c:	4b13      	ldr	r3, [pc, #76]	; (8001eac <_vfiprintf_r+0x230>)
 8001e5e:	a904      	add	r1, sp, #16
 8001e60:	4630      	mov	r0, r6
 8001e62:	f3af 8000 	nop.w
 8001e66:	4607      	mov	r7, r0
 8001e68:	1c78      	adds	r0, r7, #1
 8001e6a:	d1d6      	bne.n	8001e1a <_vfiprintf_r+0x19e>
 8001e6c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8001e6e:	07d9      	lsls	r1, r3, #31
 8001e70:	d405      	bmi.n	8001e7e <_vfiprintf_r+0x202>
 8001e72:	89ab      	ldrh	r3, [r5, #12]
 8001e74:	059a      	lsls	r2, r3, #22
 8001e76:	d402      	bmi.n	8001e7e <_vfiprintf_r+0x202>
 8001e78:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8001e7a:	f7ff fde0 	bl	8001a3e <__retarget_lock_release_recursive>
 8001e7e:	89ab      	ldrh	r3, [r5, #12]
 8001e80:	065b      	lsls	r3, r3, #25
 8001e82:	f53f af1d 	bmi.w	8001cc0 <_vfiprintf_r+0x44>
 8001e86:	9809      	ldr	r0, [sp, #36]	; 0x24
 8001e88:	e71c      	b.n	8001cc4 <_vfiprintf_r+0x48>
 8001e8a:	ab03      	add	r3, sp, #12
 8001e8c:	9300      	str	r3, [sp, #0]
 8001e8e:	462a      	mov	r2, r5
 8001e90:	4b06      	ldr	r3, [pc, #24]	; (8001eac <_vfiprintf_r+0x230>)
 8001e92:	a904      	add	r1, sp, #16
 8001e94:	4630      	mov	r0, r6
 8001e96:	f000 f879 	bl	8001f8c <_printf_i>
 8001e9a:	e7e4      	b.n	8001e66 <_vfiprintf_r+0x1ea>
 8001e9c:	0800252f 	.word	0x0800252f
 8001ea0:	08002535 	.word	0x08002535
 8001ea4:	08002539 	.word	0x08002539
 8001ea8:	00000000 	.word	0x00000000
 8001eac:	08001c57 	.word	0x08001c57

08001eb0 <_printf_common>:
 8001eb0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001eb4:	4616      	mov	r6, r2
 8001eb6:	4699      	mov	r9, r3
 8001eb8:	688a      	ldr	r2, [r1, #8]
 8001eba:	690b      	ldr	r3, [r1, #16]
 8001ebc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8001ec0:	4293      	cmp	r3, r2
 8001ec2:	bfb8      	it	lt
 8001ec4:	4613      	movlt	r3, r2
 8001ec6:	6033      	str	r3, [r6, #0]
 8001ec8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8001ecc:	4607      	mov	r7, r0
 8001ece:	460c      	mov	r4, r1
 8001ed0:	b10a      	cbz	r2, 8001ed6 <_printf_common+0x26>
 8001ed2:	3301      	adds	r3, #1
 8001ed4:	6033      	str	r3, [r6, #0]
 8001ed6:	6823      	ldr	r3, [r4, #0]
 8001ed8:	0699      	lsls	r1, r3, #26
 8001eda:	bf42      	ittt	mi
 8001edc:	6833      	ldrmi	r3, [r6, #0]
 8001ede:	3302      	addmi	r3, #2
 8001ee0:	6033      	strmi	r3, [r6, #0]
 8001ee2:	6825      	ldr	r5, [r4, #0]
 8001ee4:	f015 0506 	ands.w	r5, r5, #6
 8001ee8:	d106      	bne.n	8001ef8 <_printf_common+0x48>
 8001eea:	f104 0a19 	add.w	sl, r4, #25
 8001eee:	68e3      	ldr	r3, [r4, #12]
 8001ef0:	6832      	ldr	r2, [r6, #0]
 8001ef2:	1a9b      	subs	r3, r3, r2
 8001ef4:	42ab      	cmp	r3, r5
 8001ef6:	dc26      	bgt.n	8001f46 <_printf_common+0x96>
 8001ef8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8001efc:	1e13      	subs	r3, r2, #0
 8001efe:	6822      	ldr	r2, [r4, #0]
 8001f00:	bf18      	it	ne
 8001f02:	2301      	movne	r3, #1
 8001f04:	0692      	lsls	r2, r2, #26
 8001f06:	d42b      	bmi.n	8001f60 <_printf_common+0xb0>
 8001f08:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8001f0c:	4649      	mov	r1, r9
 8001f0e:	4638      	mov	r0, r7
 8001f10:	47c0      	blx	r8
 8001f12:	3001      	adds	r0, #1
 8001f14:	d01e      	beq.n	8001f54 <_printf_common+0xa4>
 8001f16:	6823      	ldr	r3, [r4, #0]
 8001f18:	6922      	ldr	r2, [r4, #16]
 8001f1a:	f003 0306 	and.w	r3, r3, #6
 8001f1e:	2b04      	cmp	r3, #4
 8001f20:	bf02      	ittt	eq
 8001f22:	68e5      	ldreq	r5, [r4, #12]
 8001f24:	6833      	ldreq	r3, [r6, #0]
 8001f26:	1aed      	subeq	r5, r5, r3
 8001f28:	68a3      	ldr	r3, [r4, #8]
 8001f2a:	bf0c      	ite	eq
 8001f2c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8001f30:	2500      	movne	r5, #0
 8001f32:	4293      	cmp	r3, r2
 8001f34:	bfc4      	itt	gt
 8001f36:	1a9b      	subgt	r3, r3, r2
 8001f38:	18ed      	addgt	r5, r5, r3
 8001f3a:	2600      	movs	r6, #0
 8001f3c:	341a      	adds	r4, #26
 8001f3e:	42b5      	cmp	r5, r6
 8001f40:	d11a      	bne.n	8001f78 <_printf_common+0xc8>
 8001f42:	2000      	movs	r0, #0
 8001f44:	e008      	b.n	8001f58 <_printf_common+0xa8>
 8001f46:	2301      	movs	r3, #1
 8001f48:	4652      	mov	r2, sl
 8001f4a:	4649      	mov	r1, r9
 8001f4c:	4638      	mov	r0, r7
 8001f4e:	47c0      	blx	r8
 8001f50:	3001      	adds	r0, #1
 8001f52:	d103      	bne.n	8001f5c <_printf_common+0xac>
 8001f54:	f04f 30ff 	mov.w	r0, #4294967295
 8001f58:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001f5c:	3501      	adds	r5, #1
 8001f5e:	e7c6      	b.n	8001eee <_printf_common+0x3e>
 8001f60:	18e1      	adds	r1, r4, r3
 8001f62:	1c5a      	adds	r2, r3, #1
 8001f64:	2030      	movs	r0, #48	; 0x30
 8001f66:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8001f6a:	4422      	add	r2, r4
 8001f6c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8001f70:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8001f74:	3302      	adds	r3, #2
 8001f76:	e7c7      	b.n	8001f08 <_printf_common+0x58>
 8001f78:	2301      	movs	r3, #1
 8001f7a:	4622      	mov	r2, r4
 8001f7c:	4649      	mov	r1, r9
 8001f7e:	4638      	mov	r0, r7
 8001f80:	47c0      	blx	r8
 8001f82:	3001      	adds	r0, #1
 8001f84:	d0e6      	beq.n	8001f54 <_printf_common+0xa4>
 8001f86:	3601      	adds	r6, #1
 8001f88:	e7d9      	b.n	8001f3e <_printf_common+0x8e>
	...

08001f8c <_printf_i>:
 8001f8c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8001f90:	7e0f      	ldrb	r7, [r1, #24]
 8001f92:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8001f94:	2f78      	cmp	r7, #120	; 0x78
 8001f96:	4691      	mov	r9, r2
 8001f98:	4680      	mov	r8, r0
 8001f9a:	460c      	mov	r4, r1
 8001f9c:	469a      	mov	sl, r3
 8001f9e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8001fa2:	d807      	bhi.n	8001fb4 <_printf_i+0x28>
 8001fa4:	2f62      	cmp	r7, #98	; 0x62
 8001fa6:	d80a      	bhi.n	8001fbe <_printf_i+0x32>
 8001fa8:	2f00      	cmp	r7, #0
 8001faa:	f000 80d4 	beq.w	8002156 <_printf_i+0x1ca>
 8001fae:	2f58      	cmp	r7, #88	; 0x58
 8001fb0:	f000 80c0 	beq.w	8002134 <_printf_i+0x1a8>
 8001fb4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8001fb8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8001fbc:	e03a      	b.n	8002034 <_printf_i+0xa8>
 8001fbe:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8001fc2:	2b15      	cmp	r3, #21
 8001fc4:	d8f6      	bhi.n	8001fb4 <_printf_i+0x28>
 8001fc6:	a101      	add	r1, pc, #4	; (adr r1, 8001fcc <_printf_i+0x40>)
 8001fc8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8001fcc:	08002025 	.word	0x08002025
 8001fd0:	08002039 	.word	0x08002039
 8001fd4:	08001fb5 	.word	0x08001fb5
 8001fd8:	08001fb5 	.word	0x08001fb5
 8001fdc:	08001fb5 	.word	0x08001fb5
 8001fe0:	08001fb5 	.word	0x08001fb5
 8001fe4:	08002039 	.word	0x08002039
 8001fe8:	08001fb5 	.word	0x08001fb5
 8001fec:	08001fb5 	.word	0x08001fb5
 8001ff0:	08001fb5 	.word	0x08001fb5
 8001ff4:	08001fb5 	.word	0x08001fb5
 8001ff8:	0800213d 	.word	0x0800213d
 8001ffc:	08002065 	.word	0x08002065
 8002000:	080020f7 	.word	0x080020f7
 8002004:	08001fb5 	.word	0x08001fb5
 8002008:	08001fb5 	.word	0x08001fb5
 800200c:	0800215f 	.word	0x0800215f
 8002010:	08001fb5 	.word	0x08001fb5
 8002014:	08002065 	.word	0x08002065
 8002018:	08001fb5 	.word	0x08001fb5
 800201c:	08001fb5 	.word	0x08001fb5
 8002020:	080020ff 	.word	0x080020ff
 8002024:	682b      	ldr	r3, [r5, #0]
 8002026:	1d1a      	adds	r2, r3, #4
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	602a      	str	r2, [r5, #0]
 800202c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002030:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002034:	2301      	movs	r3, #1
 8002036:	e09f      	b.n	8002178 <_printf_i+0x1ec>
 8002038:	6820      	ldr	r0, [r4, #0]
 800203a:	682b      	ldr	r3, [r5, #0]
 800203c:	0607      	lsls	r7, r0, #24
 800203e:	f103 0104 	add.w	r1, r3, #4
 8002042:	6029      	str	r1, [r5, #0]
 8002044:	d501      	bpl.n	800204a <_printf_i+0xbe>
 8002046:	681e      	ldr	r6, [r3, #0]
 8002048:	e003      	b.n	8002052 <_printf_i+0xc6>
 800204a:	0646      	lsls	r6, r0, #25
 800204c:	d5fb      	bpl.n	8002046 <_printf_i+0xba>
 800204e:	f9b3 6000 	ldrsh.w	r6, [r3]
 8002052:	2e00      	cmp	r6, #0
 8002054:	da03      	bge.n	800205e <_printf_i+0xd2>
 8002056:	232d      	movs	r3, #45	; 0x2d
 8002058:	4276      	negs	r6, r6
 800205a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800205e:	485a      	ldr	r0, [pc, #360]	; (80021c8 <_printf_i+0x23c>)
 8002060:	230a      	movs	r3, #10
 8002062:	e012      	b.n	800208a <_printf_i+0xfe>
 8002064:	682b      	ldr	r3, [r5, #0]
 8002066:	6820      	ldr	r0, [r4, #0]
 8002068:	1d19      	adds	r1, r3, #4
 800206a:	6029      	str	r1, [r5, #0]
 800206c:	0605      	lsls	r5, r0, #24
 800206e:	d501      	bpl.n	8002074 <_printf_i+0xe8>
 8002070:	681e      	ldr	r6, [r3, #0]
 8002072:	e002      	b.n	800207a <_printf_i+0xee>
 8002074:	0641      	lsls	r1, r0, #25
 8002076:	d5fb      	bpl.n	8002070 <_printf_i+0xe4>
 8002078:	881e      	ldrh	r6, [r3, #0]
 800207a:	4853      	ldr	r0, [pc, #332]	; (80021c8 <_printf_i+0x23c>)
 800207c:	2f6f      	cmp	r7, #111	; 0x6f
 800207e:	bf0c      	ite	eq
 8002080:	2308      	moveq	r3, #8
 8002082:	230a      	movne	r3, #10
 8002084:	2100      	movs	r1, #0
 8002086:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800208a:	6865      	ldr	r5, [r4, #4]
 800208c:	60a5      	str	r5, [r4, #8]
 800208e:	2d00      	cmp	r5, #0
 8002090:	bfa2      	ittt	ge
 8002092:	6821      	ldrge	r1, [r4, #0]
 8002094:	f021 0104 	bicge.w	r1, r1, #4
 8002098:	6021      	strge	r1, [r4, #0]
 800209a:	b90e      	cbnz	r6, 80020a0 <_printf_i+0x114>
 800209c:	2d00      	cmp	r5, #0
 800209e:	d04b      	beq.n	8002138 <_printf_i+0x1ac>
 80020a0:	4615      	mov	r5, r2
 80020a2:	fbb6 f1f3 	udiv	r1, r6, r3
 80020a6:	fb03 6711 	mls	r7, r3, r1, r6
 80020aa:	5dc7      	ldrb	r7, [r0, r7]
 80020ac:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80020b0:	4637      	mov	r7, r6
 80020b2:	42bb      	cmp	r3, r7
 80020b4:	460e      	mov	r6, r1
 80020b6:	d9f4      	bls.n	80020a2 <_printf_i+0x116>
 80020b8:	2b08      	cmp	r3, #8
 80020ba:	d10b      	bne.n	80020d4 <_printf_i+0x148>
 80020bc:	6823      	ldr	r3, [r4, #0]
 80020be:	07de      	lsls	r6, r3, #31
 80020c0:	d508      	bpl.n	80020d4 <_printf_i+0x148>
 80020c2:	6923      	ldr	r3, [r4, #16]
 80020c4:	6861      	ldr	r1, [r4, #4]
 80020c6:	4299      	cmp	r1, r3
 80020c8:	bfde      	ittt	le
 80020ca:	2330      	movle	r3, #48	; 0x30
 80020cc:	f805 3c01 	strble.w	r3, [r5, #-1]
 80020d0:	f105 35ff 	addle.w	r5, r5, #4294967295
 80020d4:	1b52      	subs	r2, r2, r5
 80020d6:	6122      	str	r2, [r4, #16]
 80020d8:	f8cd a000 	str.w	sl, [sp]
 80020dc:	464b      	mov	r3, r9
 80020de:	aa03      	add	r2, sp, #12
 80020e0:	4621      	mov	r1, r4
 80020e2:	4640      	mov	r0, r8
 80020e4:	f7ff fee4 	bl	8001eb0 <_printf_common>
 80020e8:	3001      	adds	r0, #1
 80020ea:	d14a      	bne.n	8002182 <_printf_i+0x1f6>
 80020ec:	f04f 30ff 	mov.w	r0, #4294967295
 80020f0:	b004      	add	sp, #16
 80020f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80020f6:	6823      	ldr	r3, [r4, #0]
 80020f8:	f043 0320 	orr.w	r3, r3, #32
 80020fc:	6023      	str	r3, [r4, #0]
 80020fe:	4833      	ldr	r0, [pc, #204]	; (80021cc <_printf_i+0x240>)
 8002100:	2778      	movs	r7, #120	; 0x78
 8002102:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8002106:	6823      	ldr	r3, [r4, #0]
 8002108:	6829      	ldr	r1, [r5, #0]
 800210a:	061f      	lsls	r7, r3, #24
 800210c:	f851 6b04 	ldr.w	r6, [r1], #4
 8002110:	d402      	bmi.n	8002118 <_printf_i+0x18c>
 8002112:	065f      	lsls	r7, r3, #25
 8002114:	bf48      	it	mi
 8002116:	b2b6      	uxthmi	r6, r6
 8002118:	07df      	lsls	r7, r3, #31
 800211a:	bf48      	it	mi
 800211c:	f043 0320 	orrmi.w	r3, r3, #32
 8002120:	6029      	str	r1, [r5, #0]
 8002122:	bf48      	it	mi
 8002124:	6023      	strmi	r3, [r4, #0]
 8002126:	b91e      	cbnz	r6, 8002130 <_printf_i+0x1a4>
 8002128:	6823      	ldr	r3, [r4, #0]
 800212a:	f023 0320 	bic.w	r3, r3, #32
 800212e:	6023      	str	r3, [r4, #0]
 8002130:	2310      	movs	r3, #16
 8002132:	e7a7      	b.n	8002084 <_printf_i+0xf8>
 8002134:	4824      	ldr	r0, [pc, #144]	; (80021c8 <_printf_i+0x23c>)
 8002136:	e7e4      	b.n	8002102 <_printf_i+0x176>
 8002138:	4615      	mov	r5, r2
 800213a:	e7bd      	b.n	80020b8 <_printf_i+0x12c>
 800213c:	682b      	ldr	r3, [r5, #0]
 800213e:	6826      	ldr	r6, [r4, #0]
 8002140:	6961      	ldr	r1, [r4, #20]
 8002142:	1d18      	adds	r0, r3, #4
 8002144:	6028      	str	r0, [r5, #0]
 8002146:	0635      	lsls	r5, r6, #24
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	d501      	bpl.n	8002150 <_printf_i+0x1c4>
 800214c:	6019      	str	r1, [r3, #0]
 800214e:	e002      	b.n	8002156 <_printf_i+0x1ca>
 8002150:	0670      	lsls	r0, r6, #25
 8002152:	d5fb      	bpl.n	800214c <_printf_i+0x1c0>
 8002154:	8019      	strh	r1, [r3, #0]
 8002156:	2300      	movs	r3, #0
 8002158:	6123      	str	r3, [r4, #16]
 800215a:	4615      	mov	r5, r2
 800215c:	e7bc      	b.n	80020d8 <_printf_i+0x14c>
 800215e:	682b      	ldr	r3, [r5, #0]
 8002160:	1d1a      	adds	r2, r3, #4
 8002162:	602a      	str	r2, [r5, #0]
 8002164:	681d      	ldr	r5, [r3, #0]
 8002166:	6862      	ldr	r2, [r4, #4]
 8002168:	2100      	movs	r1, #0
 800216a:	4628      	mov	r0, r5
 800216c:	f7fe f840 	bl	80001f0 <memchr>
 8002170:	b108      	cbz	r0, 8002176 <_printf_i+0x1ea>
 8002172:	1b40      	subs	r0, r0, r5
 8002174:	6060      	str	r0, [r4, #4]
 8002176:	6863      	ldr	r3, [r4, #4]
 8002178:	6123      	str	r3, [r4, #16]
 800217a:	2300      	movs	r3, #0
 800217c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002180:	e7aa      	b.n	80020d8 <_printf_i+0x14c>
 8002182:	6923      	ldr	r3, [r4, #16]
 8002184:	462a      	mov	r2, r5
 8002186:	4649      	mov	r1, r9
 8002188:	4640      	mov	r0, r8
 800218a:	47d0      	blx	sl
 800218c:	3001      	adds	r0, #1
 800218e:	d0ad      	beq.n	80020ec <_printf_i+0x160>
 8002190:	6823      	ldr	r3, [r4, #0]
 8002192:	079b      	lsls	r3, r3, #30
 8002194:	d413      	bmi.n	80021be <_printf_i+0x232>
 8002196:	68e0      	ldr	r0, [r4, #12]
 8002198:	9b03      	ldr	r3, [sp, #12]
 800219a:	4298      	cmp	r0, r3
 800219c:	bfb8      	it	lt
 800219e:	4618      	movlt	r0, r3
 80021a0:	e7a6      	b.n	80020f0 <_printf_i+0x164>
 80021a2:	2301      	movs	r3, #1
 80021a4:	4632      	mov	r2, r6
 80021a6:	4649      	mov	r1, r9
 80021a8:	4640      	mov	r0, r8
 80021aa:	47d0      	blx	sl
 80021ac:	3001      	adds	r0, #1
 80021ae:	d09d      	beq.n	80020ec <_printf_i+0x160>
 80021b0:	3501      	adds	r5, #1
 80021b2:	68e3      	ldr	r3, [r4, #12]
 80021b4:	9903      	ldr	r1, [sp, #12]
 80021b6:	1a5b      	subs	r3, r3, r1
 80021b8:	42ab      	cmp	r3, r5
 80021ba:	dcf2      	bgt.n	80021a2 <_printf_i+0x216>
 80021bc:	e7eb      	b.n	8002196 <_printf_i+0x20a>
 80021be:	2500      	movs	r5, #0
 80021c0:	f104 0619 	add.w	r6, r4, #25
 80021c4:	e7f5      	b.n	80021b2 <_printf_i+0x226>
 80021c6:	bf00      	nop
 80021c8:	08002540 	.word	0x08002540
 80021cc:	08002551 	.word	0x08002551

080021d0 <__sflush_r>:
 80021d0:	898a      	ldrh	r2, [r1, #12]
 80021d2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80021d4:	4605      	mov	r5, r0
 80021d6:	0710      	lsls	r0, r2, #28
 80021d8:	460c      	mov	r4, r1
 80021da:	d457      	bmi.n	800228c <__sflush_r+0xbc>
 80021dc:	684b      	ldr	r3, [r1, #4]
 80021de:	2b00      	cmp	r3, #0
 80021e0:	dc04      	bgt.n	80021ec <__sflush_r+0x1c>
 80021e2:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	dc01      	bgt.n	80021ec <__sflush_r+0x1c>
 80021e8:	2000      	movs	r0, #0
 80021ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80021ec:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80021ee:	2e00      	cmp	r6, #0
 80021f0:	d0fa      	beq.n	80021e8 <__sflush_r+0x18>
 80021f2:	2300      	movs	r3, #0
 80021f4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80021f8:	682f      	ldr	r7, [r5, #0]
 80021fa:	6a21      	ldr	r1, [r4, #32]
 80021fc:	602b      	str	r3, [r5, #0]
 80021fe:	d032      	beq.n	8002266 <__sflush_r+0x96>
 8002200:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8002202:	89a3      	ldrh	r3, [r4, #12]
 8002204:	075a      	lsls	r2, r3, #29
 8002206:	d505      	bpl.n	8002214 <__sflush_r+0x44>
 8002208:	6863      	ldr	r3, [r4, #4]
 800220a:	1ac0      	subs	r0, r0, r3
 800220c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800220e:	b10b      	cbz	r3, 8002214 <__sflush_r+0x44>
 8002210:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002212:	1ac0      	subs	r0, r0, r3
 8002214:	2300      	movs	r3, #0
 8002216:	4602      	mov	r2, r0
 8002218:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800221a:	6a21      	ldr	r1, [r4, #32]
 800221c:	4628      	mov	r0, r5
 800221e:	47b0      	blx	r6
 8002220:	1c43      	adds	r3, r0, #1
 8002222:	89a3      	ldrh	r3, [r4, #12]
 8002224:	d106      	bne.n	8002234 <__sflush_r+0x64>
 8002226:	6829      	ldr	r1, [r5, #0]
 8002228:	291d      	cmp	r1, #29
 800222a:	d82b      	bhi.n	8002284 <__sflush_r+0xb4>
 800222c:	4a28      	ldr	r2, [pc, #160]	; (80022d0 <__sflush_r+0x100>)
 800222e:	410a      	asrs	r2, r1
 8002230:	07d6      	lsls	r6, r2, #31
 8002232:	d427      	bmi.n	8002284 <__sflush_r+0xb4>
 8002234:	2200      	movs	r2, #0
 8002236:	6062      	str	r2, [r4, #4]
 8002238:	04d9      	lsls	r1, r3, #19
 800223a:	6922      	ldr	r2, [r4, #16]
 800223c:	6022      	str	r2, [r4, #0]
 800223e:	d504      	bpl.n	800224a <__sflush_r+0x7a>
 8002240:	1c42      	adds	r2, r0, #1
 8002242:	d101      	bne.n	8002248 <__sflush_r+0x78>
 8002244:	682b      	ldr	r3, [r5, #0]
 8002246:	b903      	cbnz	r3, 800224a <__sflush_r+0x7a>
 8002248:	6560      	str	r0, [r4, #84]	; 0x54
 800224a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800224c:	602f      	str	r7, [r5, #0]
 800224e:	2900      	cmp	r1, #0
 8002250:	d0ca      	beq.n	80021e8 <__sflush_r+0x18>
 8002252:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002256:	4299      	cmp	r1, r3
 8002258:	d002      	beq.n	8002260 <__sflush_r+0x90>
 800225a:	4628      	mov	r0, r5
 800225c:	f7ff fbf0 	bl	8001a40 <_free_r>
 8002260:	2000      	movs	r0, #0
 8002262:	6360      	str	r0, [r4, #52]	; 0x34
 8002264:	e7c1      	b.n	80021ea <__sflush_r+0x1a>
 8002266:	2301      	movs	r3, #1
 8002268:	4628      	mov	r0, r5
 800226a:	47b0      	blx	r6
 800226c:	1c41      	adds	r1, r0, #1
 800226e:	d1c8      	bne.n	8002202 <__sflush_r+0x32>
 8002270:	682b      	ldr	r3, [r5, #0]
 8002272:	2b00      	cmp	r3, #0
 8002274:	d0c5      	beq.n	8002202 <__sflush_r+0x32>
 8002276:	2b1d      	cmp	r3, #29
 8002278:	d001      	beq.n	800227e <__sflush_r+0xae>
 800227a:	2b16      	cmp	r3, #22
 800227c:	d101      	bne.n	8002282 <__sflush_r+0xb2>
 800227e:	602f      	str	r7, [r5, #0]
 8002280:	e7b2      	b.n	80021e8 <__sflush_r+0x18>
 8002282:	89a3      	ldrh	r3, [r4, #12]
 8002284:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002288:	81a3      	strh	r3, [r4, #12]
 800228a:	e7ae      	b.n	80021ea <__sflush_r+0x1a>
 800228c:	690f      	ldr	r7, [r1, #16]
 800228e:	2f00      	cmp	r7, #0
 8002290:	d0aa      	beq.n	80021e8 <__sflush_r+0x18>
 8002292:	0793      	lsls	r3, r2, #30
 8002294:	680e      	ldr	r6, [r1, #0]
 8002296:	bf08      	it	eq
 8002298:	694b      	ldreq	r3, [r1, #20]
 800229a:	600f      	str	r7, [r1, #0]
 800229c:	bf18      	it	ne
 800229e:	2300      	movne	r3, #0
 80022a0:	1bf6      	subs	r6, r6, r7
 80022a2:	608b      	str	r3, [r1, #8]
 80022a4:	2e00      	cmp	r6, #0
 80022a6:	dd9f      	ble.n	80021e8 <__sflush_r+0x18>
 80022a8:	6a21      	ldr	r1, [r4, #32]
 80022aa:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 80022ae:	4633      	mov	r3, r6
 80022b0:	463a      	mov	r2, r7
 80022b2:	4628      	mov	r0, r5
 80022b4:	47e0      	blx	ip
 80022b6:	2800      	cmp	r0, #0
 80022b8:	dc06      	bgt.n	80022c8 <__sflush_r+0xf8>
 80022ba:	89a3      	ldrh	r3, [r4, #12]
 80022bc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80022c0:	81a3      	strh	r3, [r4, #12]
 80022c2:	f04f 30ff 	mov.w	r0, #4294967295
 80022c6:	e790      	b.n	80021ea <__sflush_r+0x1a>
 80022c8:	4407      	add	r7, r0
 80022ca:	1a36      	subs	r6, r6, r0
 80022cc:	e7ea      	b.n	80022a4 <__sflush_r+0xd4>
 80022ce:	bf00      	nop
 80022d0:	dfbffffe 	.word	0xdfbffffe

080022d4 <_fflush_r>:
 80022d4:	b538      	push	{r3, r4, r5, lr}
 80022d6:	690b      	ldr	r3, [r1, #16]
 80022d8:	4605      	mov	r5, r0
 80022da:	460c      	mov	r4, r1
 80022dc:	b913      	cbnz	r3, 80022e4 <_fflush_r+0x10>
 80022de:	2500      	movs	r5, #0
 80022e0:	4628      	mov	r0, r5
 80022e2:	bd38      	pop	{r3, r4, r5, pc}
 80022e4:	b118      	cbz	r0, 80022ee <_fflush_r+0x1a>
 80022e6:	6a03      	ldr	r3, [r0, #32]
 80022e8:	b90b      	cbnz	r3, 80022ee <_fflush_r+0x1a>
 80022ea:	f7ff f9b3 	bl	8001654 <__sinit>
 80022ee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d0f3      	beq.n	80022de <_fflush_r+0xa>
 80022f6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80022f8:	07d0      	lsls	r0, r2, #31
 80022fa:	d404      	bmi.n	8002306 <_fflush_r+0x32>
 80022fc:	0599      	lsls	r1, r3, #22
 80022fe:	d402      	bmi.n	8002306 <_fflush_r+0x32>
 8002300:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002302:	f7ff fb9b 	bl	8001a3c <__retarget_lock_acquire_recursive>
 8002306:	4628      	mov	r0, r5
 8002308:	4621      	mov	r1, r4
 800230a:	f7ff ff61 	bl	80021d0 <__sflush_r>
 800230e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002310:	07da      	lsls	r2, r3, #31
 8002312:	4605      	mov	r5, r0
 8002314:	d4e4      	bmi.n	80022e0 <_fflush_r+0xc>
 8002316:	89a3      	ldrh	r3, [r4, #12]
 8002318:	059b      	lsls	r3, r3, #22
 800231a:	d4e1      	bmi.n	80022e0 <_fflush_r+0xc>
 800231c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800231e:	f7ff fb8e 	bl	8001a3e <__retarget_lock_release_recursive>
 8002322:	e7dd      	b.n	80022e0 <_fflush_r+0xc>

08002324 <__swhatbuf_r>:
 8002324:	b570      	push	{r4, r5, r6, lr}
 8002326:	460c      	mov	r4, r1
 8002328:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800232c:	2900      	cmp	r1, #0
 800232e:	b096      	sub	sp, #88	; 0x58
 8002330:	4615      	mov	r5, r2
 8002332:	461e      	mov	r6, r3
 8002334:	da0d      	bge.n	8002352 <__swhatbuf_r+0x2e>
 8002336:	89a3      	ldrh	r3, [r4, #12]
 8002338:	f013 0f80 	tst.w	r3, #128	; 0x80
 800233c:	f04f 0100 	mov.w	r1, #0
 8002340:	bf0c      	ite	eq
 8002342:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8002346:	2340      	movne	r3, #64	; 0x40
 8002348:	2000      	movs	r0, #0
 800234a:	6031      	str	r1, [r6, #0]
 800234c:	602b      	str	r3, [r5, #0]
 800234e:	b016      	add	sp, #88	; 0x58
 8002350:	bd70      	pop	{r4, r5, r6, pc}
 8002352:	466a      	mov	r2, sp
 8002354:	f000 f848 	bl	80023e8 <_fstat_r>
 8002358:	2800      	cmp	r0, #0
 800235a:	dbec      	blt.n	8002336 <__swhatbuf_r+0x12>
 800235c:	9901      	ldr	r1, [sp, #4]
 800235e:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8002362:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8002366:	4259      	negs	r1, r3
 8002368:	4159      	adcs	r1, r3
 800236a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800236e:	e7eb      	b.n	8002348 <__swhatbuf_r+0x24>

08002370 <__smakebuf_r>:
 8002370:	898b      	ldrh	r3, [r1, #12]
 8002372:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8002374:	079d      	lsls	r5, r3, #30
 8002376:	4606      	mov	r6, r0
 8002378:	460c      	mov	r4, r1
 800237a:	d507      	bpl.n	800238c <__smakebuf_r+0x1c>
 800237c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8002380:	6023      	str	r3, [r4, #0]
 8002382:	6123      	str	r3, [r4, #16]
 8002384:	2301      	movs	r3, #1
 8002386:	6163      	str	r3, [r4, #20]
 8002388:	b002      	add	sp, #8
 800238a:	bd70      	pop	{r4, r5, r6, pc}
 800238c:	ab01      	add	r3, sp, #4
 800238e:	466a      	mov	r2, sp
 8002390:	f7ff ffc8 	bl	8002324 <__swhatbuf_r>
 8002394:	9900      	ldr	r1, [sp, #0]
 8002396:	4605      	mov	r5, r0
 8002398:	4630      	mov	r0, r6
 800239a:	f7ff fbbb 	bl	8001b14 <_malloc_r>
 800239e:	b948      	cbnz	r0, 80023b4 <__smakebuf_r+0x44>
 80023a0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80023a4:	059a      	lsls	r2, r3, #22
 80023a6:	d4ef      	bmi.n	8002388 <__smakebuf_r+0x18>
 80023a8:	f023 0303 	bic.w	r3, r3, #3
 80023ac:	f043 0302 	orr.w	r3, r3, #2
 80023b0:	81a3      	strh	r3, [r4, #12]
 80023b2:	e7e3      	b.n	800237c <__smakebuf_r+0xc>
 80023b4:	89a3      	ldrh	r3, [r4, #12]
 80023b6:	6020      	str	r0, [r4, #0]
 80023b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80023bc:	81a3      	strh	r3, [r4, #12]
 80023be:	9b00      	ldr	r3, [sp, #0]
 80023c0:	6163      	str	r3, [r4, #20]
 80023c2:	9b01      	ldr	r3, [sp, #4]
 80023c4:	6120      	str	r0, [r4, #16]
 80023c6:	b15b      	cbz	r3, 80023e0 <__smakebuf_r+0x70>
 80023c8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80023cc:	4630      	mov	r0, r6
 80023ce:	f000 f81d 	bl	800240c <_isatty_r>
 80023d2:	b128      	cbz	r0, 80023e0 <__smakebuf_r+0x70>
 80023d4:	89a3      	ldrh	r3, [r4, #12]
 80023d6:	f023 0303 	bic.w	r3, r3, #3
 80023da:	f043 0301 	orr.w	r3, r3, #1
 80023de:	81a3      	strh	r3, [r4, #12]
 80023e0:	89a3      	ldrh	r3, [r4, #12]
 80023e2:	431d      	orrs	r5, r3
 80023e4:	81a5      	strh	r5, [r4, #12]
 80023e6:	e7cf      	b.n	8002388 <__smakebuf_r+0x18>

080023e8 <_fstat_r>:
 80023e8:	b538      	push	{r3, r4, r5, lr}
 80023ea:	4d07      	ldr	r5, [pc, #28]	; (8002408 <_fstat_r+0x20>)
 80023ec:	2300      	movs	r3, #0
 80023ee:	4604      	mov	r4, r0
 80023f0:	4608      	mov	r0, r1
 80023f2:	4611      	mov	r1, r2
 80023f4:	602b      	str	r3, [r5, #0]
 80023f6:	f7fe f92f 	bl	8000658 <_fstat>
 80023fa:	1c43      	adds	r3, r0, #1
 80023fc:	d102      	bne.n	8002404 <_fstat_r+0x1c>
 80023fe:	682b      	ldr	r3, [r5, #0]
 8002400:	b103      	cbz	r3, 8002404 <_fstat_r+0x1c>
 8002402:	6023      	str	r3, [r4, #0]
 8002404:	bd38      	pop	{r3, r4, r5, pc}
 8002406:	bf00      	nop
 8002408:	20000210 	.word	0x20000210

0800240c <_isatty_r>:
 800240c:	b538      	push	{r3, r4, r5, lr}
 800240e:	4d06      	ldr	r5, [pc, #24]	; (8002428 <_isatty_r+0x1c>)
 8002410:	2300      	movs	r3, #0
 8002412:	4604      	mov	r4, r0
 8002414:	4608      	mov	r0, r1
 8002416:	602b      	str	r3, [r5, #0]
 8002418:	f7fe f92d 	bl	8000676 <_isatty>
 800241c:	1c43      	adds	r3, r0, #1
 800241e:	d102      	bne.n	8002426 <_isatty_r+0x1a>
 8002420:	682b      	ldr	r3, [r5, #0]
 8002422:	b103      	cbz	r3, 8002426 <_isatty_r+0x1a>
 8002424:	6023      	str	r3, [r4, #0]
 8002426:	bd38      	pop	{r3, r4, r5, pc}
 8002428:	20000210 	.word	0x20000210

0800242c <_sbrk_r>:
 800242c:	b538      	push	{r3, r4, r5, lr}
 800242e:	4d06      	ldr	r5, [pc, #24]	; (8002448 <_sbrk_r+0x1c>)
 8002430:	2300      	movs	r3, #0
 8002432:	4604      	mov	r4, r0
 8002434:	4608      	mov	r0, r1
 8002436:	602b      	str	r3, [r5, #0]
 8002438:	f7fe f934 	bl	80006a4 <_sbrk>
 800243c:	1c43      	adds	r3, r0, #1
 800243e:	d102      	bne.n	8002446 <_sbrk_r+0x1a>
 8002440:	682b      	ldr	r3, [r5, #0]
 8002442:	b103      	cbz	r3, 8002446 <_sbrk_r+0x1a>
 8002444:	6023      	str	r3, [r4, #0]
 8002446:	bd38      	pop	{r3, r4, r5, pc}
 8002448:	20000210 	.word	0x20000210

0800244c <_init>:
 800244c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800244e:	bf00      	nop
 8002450:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002452:	bc08      	pop	{r3}
 8002454:	469e      	mov	lr, r3
 8002456:	4770      	bx	lr

08002458 <_fini>:
 8002458:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800245a:	bf00      	nop
 800245c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800245e:	bc08      	pop	{r3}
 8002460:	469e      	mov	lr, r3
 8002462:	4770      	bx	lr
