
23_STM32Fxx_RTC_LCD_Project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001a8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002018  080001a8  080001a8  000101a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000008c  080021c0  080021c0  000121c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800224c  0800224c  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  0800224c  0800224c  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800224c  0800224c  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800224c  0800224c  0001224c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002250  08002250  00012250  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08002254  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020074  2**0
                  CONTENTS
 10 .bss          000001ac  20000074  20000074  00020074  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000220  20000220  00020074  2**0
                  ALLOC
 12 .ARM.attributes 0000002a  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  0002009e  2**0
                  CONTENTS, READONLY
 14 .debug_info   00002bb9  00000000  00000000  000200e1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00000d8b  00000000  00000000  00022c9a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000003a8  00000000  00000000  00023a28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 000002a5  00000000  00000000  00023dd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00003dac  00000000  00000000  00024075  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0000416c  00000000  00000000  00027e21  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    0000d03f  00000000  00000000  0002bf8d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  000013f0  00000000  00000000  00038fcc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000065  00000000  00000000  0003a3bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a8 <__do_global_dtors_aux>:
 80001a8:	b510      	push	{r4, lr}
 80001aa:	4c05      	ldr	r4, [pc, #20]	; (80001c0 <__do_global_dtors_aux+0x18>)
 80001ac:	7823      	ldrb	r3, [r4, #0]
 80001ae:	b933      	cbnz	r3, 80001be <__do_global_dtors_aux+0x16>
 80001b0:	4b04      	ldr	r3, [pc, #16]	; (80001c4 <__do_global_dtors_aux+0x1c>)
 80001b2:	b113      	cbz	r3, 80001ba <__do_global_dtors_aux+0x12>
 80001b4:	4804      	ldr	r0, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x20>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	2301      	movs	r3, #1
 80001bc:	7023      	strb	r3, [r4, #0]
 80001be:	bd10      	pop	{r4, pc}
 80001c0:	20000074 	.word	0x20000074
 80001c4:	00000000 	.word	0x00000000
 80001c8:	080021a8 	.word	0x080021a8

080001cc <frame_dummy>:
 80001cc:	b508      	push	{r3, lr}
 80001ce:	4b03      	ldr	r3, [pc, #12]	; (80001dc <frame_dummy+0x10>)
 80001d0:	b11b      	cbz	r3, 80001da <frame_dummy+0xe>
 80001d2:	4903      	ldr	r1, [pc, #12]	; (80001e0 <frame_dummy+0x14>)
 80001d4:	4803      	ldr	r0, [pc, #12]	; (80001e4 <frame_dummy+0x18>)
 80001d6:	f3af 8000 	nop.w
 80001da:	bd08      	pop	{r3, pc}
 80001dc:	00000000 	.word	0x00000000
 80001e0:	20000078 	.word	0x20000078
 80001e4:	080021a8 	.word	0x080021a8

080001e8 <init_systick_timer>:
 * @return		- none
 *
 * @Note 		- none
 */
void init_systick_timer(uint32_t tick_hz)
{
 80001e8:	b480      	push	{r7}
 80001ea:	b087      	sub	sp, #28
 80001ec:	af00      	add	r7, sp, #0
 80001ee:	6078      	str	r0, [r7, #4]
	//Cài đặt các địa chỉ timer của hệ thống
	uint32_t *pSRVR = (uint32_t*)0xE000E014;
 80001f0:	4b14      	ldr	r3, [pc, #80]	; (8000244 <init_systick_timer+0x5c>)
 80001f2:	617b      	str	r3, [r7, #20]
	uint32_t *pSCSR = (uint32_t*)0xE000E010;
 80001f4:	4b14      	ldr	r3, [pc, #80]	; (8000248 <init_systick_timer+0x60>)
 80001f6:	613b      	str	r3, [r7, #16]

    /* calculation of reload value */
    uint32_t count_value = (SYSTICK_TIM_CLK/tick_hz)-1;
 80001f8:	4a14      	ldr	r2, [pc, #80]	; (800024c <init_systick_timer+0x64>)
 80001fa:	687b      	ldr	r3, [r7, #4]
 80001fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8000200:	3b01      	subs	r3, #1
 8000202:	60fb      	str	r3, [r7, #12]

    //Clear the value of SVR
    *pSRVR &= ~(0x00FFFFFFFF);
 8000204:	697b      	ldr	r3, [r7, #20]
 8000206:	2200      	movs	r2, #0
 8000208:	601a      	str	r2, [r3, #0]

    //load the value in to SVR
    *pSRVR |= count_value;
 800020a:	697b      	ldr	r3, [r7, #20]
 800020c:	681a      	ldr	r2, [r3, #0]
 800020e:	68fb      	ldr	r3, [r7, #12]
 8000210:	431a      	orrs	r2, r3
 8000212:	697b      	ldr	r3, [r7, #20]
 8000214:	601a      	str	r2, [r3, #0]

    //do some settings
    *pSCSR |= ( 1 << 1); //Enables SysTick exception request:
 8000216:	693b      	ldr	r3, [r7, #16]
 8000218:	681b      	ldr	r3, [r3, #0]
 800021a:	f043 0202 	orr.w	r2, r3, #2
 800021e:	693b      	ldr	r3, [r7, #16]
 8000220:	601a      	str	r2, [r3, #0]
    *pSCSR |= ( 1 << 2);  //Indicates the clock source, processor clock source
 8000222:	693b      	ldr	r3, [r7, #16]
 8000224:	681b      	ldr	r3, [r3, #0]
 8000226:	f043 0204 	orr.w	r2, r3, #4
 800022a:	693b      	ldr	r3, [r7, #16]
 800022c:	601a      	str	r2, [r3, #0]

    //enable the systick
    *pSCSR |= ( 1 << 0); //enables the counter
 800022e:	693b      	ldr	r3, [r7, #16]
 8000230:	681b      	ldr	r3, [r3, #0]
 8000232:	f043 0201 	orr.w	r2, r3, #1
 8000236:	693b      	ldr	r3, [r7, #16]
 8000238:	601a      	str	r2, [r3, #0]

}
 800023a:	bf00      	nop
 800023c:	371c      	adds	r7, #28
 800023e:	46bd      	mov	sp, r7
 8000240:	bc80      	pop	{r7}
 8000242:	4770      	bx	lr
 8000244:	e000e014 	.word	0xe000e014
 8000248:	e000e010 	.word	0xe000e010
 800024c:	00f42400 	.word	0x00f42400

08000250 <get_day_of_week>:
 * @return		- thứ đc chuyển đổi sang string
 *
 * @Note 		- none
 */
char *get_day_of_week(uint8_t i)
{
 8000250:	b4b0      	push	{r4, r5, r7}
 8000252:	b08b      	sub	sp, #44	; 0x2c
 8000254:	af00      	add	r7, sp, #0
 8000256:	4603      	mov	r3, r0
 8000258:	71fb      	strb	r3, [r7, #7]
	//Chuỗi chứa ký tự thứ có thể có
	char* days[] = {"Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"};
 800025a:	4b0b      	ldr	r3, [pc, #44]	; (8000288 <get_day_of_week+0x38>)
 800025c:	f107 040c 	add.w	r4, r7, #12
 8000260:	461d      	mov	r5, r3
 8000262:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000264:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000266:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800026a:	e884 0007 	stmia.w	r4, {r0, r1, r2}

	return days[i-1];	//vì i đã đc định nghĩa trong file "ds1307.h"
 800026e:	79fb      	ldrb	r3, [r7, #7]
 8000270:	3b01      	subs	r3, #1
 8000272:	009b      	lsls	r3, r3, #2
 8000274:	3328      	adds	r3, #40	; 0x28
 8000276:	443b      	add	r3, r7
 8000278:	f853 3c1c 	ldr.w	r3, [r3, #-28]
}
 800027c:	4618      	mov	r0, r3
 800027e:	372c      	adds	r7, #44	; 0x2c
 8000280:	46bd      	mov	sp, r7
 8000282:	bcb0      	pop	{r4, r5, r7}
 8000284:	4770      	bx	lr
 8000286:	bf00      	nop
 8000288:	08002204 	.word	0x08002204

0800028c <number_to_string>:
 * @return		- none
 *
 * @Note 		- none
 */
void number_to_string(uint8_t num, char* buf)
{
 800028c:	b480      	push	{r7}
 800028e:	b083      	sub	sp, #12
 8000290:	af00      	add	r7, sp, #0
 8000292:	4603      	mov	r3, r0
 8000294:	6039      	str	r1, [r7, #0]
 8000296:	71fb      	strb	r3, [r7, #7]
	if(num > 10)
 8000298:	79fb      	ldrb	r3, [r7, #7]
 800029a:	2b0a      	cmp	r3, #10
 800029c:	d909      	bls.n	80002b2 <number_to_string+0x26>
	{
		buf[0] = '0';
 800029e:	683b      	ldr	r3, [r7, #0]
 80002a0:	2230      	movs	r2, #48	; 0x30
 80002a2:	701a      	strb	r2, [r3, #0]
		buf[1] = num + 48;
 80002a4:	683b      	ldr	r3, [r7, #0]
 80002a6:	3301      	adds	r3, #1
 80002a8:	79fa      	ldrb	r2, [r7, #7]
 80002aa:	3230      	adds	r2, #48	; 0x30
 80002ac:	b2d2      	uxtb	r2, r2
 80002ae:	701a      	strb	r2, [r3, #0]

	//buf[0] và buf[1] ở đây ko phải là vị trí 0 và 1 của buf[9] đưa vào
	//mà là vị trí 0 và 1 bắt đầu từ địa chỉ vị trí mà &buf[] đưa vào

	//48: số chênh lệch vị trí trong bảng mã ASCII giữa giá trị số(9) và ký tự số(9)
}
 80002b0:	e01f      	b.n	80002f2 <number_to_string+0x66>
	else if(num >= 10 && num < 99)
 80002b2:	79fb      	ldrb	r3, [r7, #7]
 80002b4:	2b09      	cmp	r3, #9
 80002b6:	d91c      	bls.n	80002f2 <number_to_string+0x66>
 80002b8:	79fb      	ldrb	r3, [r7, #7]
 80002ba:	2b62      	cmp	r3, #98	; 0x62
 80002bc:	d819      	bhi.n	80002f2 <number_to_string+0x66>
		buf[0] = (num / 10) + 48;
 80002be:	79fb      	ldrb	r3, [r7, #7]
 80002c0:	4a0e      	ldr	r2, [pc, #56]	; (80002fc <number_to_string+0x70>)
 80002c2:	fba2 2303 	umull	r2, r3, r2, r3
 80002c6:	08db      	lsrs	r3, r3, #3
 80002c8:	b2db      	uxtb	r3, r3
 80002ca:	3330      	adds	r3, #48	; 0x30
 80002cc:	b2da      	uxtb	r2, r3
 80002ce:	683b      	ldr	r3, [r7, #0]
 80002d0:	701a      	strb	r2, [r3, #0]
		buf[1] = (num % 10) + 48;
 80002d2:	79fa      	ldrb	r2, [r7, #7]
 80002d4:	4b09      	ldr	r3, [pc, #36]	; (80002fc <number_to_string+0x70>)
 80002d6:	fba3 1302 	umull	r1, r3, r3, r2
 80002da:	08d9      	lsrs	r1, r3, #3
 80002dc:	460b      	mov	r3, r1
 80002de:	009b      	lsls	r3, r3, #2
 80002e0:	440b      	add	r3, r1
 80002e2:	005b      	lsls	r3, r3, #1
 80002e4:	1ad3      	subs	r3, r2, r3
 80002e6:	b2da      	uxtb	r2, r3
 80002e8:	683b      	ldr	r3, [r7, #0]
 80002ea:	3301      	adds	r3, #1
 80002ec:	3230      	adds	r2, #48	; 0x30
 80002ee:	b2d2      	uxtb	r2, r2
 80002f0:	701a      	strb	r2, [r3, #0]
}
 80002f2:	bf00      	nop
 80002f4:	370c      	adds	r7, #12
 80002f6:	46bd      	mov	sp, r7
 80002f8:	bc80      	pop	{r7}
 80002fa:	4770      	bx	lr
 80002fc:	cccccccd 	.word	0xcccccccd

08000300 <time_to_string>:
 * @return		- time đc chuyển đổi sang string
 *
 * @Note 		- hh:mm:ss -
 */
char* time_to_string(RTC_time_t *rtc_time)
{
 8000300:	b580      	push	{r7, lr}
 8000302:	b082      	sub	sp, #8
 8000304:	af00      	add	r7, sp, #0
 8000306:	6078      	str	r0, [r7, #4]
	static char buf[9]; //h h : m m : s s /0

	buf[2] = ':';
 8000308:	4b0f      	ldr	r3, [pc, #60]	; (8000348 <time_to_string+0x48>)
 800030a:	223a      	movs	r2, #58	; 0x3a
 800030c:	709a      	strb	r2, [r3, #2]
	buf[5] = ':';
 800030e:	4b0e      	ldr	r3, [pc, #56]	; (8000348 <time_to_string+0x48>)
 8000310:	223a      	movs	r2, #58	; 0x3a
 8000312:	715a      	strb	r2, [r3, #5]

	number_to_string(rtc_time->hours,buf);
 8000314:	687b      	ldr	r3, [r7, #4]
 8000316:	789b      	ldrb	r3, [r3, #2]
 8000318:	490b      	ldr	r1, [pc, #44]	; (8000348 <time_to_string+0x48>)
 800031a:	4618      	mov	r0, r3
 800031c:	f7ff ffb6 	bl	800028c <number_to_string>
	number_to_string(rtc_time->minutes,&buf[3]);
 8000320:	687b      	ldr	r3, [r7, #4]
 8000322:	785b      	ldrb	r3, [r3, #1]
 8000324:	4909      	ldr	r1, [pc, #36]	; (800034c <time_to_string+0x4c>)
 8000326:	4618      	mov	r0, r3
 8000328:	f7ff ffb0 	bl	800028c <number_to_string>
	number_to_string(rtc_time->seconds,&buf[6]);
 800032c:	687b      	ldr	r3, [r7, #4]
 800032e:	781b      	ldrb	r3, [r3, #0]
 8000330:	4907      	ldr	r1, [pc, #28]	; (8000350 <time_to_string+0x50>)
 8000332:	4618      	mov	r0, r3
 8000334:	f7ff ffaa 	bl	800028c <number_to_string>

	buf[8] = '\0';  //kết thúc chuỗi luôn là một ký tự null
 8000338:	4b03      	ldr	r3, [pc, #12]	; (8000348 <time_to_string+0x48>)
 800033a:	2200      	movs	r2, #0
 800033c:	721a      	strb	r2, [r3, #8]

	return buf;
 800033e:	4b02      	ldr	r3, [pc, #8]	; (8000348 <time_to_string+0x48>)
}
 8000340:	4618      	mov	r0, r3
 8000342:	3708      	adds	r7, #8
 8000344:	46bd      	mov	sp, r7
 8000346:	bd80      	pop	{r7, pc}
 8000348:	20000090 	.word	0x20000090
 800034c:	20000093 	.word	0x20000093
 8000350:	20000096 	.word	0x20000096

08000354 <date_to_string>:
 * @return		- date đc chuyển đổi sang string
 *
 * @Note 		- dd/mm/yy
 */
char* date_to_string(RTC_date_t *rtc_date)
{
 8000354:	b580      	push	{r7, lr}
 8000356:	b082      	sub	sp, #8
 8000358:	af00      	add	r7, sp, #0
 800035a:	6078      	str	r0, [r7, #4]
	static char buf[9]; //d d : m m : y y /0

	buf[2] = ':';
 800035c:	4b0f      	ldr	r3, [pc, #60]	; (800039c <date_to_string+0x48>)
 800035e:	223a      	movs	r2, #58	; 0x3a
 8000360:	709a      	strb	r2, [r3, #2]
	buf[5] = ':';
 8000362:	4b0e      	ldr	r3, [pc, #56]	; (800039c <date_to_string+0x48>)
 8000364:	223a      	movs	r2, #58	; 0x3a
 8000366:	715a      	strb	r2, [r3, #5]

	number_to_string(rtc_date->date,buf);
 8000368:	687b      	ldr	r3, [r7, #4]
 800036a:	781b      	ldrb	r3, [r3, #0]
 800036c:	490b      	ldr	r1, [pc, #44]	; (800039c <date_to_string+0x48>)
 800036e:	4618      	mov	r0, r3
 8000370:	f7ff ff8c 	bl	800028c <number_to_string>
	number_to_string(rtc_date->month,&buf[3]);
 8000374:	687b      	ldr	r3, [r7, #4]
 8000376:	785b      	ldrb	r3, [r3, #1]
 8000378:	4909      	ldr	r1, [pc, #36]	; (80003a0 <date_to_string+0x4c>)
 800037a:	4618      	mov	r0, r3
 800037c:	f7ff ff86 	bl	800028c <number_to_string>
	number_to_string(rtc_date->year,&buf[6]);
 8000380:	687b      	ldr	r3, [r7, #4]
 8000382:	789b      	ldrb	r3, [r3, #2]
 8000384:	4907      	ldr	r1, [pc, #28]	; (80003a4 <date_to_string+0x50>)
 8000386:	4618      	mov	r0, r3
 8000388:	f7ff ff80 	bl	800028c <number_to_string>

	buf[8] = '\0';  //kết thúc chuỗi luôn là một ký tự null
 800038c:	4b03      	ldr	r3, [pc, #12]	; (800039c <date_to_string+0x48>)
 800038e:	2200      	movs	r2, #0
 8000390:	721a      	strb	r2, [r3, #8]

	return buf;
 8000392:	4b02      	ldr	r3, [pc, #8]	; (800039c <date_to_string+0x48>)
}
 8000394:	4618      	mov	r0, r3
 8000396:	3708      	adds	r7, #8
 8000398:	46bd      	mov	sp, r7
 800039a:	bd80      	pop	{r7, pc}
 800039c:	2000009c 	.word	0x2000009c
 80003a0:	2000009f 	.word	0x2000009f
 80003a4:	200000a2 	.word	0x200000a2

080003a8 <main>:

int main(void)
{
 80003a8:	b580      	push	{r7, lr}
 80003aa:	b084      	sub	sp, #16
 80003ac:	af00      	add	r7, sp, #0

#ifndef PRINT_LCD
	printf("RTC test\n");
#else
	/* LCD init */
	lcd_init();
 80003ae:	f000 fbed 	bl	8000b8c <lcd_init>

	/* Vd1: LCD test*/
	lcd_print_string("LCD test....");
 80003b2:	4839      	ldr	r0, [pc, #228]	; (8000498 <main+0xf0>)
 80003b4:	f000 fbd6 	bl	8000b64 <lcd_print_string>
	mdelay(2);		//hiển thị 2 s
 80003b8:	2002      	movs	r0, #2
 80003ba:	f000 f8c7 	bl	800054c <mdelay>
	lcd_display_clear();	//xóa hiển thị
 80003be:	f000 fca7 	bl	8000d10 <lcd_display_clear>
	lcd_display_return_home();  //đưa con trỏ về vị trí ban đầu 00
 80003c2:	f000 fcaf 	bl	8000d24 <lcd_display_return_home>
#endif



	/* Kiểm tra DS1307 có cho phép clock hoạt động hay không */
	if(ds1307_init())
 80003c6:	f000 f9a3 	bl	8000710 <ds1307_init>
 80003ca:	4603      	mov	r3, r0
 80003cc:	2b00      	cmp	r3, #0
 80003ce:	d003      	beq.n	80003d8 <main+0x30>
	{
		printf("RTC init has field\n");
 80003d0:	4832      	ldr	r0, [pc, #200]	; (800049c <main+0xf4>)
 80003d2:	f001 fb5b 	bl	8001a8c <puts>
		while(1);
 80003d6:	e7fe      	b.n	80003d6 <main+0x2e>
	}

	/* Cấu hình timer để ngắt cập nhật đồng hồ */
	init_systick_timer(1);			//mỗi 1s cập nhật đồng hồ
 80003d8:	2001      	movs	r0, #1
 80003da:	f7ff ff05 	bl	80001e8 <init_systick_timer>

	/* Cấu hình thời gian ban đầu */
	current_date.day = FRIDAY;
 80003de:	2306      	movs	r3, #6
 80003e0:	71fb      	strb	r3, [r7, #7]
	current_date.date = 15;
 80003e2:	230f      	movs	r3, #15
 80003e4:	713b      	strb	r3, [r7, #4]
	current_date.month = 1;
 80003e6:	2301      	movs	r3, #1
 80003e8:	717b      	strb	r3, [r7, #5]
	current_date.year = 21;
 80003ea:	2315      	movs	r3, #21
 80003ec:	71bb      	strb	r3, [r7, #6]

	current_time.hours = 4;
 80003ee:	2304      	movs	r3, #4
 80003f0:	72bb      	strb	r3, [r7, #10]
	current_time.minutes = 25;
 80003f2:	2319      	movs	r3, #25
 80003f4:	727b      	strb	r3, [r7, #9]
	current_time.seconds = 41;
 80003f6:	2329      	movs	r3, #41	; 0x29
 80003f8:	723b      	strb	r3, [r7, #8]
	current_time.time_format = TIME_FORMAT_12HRS_PM;
 80003fa:	2301      	movs	r3, #1
 80003fc:	72fb      	strb	r3, [r7, #11]

	ds1307_set_current_date(&current_date);
 80003fe:	1d3b      	adds	r3, r7, #4
 8000400:	4618      	mov	r0, r3
 8000402:	f000 fa35 	bl	8000870 <ds1307_set_current_date>
	ds1307_set_current_time(&current_time);
 8000406:	f107 0308 	add.w	r3, r7, #8
 800040a:	4618      	mov	r0, r3
 800040c:	f000 f99e 	bl	800074c <ds1307_set_current_time>

	//Đọc thời gian đc cấu hình
	ds1307_get_current_time(&current_time);
 8000410:	f107 0308 	add.w	r3, r7, #8
 8000414:	4618      	mov	r0, r3
 8000416:	f000 f9e2 	bl	80007de <ds1307_get_current_time>
	ds1307_get_current_date(&current_date);
 800041a:	1d3b      	adds	r3, r7, #4
 800041c:	4618      	mov	r0, r3
 800041e:	f000 fa57 	bl	80008d0 <ds1307_get_current_date>

	//Biểu diễn thời gian
	char *am_pm;		//lưu ký tự biểu diễn PM hoặc AM
	if(current_time.time_format != TIME_FORMAT_24HRS)
 8000422:	7afb      	ldrb	r3, [r7, #11]
 8000424:	2b02      	cmp	r3, #2
 8000426:	d016      	beq.n	8000456 <main+0xae>
	{
		am_pm = (current_time.time_format) ? "PM" : "AM";
 8000428:	7afb      	ldrb	r3, [r7, #11]
 800042a:	2b00      	cmp	r3, #0
 800042c:	d001      	beq.n	8000432 <main+0x8a>
 800042e:	4b1c      	ldr	r3, [pc, #112]	; (80004a0 <main+0xf8>)
 8000430:	e000      	b.n	8000434 <main+0x8c>
 8000432:	4b1c      	ldr	r3, [pc, #112]	; (80004a4 <main+0xfc>)
 8000434:	60fb      	str	r3, [r7, #12]
		//printf("Current time = %s %s \n",time_to_string(&current_time),am_pm); //Vd: 04:25:41 PM

		/* Vd2: hiển thị thời gian */
		lcd_print_string(time_to_string(&current_time));
 8000436:	f107 0308 	add.w	r3, r7, #8
 800043a:	4618      	mov	r0, r3
 800043c:	f7ff ff60 	bl	8000300 <time_to_string>
 8000440:	4603      	mov	r3, r0
 8000442:	4618      	mov	r0, r3
 8000444:	f000 fb8e 	bl	8000b64 <lcd_print_string>
		lcd_print_char(' ');
 8000448:	2020      	movs	r0, #32
 800044a:	f000 fb69 	bl	8000b20 <lcd_print_char>
		lcd_print_string(am_pm);
 800044e:	68f8      	ldr	r0, [r7, #12]
 8000450:	f000 fb88 	bl	8000b64 <lcd_print_string>
 8000454:	e008      	b.n	8000468 <main+0xc0>
	else
	{
		//printf("Current time = %s \n",time_to_string(&current_time)); //Vd: 04:25:41

		/*Vd2: hiển thị thời gian */
		lcd_print_string(time_to_string(&current_time));
 8000456:	f107 0308 	add.w	r3, r7, #8
 800045a:	4618      	mov	r0, r3
 800045c:	f7ff ff50 	bl	8000300 <time_to_string>
 8000460:	4603      	mov	r3, r0
 8000462:	4618      	mov	r0, r3
 8000464:	f000 fb7e 	bl	8000b64 <lcd_print_string>

	//Biểu diễn ngày tháng: 15/01/21 <friday>
	//printf("Current date: %s <%s>\n",date_to_string(&current_date),get_day_of_week(current_date.day));

	/* Vd2: hiển thị thời gian */
	lcd_set_cursor(2, 1);			//đưa con trỏ xuống hàng dưới
 8000468:	2101      	movs	r1, #1
 800046a:	2002      	movs	r0, #2
 800046c:	f000 fc64 	bl	8000d38 <lcd_set_cursor>
	lcd_print_string(date_to_string(&current_date));
 8000470:	1d3b      	adds	r3, r7, #4
 8000472:	4618      	mov	r0, r3
 8000474:	f7ff ff6e 	bl	8000354 <date_to_string>
 8000478:	4603      	mov	r3, r0
 800047a:	4618      	mov	r0, r3
 800047c:	f000 fb72 	bl	8000b64 <lcd_print_string>
	lcd_print_char(' ');
 8000480:	2020      	movs	r0, #32
 8000482:	f000 fb4d 	bl	8000b20 <lcd_print_char>
	lcd_print_string(get_day_of_week(current_date.day));
 8000486:	79fb      	ldrb	r3, [r7, #7]
 8000488:	4618      	mov	r0, r3
 800048a:	f7ff fee1 	bl	8000250 <get_day_of_week>
 800048e:	4603      	mov	r3, r0
 8000490:	4618      	mov	r0, r3
 8000492:	f000 fb67 	bl	8000b64 <lcd_print_string>

	while(1);
 8000496:	e7fe      	b.n	8000496 <main+0xee>
 8000498:	08002220 	.word	0x08002220
 800049c:	08002230 	.word	0x08002230
 80004a0:	08002244 	.word	0x08002244
 80004a4:	08002248 	.word	0x08002248

080004a8 <SysTick_Handler>:
 * @Note 		- Hàm cập nhật hiển thị đồng hồ
 * 				- Việc đếm thời gian sẽ do DS1307 module thực hiện, ta chỉ cần lệnh cho MCU đọc giá trị
 * 				từ DS1307 rồi hiển thị kết quả nhận đc.
 */
void SysTick_Handler(void)
{
 80004a8:	b580      	push	{r7, lr}
 80004aa:	b084      	sub	sp, #16
 80004ac:	af00      	add	r7, sp, #0
	RTC_time_t current_time;
	RTC_date_t current_date;

	//Đọc thời gian đc cấu hình
	ds1307_get_current_time(&current_time);
 80004ae:	f107 0308 	add.w	r3, r7, #8
 80004b2:	4618      	mov	r0, r3
 80004b4:	f000 f993 	bl	80007de <ds1307_get_current_time>
	ds1307_get_current_date(&current_date);
 80004b8:	1d3b      	adds	r3, r7, #4
 80004ba:	4618      	mov	r0, r3
 80004bc:	f000 fa08 	bl	80008d0 <ds1307_get_current_date>

	lcd_set_cursor(1, 1);  //row1 column1
 80004c0:	2101      	movs	r1, #1
 80004c2:	2001      	movs	r0, #1
 80004c4:	f000 fc38 	bl	8000d38 <lcd_set_cursor>
	char *am_pm;		//lưu ký tự biểu diễn PM hoặc AM
	if(current_time.time_format != TIME_FORMAT_24HRS)
 80004c8:	7afb      	ldrb	r3, [r7, #11]
 80004ca:	2b02      	cmp	r3, #2
 80004cc:	d016      	beq.n	80004fc <SysTick_Handler+0x54>
	{
		am_pm = (current_time.time_format) ? "PM" : "AM";
 80004ce:	7afb      	ldrb	r3, [r7, #11]
 80004d0:	2b00      	cmp	r3, #0
 80004d2:	d001      	beq.n	80004d8 <SysTick_Handler+0x30>
 80004d4:	4b1b      	ldr	r3, [pc, #108]	; (8000544 <SysTick_Handler+0x9c>)
 80004d6:	e000      	b.n	80004da <SysTick_Handler+0x32>
 80004d8:	4b1b      	ldr	r3, [pc, #108]	; (8000548 <SysTick_Handler+0xa0>)
 80004da:	60fb      	str	r3, [r7, #12]
		//printf("Current time = %s %s \n",time_to_string(&current_time),am_pm); //Vd: 04:25:41 PM

		/* Vd2: hiển thị thời gian */
		lcd_print_string(time_to_string(&current_time));
 80004dc:	f107 0308 	add.w	r3, r7, #8
 80004e0:	4618      	mov	r0, r3
 80004e2:	f7ff ff0d 	bl	8000300 <time_to_string>
 80004e6:	4603      	mov	r3, r0
 80004e8:	4618      	mov	r0, r3
 80004ea:	f000 fb3b 	bl	8000b64 <lcd_print_string>
		lcd_print_char(' ');
 80004ee:	2020      	movs	r0, #32
 80004f0:	f000 fb16 	bl	8000b20 <lcd_print_char>
		lcd_print_string(am_pm);
 80004f4:	68f8      	ldr	r0, [r7, #12]
 80004f6:	f000 fb35 	bl	8000b64 <lcd_print_string>
 80004fa:	e008      	b.n	800050e <SysTick_Handler+0x66>
	else
	{
		//printf("Current time = %s \n",time_to_string(&current_time)); //Vd: 04:25:41

		/* Vd2: hiển thị thời gian */
		lcd_print_string(time_to_string(&current_time));
 80004fc:	f107 0308 	add.w	r3, r7, #8
 8000500:	4618      	mov	r0, r3
 8000502:	f7ff fefd 	bl	8000300 <time_to_string>
 8000506:	4603      	mov	r3, r0
 8000508:	4618      	mov	r0, r3
 800050a:	f000 fb2b 	bl	8000b64 <lcd_print_string>

	//Biểu diễn ngày tháng: 15/01/21 <friday>
	//printf("Current date: %s <%s>\n",date_to_string(&current_date),get_day_of_week(current_date.day));

	/* Vd2: hiển thị thời gian */
	lcd_set_cursor(2, 1);			//đưa con trỏ xuống hàng dưới //row2 column1
 800050e:	2101      	movs	r1, #1
 8000510:	2002      	movs	r0, #2
 8000512:	f000 fc11 	bl	8000d38 <lcd_set_cursor>
	lcd_print_string(date_to_string(&current_date));
 8000516:	1d3b      	adds	r3, r7, #4
 8000518:	4618      	mov	r0, r3
 800051a:	f7ff ff1b 	bl	8000354 <date_to_string>
 800051e:	4603      	mov	r3, r0
 8000520:	4618      	mov	r0, r3
 8000522:	f000 fb1f 	bl	8000b64 <lcd_print_string>
	lcd_print_char(' ');
 8000526:	2020      	movs	r0, #32
 8000528:	f000 fafa 	bl	8000b20 <lcd_print_char>
	lcd_print_string(get_day_of_week(current_date.day));
 800052c:	79fb      	ldrb	r3, [r7, #7]
 800052e:	4618      	mov	r0, r3
 8000530:	f7ff fe8e 	bl	8000250 <get_day_of_week>
 8000534:	4603      	mov	r3, r0
 8000536:	4618      	mov	r0, r3
 8000538:	f000 fb14 	bl	8000b64 <lcd_print_string>
}
 800053c:	bf00      	nop
 800053e:	3710      	adds	r7, #16
 8000540:	46bd      	mov	sp, r7
 8000542:	bd80      	pop	{r7, pc}
 8000544:	08002244 	.word	0x08002244
 8000548:	08002248 	.word	0x08002248

0800054c <mdelay>:
 * @return		- none
 *
 * @Note 		- none
 */
static void mdelay(uint32_t cnt)
{
 800054c:	b480      	push	{r7}
 800054e:	b085      	sub	sp, #20
 8000550:	af00      	add	r7, sp, #0
 8000552:	6078      	str	r0, [r7, #4]
	for(uint32_t i=0 ; i < (cnt * 1000); i++);
 8000554:	2300      	movs	r3, #0
 8000556:	60fb      	str	r3, [r7, #12]
 8000558:	e002      	b.n	8000560 <mdelay+0x14>
 800055a:	68fb      	ldr	r3, [r7, #12]
 800055c:	3301      	adds	r3, #1
 800055e:	60fb      	str	r3, [r7, #12]
 8000560:	687b      	ldr	r3, [r7, #4]
 8000562:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000566:	fb02 f303 	mul.w	r3, r2, r3
 800056a:	68fa      	ldr	r2, [r7, #12]
 800056c:	429a      	cmp	r2, r3
 800056e:	d3f4      	bcc.n	800055a <mdelay+0xe>
}
 8000570:	bf00      	nop
 8000572:	bf00      	nop
 8000574:	3714      	adds	r7, #20
 8000576:	46bd      	mov	sp, r7
 8000578:	bc80      	pop	{r7}
 800057a:	4770      	bx	lr

0800057c <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800057c:	b580      	push	{r7, lr}
 800057e:	b086      	sub	sp, #24
 8000580:	af00      	add	r7, sp, #0
 8000582:	60f8      	str	r0, [r7, #12]
 8000584:	60b9      	str	r1, [r7, #8]
 8000586:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000588:	2300      	movs	r3, #0
 800058a:	617b      	str	r3, [r7, #20]
 800058c:	e00a      	b.n	80005a4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800058e:	f3af 8000 	nop.w
 8000592:	4601      	mov	r1, r0
 8000594:	68bb      	ldr	r3, [r7, #8]
 8000596:	1c5a      	adds	r2, r3, #1
 8000598:	60ba      	str	r2, [r7, #8]
 800059a:	b2ca      	uxtb	r2, r1
 800059c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800059e:	697b      	ldr	r3, [r7, #20]
 80005a0:	3301      	adds	r3, #1
 80005a2:	617b      	str	r3, [r7, #20]
 80005a4:	697a      	ldr	r2, [r7, #20]
 80005a6:	687b      	ldr	r3, [r7, #4]
 80005a8:	429a      	cmp	r2, r3
 80005aa:	dbf0      	blt.n	800058e <_read+0x12>
  }

  return len;
 80005ac:	687b      	ldr	r3, [r7, #4]
}
 80005ae:	4618      	mov	r0, r3
 80005b0:	3718      	adds	r7, #24
 80005b2:	46bd      	mov	sp, r7
 80005b4:	bd80      	pop	{r7, pc}

080005b6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80005b6:	b580      	push	{r7, lr}
 80005b8:	b086      	sub	sp, #24
 80005ba:	af00      	add	r7, sp, #0
 80005bc:	60f8      	str	r0, [r7, #12]
 80005be:	60b9      	str	r1, [r7, #8]
 80005c0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80005c2:	2300      	movs	r3, #0
 80005c4:	617b      	str	r3, [r7, #20]
 80005c6:	e009      	b.n	80005dc <_write+0x26>
  {
    __io_putchar(*ptr++);
 80005c8:	68bb      	ldr	r3, [r7, #8]
 80005ca:	1c5a      	adds	r2, r3, #1
 80005cc:	60ba      	str	r2, [r7, #8]
 80005ce:	781b      	ldrb	r3, [r3, #0]
 80005d0:	4618      	mov	r0, r3
 80005d2:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80005d6:	697b      	ldr	r3, [r7, #20]
 80005d8:	3301      	adds	r3, #1
 80005da:	617b      	str	r3, [r7, #20]
 80005dc:	697a      	ldr	r2, [r7, #20]
 80005de:	687b      	ldr	r3, [r7, #4]
 80005e0:	429a      	cmp	r2, r3
 80005e2:	dbf1      	blt.n	80005c8 <_write+0x12>
  }
  return len;
 80005e4:	687b      	ldr	r3, [r7, #4]
}
 80005e6:	4618      	mov	r0, r3
 80005e8:	3718      	adds	r7, #24
 80005ea:	46bd      	mov	sp, r7
 80005ec:	bd80      	pop	{r7, pc}

080005ee <_close>:

int _close(int file)
{
 80005ee:	b480      	push	{r7}
 80005f0:	b083      	sub	sp, #12
 80005f2:	af00      	add	r7, sp, #0
 80005f4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80005f6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80005fa:	4618      	mov	r0, r3
 80005fc:	370c      	adds	r7, #12
 80005fe:	46bd      	mov	sp, r7
 8000600:	bc80      	pop	{r7}
 8000602:	4770      	bx	lr

08000604 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000604:	b480      	push	{r7}
 8000606:	b083      	sub	sp, #12
 8000608:	af00      	add	r7, sp, #0
 800060a:	6078      	str	r0, [r7, #4]
 800060c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800060e:	683b      	ldr	r3, [r7, #0]
 8000610:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000614:	605a      	str	r2, [r3, #4]
  return 0;
 8000616:	2300      	movs	r3, #0
}
 8000618:	4618      	mov	r0, r3
 800061a:	370c      	adds	r7, #12
 800061c:	46bd      	mov	sp, r7
 800061e:	bc80      	pop	{r7}
 8000620:	4770      	bx	lr

08000622 <_isatty>:

int _isatty(int file)
{
 8000622:	b480      	push	{r7}
 8000624:	b083      	sub	sp, #12
 8000626:	af00      	add	r7, sp, #0
 8000628:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800062a:	2301      	movs	r3, #1
}
 800062c:	4618      	mov	r0, r3
 800062e:	370c      	adds	r7, #12
 8000630:	46bd      	mov	sp, r7
 8000632:	bc80      	pop	{r7}
 8000634:	4770      	bx	lr

08000636 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000636:	b480      	push	{r7}
 8000638:	b085      	sub	sp, #20
 800063a:	af00      	add	r7, sp, #0
 800063c:	60f8      	str	r0, [r7, #12]
 800063e:	60b9      	str	r1, [r7, #8]
 8000640:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000642:	2300      	movs	r3, #0
}
 8000644:	4618      	mov	r0, r3
 8000646:	3714      	adds	r7, #20
 8000648:	46bd      	mov	sp, r7
 800064a:	bc80      	pop	{r7}
 800064c:	4770      	bx	lr
	...

08000650 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000650:	b580      	push	{r7, lr}
 8000652:	b086      	sub	sp, #24
 8000654:	af00      	add	r7, sp, #0
 8000656:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000658:	4a14      	ldr	r2, [pc, #80]	; (80006ac <_sbrk+0x5c>)
 800065a:	4b15      	ldr	r3, [pc, #84]	; (80006b0 <_sbrk+0x60>)
 800065c:	1ad3      	subs	r3, r2, r3
 800065e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000660:	697b      	ldr	r3, [r7, #20]
 8000662:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000664:	4b13      	ldr	r3, [pc, #76]	; (80006b4 <_sbrk+0x64>)
 8000666:	681b      	ldr	r3, [r3, #0]
 8000668:	2b00      	cmp	r3, #0
 800066a:	d102      	bne.n	8000672 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800066c:	4b11      	ldr	r3, [pc, #68]	; (80006b4 <_sbrk+0x64>)
 800066e:	4a12      	ldr	r2, [pc, #72]	; (80006b8 <_sbrk+0x68>)
 8000670:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000672:	4b10      	ldr	r3, [pc, #64]	; (80006b4 <_sbrk+0x64>)
 8000674:	681a      	ldr	r2, [r3, #0]
 8000676:	687b      	ldr	r3, [r7, #4]
 8000678:	4413      	add	r3, r2
 800067a:	693a      	ldr	r2, [r7, #16]
 800067c:	429a      	cmp	r2, r3
 800067e:	d207      	bcs.n	8000690 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000680:	f001 fb32 	bl	8001ce8 <__errno>
 8000684:	4603      	mov	r3, r0
 8000686:	220c      	movs	r2, #12
 8000688:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800068a:	f04f 33ff 	mov.w	r3, #4294967295
 800068e:	e009      	b.n	80006a4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000690:	4b08      	ldr	r3, [pc, #32]	; (80006b4 <_sbrk+0x64>)
 8000692:	681b      	ldr	r3, [r3, #0]
 8000694:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000696:	4b07      	ldr	r3, [pc, #28]	; (80006b4 <_sbrk+0x64>)
 8000698:	681a      	ldr	r2, [r3, #0]
 800069a:	687b      	ldr	r3, [r7, #4]
 800069c:	4413      	add	r3, r2
 800069e:	4a05      	ldr	r2, [pc, #20]	; (80006b4 <_sbrk+0x64>)
 80006a0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80006a2:	68fb      	ldr	r3, [r7, #12]
}
 80006a4:	4618      	mov	r0, r3
 80006a6:	3718      	adds	r7, #24
 80006a8:	46bd      	mov	sp, r7
 80006aa:	bd80      	pop	{r7, pc}
 80006ac:	20020000 	.word	0x20020000
 80006b0:	00000400 	.word	0x00000400
 80006b4:	200000a8 	.word	0x200000a8
 80006b8:	20000220 	.word	0x20000220

080006bc <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80006bc:	480d      	ldr	r0, [pc, #52]	; (80006f4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80006be:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80006c0:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80006c4:	480c      	ldr	r0, [pc, #48]	; (80006f8 <LoopForever+0x6>)
  ldr r1, =_edata
 80006c6:	490d      	ldr	r1, [pc, #52]	; (80006fc <LoopForever+0xa>)
  ldr r2, =_sidata
 80006c8:	4a0d      	ldr	r2, [pc, #52]	; (8000700 <LoopForever+0xe>)
  movs r3, #0
 80006ca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80006cc:	e002      	b.n	80006d4 <LoopCopyDataInit>

080006ce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80006ce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80006d0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80006d2:	3304      	adds	r3, #4

080006d4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80006d4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80006d6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80006d8:	d3f9      	bcc.n	80006ce <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80006da:	4a0a      	ldr	r2, [pc, #40]	; (8000704 <LoopForever+0x12>)
  ldr r4, =_ebss
 80006dc:	4c0a      	ldr	r4, [pc, #40]	; (8000708 <LoopForever+0x16>)
  movs r3, #0
 80006de:	2300      	movs	r3, #0
  b LoopFillZerobss
 80006e0:	e001      	b.n	80006e6 <LoopFillZerobss>

080006e2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80006e2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80006e4:	3204      	adds	r2, #4

080006e6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80006e6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80006e8:	d3fb      	bcc.n	80006e2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80006ea:	f001 fb03 	bl	8001cf4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80006ee:	f7ff fe5b 	bl	80003a8 <main>

080006f2 <LoopForever>:

LoopForever:
  b LoopForever
 80006f2:	e7fe      	b.n	80006f2 <LoopForever>
  ldr   r0, =_estack
 80006f4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80006f8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80006fc:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8000700:	08002254 	.word	0x08002254
  ldr r2, =_sbss
 8000704:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8000708:	20000220 	.word	0x20000220

0800070c <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800070c:	e7fe      	b.n	800070c <ADC_IRQHandler>
	...

08000710 <ds1307_init>:
 * @return		- 1: CH=1 -> init failed
 *				  0: CH=0 -> init success
 * @Note 		- none
 */
uint8_t ds1307_init()
{
 8000710:	b580      	push	{r7, lr}
 8000712:	b082      	sub	sp, #8
 8000714:	af00      	add	r7, sp, #0
	//1. Initialize the i2c pins
	ds1307_i2c_pin_config();
 8000716:	f000 f90f 	bl	8000938 <ds1307_i2c_pin_config>

	//2. Initialize the i2c peripheral
	ds1307_i2c_config();
 800071a:	f000 f949 	bl	80009b0 <ds1307_i2c_config>

	//3. Enable the I2C peripheral
	I2C_PeripheralControl(DS1307_I2C, ENABLE);
 800071e:	2101      	movs	r1, #1
 8000720:	4809      	ldr	r0, [pc, #36]	; (8000748 <ds1307_init+0x38>)
 8000722:	f001 f831 	bl	8001788 <I2C_PeripheralControl>

	//4. Make clock halt = 0, cấu hình dừng đồng hồ tại 0, cấu hình thanh ghi 00h với value 0
	ds1307_write(0x00, DS1307_ADDR_SEC);
 8000726:	2100      	movs	r1, #0
 8000728:	2000      	movs	r0, #0
 800072a:	f000 f957 	bl	80009dc <ds1307_write>

	//5. Read back clock halt bit(đọc value thanh ghi 00h)
	uint8_t clock_state = ds1307_read(DS1307_ADDR_SEC);
 800072e:	2000      	movs	r0, #0
 8000730:	f000 f970 	bl	8000a14 <ds1307_read>
 8000734:	4603      	mov	r3, r0
 8000736:	71fb      	strb	r3, [r7, #7]

	return ((clock_state >> 7) & 0x1);		//Đọc CH bit[7] và trả về giá trị CH bit
 8000738:	79fb      	ldrb	r3, [r7, #7]
 800073a:	09db      	lsrs	r3, r3, #7
 800073c:	b2db      	uxtb	r3, r3
}
 800073e:	4618      	mov	r0, r3
 8000740:	3708      	adds	r7, #8
 8000742:	46bd      	mov	sp, r7
 8000744:	bd80      	pop	{r7, pc}
 8000746:	bf00      	nop
 8000748:	40005400 	.word	0x40005400

0800074c <ds1307_set_current_time>:
 * @return		- none
 *
 * @Note 		- Cấu hình các thanh ghi 00h,01h,02h
 */
void ds1307_set_current_time(RTC_time_t *rtc_time)
{
 800074c:	b580      	push	{r7, lr}
 800074e:	b084      	sub	sp, #16
 8000750:	af00      	add	r7, sp, #0
 8000752:	6078      	str	r0, [r7, #4]
	//Xử lý thanh ghi 00h liên quan đến second và bit7[CH]
	uint8_t seconds;
	seconds = binary_to_bcd(rtc_time->seconds);			//chuyển đổi dạng nhị phân sang bcd
 8000754:	687b      	ldr	r3, [r7, #4]
 8000756:	781b      	ldrb	r3, [r3, #0]
 8000758:	4618      	mov	r0, r3
 800075a:	f000 f993 	bl	8000a84 <binary_to_bcd>
 800075e:	4603      	mov	r3, r0
 8000760:	73bb      	strb	r3, [r7, #14]
	seconds &= ~(1 << 7);			//xóa bit7[CH] của 00h register về 0, đảm bảo rằng cho phép clock hoạt động
 8000762:	7bbb      	ldrb	r3, [r7, #14]
 8000764:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000768:	73bb      	strb	r3, [r7, #14]
	ds1307_write(seconds,DS1307_ADDR_SEC);				//set second 00h regíter
 800076a:	7bbb      	ldrb	r3, [r7, #14]
 800076c:	2100      	movs	r1, #0
 800076e:	4618      	mov	r0, r3
 8000770:	f000 f934 	bl	80009dc <ds1307_write>

	//minute
	ds1307_write(binary_to_bcd(rtc_time->minutes),DS1307_ADDR_MIN);		//set minute 01h register
 8000774:	687b      	ldr	r3, [r7, #4]
 8000776:	785b      	ldrb	r3, [r3, #1]
 8000778:	4618      	mov	r0, r3
 800077a:	f000 f983 	bl	8000a84 <binary_to_bcd>
 800077e:	4603      	mov	r3, r0
 8000780:	2101      	movs	r1, #1
 8000782:	4618      	mov	r0, r3
 8000784:	f000 f92a 	bl	80009dc <ds1307_write>

	//hour
	uint8_t hrs;
	hrs = binary_to_bcd(rtc_time->hours);
 8000788:	687b      	ldr	r3, [r7, #4]
 800078a:	789b      	ldrb	r3, [r3, #2]
 800078c:	4618      	mov	r0, r3
 800078e:	f000 f979 	bl	8000a84 <binary_to_bcd>
 8000792:	4603      	mov	r3, r0
 8000794:	73fb      	strb	r3, [r7, #15]

	if(rtc_time->time_format == TIME_FORMAT_24HRS)
 8000796:	687b      	ldr	r3, [r7, #4]
 8000798:	78db      	ldrb	r3, [r3, #3]
 800079a:	2b02      	cmp	r3, #2
 800079c:	d104      	bne.n	80007a8 <ds1307_set_current_time+0x5c>
	{
		hrs &= ~(1 << 6);			//format 24h: clear bit6 của 01h register
 800079e:	7bfb      	ldrb	r3, [r7, #15]
 80007a0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80007a4:	73fb      	strb	r3, [r7, #15]
 80007a6:	e011      	b.n	80007cc <ds1307_set_current_time+0x80>
	}
	else
	{
		hrs |= (1 << 6);			//format 12h: set bit6 của 01h register
 80007a8:	7bfb      	ldrb	r3, [r7, #15]
 80007aa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80007ae:	73fb      	strb	r3, [r7, #15]

		//toán tử ba ngôi cấu hình bit5 của 01h register
		hrs = (rtc_time->time_format == TIME_FORMAT_12HRS_PM) ? hrs | (1 << 5) : hrs & ~(1 << 5);
 80007b0:	687b      	ldr	r3, [r7, #4]
 80007b2:	78db      	ldrb	r3, [r3, #3]
 80007b4:	2b01      	cmp	r3, #1
 80007b6:	d104      	bne.n	80007c2 <ds1307_set_current_time+0x76>
 80007b8:	7bfb      	ldrb	r3, [r7, #15]
 80007ba:	f043 0320 	orr.w	r3, r3, #32
 80007be:	b2db      	uxtb	r3, r3
 80007c0:	e003      	b.n	80007ca <ds1307_set_current_time+0x7e>
 80007c2:	7bfb      	ldrb	r3, [r7, #15]
 80007c4:	f023 0320 	bic.w	r3, r3, #32
 80007c8:	b2db      	uxtb	r3, r3
 80007ca:	73fb      	strb	r3, [r7, #15]
	}
	ds1307_write(hrs,DS1307_ADDR_HRS);				//set hour 02h regíter
 80007cc:	7bfb      	ldrb	r3, [r7, #15]
 80007ce:	2102      	movs	r1, #2
 80007d0:	4618      	mov	r0, r3
 80007d2:	f000 f903 	bl	80009dc <ds1307_write>
}
 80007d6:	bf00      	nop
 80007d8:	3710      	adds	r7, #16
 80007da:	46bd      	mov	sp, r7
 80007dc:	bd80      	pop	{r7, pc}

080007de <ds1307_get_current_time>:
 * @return		- none
 *
 * @Note 		- Giá trị đọc đc lưu vào con trỏ rtc_time
 */
void ds1307_get_current_time(RTC_time_t *rtc_time)
{
 80007de:	b580      	push	{r7, lr}
 80007e0:	b084      	sub	sp, #16
 80007e2:	af00      	add	r7, sp, #0
 80007e4:	6078      	str	r0, [r7, #4]
	//second
	uint8_t seconds;
	seconds = ds1307_read(DS1307_ADDR_SEC);			//lệnh read thanh ghi 00h register
 80007e6:	2000      	movs	r0, #0
 80007e8:	f000 f914 	bl	8000a14 <ds1307_read>
 80007ec:	4603      	mov	r3, r0
 80007ee:	73bb      	strb	r3, [r7, #14]
	seconds &= ~(1 << 7);							//chắc chắn rằng bit7[CH] đc clear
 80007f0:	7bbb      	ldrb	r3, [r7, #14]
 80007f2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80007f6:	73bb      	strb	r3, [r7, #14]
	rtc_time->seconds = bcd_to_binary(seconds);		//chuyển đổi và set seconds vào con trỏ
 80007f8:	7bbb      	ldrb	r3, [r7, #14]
 80007fa:	4618      	mov	r0, r3
 80007fc:	f000 f928 	bl	8000a50 <bcd_to_binary>
 8000800:	4603      	mov	r3, r0
 8000802:	461a      	mov	r2, r3
 8000804:	687b      	ldr	r3, [r7, #4]
 8000806:	701a      	strb	r2, [r3, #0]

	//minute
	rtc_time->minutes = bcd_to_binary(ds1307_read(DS1307_ADDR_MIN));  //lệnh read thanh ghi 01h register
 8000808:	2001      	movs	r0, #1
 800080a:	f000 f903 	bl	8000a14 <ds1307_read>
 800080e:	4603      	mov	r3, r0
 8000810:	4618      	mov	r0, r3
 8000812:	f000 f91d 	bl	8000a50 <bcd_to_binary>
 8000816:	4603      	mov	r3, r0
 8000818:	461a      	mov	r2, r3
 800081a:	687b      	ldr	r3, [r7, #4]
 800081c:	705a      	strb	r2, [r3, #1]
																	//chuyển đổi và set minutes vào con trỏ

	//hour
	uint8_t hrs;
	hrs = ds1307_read(DS1307_ADDR_HRS);				//lệnh read thanh ghi 02h register
 800081e:	2002      	movs	r0, #2
 8000820:	f000 f8f8 	bl	8000a14 <ds1307_read>
 8000824:	4603      	mov	r3, r0
 8000826:	73fb      	strb	r3, [r7, #15]
	//Biện luận bit6 của 02h register đế xác định kiểu thời gian đang lưu
	if(hrs & (1 << 6))	//bit6=0
 8000828:	7bfb      	ldrb	r3, [r7, #15]
 800082a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800082e:	2b00      	cmp	r3, #0
 8000830:	d00f      	beq.n	8000852 <ds1307_get_current_time+0x74>
	{
		//set 12hrs format, check bit5 nếu 0:giờ bình thường or 1:Kiểu giờ AM-PM
		rtc_time->time_format = !((hrs & (1 << 5)) == 0);  //nếu bit5là 0 thì nó sẽ đảo lên thành 1
 8000832:	7bfb      	ldrb	r3, [r7, #15]
 8000834:	f003 0320 	and.w	r3, r3, #32
 8000838:	2b00      	cmp	r3, #0
 800083a:	bf14      	ite	ne
 800083c:	2301      	movne	r3, #1
 800083e:	2300      	moveq	r3, #0
 8000840:	b2db      	uxtb	r3, r3
 8000842:	461a      	mov	r2, r3
 8000844:	687b      	ldr	r3, [r7, #4]
 8000846:	70da      	strb	r2, [r3, #3]
														  //biến nó thành kiểu giờ AM-PM
		hrs &= ~(0x3 << 5);	//0x3=0011 : clear 6 and 5 bắt đầu từ vị trí bit5
 8000848:	7bfb      	ldrb	r3, [r7, #15]
 800084a:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 800084e:	73fb      	strb	r3, [r7, #15]
 8000850:	e002      	b.n	8000858 <ds1307_get_current_time+0x7a>
	}
	else
	{
		//set 24hrs format
		rtc_time->time_format = TIME_FORMAT_24HRS;
 8000852:	687b      	ldr	r3, [r7, #4]
 8000854:	2202      	movs	r2, #2
 8000856:	70da      	strb	r2, [r3, #3]
	}
	rtc_time->hours = bcd_to_binary(hrs);				//chuyển đổi và set hour vào con trỏ
 8000858:	7bfb      	ldrb	r3, [r7, #15]
 800085a:	4618      	mov	r0, r3
 800085c:	f000 f8f8 	bl	8000a50 <bcd_to_binary>
 8000860:	4603      	mov	r3, r0
 8000862:	461a      	mov	r2, r3
 8000864:	687b      	ldr	r3, [r7, #4]
 8000866:	709a      	strb	r2, [r3, #2]
}
 8000868:	bf00      	nop
 800086a:	3710      	adds	r7, #16
 800086c:	46bd      	mov	sp, r7
 800086e:	bd80      	pop	{r7, pc}

08000870 <ds1307_set_current_date>:
 * @return		- none
 *
 * @Note 		- none
 */
void ds1307_set_current_date(RTC_date_t *rtc_date)
{
 8000870:	b580      	push	{r7, lr}
 8000872:	b082      	sub	sp, #8
 8000874:	af00      	add	r7, sp, #0
 8000876:	6078      	str	r0, [r7, #4]
	//set date 04h register
	ds1307_write(binary_to_bcd(rtc_date->date),DS1307_ADDR_DATE);
 8000878:	687b      	ldr	r3, [r7, #4]
 800087a:	781b      	ldrb	r3, [r3, #0]
 800087c:	4618      	mov	r0, r3
 800087e:	f000 f901 	bl	8000a84 <binary_to_bcd>
 8000882:	4603      	mov	r3, r0
 8000884:	2104      	movs	r1, #4
 8000886:	4618      	mov	r0, r3
 8000888:	f000 f8a8 	bl	80009dc <ds1307_write>

	//set month 05h register
	ds1307_write(binary_to_bcd(rtc_date->month),DS1307_ADDR_MONTH);
 800088c:	687b      	ldr	r3, [r7, #4]
 800088e:	785b      	ldrb	r3, [r3, #1]
 8000890:	4618      	mov	r0, r3
 8000892:	f000 f8f7 	bl	8000a84 <binary_to_bcd>
 8000896:	4603      	mov	r3, r0
 8000898:	2105      	movs	r1, #5
 800089a:	4618      	mov	r0, r3
 800089c:	f000 f89e 	bl	80009dc <ds1307_write>

	//set year 06h register
	ds1307_write(binary_to_bcd(rtc_date->year),DS1307_ADDR_YEAR);
 80008a0:	687b      	ldr	r3, [r7, #4]
 80008a2:	789b      	ldrb	r3, [r3, #2]
 80008a4:	4618      	mov	r0, r3
 80008a6:	f000 f8ed 	bl	8000a84 <binary_to_bcd>
 80008aa:	4603      	mov	r3, r0
 80008ac:	2106      	movs	r1, #6
 80008ae:	4618      	mov	r0, r3
 80008b0:	f000 f894 	bl	80009dc <ds1307_write>

	//set day(thứ) 03h register
	ds1307_write(binary_to_bcd(rtc_date->day),DS1307_ADDR_DAY);
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	78db      	ldrb	r3, [r3, #3]
 80008b8:	4618      	mov	r0, r3
 80008ba:	f000 f8e3 	bl	8000a84 <binary_to_bcd>
 80008be:	4603      	mov	r3, r0
 80008c0:	2103      	movs	r1, #3
 80008c2:	4618      	mov	r0, r3
 80008c4:	f000 f88a 	bl	80009dc <ds1307_write>
}
 80008c8:	bf00      	nop
 80008ca:	3708      	adds	r7, #8
 80008cc:	46bd      	mov	sp, r7
 80008ce:	bd80      	pop	{r7, pc}

080008d0 <ds1307_get_current_date>:
 * @return		- none
 *
 * @Note 		-  Giá trị đọc đc lưu vào con trỏ rtc_date
 */
void ds1307_get_current_date(RTC_date_t *rtc_date)
{
 80008d0:	b580      	push	{r7, lr}
 80008d2:	b082      	sub	sp, #8
 80008d4:	af00      	add	r7, sp, #0
 80008d6:	6078      	str	r0, [r7, #4]
	//date
	rtc_date->date = bcd_to_binary(ds1307_read(DS1307_ADDR_DATE));
 80008d8:	2004      	movs	r0, #4
 80008da:	f000 f89b 	bl	8000a14 <ds1307_read>
 80008de:	4603      	mov	r3, r0
 80008e0:	4618      	mov	r0, r3
 80008e2:	f000 f8b5 	bl	8000a50 <bcd_to_binary>
 80008e6:	4603      	mov	r3, r0
 80008e8:	461a      	mov	r2, r3
 80008ea:	687b      	ldr	r3, [r7, #4]
 80008ec:	701a      	strb	r2, [r3, #0]

	//month
	rtc_date->month = bcd_to_binary(ds1307_read(DS1307_ADDR_MONTH));
 80008ee:	2005      	movs	r0, #5
 80008f0:	f000 f890 	bl	8000a14 <ds1307_read>
 80008f4:	4603      	mov	r3, r0
 80008f6:	4618      	mov	r0, r3
 80008f8:	f000 f8aa 	bl	8000a50 <bcd_to_binary>
 80008fc:	4603      	mov	r3, r0
 80008fe:	461a      	mov	r2, r3
 8000900:	687b      	ldr	r3, [r7, #4]
 8000902:	705a      	strb	r2, [r3, #1]

	//year
	rtc_date->year = bcd_to_binary(ds1307_read(DS1307_ADDR_YEAR));
 8000904:	2006      	movs	r0, #6
 8000906:	f000 f885 	bl	8000a14 <ds1307_read>
 800090a:	4603      	mov	r3, r0
 800090c:	4618      	mov	r0, r3
 800090e:	f000 f89f 	bl	8000a50 <bcd_to_binary>
 8000912:	4603      	mov	r3, r0
 8000914:	461a      	mov	r2, r3
 8000916:	687b      	ldr	r3, [r7, #4]
 8000918:	709a      	strb	r2, [r3, #2]

	//day
	rtc_date->day = bcd_to_binary(ds1307_read(DS1307_ADDR_DAY));
 800091a:	2003      	movs	r0, #3
 800091c:	f000 f87a 	bl	8000a14 <ds1307_read>
 8000920:	4603      	mov	r3, r0
 8000922:	4618      	mov	r0, r3
 8000924:	f000 f894 	bl	8000a50 <bcd_to_binary>
 8000928:	4603      	mov	r3, r0
 800092a:	461a      	mov	r2, r3
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	70da      	strb	r2, [r3, #3]
}
 8000930:	bf00      	nop
 8000932:	3708      	adds	r7, #8
 8000934:	46bd      	mov	sp, r7
 8000936:	bd80      	pop	{r7, pc}

08000938 <ds1307_i2c_pin_config>:
 * 				Nếu thay đổi cấu hình AF thì cần viết lại code hàm này
 * 				- 2. Vì hàm sử dụng GPIOx_Driver của chip STM32F407xx nên hàm ds1307_i2c_pin_config chỉ dùng
 * 				cho chip này, nếu thay đổi driver chip khác cũng cần viết lại code hàm
 */
static void ds1307_i2c_pin_config()
{
 8000938:	b580      	push	{r7, lr}
 800093a:	b086      	sub	sp, #24
 800093c:	af00      	add	r7, sp, #0
	GPIOx_Handle_t i2c_sda,i2c_scl;

	//hàm memset() sẽ ghi số 0 vào bao nhiêu vị trí sizeof(x) byte của con trỏ struct i2c_x
	memset(&i2c_sda,0,sizeof(i2c_sda));		//tất cả value trong i2c_sda đều là 0
 800093e:	f107 030c 	add.w	r3, r7, #12
 8000942:	220c      	movs	r2, #12
 8000944:	2100      	movs	r1, #0
 8000946:	4618      	mov	r0, r3
 8000948:	f001 f980 	bl	8001c4c <memset>
	memset(&i2c_scl,0,sizeof(i2c_scl));		//tất cả value trong i2c_scl đều là 0
 800094c:	463b      	mov	r3, r7
 800094e:	220c      	movs	r2, #12
 8000950:	2100      	movs	r1, #0
 8000952:	4618      	mov	r0, r3
 8000954:	f001 f97a 	bl	8001c4c <memset>

	/*
	 * I2C1_SCL(DS1307) ==> PB6(STM32)
	 * I2C1_SDA(DS1307) ==> PB7(STM32)
	 */
	i2c_sda.pGPIOx = DS1307_I2C_PORT;								//Cấu hình port dùng kết nối DS1307->MCU
 8000958:	4b14      	ldr	r3, [pc, #80]	; (80009ac <ds1307_i2c_pin_config+0x74>)
 800095a:	60fb      	str	r3, [r7, #12]
	i2c_sda.GPIO_PinConfig.GPIO_PinAltFunMode = 4;
 800095c:	2304      	movs	r3, #4
 800095e:	757b      	strb	r3, [r7, #21]
	i2c_sda.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALTFN;
 8000960:	2302      	movs	r3, #2
 8000962:	747b      	strb	r3, [r7, #17]
	i2c_sda.GPIO_PinConfig.GPIO_PinNumber = DS1307_I2C_SDA_PIN;
 8000964:	2307      	movs	r3, #7
 8000966:	743b      	strb	r3, [r7, #16]
	i2c_sda.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_OD;
 8000968:	2301      	movs	r3, #1
 800096a:	753b      	strb	r3, [r7, #20]
	i2c_sda.GPIO_PinConfig.GPIO_PinPuPdControl = DS1307_I2C_PUPD;
 800096c:	2301      	movs	r3, #1
 800096e:	74fb      	strb	r3, [r7, #19]
	i2c_sda.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 8000970:	2302      	movs	r3, #2
 8000972:	74bb      	strb	r3, [r7, #18]
	GPIO_Init(&i2c_sda);
 8000974:	f107 030c 	add.w	r3, r7, #12
 8000978:	4618      	mov	r0, r3
 800097a:	f000 fac9 	bl	8000f10 <GPIO_Init>

	i2c_scl.pGPIOx = DS1307_I2C_PORT;
 800097e:	4b0b      	ldr	r3, [pc, #44]	; (80009ac <ds1307_i2c_pin_config+0x74>)
 8000980:	603b      	str	r3, [r7, #0]
	i2c_scl.GPIO_PinConfig.GPIO_PinAltFunMode = 4;
 8000982:	2304      	movs	r3, #4
 8000984:	727b      	strb	r3, [r7, #9]
	i2c_scl.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALTFN;
 8000986:	2302      	movs	r3, #2
 8000988:	717b      	strb	r3, [r7, #5]
	i2c_scl.GPIO_PinConfig.GPIO_PinNumber = DS1307_I2C_SCL_PIN;
 800098a:	2306      	movs	r3, #6
 800098c:	713b      	strb	r3, [r7, #4]
	i2c_scl.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_OD;
 800098e:	2301      	movs	r3, #1
 8000990:	723b      	strb	r3, [r7, #8]
	i2c_scl.GPIO_PinConfig.GPIO_PinPuPdControl = DS1307_I2C_PUPD;
 8000992:	2301      	movs	r3, #1
 8000994:	71fb      	strb	r3, [r7, #7]
	i2c_scl.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 8000996:	2302      	movs	r3, #2
 8000998:	71bb      	strb	r3, [r7, #6]
	GPIO_Init(&i2c_scl);
 800099a:	463b      	mov	r3, r7
 800099c:	4618      	mov	r0, r3
 800099e:	f000 fab7 	bl	8000f10 <GPIO_Init>
}
 80009a2:	bf00      	nop
 80009a4:	3718      	adds	r7, #24
 80009a6:	46bd      	mov	sp, r7
 80009a8:	bd80      	pop	{r7, pc}
 80009aa:	bf00      	nop
 80009ac:	40020400 	.word	0x40020400

080009b0 <ds1307_i2c_config>:
 * @Note 		- 1. Tùy thuộc vào lựa chọn I2Cx_MCU mà lập trình viên sẽ triển khai code khác nhau
 * 				- 2. Vì hàm sử dụng GPIOx_Driver của chip STM32F407xx nên hàm ds1307_i2c_pin_config chỉ dùng
 * 				cho chip này, nếu thay đổi driver chip khác cũng cần viết lại code hàm
 */
static void ds1307_i2c_config(void)
{
 80009b0:	b580      	push	{r7, lr}
 80009b2:	af00      	add	r7, sp, #0
	g_ds1307I2CHandle.pI2Cx = DS1307_I2C;	//Cấu hình I2Cx_MCU sử dụng kết nối DS1307
 80009b4:	4b06      	ldr	r3, [pc, #24]	; (80009d0 <ds1307_i2c_config+0x20>)
 80009b6:	4a07      	ldr	r2, [pc, #28]	; (80009d4 <ds1307_i2c_config+0x24>)
 80009b8:	601a      	str	r2, [r3, #0]
	g_ds1307I2CHandle.I2C_Config.I2C_AckControl = I2C_ACK_ENABLE;
 80009ba:	4b05      	ldr	r3, [pc, #20]	; (80009d0 <ds1307_i2c_config+0x20>)
 80009bc:	2201      	movs	r2, #1
 80009be:	725a      	strb	r2, [r3, #9]
	g_ds1307I2CHandle.I2C_Config.I2C_SCLSpeed = DS1307_I2C_SPEED;
 80009c0:	4b03      	ldr	r3, [pc, #12]	; (80009d0 <ds1307_i2c_config+0x20>)
 80009c2:	4a05      	ldr	r2, [pc, #20]	; (80009d8 <ds1307_i2c_config+0x28>)
 80009c4:	605a      	str	r2, [r3, #4]
	I2C_Init(&g_ds1307I2CHandle);
 80009c6:	4802      	ldr	r0, [pc, #8]	; (80009d0 <ds1307_i2c_config+0x20>)
 80009c8:	f000 fc8a 	bl	80012e0 <I2C_Init>
}
 80009cc:	bf00      	nop
 80009ce:	bd80      	pop	{r7, pc}
 80009d0:	200000ac 	.word	0x200000ac
 80009d4:	40005400 	.word	0x40005400
 80009d8:	000186a0 	.word	0x000186a0

080009dc <ds1307_write>:
 * @return		- none
 *
 * @Note 		- Frame data gửi đến DS1307: S|<Slave_address>|0(W)|Ack|<Word_Address>|A|<Data(n)>|...|A|P
 */
static void ds1307_write(uint8_t value, uint8_t reg_addr)
{
 80009dc:	b580      	push	{r7, lr}
 80009de:	b086      	sub	sp, #24
 80009e0:	af02      	add	r7, sp, #8
 80009e2:	4603      	mov	r3, r0
 80009e4:	460a      	mov	r2, r1
 80009e6:	71fb      	strb	r3, [r7, #7]
 80009e8:	4613      	mov	r3, r2
 80009ea:	71bb      	strb	r3, [r7, #6]
	uint8_t tx[2];		//Một mảng 2 phần tử, lưu 2 byte thông số
	tx[0] = reg_addr;
 80009ec:	79bb      	ldrb	r3, [r7, #6]
 80009ee:	733b      	strb	r3, [r7, #12]
	tx[1] = value;
 80009f0:	79fb      	ldrb	r3, [r7, #7]
 80009f2:	737b      	strb	r3, [r7, #13]

	//Gửi thông số muốn ghi đến DS1307
	I2C_MasterSendData(&g_ds1307I2CHandle, tx, 2, DS1307_I2C_ADDRESS, 0);	//0: ko có lặp lại Frame Data
 80009f4:	f107 010c 	add.w	r1, r7, #12
 80009f8:	2300      	movs	r3, #0
 80009fa:	9300      	str	r3, [sp, #0]
 80009fc:	2368      	movs	r3, #104	; 0x68
 80009fe:	2202      	movs	r2, #2
 8000a00:	4803      	ldr	r0, [pc, #12]	; (8000a10 <ds1307_write+0x34>)
 8000a02:	f000 fd23 	bl	800144c <I2C_MasterSendData>
}
 8000a06:	bf00      	nop
 8000a08:	3710      	adds	r7, #16
 8000a0a:	46bd      	mov	sp, r7
 8000a0c:	bd80      	pop	{r7, pc}
 8000a0e:	bf00      	nop
 8000a10:	200000ac 	.word	0x200000ac

08000a14 <ds1307_read>:
 * @return		- none
 *
 * @Note 		- Frame read data DS1307: S|<Slave_address>|1(R)|Ack|<Data(n)>|...|/A|P
 */
static uint8_t ds1307_read(uint8_t reg_addr)
{
 8000a14:	b580      	push	{r7, lr}
 8000a16:	b086      	sub	sp, #24
 8000a18:	af02      	add	r7, sp, #8
 8000a1a:	4603      	mov	r3, r0
 8000a1c:	71fb      	strb	r3, [r7, #7]
	uint8_t data;  //biến lưu giá trị đọc đc từ nhận từ Ds1307

	//Gửi đi lệnh đọc thanh ghi tại địa chỉ reg_addr tới DS1307
	I2C_MasterSendData(&g_ds1307I2CHandle, &reg_addr, 1, DS1307_I2C_ADDRESS, 0);
 8000a1e:	1df9      	adds	r1, r7, #7
 8000a20:	2300      	movs	r3, #0
 8000a22:	9300      	str	r3, [sp, #0]
 8000a24:	2368      	movs	r3, #104	; 0x68
 8000a26:	2201      	movs	r2, #1
 8000a28:	4808      	ldr	r0, [pc, #32]	; (8000a4c <ds1307_read+0x38>)
 8000a2a:	f000 fd0f 	bl	800144c <I2C_MasterSendData>

	//Nhận giá trị vào biến data từ địa chỉ reg_addr của Ds1307
	I2C_MasterReceiveData(&g_ds1307I2CHandle, &data, 1, DS1307_I2C_ADDRESS, 0);
 8000a2e:	f107 010f 	add.w	r1, r7, #15
 8000a32:	2300      	movs	r3, #0
 8000a34:	9300      	str	r3, [sp, #0]
 8000a36:	2368      	movs	r3, #104	; 0x68
 8000a38:	2201      	movs	r2, #1
 8000a3a:	4804      	ldr	r0, [pc, #16]	; (8000a4c <ds1307_read+0x38>)
 8000a3c:	f000 fd69 	bl	8001512 <I2C_MasterReceiveData>

	return data;
 8000a40:	7bfb      	ldrb	r3, [r7, #15]
}
 8000a42:	4618      	mov	r0, r3
 8000a44:	3710      	adds	r7, #16
 8000a46:	46bd      	mov	sp, r7
 8000a48:	bd80      	pop	{r7, pc}
 8000a4a:	bf00      	nop
 8000a4c:	200000ac 	.word	0x200000ac

08000a50 <bcd_to_binary>:
 *
 * @Note 		- Vd: Số 12 có (b)0001100 và dạng (BCD)0001_0010 với 0001 = 1 và 0010 = 2
 * 				- Lưu ý: Máy tính sẽ hoạt động dưới dạng nhị phân và DS1307 lưu số dạng BCD
 */
static uint8_t bcd_to_binary(uint8_t value)
{
 8000a50:	b480      	push	{r7}
 8000a52:	b085      	sub	sp, #20
 8000a54:	af00      	add	r7, sp, #0
 8000a56:	4603      	mov	r3, r0
 8000a58:	71fb      	strb	r3, [r7, #7]
	uint8_t m , n;
	m = (uint8_t) ((value >> 4 ) * 10);
 8000a5a:	79fb      	ldrb	r3, [r7, #7]
 8000a5c:	091b      	lsrs	r3, r3, #4
 8000a5e:	b2db      	uxtb	r3, r3
 8000a60:	461a      	mov	r2, r3
 8000a62:	0092      	lsls	r2, r2, #2
 8000a64:	4413      	add	r3, r2
 8000a66:	005b      	lsls	r3, r3, #1
 8000a68:	73fb      	strb	r3, [r7, #15]
	n =  value & (uint8_t)0x0F;
 8000a6a:	79fb      	ldrb	r3, [r7, #7]
 8000a6c:	f003 030f 	and.w	r3, r3, #15
 8000a70:	73bb      	strb	r3, [r7, #14]
	return (m+n);
 8000a72:	7bfa      	ldrb	r2, [r7, #15]
 8000a74:	7bbb      	ldrb	r3, [r7, #14]
 8000a76:	4413      	add	r3, r2
 8000a78:	b2db      	uxtb	r3, r3
}
 8000a7a:	4618      	mov	r0, r3
 8000a7c:	3714      	adds	r7, #20
 8000a7e:	46bd      	mov	sp, r7
 8000a80:	bc80      	pop	{r7}
 8000a82:	4770      	bx	lr

08000a84 <binary_to_bcd>:
 * @Note 		- Vd: Số 12 có (b)0001100 và dạng (BCD)0001_0010 với 0001 = 1 và 0010 = 2
 * 				- Lưu ý: Máy tính sẽ hoạt động dưới dạng nhị phân nên 'value' đưa vào sẽ đc máy tính
 * 				chuyển sang nhị phân và và DS1307 lưu số dạng BCD
 */
static uint8_t binary_to_bcd(uint8_t value)
{
 8000a84:	b480      	push	{r7}
 8000a86:	b085      	sub	sp, #20
 8000a88:	af00      	add	r7, sp, #0
 8000a8a:	4603      	mov	r3, r0
 8000a8c:	71fb      	strb	r3, [r7, #7]
	uint8_t m , n;
	uint8_t bcd;

	bcd = value;
 8000a8e:	79fb      	ldrb	r3, [r7, #7]
 8000a90:	73fb      	strb	r3, [r7, #15]
	if(value >= 10)
 8000a92:	79fb      	ldrb	r3, [r7, #7]
 8000a94:	2b09      	cmp	r3, #9
 8000a96:	d918      	bls.n	8000aca <binary_to_bcd+0x46>
	{
		m = value /10;
 8000a98:	79fb      	ldrb	r3, [r7, #7]
 8000a9a:	4a0f      	ldr	r2, [pc, #60]	; (8000ad8 <binary_to_bcd+0x54>)
 8000a9c:	fba2 2303 	umull	r2, r3, r2, r3
 8000aa0:	08db      	lsrs	r3, r3, #3
 8000aa2:	73bb      	strb	r3, [r7, #14]
		n = value % 10;
 8000aa4:	79fa      	ldrb	r2, [r7, #7]
 8000aa6:	4b0c      	ldr	r3, [pc, #48]	; (8000ad8 <binary_to_bcd+0x54>)
 8000aa8:	fba3 1302 	umull	r1, r3, r3, r2
 8000aac:	08d9      	lsrs	r1, r3, #3
 8000aae:	460b      	mov	r3, r1
 8000ab0:	009b      	lsls	r3, r3, #2
 8000ab2:	440b      	add	r3, r1
 8000ab4:	005b      	lsls	r3, r3, #1
 8000ab6:	1ad3      	subs	r3, r2, r3
 8000ab8:	737b      	strb	r3, [r7, #13]
		bcd = (m << 4) | n ;
 8000aba:	7bbb      	ldrb	r3, [r7, #14]
 8000abc:	011b      	lsls	r3, r3, #4
 8000abe:	b25a      	sxtb	r2, r3
 8000ac0:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8000ac4:	4313      	orrs	r3, r2
 8000ac6:	b25b      	sxtb	r3, r3
 8000ac8:	73fb      	strb	r3, [r7, #15]
	}

	return bcd;
 8000aca:	7bfb      	ldrb	r3, [r7, #15]
}
 8000acc:	4618      	mov	r0, r3
 8000ace:	3714      	adds	r7, #20
 8000ad0:	46bd      	mov	sp, r7
 8000ad2:	bc80      	pop	{r7}
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop
 8000ad8:	cccccccd 	.word	0xcccccccd

08000adc <lcd_send_command>:
 * @return		- none
 *
 * @Note 		- none
 */
void lcd_send_command(uint8_t cmd)
{
 8000adc:	b580      	push	{r7, lr}
 8000ade:	b082      	sub	sp, #8
 8000ae0:	af00      	add	r7, sp, #0
 8000ae2:	4603      	mov	r3, r0
 8000ae4:	71fb      	strb	r3, [r7, #7]
	/* RS=0 for LCD command */
	GPIO_WriteToOutputPin(LCD_GPIO_PORT, LCD_GPIO_RS, GPIO_PIN_RESET);
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	2100      	movs	r1, #0
 8000aea:	480c      	ldr	r0, [pc, #48]	; (8000b1c <lcd_send_command+0x40>)
 8000aec:	f000 fb9e 	bl	800122c <GPIO_WriteToOutputPin>

	/*R/nW = 0, for write */
	GPIO_WriteToOutputPin(LCD_GPIO_PORT, LCD_GPIO_RW, GPIO_PIN_RESET);
 8000af0:	2200      	movs	r2, #0
 8000af2:	2101      	movs	r1, #1
 8000af4:	4809      	ldr	r0, [pc, #36]	; (8000b1c <lcd_send_command+0x40>)
 8000af6:	f000 fb99 	bl	800122c <GPIO_WriteToOutputPin>

	write_4_bits(cmd >> 4);		//4bit higher nibble
 8000afa:	79fb      	ldrb	r3, [r7, #7]
 8000afc:	091b      	lsrs	r3, r3, #4
 8000afe:	b2db      	uxtb	r3, r3
 8000b00:	4618      	mov	r0, r3
 8000b02:	f000 f8cd 	bl	8000ca0 <write_4_bits>
	write_4_bits(cmd & 0x0F);	//4bit low nibble, 0x0F= 0000 1111, truyền 4 bit thấp hơn
 8000b06:	79fb      	ldrb	r3, [r7, #7]
 8000b08:	f003 030f 	and.w	r3, r3, #15
 8000b0c:	b2db      	uxtb	r3, r3
 8000b0e:	4618      	mov	r0, r3
 8000b10:	f000 f8c6 	bl	8000ca0 <write_4_bits>

}
 8000b14:	bf00      	nop
 8000b16:	3708      	adds	r7, #8
 8000b18:	46bd      	mov	sp, r7
 8000b1a:	bd80      	pop	{r7, pc}
 8000b1c:	40020c00 	.word	0x40020c00

08000b20 <lcd_print_char>:
 *				- Here we used 4 bit parallel data transmission.
 *				- First higher nibble of the data will be sent on to the data lines D4,D5,D6,D7
 *				- Then lower nibble of the data will be set on to the data lines D4,D5,D6,D7
 */
void lcd_print_char(uint8_t data)
{
 8000b20:	b580      	push	{r7, lr}
 8000b22:	b082      	sub	sp, #8
 8000b24:	af00      	add	r7, sp, #0
 8000b26:	4603      	mov	r3, r0
 8000b28:	71fb      	strb	r3, [r7, #7]
	/* RS=1 for LCD user data */
	GPIO_WriteToOutputPin(LCD_GPIO_PORT, LCD_GPIO_RS, GPIO_PIN_SET);
 8000b2a:	2201      	movs	r2, #1
 8000b2c:	2100      	movs	r1, #0
 8000b2e:	480c      	ldr	r0, [pc, #48]	; (8000b60 <lcd_print_char+0x40>)
 8000b30:	f000 fb7c 	bl	800122c <GPIO_WriteToOutputPin>

	/*R/nW = 0, for write */
	GPIO_WriteToOutputPin(LCD_GPIO_PORT, LCD_GPIO_RW, GPIO_PIN_RESET);
 8000b34:	2200      	movs	r2, #0
 8000b36:	2101      	movs	r1, #1
 8000b38:	4809      	ldr	r0, [pc, #36]	; (8000b60 <lcd_print_char+0x40>)
 8000b3a:	f000 fb77 	bl	800122c <GPIO_WriteToOutputPin>

	write_4_bits(data >> 4);  /*Higher nibble*/
 8000b3e:	79fb      	ldrb	r3, [r7, #7]
 8000b40:	091b      	lsrs	r3, r3, #4
 8000b42:	b2db      	uxtb	r3, r3
 8000b44:	4618      	mov	r0, r3
 8000b46:	f000 f8ab 	bl	8000ca0 <write_4_bits>
	write_4_bits(data & 0x0F); /*Lower nibble*/
 8000b4a:	79fb      	ldrb	r3, [r7, #7]
 8000b4c:	f003 030f 	and.w	r3, r3, #15
 8000b50:	b2db      	uxtb	r3, r3
 8000b52:	4618      	mov	r0, r3
 8000b54:	f000 f8a4 	bl	8000ca0 <write_4_bits>

}
 8000b58:	bf00      	nop
 8000b5a:	3708      	adds	r7, #8
 8000b5c:	46bd      	mov	sp, r7
 8000b5e:	bd80      	pop	{r7, pc}
 8000b60:	40020c00 	.word	0x40020c00

08000b64 <lcd_print_string>:
 * @return		- none
 *
 * @Note 		- Nó sẽ tách từng ký tự trong chuỗi rồi gửi hiển thị, và dừng khi gặp ký tự '\0'
 */
void lcd_print_string(char *message)
{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	b082      	sub	sp, #8
 8000b68:	af00      	add	r7, sp, #0
 8000b6a:	6078      	str	r0, [r7, #4]
      do
      {
          lcd_print_char((uint8_t)*message++);
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	1c5a      	adds	r2, r3, #1
 8000b70:	607a      	str	r2, [r7, #4]
 8000b72:	781b      	ldrb	r3, [r3, #0]
 8000b74:	4618      	mov	r0, r3
 8000b76:	f7ff ffd3 	bl	8000b20 <lcd_print_char>
      }
      while (*message != '\0');
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	781b      	ldrb	r3, [r3, #0]
 8000b7e:	2b00      	cmp	r3, #0
 8000b80:	d1f4      	bne.n	8000b6c <lcd_print_string+0x8>

}
 8000b82:	bf00      	nop
 8000b84:	bf00      	nop
 8000b86:	3708      	adds	r7, #8
 8000b88:	46bd      	mov	sp, r7
 8000b8a:	bd80      	pop	{r7, pc}

08000b8c <lcd_init>:
 *
 * @Note 		- Cấu hình phần cứng chuyển đổi sang lệnh code
 * 				- Tham khảo datasheet phần "4-Bit Interface"
 */
void lcd_init(void)
{
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	b084      	sub	sp, #16
 8000b90:	af00      	add	r7, sp, #0
	//1. Configure the gpio pins which are used for LCD connections
	//Định cấu hình các chân gpio được sử dụng cho kết nối LCD
	GPIOx_Handle_t lcd_signal;				//Struct đại diện Cấu hình chân GPIO

	//Cấu hình portD kết nối và các thông số cho từng pin kết nối
	lcd_signal.pGPIOx = LCD_GPIO_PORT;								//PortD
 8000b92:	4b42      	ldr	r3, [pc, #264]	; (8000c9c <lcd_init+0x110>)
 8000b94:	607b      	str	r3, [r7, #4]

	lcd_signal.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_OUT;
 8000b96:	2301      	movs	r3, #1
 8000b98:	727b      	strb	r3, [r7, #9]
	lcd_signal.GPIO_PinConfig.GPIO_PinNumber = LCD_GPIO_RS;			//RS - PD0
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	723b      	strb	r3, [r7, #8]
	lcd_signal.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_PP;
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	733b      	strb	r3, [r7, #12]
	lcd_signal.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	72fb      	strb	r3, [r7, #11]
	lcd_signal.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 8000ba6:	2302      	movs	r3, #2
 8000ba8:	72bb      	strb	r3, [r7, #10]
	GPIO_Init(&lcd_signal);
 8000baa:	1d3b      	adds	r3, r7, #4
 8000bac:	4618      	mov	r0, r3
 8000bae:	f000 f9af 	bl	8000f10 <GPIO_Init>

	lcd_signal.GPIO_PinConfig.GPIO_PinNumber = LCD_GPIO_RW;			//RW - PD1
 8000bb2:	2301      	movs	r3, #1
 8000bb4:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&lcd_signal);
 8000bb6:	1d3b      	adds	r3, r7, #4
 8000bb8:	4618      	mov	r0, r3
 8000bba:	f000 f9a9 	bl	8000f10 <GPIO_Init>

	lcd_signal.GPIO_PinConfig.GPIO_PinNumber = LCD_GPIO_EN;			//EN - PD2
 8000bbe:	2302      	movs	r3, #2
 8000bc0:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&lcd_signal);
 8000bc2:	1d3b      	adds	r3, r7, #4
 8000bc4:	4618      	mov	r0, r3
 8000bc6:	f000 f9a3 	bl	8000f10 <GPIO_Init>

	lcd_signal.GPIO_PinConfig.GPIO_PinNumber = LCD_GPIO_D4;			//D4 - PD3
 8000bca:	2303      	movs	r3, #3
 8000bcc:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&lcd_signal);
 8000bce:	1d3b      	adds	r3, r7, #4
 8000bd0:	4618      	mov	r0, r3
 8000bd2:	f000 f99d 	bl	8000f10 <GPIO_Init>

	lcd_signal.GPIO_PinConfig.GPIO_PinNumber = LCD_GPIO_D5;			//D5 - PD4
 8000bd6:	2304      	movs	r3, #4
 8000bd8:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&lcd_signal);
 8000bda:	1d3b      	adds	r3, r7, #4
 8000bdc:	4618      	mov	r0, r3
 8000bde:	f000 f997 	bl	8000f10 <GPIO_Init>

	lcd_signal.GPIO_PinConfig.GPIO_PinNumber = LCD_GPIO_D6;			//D6 - PD5
 8000be2:	2305      	movs	r3, #5
 8000be4:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&lcd_signal);
 8000be6:	1d3b      	adds	r3, r7, #4
 8000be8:	4618      	mov	r0, r3
 8000bea:	f000 f991 	bl	8000f10 <GPIO_Init>

	lcd_signal.GPIO_PinConfig.GPIO_PinNumber = LCD_GPIO_D7;			//D7 - PD6
 8000bee:	2306      	movs	r3, #6
 8000bf0:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&lcd_signal);
 8000bf2:	1d3b      	adds	r3, r7, #4
 8000bf4:	4618      	mov	r0, r3
 8000bf6:	f000 f98b 	bl	8000f10 <GPIO_Init>

	//Cấu hình ban đầu giữ các pins LCD đều ở mức Low(0)
	GPIO_WriteToOutputPin(LCD_GPIO_PORT, LCD_GPIO_RS, GPIO_PIN_RESET);
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	2100      	movs	r1, #0
 8000bfe:	4827      	ldr	r0, [pc, #156]	; (8000c9c <lcd_init+0x110>)
 8000c00:	f000 fb14 	bl	800122c <GPIO_WriteToOutputPin>
	GPIO_WriteToOutputPin(LCD_GPIO_PORT, LCD_GPIO_RW, GPIO_PIN_RESET);
 8000c04:	2200      	movs	r2, #0
 8000c06:	2101      	movs	r1, #1
 8000c08:	4824      	ldr	r0, [pc, #144]	; (8000c9c <lcd_init+0x110>)
 8000c0a:	f000 fb0f 	bl	800122c <GPIO_WriteToOutputPin>
	GPIO_WriteToOutputPin(LCD_GPIO_PORT, LCD_GPIO_EN, GPIO_PIN_RESET);
 8000c0e:	2200      	movs	r2, #0
 8000c10:	2102      	movs	r1, #2
 8000c12:	4822      	ldr	r0, [pc, #136]	; (8000c9c <lcd_init+0x110>)
 8000c14:	f000 fb0a 	bl	800122c <GPIO_WriteToOutputPin>
	GPIO_WriteToOutputPin(LCD_GPIO_PORT, LCD_GPIO_D4, GPIO_PIN_RESET);
 8000c18:	2200      	movs	r2, #0
 8000c1a:	2103      	movs	r1, #3
 8000c1c:	481f      	ldr	r0, [pc, #124]	; (8000c9c <lcd_init+0x110>)
 8000c1e:	f000 fb05 	bl	800122c <GPIO_WriteToOutputPin>
	GPIO_WriteToOutputPin(LCD_GPIO_PORT, LCD_GPIO_D5, GPIO_PIN_RESET);
 8000c22:	2200      	movs	r2, #0
 8000c24:	2104      	movs	r1, #4
 8000c26:	481d      	ldr	r0, [pc, #116]	; (8000c9c <lcd_init+0x110>)
 8000c28:	f000 fb00 	bl	800122c <GPIO_WriteToOutputPin>
	GPIO_WriteToOutputPin(LCD_GPIO_PORT, LCD_GPIO_D6, GPIO_PIN_RESET);
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	2105      	movs	r1, #5
 8000c30:	481a      	ldr	r0, [pc, #104]	; (8000c9c <lcd_init+0x110>)
 8000c32:	f000 fafb 	bl	800122c <GPIO_WriteToOutputPin>
	GPIO_WriteToOutputPin(LCD_GPIO_PORT, LCD_GPIO_D7, GPIO_PIN_RESET);
 8000c36:	2200      	movs	r2, #0
 8000c38:	2106      	movs	r1, #6
 8000c3a:	4818      	ldr	r0, [pc, #96]	; (8000c9c <lcd_init+0x110>)
 8000c3c:	f000 faf6 	bl	800122c <GPIO_WriteToOutputPin>

	//2. Do the LCD initialization -  phần "4-Bit Interface"
	mdelay(40);
 8000c40:	2028      	movs	r0, #40	; 0x28
 8000c42:	f000 f8b7 	bl	8000db4 <mdelay>

	/* RS = 0 , For LCD command */
	GPIO_WriteToOutputPin(LCD_GPIO_PORT, LCD_GPIO_RS, GPIO_PIN_RESET);
 8000c46:	2200      	movs	r2, #0
 8000c48:	2100      	movs	r1, #0
 8000c4a:	4814      	ldr	r0, [pc, #80]	; (8000c9c <lcd_init+0x110>)
 8000c4c:	f000 faee 	bl	800122c <GPIO_WriteToOutputPin>

	/* RnW = 0, Writing to LCD */
	GPIO_WriteToOutputPin(LCD_GPIO_PORT, LCD_GPIO_RW, GPIO_PIN_RESET);
 8000c50:	2200      	movs	r2, #0
 8000c52:	2101      	movs	r1, #1
 8000c54:	4811      	ldr	r0, [pc, #68]	; (8000c9c <lcd_init+0x110>)
 8000c56:	f000 fae9 	bl	800122c <GPIO_WriteToOutputPin>

	//Cấu hình ban đầu 4-bit interface theo flowchart lần 1
	write_4_bits(0x3);	//0x3=0011 , nghĩa là RS-RW-DB7-DB6-DB5-DB4 = 0-0-0-0-1-1
 8000c5a:	2003      	movs	r0, #3
 8000c5c:	f000 f820 	bl	8000ca0 <write_4_bits>

	mdelay(5);			//Chờ khoảng 4.1 ms để LCD module cập nhật thông số
 8000c60:	2005      	movs	r0, #5
 8000c62:	f000 f8a7 	bl	8000db4 <mdelay>

	write_4_bits(0x3);	//Cấu hình ban đầu 4-bit interface  một lần 2
 8000c66:	2003      	movs	r0, #3
 8000c68:	f000 f81a 	bl	8000ca0 <write_4_bits>

	udelay(150);		//Chờ khoảng 100us để LCD module cập nhật thông số
 8000c6c:	2096      	movs	r0, #150	; 0x96
 8000c6e:	f000 f8b9 	bl	8000de4 <udelay>

	write_4_bits(0x3);	//Cấu hình ban đầu 4-bit interface  một lần 3
 8000c72:	2003      	movs	r0, #3
 8000c74:	f000 f814 	bl	8000ca0 <write_4_bits>

	write_4_bits(0x2);	//0x2=0010 , nghĩa là RS-RW-DB7-DB6-DB5-DB4 = 0-0-0-0-1-0
 8000c78:	2002      	movs	r0, #2
 8000c7a:	f000 f811 	bl	8000ca0 <write_4_bits>

	/*3. Cấu hình LCD một cách từng bước theo các lệnh Command Code */
	//function set command
	lcd_send_command(LCD_CMD_4DL_2N_5X8F);
 8000c7e:	2028      	movs	r0, #40	; 0x28
 8000c80:	f7ff ff2c 	bl	8000adc <lcd_send_command>

	//disply ON and cursor ON
	lcd_send_command(LCD_CMD_DON_CURON);
 8000c84:	200e      	movs	r0, #14
 8000c86:	f7ff ff29 	bl	8000adc <lcd_send_command>

	//Display Clear, đảm bảo khi khởi tạo LCD ko lưu hiển thị các công việc trước đó
	lcd_display_clear();
 8000c8a:	f000 f841 	bl	8000d10 <lcd_display_clear>

	//entry mode set
	lcd_send_command(LCD_CMD_INCADD);
 8000c8e:	2006      	movs	r0, #6
 8000c90:	f7ff ff24 	bl	8000adc <lcd_send_command>

}
 8000c94:	bf00      	nop
 8000c96:	3710      	adds	r7, #16
 8000c98:	46bd      	mov	sp, r7
 8000c9a:	bd80      	pop	{r7, pc}
 8000c9c:	40020c00 	.word	0x40020c00

08000ca0 <write_4_bits>:
 * @return		- none
 *
 * @Note 		- vd: 0x3=0011, nghĩa là yêu cầu sử dụng đường D5,D4 còn D7,D6 là 0
 */
static void write_4_bits(uint8_t value)
{
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	b082      	sub	sp, #8
 8000ca4:	af00      	add	r7, sp, #0
 8000ca6:	4603      	mov	r3, r0
 8000ca8:	71fb      	strb	r3, [r7, #7]
	//Cấu hình từng chân Data LCD module
	GPIO_WriteToOutputPin(LCD_GPIO_PORT,LCD_GPIO_D4, ((value >> 0) & 0x1) );
 8000caa:	79fb      	ldrb	r3, [r7, #7]
 8000cac:	f003 0301 	and.w	r3, r3, #1
 8000cb0:	b2db      	uxtb	r3, r3
 8000cb2:	461a      	mov	r2, r3
 8000cb4:	2103      	movs	r1, #3
 8000cb6:	4815      	ldr	r0, [pc, #84]	; (8000d0c <write_4_bits+0x6c>)
 8000cb8:	f000 fab8 	bl	800122c <GPIO_WriteToOutputPin>
	GPIO_WriteToOutputPin(LCD_GPIO_PORT,LCD_GPIO_D5, ((value >> 1) & 0x1) );
 8000cbc:	79fb      	ldrb	r3, [r7, #7]
 8000cbe:	085b      	lsrs	r3, r3, #1
 8000cc0:	b2db      	uxtb	r3, r3
 8000cc2:	f003 0301 	and.w	r3, r3, #1
 8000cc6:	b2db      	uxtb	r3, r3
 8000cc8:	461a      	mov	r2, r3
 8000cca:	2104      	movs	r1, #4
 8000ccc:	480f      	ldr	r0, [pc, #60]	; (8000d0c <write_4_bits+0x6c>)
 8000cce:	f000 faad 	bl	800122c <GPIO_WriteToOutputPin>
	GPIO_WriteToOutputPin(LCD_GPIO_PORT,LCD_GPIO_D6, ((value >> 2) & 0x1) );
 8000cd2:	79fb      	ldrb	r3, [r7, #7]
 8000cd4:	089b      	lsrs	r3, r3, #2
 8000cd6:	b2db      	uxtb	r3, r3
 8000cd8:	f003 0301 	and.w	r3, r3, #1
 8000cdc:	b2db      	uxtb	r3, r3
 8000cde:	461a      	mov	r2, r3
 8000ce0:	2105      	movs	r1, #5
 8000ce2:	480a      	ldr	r0, [pc, #40]	; (8000d0c <write_4_bits+0x6c>)
 8000ce4:	f000 faa2 	bl	800122c <GPIO_WriteToOutputPin>
	GPIO_WriteToOutputPin(LCD_GPIO_PORT,LCD_GPIO_D7, ((value >> 3) & 0x1) );
 8000ce8:	79fb      	ldrb	r3, [r7, #7]
 8000cea:	08db      	lsrs	r3, r3, #3
 8000cec:	b2db      	uxtb	r3, r3
 8000cee:	f003 0301 	and.w	r3, r3, #1
 8000cf2:	b2db      	uxtb	r3, r3
 8000cf4:	461a      	mov	r2, r3
 8000cf6:	2106      	movs	r1, #6
 8000cf8:	4804      	ldr	r0, [pc, #16]	; (8000d0c <write_4_bits+0x6c>)
 8000cfa:	f000 fa97 	bl	800122c <GPIO_WriteToOutputPin>
	 * sau đó lấy giá trị tại vị trí bit3 'and' với 0x1=1
	 * có: bit[3]=0 & 1 = 0
 	 */

	//Kích hoạt Enable pin
	lcd_enable(); 	//Theo nguyên tăc khi bạn kích hoạt các Data pins thì bạn cũng cần một lệnh
 8000cfe:	f000 f843 	bl	8000d88 <lcd_enable>
					//chốt đối với data bên trong LCD, cho phép data vào LCD module
}
 8000d02:	bf00      	nop
 8000d04:	3708      	adds	r7, #8
 8000d06:	46bd      	mov	sp, r7
 8000d08:	bd80      	pop	{r7, pc}
 8000d0a:	bf00      	nop
 8000d0c:	40020c00 	.word	0x40020c00

08000d10 <lcd_display_clear>:
 * @return		- none
 *
 * @Note 		- none
 */
void lcd_display_clear(void)
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	af00      	add	r7, sp, #0
	//Display clear
	lcd_send_command(LCD_CMD_DIS_CLEAR);
 8000d14:	2001      	movs	r0, #1
 8000d16:	f7ff fee1 	bl	8000adc <lcd_send_command>
	 * check page number 24 of datasheet - kiểm tra trang số 24 của bảng dữ liệu datasheet..
	 * display clear command execution wait time is around 2ms
	 * thời gian chờ thực hiện lệnh  "command clear" hoàn thành là khoảng 2ms
	 */

	mdelay(2);
 8000d1a:	2002      	movs	r0, #2
 8000d1c:	f000 f84a 	bl	8000db4 <mdelay>
}
 8000d20:	bf00      	nop
 8000d22:	bd80      	pop	{r7, pc}

08000d24 <lcd_display_return_home>:
 * @return		- none
 *
 * @Note 		- Cursor returns to home position
 */
void lcd_display_return_home(void)
{
 8000d24:	b580      	push	{r7, lr}
 8000d26:	af00      	add	r7, sp, #0

	lcd_send_command(LCD_CMD_DIS_RETURN_HOME);
 8000d28:	2002      	movs	r0, #2
 8000d2a:	f7ff fed7 	bl	8000adc <lcd_send_command>
	/*
	 * check page number 24 of datasheet.
	 * return home command execution wait time is around 2ms
	 */
	mdelay(2);
 8000d2e:	2002      	movs	r0, #2
 8000d30:	f000 f840 	bl	8000db4 <mdelay>
}
 8000d34:	bf00      	nop
 8000d36:	bd80      	pop	{r7, pc}

08000d38 <lcd_set_cursor>:
 * 				Đặt Lcd ở một vị trí được chỉ định theo thông tin hàng và cột
 * 				- Row Number (1 to 2)
  *   			- Column Number (1 to 16) Assuming a 2 X 16 characters display
 */
void lcd_set_cursor(uint8_t row, uint8_t column)
{
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	b082      	sub	sp, #8
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	4603      	mov	r3, r0
 8000d40:	460a      	mov	r2, r1
 8000d42:	71fb      	strb	r3, [r7, #7]
 8000d44:	4613      	mov	r3, r2
 8000d46:	71bb      	strb	r3, [r7, #6]
  column--;			//trừ đi 1 vì vị trí bắt đầu ô nhớ tròn DRAM bắt đầu từ vị trí 0
 8000d48:	79bb      	ldrb	r3, [r7, #6]
 8000d4a:	3b01      	subs	r3, #1
 8000d4c:	71bb      	strb	r3, [r7, #6]

  switch (row)		//chọn row để xác định tham số dịch bit đúng
 8000d4e:	79fb      	ldrb	r3, [r7, #7]
 8000d50:	2b01      	cmp	r3, #1
 8000d52:	d002      	beq.n	8000d5a <lcd_set_cursor+0x22>
 8000d54:	2b02      	cmp	r3, #2
 8000d56:	d009      	beq.n	8000d6c <lcd_set_cursor+0x34>
    case 2:		//hàng thứ 2
      /* Set cursor to 2nd row address and add index*/
        lcd_send_command((column |= 0xC0));
      break;
    default:
      break;
 8000d58:	e011      	b.n	8000d7e <lcd_set_cursor+0x46>
      lcd_send_command((column |= 0x80));
 8000d5a:	79bb      	ldrb	r3, [r7, #6]
 8000d5c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000d60:	71bb      	strb	r3, [r7, #6]
 8000d62:	79bb      	ldrb	r3, [r7, #6]
 8000d64:	4618      	mov	r0, r3
 8000d66:	f7ff feb9 	bl	8000adc <lcd_send_command>
      break;
 8000d6a:	e008      	b.n	8000d7e <lcd_set_cursor+0x46>
        lcd_send_command((column |= 0xC0));
 8000d6c:	79bb      	ldrb	r3, [r7, #6]
 8000d6e:	f063 033f 	orn	r3, r3, #63	; 0x3f
 8000d72:	71bb      	strb	r3, [r7, #6]
 8000d74:	79bb      	ldrb	r3, [r7, #6]
 8000d76:	4618      	mov	r0, r3
 8000d78:	f7ff feb0 	bl	8000adc <lcd_send_command>
      break;
 8000d7c:	bf00      	nop
  }
}
 8000d7e:	bf00      	nop
 8000d80:	3708      	adds	r7, #8
 8000d82:	46bd      	mov	sp, r7
 8000d84:	bd80      	pop	{r7, pc}
	...

08000d88 <lcd_enable>:
 *
 * @Note 		- chuyển trạng thái mức điện áp từ high->low->high
 * 				- Chỉ đc phép truyền data trên các line Dx khi Enable line ở mức low
 */
static void lcd_enable(void)
{
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	af00      	add	r7, sp, #0
	GPIO_WriteToOutputPin(LCD_GPIO_PORT, LCD_GPIO_EN, GPIO_PIN_SET);
 8000d8c:	2201      	movs	r2, #1
 8000d8e:	2102      	movs	r1, #2
 8000d90:	4807      	ldr	r0, [pc, #28]	; (8000db0 <lcd_enable+0x28>)
 8000d92:	f000 fa4b 	bl	800122c <GPIO_WriteToOutputPin>
	udelay(10);
 8000d96:	200a      	movs	r0, #10
 8000d98:	f000 f824 	bl	8000de4 <udelay>
	GPIO_WriteToOutputPin(LCD_GPIO_PORT, LCD_GPIO_EN, GPIO_PIN_RESET);
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	2102      	movs	r1, #2
 8000da0:	4803      	ldr	r0, [pc, #12]	; (8000db0 <lcd_enable+0x28>)
 8000da2:	f000 fa43 	bl	800122c <GPIO_WriteToOutputPin>
	udelay(100);	/* execution time > 37 micro seconds */
 8000da6:	2064      	movs	r0, #100	; 0x64
 8000da8:	f000 f81c 	bl	8000de4 <udelay>
}
 8000dac:	bf00      	nop
 8000dae:	bd80      	pop	{r7, pc}
 8000db0:	40020c00 	.word	0x40020c00

08000db4 <mdelay>:
 * @return		- none
 *
 * @Note 		- none
 */
static void mdelay(uint32_t cnt)
{
 8000db4:	b480      	push	{r7}
 8000db6:	b085      	sub	sp, #20
 8000db8:	af00      	add	r7, sp, #0
 8000dba:	6078      	str	r0, [r7, #4]
	for(uint32_t i=0 ; i < (cnt * 1000); i++);
 8000dbc:	2300      	movs	r3, #0
 8000dbe:	60fb      	str	r3, [r7, #12]
 8000dc0:	e002      	b.n	8000dc8 <mdelay+0x14>
 8000dc2:	68fb      	ldr	r3, [r7, #12]
 8000dc4:	3301      	adds	r3, #1
 8000dc6:	60fb      	str	r3, [r7, #12]
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000dce:	fb02 f303 	mul.w	r3, r2, r3
 8000dd2:	68fa      	ldr	r2, [r7, #12]
 8000dd4:	429a      	cmp	r2, r3
 8000dd6:	d3f4      	bcc.n	8000dc2 <mdelay+0xe>
}
 8000dd8:	bf00      	nop
 8000dda:	bf00      	nop
 8000ddc:	3714      	adds	r7, #20
 8000dde:	46bd      	mov	sp, r7
 8000de0:	bc80      	pop	{r7}
 8000de2:	4770      	bx	lr

08000de4 <udelay>:
 * @return		- none
 *
 * @Note 		- none
 */
static void udelay(uint32_t cnt)
{
 8000de4:	b480      	push	{r7}
 8000de6:	b085      	sub	sp, #20
 8000de8:	af00      	add	r7, sp, #0
 8000dea:	6078      	str	r0, [r7, #4]
	for(uint32_t i=0 ; i < (cnt * 1); i++);
 8000dec:	2300      	movs	r3, #0
 8000dee:	60fb      	str	r3, [r7, #12]
 8000df0:	e002      	b.n	8000df8 <udelay+0x14>
 8000df2:	68fb      	ldr	r3, [r7, #12]
 8000df4:	3301      	adds	r3, #1
 8000df6:	60fb      	str	r3, [r7, #12]
 8000df8:	68fa      	ldr	r2, [r7, #12]
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	429a      	cmp	r2, r3
 8000dfe:	d3f8      	bcc.n	8000df2 <udelay+0xe>
}
 8000e00:	bf00      	nop
 8000e02:	bf00      	nop
 8000e04:	3714      	adds	r7, #20
 8000e06:	46bd      	mov	sp, r7
 8000e08:	bc80      	pop	{r7}
 8000e0a:	4770      	bx	lr

08000e0c <GPIO_PeriClockControl>:
 * @return		- none
 *
 * @Note 		- none
 */
void GPIO_PeriClockControl(GPIO_RegDef_t *pGPIOx, uint8_t EnorDi)
{
 8000e0c:	b480      	push	{r7}
 8000e0e:	b083      	sub	sp, #12
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	6078      	str	r0, [r7, #4]
 8000e14:	460b      	mov	r3, r1
 8000e16:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE)
 8000e18:	78fb      	ldrb	r3, [r7, #3]
 8000e1a:	2b01      	cmp	r3, #1
 8000e1c:	d161      	bne.n	8000ee2 <GPIO_PeriClockControl+0xd6>
	{
		if(pGPIOx == GPIOA)
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	4a32      	ldr	r2, [pc, #200]	; (8000eec <GPIO_PeriClockControl+0xe0>)
 8000e22:	4293      	cmp	r3, r2
 8000e24:	d106      	bne.n	8000e34 <GPIO_PeriClockControl+0x28>
		{
			GPIOA_PCLK_EN();		//hàm đã đc define trong stm32f407xx.h(lớp Driver)
 8000e26:	4b32      	ldr	r3, [pc, #200]	; (8000ef0 <GPIO_PeriClockControl+0xe4>)
 8000e28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e2a:	4a31      	ldr	r2, [pc, #196]	; (8000ef0 <GPIO_PeriClockControl+0xe4>)
 8000e2c:	f043 0301 	orr.w	r3, r3, #1
 8000e30:	6313      	str	r3, [r2, #48]	; 0x30
	else
	{
		//Todo: (Disable Status)

	}
}
 8000e32:	e056      	b.n	8000ee2 <GPIO_PeriClockControl+0xd6>
		else if(pGPIOx == GPIOB)
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	4a2f      	ldr	r2, [pc, #188]	; (8000ef4 <GPIO_PeriClockControl+0xe8>)
 8000e38:	4293      	cmp	r3, r2
 8000e3a:	d106      	bne.n	8000e4a <GPIO_PeriClockControl+0x3e>
			GPIOB_PCLK_EN();
 8000e3c:	4b2c      	ldr	r3, [pc, #176]	; (8000ef0 <GPIO_PeriClockControl+0xe4>)
 8000e3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e40:	4a2b      	ldr	r2, [pc, #172]	; (8000ef0 <GPIO_PeriClockControl+0xe4>)
 8000e42:	f043 0302 	orr.w	r3, r3, #2
 8000e46:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000e48:	e04b      	b.n	8000ee2 <GPIO_PeriClockControl+0xd6>
		else if(pGPIOx == GPIOC)
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	4a2a      	ldr	r2, [pc, #168]	; (8000ef8 <GPIO_PeriClockControl+0xec>)
 8000e4e:	4293      	cmp	r3, r2
 8000e50:	d106      	bne.n	8000e60 <GPIO_PeriClockControl+0x54>
			GPIOC_PCLK_EN();
 8000e52:	4b27      	ldr	r3, [pc, #156]	; (8000ef0 <GPIO_PeriClockControl+0xe4>)
 8000e54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e56:	4a26      	ldr	r2, [pc, #152]	; (8000ef0 <GPIO_PeriClockControl+0xe4>)
 8000e58:	f043 0304 	orr.w	r3, r3, #4
 8000e5c:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000e5e:	e040      	b.n	8000ee2 <GPIO_PeriClockControl+0xd6>
		else if(pGPIOx == GPIOD)
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	4a26      	ldr	r2, [pc, #152]	; (8000efc <GPIO_PeriClockControl+0xf0>)
 8000e64:	4293      	cmp	r3, r2
 8000e66:	d106      	bne.n	8000e76 <GPIO_PeriClockControl+0x6a>
			GPIOD_PCLK_EN();
 8000e68:	4b21      	ldr	r3, [pc, #132]	; (8000ef0 <GPIO_PeriClockControl+0xe4>)
 8000e6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e6c:	4a20      	ldr	r2, [pc, #128]	; (8000ef0 <GPIO_PeriClockControl+0xe4>)
 8000e6e:	f043 0308 	orr.w	r3, r3, #8
 8000e72:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000e74:	e035      	b.n	8000ee2 <GPIO_PeriClockControl+0xd6>
		else if(pGPIOx == GPIOE)
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	4a21      	ldr	r2, [pc, #132]	; (8000f00 <GPIO_PeriClockControl+0xf4>)
 8000e7a:	4293      	cmp	r3, r2
 8000e7c:	d106      	bne.n	8000e8c <GPIO_PeriClockControl+0x80>
			GPIOE_PCLK_EN();
 8000e7e:	4b1c      	ldr	r3, [pc, #112]	; (8000ef0 <GPIO_PeriClockControl+0xe4>)
 8000e80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e82:	4a1b      	ldr	r2, [pc, #108]	; (8000ef0 <GPIO_PeriClockControl+0xe4>)
 8000e84:	f043 0310 	orr.w	r3, r3, #16
 8000e88:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000e8a:	e02a      	b.n	8000ee2 <GPIO_PeriClockControl+0xd6>
		else if(pGPIOx == GPIOF)
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	4a1d      	ldr	r2, [pc, #116]	; (8000f04 <GPIO_PeriClockControl+0xf8>)
 8000e90:	4293      	cmp	r3, r2
 8000e92:	d106      	bne.n	8000ea2 <GPIO_PeriClockControl+0x96>
			GPIOF_PCLK_EN();
 8000e94:	4b16      	ldr	r3, [pc, #88]	; (8000ef0 <GPIO_PeriClockControl+0xe4>)
 8000e96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e98:	4a15      	ldr	r2, [pc, #84]	; (8000ef0 <GPIO_PeriClockControl+0xe4>)
 8000e9a:	f043 0320 	orr.w	r3, r3, #32
 8000e9e:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000ea0:	e01f      	b.n	8000ee2 <GPIO_PeriClockControl+0xd6>
		else if(pGPIOx == GPIOG)
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	4a18      	ldr	r2, [pc, #96]	; (8000f08 <GPIO_PeriClockControl+0xfc>)
 8000ea6:	4293      	cmp	r3, r2
 8000ea8:	d106      	bne.n	8000eb8 <GPIO_PeriClockControl+0xac>
			GPIOG_PCLK_EN();
 8000eaa:	4b11      	ldr	r3, [pc, #68]	; (8000ef0 <GPIO_PeriClockControl+0xe4>)
 8000eac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eae:	4a10      	ldr	r2, [pc, #64]	; (8000ef0 <GPIO_PeriClockControl+0xe4>)
 8000eb0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000eb4:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000eb6:	e014      	b.n	8000ee2 <GPIO_PeriClockControl+0xd6>
		else if(pGPIOx == GPIOH)
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	4a13      	ldr	r2, [pc, #76]	; (8000f08 <GPIO_PeriClockControl+0xfc>)
 8000ebc:	4293      	cmp	r3, r2
 8000ebe:	d106      	bne.n	8000ece <GPIO_PeriClockControl+0xc2>
			GPIOH_PCLK_EN();
 8000ec0:	4b0b      	ldr	r3, [pc, #44]	; (8000ef0 <GPIO_PeriClockControl+0xe4>)
 8000ec2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ec4:	4a0a      	ldr	r2, [pc, #40]	; (8000ef0 <GPIO_PeriClockControl+0xe4>)
 8000ec6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000eca:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000ecc:	e009      	b.n	8000ee2 <GPIO_PeriClockControl+0xd6>
		else if(pGPIOx == GPIOI)
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	4a0e      	ldr	r2, [pc, #56]	; (8000f0c <GPIO_PeriClockControl+0x100>)
 8000ed2:	4293      	cmp	r3, r2
 8000ed4:	d105      	bne.n	8000ee2 <GPIO_PeriClockControl+0xd6>
			GPIOI_PCLK_EN();
 8000ed6:	4b06      	ldr	r3, [pc, #24]	; (8000ef0 <GPIO_PeriClockControl+0xe4>)
 8000ed8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eda:	4a05      	ldr	r2, [pc, #20]	; (8000ef0 <GPIO_PeriClockControl+0xe4>)
 8000edc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ee0:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000ee2:	bf00      	nop
 8000ee4:	370c      	adds	r7, #12
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	bc80      	pop	{r7}
 8000eea:	4770      	bx	lr
 8000eec:	40020000 	.word	0x40020000
 8000ef0:	40023800 	.word	0x40023800
 8000ef4:	40020400 	.word	0x40020400
 8000ef8:	40020800 	.word	0x40020800
 8000efc:	40020c00 	.word	0x40020c00
 8000f00:	40021000 	.word	0x40021000
 8000f04:	40021400 	.word	0x40021400
 8000f08:	40021800 	.word	0x40021800
 8000f0c:	40022000 	.word	0x40022000

08000f10 <GPIO_Init>:
 * @return		- none
 *
 * @Note 		- none
 */
void GPIO_Init(GPIOx_Handle_t *pGPIOHandle)
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	b086      	sub	sp, #24
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	6078      	str	r0, [r7, #4]
	uint32_t temp = 0; 	//temp. registerr
 8000f18:	2300      	movs	r3, #0
 8000f1a:	617b      	str	r3, [r7, #20]

	//0. Enable the Peripheral Clock
	GPIO_PeriClockControl(pGPIOHandle->pGPIOx, ENABLE);
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	2101      	movs	r1, #1
 8000f22:	4618      	mov	r0, r3
 8000f24:	f7ff ff72 	bl	8000e0c <GPIO_PeriClockControl>

	//1. configure(cấu hình) the mode of gpio pin(Datasheet 8.4.1)
	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_ANALOG)
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	795b      	ldrb	r3, [r3, #5]
 8000f2c:	2b03      	cmp	r3, #3
 8000f2e:	d81f      	bhi.n	8000f70 <GPIO_Init+0x60>
	{
		//Giá trị GPIO_PinMode thuộc 1 trong 4 trường hợp bit của Mode Register
		//this is part non-interrupt mode

		//Xác định lấy vị trí MODERx cần điều khiển dựa vào số chân Pin_Number và lưu vào biến temp
		temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	795b      	ldrb	r3, [r3, #5]
 8000f34:	461a      	mov	r2, r3
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	791b      	ldrb	r3, [r3, #4]
 8000f3a:	005b      	lsls	r3, r3, #1
 8000f3c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f40:	617b      	str	r3, [r7, #20]
		//Dịch 2 bit vì theo datasheet, mỗi 2 bit quản lý một pin number của GPIO port mode register
		//vd: GPIO_PinNumber=Pin0 thì sẽ kích hoạt MODER0(2*0=0->bắt đầu từ bit0)
		//GPIO_PinNumber=Pin1 thì sẽ kích hoạt MODER1(2*1=2->bắt đầu từ bit2)

		//Xóa(clear) value bit tại vị trí 2 bit muốn cấu hình
		pGPIOHandle->pGPIOx->MODER &= ~(0x3 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	681a      	ldr	r2, [r3, #0]
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	791b      	ldrb	r3, [r3, #4]
 8000f4c:	4619      	mov	r1, r3
 8000f4e:	2303      	movs	r3, #3
 8000f50:	408b      	lsls	r3, r1
 8000f52:	43db      	mvns	r3, r3
 8000f54:	4619      	mov	r1, r3
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	400a      	ands	r2, r1
 8000f5c:	601a      	str	r2, [r3, #0]
		//Theo datasheet thì để reset MODERx thì ta cần thiết lập value bit là 00, Ta có: 0x3 = 11
		//~(0x3 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber); nghĩa là tiến hành đảo trạng thái 11 thành 00
		//vị trí chân Pin_Number

		//Lưu value temp vào trong thanh ghi MODER của biến pGPIOHandle
		pGPIOHandle->pGPIOx->MODER |= temp;
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	6819      	ldr	r1, [r3, #0]
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	697a      	ldr	r2, [r7, #20]
 8000f6a:	430a      	orrs	r2, r1
 8000f6c:	601a      	str	r2, [r3, #0]
 8000f6e:	e0b8      	b.n	80010e2 <GPIO_Init+0x1d2>
	}
	else
	{
		//This is part(phần) will code later (Interrupt mode) //các trường hợp khác từ 4->6

		if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_FT)
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	795b      	ldrb	r3, [r3, #5]
 8000f74:	2b04      	cmp	r3, #4
 8000f76:	d117      	bne.n	8000fa8 <GPIO_Init+0x98>
		{
			//1. configure the FTSR(Falling(xuống) Trigger Select Register)
			EXTI->FTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000f78:	4b43      	ldr	r3, [pc, #268]	; (8001088 <GPIO_Init+0x178>)
 8000f7a:	68db      	ldr	r3, [r3, #12]
 8000f7c:	687a      	ldr	r2, [r7, #4]
 8000f7e:	7912      	ldrb	r2, [r2, #4]
 8000f80:	4611      	mov	r1, r2
 8000f82:	2201      	movs	r2, #1
 8000f84:	408a      	lsls	r2, r1
 8000f86:	4611      	mov	r1, r2
 8000f88:	4a3f      	ldr	r2, [pc, #252]	; (8001088 <GPIO_Init+0x178>)
 8000f8a:	430b      	orrs	r3, r1
 8000f8c:	60d3      	str	r3, [r2, #12]

			//1.2 Clear the corresponding(tương ứng) RTSR, việc này phòng ngừa cho tình huống sử dụng RTSR trước đó
			//và có thể gây xung đột cho lần cấu hình hiện tại
			EXTI->RTSR &= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000f8e:	4b3e      	ldr	r3, [pc, #248]	; (8001088 <GPIO_Init+0x178>)
 8000f90:	689b      	ldr	r3, [r3, #8]
 8000f92:	687a      	ldr	r2, [r7, #4]
 8000f94:	7912      	ldrb	r2, [r2, #4]
 8000f96:	4611      	mov	r1, r2
 8000f98:	2201      	movs	r2, #1
 8000f9a:	408a      	lsls	r2, r1
 8000f9c:	43d2      	mvns	r2, r2
 8000f9e:	4611      	mov	r1, r2
 8000fa0:	4a39      	ldr	r2, [pc, #228]	; (8001088 <GPIO_Init+0x178>)
 8000fa2:	400b      	ands	r3, r1
 8000fa4:	6093      	str	r3, [r2, #8]
 8000fa6:	e035      	b.n	8001014 <GPIO_Init+0x104>
		}
		else if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RT)
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	795b      	ldrb	r3, [r3, #5]
 8000fac:	2b05      	cmp	r3, #5
 8000fae:	d117      	bne.n	8000fe0 <GPIO_Init+0xd0>
		{
			//1. configure the RTSR(Rising(lên) Trigger Select Register)
			EXTI->RTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000fb0:	4b35      	ldr	r3, [pc, #212]	; (8001088 <GPIO_Init+0x178>)
 8000fb2:	689b      	ldr	r3, [r3, #8]
 8000fb4:	687a      	ldr	r2, [r7, #4]
 8000fb6:	7912      	ldrb	r2, [r2, #4]
 8000fb8:	4611      	mov	r1, r2
 8000fba:	2201      	movs	r2, #1
 8000fbc:	408a      	lsls	r2, r1
 8000fbe:	4611      	mov	r1, r2
 8000fc0:	4a31      	ldr	r2, [pc, #196]	; (8001088 <GPIO_Init+0x178>)
 8000fc2:	430b      	orrs	r3, r1
 8000fc4:	6093      	str	r3, [r2, #8]

			//1.2 Clear the corresponding(tương ứng) FTSR, việc này phòng ngừa cho tình huống sử dụng FTSR trước đó
			//và có thể gây xung đột cho lần cấu hình hiện tại
			EXTI->FTSR &= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000fc6:	4b30      	ldr	r3, [pc, #192]	; (8001088 <GPIO_Init+0x178>)
 8000fc8:	68db      	ldr	r3, [r3, #12]
 8000fca:	687a      	ldr	r2, [r7, #4]
 8000fcc:	7912      	ldrb	r2, [r2, #4]
 8000fce:	4611      	mov	r1, r2
 8000fd0:	2201      	movs	r2, #1
 8000fd2:	408a      	lsls	r2, r1
 8000fd4:	43d2      	mvns	r2, r2
 8000fd6:	4611      	mov	r1, r2
 8000fd8:	4a2b      	ldr	r2, [pc, #172]	; (8001088 <GPIO_Init+0x178>)
 8000fda:	400b      	ands	r3, r1
 8000fdc:	60d3      	str	r3, [r2, #12]
 8000fde:	e019      	b.n	8001014 <GPIO_Init+0x104>
		}
		else if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RFT)
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	795b      	ldrb	r3, [r3, #5]
 8000fe4:	2b06      	cmp	r3, #6
 8000fe6:	d115      	bne.n	8001014 <GPIO_Init+0x104>
		{
			//1. configure the FTSR and RTSR
			EXTI->FTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000fe8:	4b27      	ldr	r3, [pc, #156]	; (8001088 <GPIO_Init+0x178>)
 8000fea:	68db      	ldr	r3, [r3, #12]
 8000fec:	687a      	ldr	r2, [r7, #4]
 8000fee:	7912      	ldrb	r2, [r2, #4]
 8000ff0:	4611      	mov	r1, r2
 8000ff2:	2201      	movs	r2, #1
 8000ff4:	408a      	lsls	r2, r1
 8000ff6:	4611      	mov	r1, r2
 8000ff8:	4a23      	ldr	r2, [pc, #140]	; (8001088 <GPIO_Init+0x178>)
 8000ffa:	430b      	orrs	r3, r1
 8000ffc:	60d3      	str	r3, [r2, #12]
			EXTI->RTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000ffe:	4b22      	ldr	r3, [pc, #136]	; (8001088 <GPIO_Init+0x178>)
 8001000:	689b      	ldr	r3, [r3, #8]
 8001002:	687a      	ldr	r2, [r7, #4]
 8001004:	7912      	ldrb	r2, [r2, #4]
 8001006:	4611      	mov	r1, r2
 8001008:	2201      	movs	r2, #1
 800100a:	408a      	lsls	r2, r1
 800100c:	4611      	mov	r1, r2
 800100e:	4a1e      	ldr	r2, [pc, #120]	; (8001088 <GPIO_Init+0x178>)
 8001010:	430b      	orrs	r3, r1
 8001012:	6093      	str	r3, [r2, #8]
		}

		//2. Configure the GPIO port selection in SYSCFG_EXTICR
		uint8_t temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 4;		//xác định SYSCFG_EXTICR_temp1 register
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	791b      	ldrb	r3, [r3, #4]
 8001018:	089b      	lsrs	r3, r3, #2
 800101a:	74fb      	strb	r3, [r7, #19]
		uint8_t temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 4;		//xác định 4bit EXTI_temp2 trong SYSCFG_EXTICR_temp1
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	791b      	ldrb	r3, [r3, #4]
 8001020:	f003 0303 	and.w	r3, r3, #3
 8001024:	74bb      	strb	r3, [r7, #18]
		uint8_t portcode = GPIO_BASEADDR_TO_CODE(pGPIOHandle->pGPIOx);		//xác định mã nhị phân xxxx để xác định GPIO port sử dụng
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	4a18      	ldr	r2, [pc, #96]	; (800108c <GPIO_Init+0x17c>)
 800102c:	4293      	cmp	r3, r2
 800102e:	d03b      	beq.n	80010a8 <GPIO_Init+0x198>
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	4a16      	ldr	r2, [pc, #88]	; (8001090 <GPIO_Init+0x180>)
 8001036:	4293      	cmp	r3, r2
 8001038:	d024      	beq.n	8001084 <GPIO_Init+0x174>
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	4a15      	ldr	r2, [pc, #84]	; (8001094 <GPIO_Init+0x184>)
 8001040:	4293      	cmp	r3, r2
 8001042:	d01d      	beq.n	8001080 <GPIO_Init+0x170>
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	4a13      	ldr	r2, [pc, #76]	; (8001098 <GPIO_Init+0x188>)
 800104a:	4293      	cmp	r3, r2
 800104c:	d016      	beq.n	800107c <GPIO_Init+0x16c>
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	4a12      	ldr	r2, [pc, #72]	; (800109c <GPIO_Init+0x18c>)
 8001054:	4293      	cmp	r3, r2
 8001056:	d00f      	beq.n	8001078 <GPIO_Init+0x168>
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	4a10      	ldr	r2, [pc, #64]	; (80010a0 <GPIO_Init+0x190>)
 800105e:	4293      	cmp	r3, r2
 8001060:	d008      	beq.n	8001074 <GPIO_Init+0x164>
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	4a0f      	ldr	r2, [pc, #60]	; (80010a4 <GPIO_Init+0x194>)
 8001068:	4293      	cmp	r3, r2
 800106a:	d101      	bne.n	8001070 <GPIO_Init+0x160>
 800106c:	2306      	movs	r3, #6
 800106e:	e01c      	b.n	80010aa <GPIO_Init+0x19a>
 8001070:	2300      	movs	r3, #0
 8001072:	e01a      	b.n	80010aa <GPIO_Init+0x19a>
 8001074:	2305      	movs	r3, #5
 8001076:	e018      	b.n	80010aa <GPIO_Init+0x19a>
 8001078:	2304      	movs	r3, #4
 800107a:	e016      	b.n	80010aa <GPIO_Init+0x19a>
 800107c:	2303      	movs	r3, #3
 800107e:	e014      	b.n	80010aa <GPIO_Init+0x19a>
 8001080:	2302      	movs	r3, #2
 8001082:	e012      	b.n	80010aa <GPIO_Init+0x19a>
 8001084:	2301      	movs	r3, #1
 8001086:	e010      	b.n	80010aa <GPIO_Init+0x19a>
 8001088:	40013c00 	.word	0x40013c00
 800108c:	40020000 	.word	0x40020000
 8001090:	40020400 	.word	0x40020400
 8001094:	40020800 	.word	0x40020800
 8001098:	40020c00 	.word	0x40020c00
 800109c:	40021000 	.word	0x40021000
 80010a0:	40021400 	.word	0x40021400
 80010a4:	40021800 	.word	0x40021800
 80010a8:	2300      	movs	r3, #0
 80010aa:	747b      	strb	r3, [r7, #17]
		SYSCFG_PCLK_EN();													//Kích hoạt xung clock để cấu hình
 80010ac:	4b5c      	ldr	r3, [pc, #368]	; (8001220 <GPIO_Init+0x310>)
 80010ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010b0:	4a5b      	ldr	r2, [pc, #364]	; (8001220 <GPIO_Init+0x310>)
 80010b2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80010b6:	6453      	str	r3, [r2, #68]	; 0x44
		SYSCFG->EXTICR[temp1] = portcode << (temp2 * 4);					//Cấu hình thanh ghi SYSCFG_EXTICR_temp1
 80010b8:	7c7a      	ldrb	r2, [r7, #17]
 80010ba:	7cbb      	ldrb	r3, [r7, #18]
 80010bc:	009b      	lsls	r3, r3, #2
 80010be:	fa02 f103 	lsl.w	r1, r2, r3
 80010c2:	4a58      	ldr	r2, [pc, #352]	; (8001224 <GPIO_Init+0x314>)
 80010c4:	7cfb      	ldrb	r3, [r7, #19]
 80010c6:	3302      	adds	r3, #2
 80010c8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

		//3. Eanble the exti interrupt delivery(chuyển, sử dụng) by using IMR(Interrupt Masking Register)
		EXTI->IMR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80010cc:	4b56      	ldr	r3, [pc, #344]	; (8001228 <GPIO_Init+0x318>)
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	687a      	ldr	r2, [r7, #4]
 80010d2:	7912      	ldrb	r2, [r2, #4]
 80010d4:	4611      	mov	r1, r2
 80010d6:	2201      	movs	r2, #1
 80010d8:	408a      	lsls	r2, r1
 80010da:	4611      	mov	r1, r2
 80010dc:	4a52      	ldr	r2, [pc, #328]	; (8001228 <GPIO_Init+0x318>)
 80010de:	430b      	orrs	r3, r1
 80010e0:	6013      	str	r3, [r2, #0]

	}
	//Reset biến temp để sử dụng cho các lệnh khác trong hàm
	temp = 0;
 80010e2:	2300      	movs	r3, #0
 80010e4:	617b      	str	r3, [r7, #20]

	//2. configure the speed (Datasheet 8.4.3)
	//Xác định lấy vị trí OSPEEDRx cần điều khiển dựa vào số chân Pin_Number và lưu vào biến temp
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinSpeed << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	799b      	ldrb	r3, [r3, #6]
 80010ea:	461a      	mov	r2, r3
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	791b      	ldrb	r3, [r3, #4]
 80010f0:	005b      	lsls	r3, r3, #1
 80010f2:	fa02 f303 	lsl.w	r3, r2, r3
 80010f6:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OSPEEDR &=  ~(0x3 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);	//Clearing bit field
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	689a      	ldr	r2, [r3, #8]
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	791b      	ldrb	r3, [r3, #4]
 8001102:	4619      	mov	r1, r3
 8001104:	2303      	movs	r3, #3
 8001106:	408b      	lsls	r3, r1
 8001108:	43db      	mvns	r3, r3
 800110a:	4619      	mov	r1, r3
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	400a      	ands	r2, r1
 8001112:	609a      	str	r2, [r3, #8]
	pGPIOHandle->pGPIOx->OSPEEDR |= temp;
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	6899      	ldr	r1, [r3, #8]
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	697a      	ldr	r2, [r7, #20]
 8001120:	430a      	orrs	r2, r1
 8001122:	609a      	str	r2, [r3, #8]
	//=> Lúc này ta đã xác định(cấu hình) đc speed(OSPEEDRx) của GPIO tùy thuộc vào pin_number bạn muốn control
	temp = 0;
 8001124:	2300      	movs	r3, #0
 8001126:	617b      	str	r3, [r7, #20]

	//3. configure the pullup-pulldown settings (Datasheet 8.4.4)
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinPuPdControl << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	79db      	ldrb	r3, [r3, #7]
 800112c:	461a      	mov	r2, r3
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	791b      	ldrb	r3, [r3, #4]
 8001132:	005b      	lsls	r3, r3, #1
 8001134:	fa02 f303 	lsl.w	r3, r2, r3
 8001138:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->PUPDR &=  ~(0x3 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	68da      	ldr	r2, [r3, #12]
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	791b      	ldrb	r3, [r3, #4]
 8001144:	4619      	mov	r1, r3
 8001146:	2303      	movs	r3, #3
 8001148:	408b      	lsls	r3, r1
 800114a:	43db      	mvns	r3, r3
 800114c:	4619      	mov	r1, r3
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	400a      	ands	r2, r1
 8001154:	60da      	str	r2, [r3, #12]
	pGPIOHandle->pGPIOx->PUPDR |= temp;
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	68d9      	ldr	r1, [r3, #12]
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	697a      	ldr	r2, [r7, #20]
 8001162:	430a      	orrs	r2, r1
 8001164:	60da      	str	r2, [r3, #12]
	temp = 0;
 8001166:	2300      	movs	r3, #0
 8001168:	617b      	str	r3, [r7, #20]

	//4. configure the optype (Datasheet 8.4.2)
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinOPType << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	7a1b      	ldrb	r3, [r3, #8]
 800116e:	461a      	mov	r2, r3
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	791b      	ldrb	r3, [r3, #4]
 8001174:	fa02 f303 	lsl.w	r3, r2, r3
 8001178:	617b      	str	r3, [r7, #20]
	//Dịch 1 bit vì theo datasheet, mỗi 1 bit quản lý một pin number của GPIO port mode register
	pGPIOHandle->pGPIOx->OTYPER &=  ~(0x1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber); //Clearing bit field
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	685a      	ldr	r2, [r3, #4]
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	791b      	ldrb	r3, [r3, #4]
 8001184:	4619      	mov	r1, r3
 8001186:	2301      	movs	r3, #1
 8001188:	408b      	lsls	r3, r1
 800118a:	43db      	mvns	r3, r3
 800118c:	4619      	mov	r1, r3
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	400a      	ands	r2, r1
 8001194:	605a      	str	r2, [r3, #4]
	//~(0x1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber); nghĩa là tiến hành đảo trạng thái 1 thành 0
	//vị trí chân Pin_Number
	pGPIOHandle->pGPIOx->OTYPER |= temp;
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	6859      	ldr	r1, [r3, #4]
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	697a      	ldr	r2, [r7, #20]
 80011a2:	430a      	orrs	r2, r1
 80011a4:	605a      	str	r2, [r3, #4]
	temp = 0;
 80011a6:	2300      	movs	r3, #0
 80011a8:	617b      	str	r3, [r7, #20]

	//5. configure the alt functionality
	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_ALTFN)
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	795b      	ldrb	r3, [r3, #5]
 80011ae:	2b02      	cmp	r3, #2
 80011b0:	d132      	bne.n	8001218 <GPIO_Init+0x308>
		//Chế độ này đc thực thi khi và chỉ khi bit MODERx đc thiết lập GPIO_MODE_ALTFN

		uint32_t temp1,temp2;

		//Xác định thanh ghi cần sử dụng là GPIOx_AFRH ->AFR[1] hay GPIOx_AFRL ->AFR[0]
		temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 8;
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	791b      	ldrb	r3, [r3, #4]
 80011b6:	08db      	lsrs	r3, r3, #3
 80011b8:	b2db      	uxtb	r3, r3
 80011ba:	60fb      	str	r3, [r7, #12]

		//Xác định vị trí cụm 4bit cần sử dụng ở vị trí nào trong thanh ghi
		temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 8;
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	791b      	ldrb	r3, [r3, #4]
 80011c0:	f003 0307 	and.w	r3, r3, #7
 80011c4:	60bb      	str	r3, [r7, #8]

		//Clearing bit field
		pGPIOHandle->pGPIOx->AFR[temp1] &= ~(0xF << (4* temp2));   //0xF = 1111, đảo 1111->0000 tại vị trí 4*temp2
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	68fa      	ldr	r2, [r7, #12]
 80011cc:	3208      	adds	r2, #8
 80011ce:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80011d2:	68bb      	ldr	r3, [r7, #8]
 80011d4:	009b      	lsls	r3, r3, #2
 80011d6:	210f      	movs	r1, #15
 80011d8:	fa01 f303 	lsl.w	r3, r1, r3
 80011dc:	43db      	mvns	r3, r3
 80011de:	4619      	mov	r1, r3
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	4011      	ands	r1, r2
 80011e6:	68fa      	ldr	r2, [r7, #12]
 80011e8:	3208      	adds	r2, #8
 80011ea:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

		//Lưu cấu hình AFR vào trong con trỏ pGPIOHandle
		pGPIOHandle->pGPIOx->AFR[temp1] |= (pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFunMode << (4* temp2));
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	68fa      	ldr	r2, [r7, #12]
 80011f4:	3208      	adds	r2, #8
 80011f6:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	7a5b      	ldrb	r3, [r3, #9]
 80011fe:	4619      	mov	r1, r3
 8001200:	68bb      	ldr	r3, [r7, #8]
 8001202:	009b      	lsls	r3, r3, #2
 8001204:	fa01 f303 	lsl.w	r3, r1, r3
 8001208:	4619      	mov	r1, r3
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	4311      	orrs	r1, r2
 8001210:	68fa      	ldr	r2, [r7, #12]
 8001212:	3208      	adds	r2, #8
 8001214:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	}
}
 8001218:	bf00      	nop
 800121a:	3718      	adds	r7, #24
 800121c:	46bd      	mov	sp, r7
 800121e:	bd80      	pop	{r7, pc}
 8001220:	40023800 	.word	0x40023800
 8001224:	40013800 	.word	0x40013800
 8001228:	40013c00 	.word	0x40013c00

0800122c <GPIO_WriteToOutputPin>:
 * @return		- none
 *
 * @Note 		- none
 */
void GPIO_WriteToOutputPin(GPIO_RegDef_t *pGPIOx, uint8_t PinNumber, uint8_t value)
{
 800122c:	b480      	push	{r7}
 800122e:	b083      	sub	sp, #12
 8001230:	af00      	add	r7, sp, #0
 8001232:	6078      	str	r0, [r7, #4]
 8001234:	460b      	mov	r3, r1
 8001236:	70fb      	strb	r3, [r7, #3]
 8001238:	4613      	mov	r3, r2
 800123a:	70bb      	strb	r3, [r7, #2]
	if(value == GPIO_PIN_SET)
 800123c:	78bb      	ldrb	r3, [r7, #2]
 800123e:	2b01      	cmp	r3, #1
 8001240:	d109      	bne.n	8001256 <GPIO_WriteToOutputPin+0x2a>
	{
		//Write 1 to output data register at the bit field corresponding tho the pin_number
		//Viết 1 vào thanh ghi dữ liệu đầu ra tại trường bit tương ứng với số pin
		pGPIOx->ODR |= (1 << PinNumber);
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	695b      	ldr	r3, [r3, #20]
 8001246:	78fa      	ldrb	r2, [r7, #3]
 8001248:	2101      	movs	r1, #1
 800124a:	fa01 f202 	lsl.w	r2, r1, r2
 800124e:	431a      	orrs	r2, r3
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	615a      	str	r2, [r3, #20]
	else
	{
		//Write 0 to output data register at the corresponding pin_number
		pGPIOx->ODR &= ~(1 << PinNumber);
	}
}
 8001254:	e009      	b.n	800126a <GPIO_WriteToOutputPin+0x3e>
		pGPIOx->ODR &= ~(1 << PinNumber);
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	695b      	ldr	r3, [r3, #20]
 800125a:	78fa      	ldrb	r2, [r7, #3]
 800125c:	2101      	movs	r1, #1
 800125e:	fa01 f202 	lsl.w	r2, r1, r2
 8001262:	43d2      	mvns	r2, r2
 8001264:	401a      	ands	r2, r3
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	615a      	str	r2, [r3, #20]
}
 800126a:	bf00      	nop
 800126c:	370c      	adds	r7, #12
 800126e:	46bd      	mov	sp, r7
 8001270:	bc80      	pop	{r7}
 8001272:	4770      	bx	lr

08001274 <I2C_PeriClockControl>:
 *
 * @Note        - none

 */
void I2C_PeriClockControl(I2C_RegDef_t *pI2Cx, uint8_t EnorDi)
{
 8001274:	b480      	push	{r7}
 8001276:	b083      	sub	sp, #12
 8001278:	af00      	add	r7, sp, #0
 800127a:	6078      	str	r0, [r7, #4]
 800127c:	460b      	mov	r3, r1
 800127e:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE)
 8001280:	78fb      	ldrb	r3, [r7, #3]
 8001282:	2b01      	cmp	r3, #1
 8001284:	d11f      	bne.n	80012c6 <I2C_PeriClockControl+0x52>
	{
		if(pI2Cx == I2C1)
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	4a11      	ldr	r2, [pc, #68]	; (80012d0 <I2C_PeriClockControl+0x5c>)
 800128a:	4293      	cmp	r3, r2
 800128c:	d106      	bne.n	800129c <I2C_PeriClockControl+0x28>
		{
			I2C1_PCLK_EN();
 800128e:	4b11      	ldr	r3, [pc, #68]	; (80012d4 <I2C_PeriClockControl+0x60>)
 8001290:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001292:	4a10      	ldr	r2, [pc, #64]	; (80012d4 <I2C_PeriClockControl+0x60>)
 8001294:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001298:	6413      	str	r3, [r2, #64]	; 0x40
	}
	else
	{
		//TODO
	}
}
 800129a:	e014      	b.n	80012c6 <I2C_PeriClockControl+0x52>
		else if (pI2Cx == I2C2)
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	4a0e      	ldr	r2, [pc, #56]	; (80012d8 <I2C_PeriClockControl+0x64>)
 80012a0:	4293      	cmp	r3, r2
 80012a2:	d106      	bne.n	80012b2 <I2C_PeriClockControl+0x3e>
			I2C2_PCLK_EN();
 80012a4:	4b0b      	ldr	r3, [pc, #44]	; (80012d4 <I2C_PeriClockControl+0x60>)
 80012a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012a8:	4a0a      	ldr	r2, [pc, #40]	; (80012d4 <I2C_PeriClockControl+0x60>)
 80012aa:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80012ae:	6413      	str	r3, [r2, #64]	; 0x40
}
 80012b0:	e009      	b.n	80012c6 <I2C_PeriClockControl+0x52>
		else if (pI2Cx == I2C3)
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	4a09      	ldr	r2, [pc, #36]	; (80012dc <I2C_PeriClockControl+0x68>)
 80012b6:	4293      	cmp	r3, r2
 80012b8:	d105      	bne.n	80012c6 <I2C_PeriClockControl+0x52>
			I2C3_PCLK_EN();
 80012ba:	4b06      	ldr	r3, [pc, #24]	; (80012d4 <I2C_PeriClockControl+0x60>)
 80012bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012be:	4a05      	ldr	r2, [pc, #20]	; (80012d4 <I2C_PeriClockControl+0x60>)
 80012c0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80012c4:	6413      	str	r3, [r2, #64]	; 0x40
}
 80012c6:	bf00      	nop
 80012c8:	370c      	adds	r7, #12
 80012ca:	46bd      	mov	sp, r7
 80012cc:	bc80      	pop	{r7}
 80012ce:	4770      	bx	lr
 80012d0:	40005400 	.word	0x40005400
 80012d4:	40023800 	.word	0x40023800
 80012d8:	40005800 	.word	0x40005800
 80012dc:	40005c00 	.word	0x40005c00

080012e0 <I2C_Init>:
 *
 * @Note        - none

 */
void I2C_Init(I2C_Handle_t *pI2CHandle)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b084      	sub	sp, #16
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	6078      	str	r0, [r7, #4]
	uint32_t tempreg = 0;		//biến tạm 32 bit temp register
 80012e8:	2300      	movs	r3, #0
 80012ea:	60fb      	str	r3, [r7, #12]

	//Enable the Clock for the I2Cx peripheral - Kích hoạt xung clock cho I2Cx
	I2C_PeriClockControl(pI2CHandle->pI2Cx, ENABLE);
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	2101      	movs	r1, #1
 80012f2:	4618      	mov	r0, r3
 80012f4:	f7ff ffbe 	bl	8001274 <I2C_PeriClockControl>

	//Đọc và Lưu giá trị của I2C_AckControl(sẽ đc set khi init) vào vị trí bit thứ 10 biến tạm tempreg
	tempreg |= pI2CHandle->I2C_Config.I2C_AckControl << 10;				//Ack control bit
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	7a5b      	ldrb	r3, [r3, #9]
 80012fc:	029b      	lsls	r3, r3, #10
 80012fe:	461a      	mov	r2, r3
 8001300:	68fb      	ldr	r3, [r7, #12]
 8001302:	4313      	orrs	r3, r2
 8001304:	60fb      	str	r3, [r7, #12]
	//Kích hoạt hoặc vô hiệu hóa theo yêu cầu của User

	//Thiết lập giá trị bit thứ 10 của thanh ghi CR1 với giá trị biến tempreg
	pI2CHandle->pI2Cx->CR1 = tempreg;
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	68fa      	ldr	r2, [r7, #12]
 800130c:	601a      	str	r2, [r3, #0]

	/* Cấu hình bit field FREQ của CR2 register */
	tempreg = 0;
 800130e:	2300      	movs	r3, #0
 8001310:	60fb      	str	r3, [r7, #12]
	tempreg |= RCC_GetPCLK1Value() / 1000000U;
 8001312:	f000 fa55 	bl	80017c0 <RCC_GetPCLK1Value>
 8001316:	4603      	mov	r3, r0
 8001318:	4a49      	ldr	r2, [pc, #292]	; (8001440 <I2C_Init+0x160>)
 800131a:	fba2 2303 	umull	r2, r3, r2, r3
 800131e:	0c9b      	lsrs	r3, r3, #18
 8001320:	68fa      	ldr	r2, [r7, #12]
 8001322:	4313      	orrs	r3, r2
 8001324:	60fb      	str	r3, [r7, #12]
	//Giải thích: vì giá trị trả về là 16MHz nên ta chia 1MHz để lấy giá trị 16

	pI2CHandle->pI2Cx->CR2 = (tempreg & 0x3F);  //0x3F = 0011 1111
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	68fa      	ldr	r2, [r7, #12]
 800132c:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8001330:	605a      	str	r2, [r3, #4]
	//Giá trị 16 của tempreg khi biên dịch sẽ đc trình biên dịch tách thành mã nhị phân
	//sau đó & với 0x3F vì bit field FREQ sử dụng 6 bit đầu của CR2 Register

	/* Lập trình định dạng địa chỉ và địa chỉ của thiết bị , OAR1 register */
	tempreg = 0;
 8001332:	2300      	movs	r3, #0
 8001334:	60fb      	str	r3, [r7, #12]
	tempreg |= pI2CHandle->I2C_Config.I2C_DeviceAddress << 1;	// ADD[7:1] : lấy giá trị từ bit thứ 2
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	7a1b      	ldrb	r3, [r3, #8]
 800133a:	005b      	lsls	r3, r3, #1
 800133c:	461a      	mov	r2, r3
 800133e:	68fb      	ldr	r3, [r7, #12]
 8001340:	4313      	orrs	r3, r2
 8001342:	60fb      	str	r3, [r7, #12]
	tempreg |= (1 << 14);								//Lệnh bắt buộc bit thứ 14 luôn là 1 khi cấu hình
 8001344:	68fb      	ldr	r3, [r7, #12]
 8001346:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800134a:	60fb      	str	r3, [r7, #12]
	pI2CHandle->pI2Cx->OAR1 = tempreg;					//Đưa vào cấu hình thanh ghi OAR1 bằng giá trị tempreg
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	68fa      	ldr	r2, [r7, #12]
 8001352:	609a      	str	r2, [r3, #8]

	/* CCR Calculations, Tính toán tần số cho Clock control register */
	uint16_t ccr_value = 0;					//giá trị tần số tạm
 8001354:	2300      	movs	r3, #0
 8001356:	817b      	strh	r3, [r7, #10]
	tempreg = 0;
 8001358:	2300      	movs	r3, #0
 800135a:	60fb      	str	r3, [r7, #12]

	//Kiểm tra speed đc cài đặt đầu vào ở tần số nào từ đó suy ra chế độ đang sử dụng
	if(pI2CHandle->I2C_Config.I2C_SCLSpeed <= I2C_SCL_SPEED_SM)
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	685b      	ldr	r3, [r3, #4]
 8001360:	4a38      	ldr	r2, [pc, #224]	; (8001444 <I2C_Init+0x164>)
 8001362:	4293      	cmp	r3, r2
 8001364:	d80f      	bhi.n	8001386 <I2C_Init+0xa6>
	{
		//Nếu ở Standard Mode
		ccr_value = (RCC_GetPCLK1Value() / (2 * pI2CHandle->I2C_Config.I2C_SCLSpeed));
 8001366:	f000 fa2b 	bl	80017c0 <RCC_GetPCLK1Value>
 800136a:	4602      	mov	r2, r0
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	685b      	ldr	r3, [r3, #4]
 8001370:	005b      	lsls	r3, r3, #1
 8001372:	fbb2 f3f3 	udiv	r3, r2, r3
 8001376:	817b      	strh	r3, [r7, #10]
		tempreg |= ccr_value & 0xFFF;	//0xFFF: CCR[11:0] của CCR Register (If Standard Mode)
 8001378:	897b      	ldrh	r3, [r7, #10]
 800137a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800137e:	68fa      	ldr	r2, [r7, #12]
 8001380:	4313      	orrs	r3, r2
 8001382:	60fb      	str	r3, [r7, #12]
 8001384:	e02d      	b.n	80013e2 <I2C_Init+0x102>
	}
	else
	{
		//Nếu ở Fast Mode
		tempreg |= ( 1 << 15);	//Đưa bit field F/S[15] lên 1 của CCR Register, kích hoạt chế độ Fast Mode
 8001386:	68fb      	ldr	r3, [r7, #12]
 8001388:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800138c:	60fb      	str	r3, [r7, #12]
		tempreg |= (pI2CHandle->I2C_Config.I2C_FmDutyCycle << 14); //Set value Duty đã đc user input khi init
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	7a9b      	ldrb	r3, [r3, #10]
 8001392:	039b      	lsls	r3, r3, #14
 8001394:	461a      	mov	r2, r3
 8001396:	68fb      	ldr	r3, [r7, #12]
 8001398:	4313      	orrs	r3, r2
 800139a:	60fb      	str	r3, [r7, #12]
		//vào bit field DUTY[14]

		//Kiểm tra DUTY đang ở trạng thái nào để áp dụng công thức
		if(pI2CHandle->I2C_Config.I2C_FmDutyCycle == I2C_FM_DUTY_2)
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	7a9b      	ldrb	r3, [r3, #10]
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d10b      	bne.n	80013bc <I2C_Init+0xdc>
		{
			//Nếu Duty = 0
			ccr_value = (RCC_GetPCLK1Value() / (3 * pI2CHandle->I2C_Config.I2C_SCLSpeed));
 80013a4:	f000 fa0c 	bl	80017c0 <RCC_GetPCLK1Value>
 80013a8:	4601      	mov	r1, r0
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	685a      	ldr	r2, [r3, #4]
 80013ae:	4613      	mov	r3, r2
 80013b0:	005b      	lsls	r3, r3, #1
 80013b2:	4413      	add	r3, r2
 80013b4:	fbb1 f3f3 	udiv	r3, r1, r3
 80013b8:	817b      	strh	r3, [r7, #10]
 80013ba:	e00c      	b.n	80013d6 <I2C_Init+0xf6>
		}
		else
		{
			//Nếu Duty = 1
			ccr_value = (RCC_GetPCLK1Value() / (25 * pI2CHandle->I2C_Config.I2C_SCLSpeed));
 80013bc:	f000 fa00 	bl	80017c0 <RCC_GetPCLK1Value>
 80013c0:	4601      	mov	r1, r0
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	685a      	ldr	r2, [r3, #4]
 80013c6:	4613      	mov	r3, r2
 80013c8:	009b      	lsls	r3, r3, #2
 80013ca:	4413      	add	r3, r2
 80013cc:	009a      	lsls	r2, r3, #2
 80013ce:	4413      	add	r3, r2
 80013d0:	fbb1 f3f3 	udiv	r3, r1, r3
 80013d4:	817b      	strh	r3, [r7, #10]
		}

		tempreg |= ccr_value & 0xFFF;	//0xFFF: CCR[11:0] của CCR Register (If Fast Mode)
 80013d6:	897b      	ldrh	r3, [r7, #10]
 80013d8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80013dc:	68fa      	ldr	r2, [r7, #12]
 80013de:	4313      	orrs	r3, r2
 80013e0:	60fb      	str	r3, [r7, #12]
	}
	pI2CHandle->pI2Cx->CCR |= tempreg;		//Cấu hình thanh ghi CCR cho processor
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	69d9      	ldr	r1, [r3, #28]
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	68fa      	ldr	r2, [r7, #12]
 80013ee:	430a      	orrs	r2, r1
 80013f0:	61da      	str	r2, [r3, #28]

	/* TRISE Configuration TRISE register (I2C_TRISE) */
	//Kiểm tra speed đc cài đặt đầu vào ở tần số nào từ đó suy ra chế độ đang sử dụng
	if(pI2CHandle->I2C_Config.I2C_SCLSpeed <= I2C_SCL_SPEED_SM)
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	685b      	ldr	r3, [r3, #4]
 80013f6:	4a13      	ldr	r2, [pc, #76]	; (8001444 <I2C_Init+0x164>)
 80013f8:	4293      	cmp	r3, r2
 80013fa:	d809      	bhi.n	8001410 <I2C_Init+0x130>
	{
		//Nếu ở Standard Mode
		tempreg = (RCC_GetPCLK1Value() / 1000000U) + 1;	//công thức datasheet
 80013fc:	f000 f9e0 	bl	80017c0 <RCC_GetPCLK1Value>
 8001400:	4603      	mov	r3, r0
 8001402:	4a0f      	ldr	r2, [pc, #60]	; (8001440 <I2C_Init+0x160>)
 8001404:	fba2 2303 	umull	r2, r3, r2, r3
 8001408:	0c9b      	lsrs	r3, r3, #18
 800140a:	3301      	adds	r3, #1
 800140c:	60fb      	str	r3, [r7, #12]
 800140e:	e00d      	b.n	800142c <I2C_Init+0x14c>
	}
	else
	{
		//Nếu ở Fast Mode
		tempreg = ((RCC_GetPCLK1Value() * 300) / 1000000000U) + 1; //công thức datasheet
 8001410:	f000 f9d6 	bl	80017c0 <RCC_GetPCLK1Value>
 8001414:	4603      	mov	r3, r0
 8001416:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800141a:	fb02 f303 	mul.w	r3, r2, r3
 800141e:	0a5b      	lsrs	r3, r3, #9
 8001420:	4a09      	ldr	r2, [pc, #36]	; (8001448 <I2C_Init+0x168>)
 8001422:	fba2 2303 	umull	r2, r3, r2, r3
 8001426:	09db      	lsrs	r3, r3, #7
 8001428:	3301      	adds	r3, #1
 800142a:	60fb      	str	r3, [r7, #12]
	}
	//0x3F: 0011 1111, TRISE[5:0] của TRISE Register
	pI2CHandle->pI2Cx->TRISE = (tempreg & 0x3F);		//Cấu hình thanh ghi TRISE cho processor
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	68fa      	ldr	r2, [r7, #12]
 8001432:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8001436:	621a      	str	r2, [r3, #32]
}
 8001438:	bf00      	nop
 800143a:	3710      	adds	r7, #16
 800143c:	46bd      	mov	sp, r7
 800143e:	bd80      	pop	{r7, pc}
 8001440:	431bde83 	.word	0x431bde83
 8001444:	000186a0 	.word	0x000186a0
 8001448:	00044b83 	.word	0x00044b83

0800144c <I2C_MasterSendData>:
 * @return      - none
 *
 * @Note        - none
 */
void I2C_MasterSendData(I2C_Handle_t *pI2CHandle, uint8_t *pTxbuffer, uint32_t Len,uint8_t SlaveAddr,uint8_t Sr)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	b084      	sub	sp, #16
 8001450:	af00      	add	r7, sp, #0
 8001452:	60f8      	str	r0, [r7, #12]
 8001454:	60b9      	str	r1, [r7, #8]
 8001456:	607a      	str	r2, [r7, #4]
 8001458:	70fb      	strb	r3, [r7, #3]
	//1. Generate the Start Condition - Tạo điều kiện START
	I2C_GenerateStartCondition(pI2CHandle->pI2Cx);
 800145a:	68fb      	ldr	r3, [r7, #12]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	4618      	mov	r0, r3
 8001460:	f000 f8e5 	bl	800162e <I2C_GenerateStartCondition>

	//2. Confirm that START generation is complete by checking the SB flag in the SR1
	//Note: Until SB is cleared SCL will be stretched (pulled to LOW)
	//2. Xác nhận rằng quá trình tạo START đã hoàn tất bằng cách kiểm tra cờ SB trong SR1
	//Lưu ý: Cho đến khi SB bị xóa SCL sẽ bị kéo gián đoạn (kéo về mức LOW)
	while(! I2C_GetFlagStatus(pI2CHandle->pI2Cx, I2C_FLAG_SB));
 8001464:	bf00      	nop
 8001466:	68fb      	ldr	r3, [r7, #12]
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	2101      	movs	r1, #1
 800146c:	4618      	mov	r0, r3
 800146e:	f000 f8ed 	bl	800164c <I2C_GetFlagStatus>
 8001472:	4603      	mov	r3, r0
 8001474:	2b00      	cmp	r3, #0
 8001476:	d0f6      	beq.n	8001466 <I2C_MasterSendData+0x1a>

	//3. Send the address of the Slave with r/nw bit set to w(0) (total 8 bits)
	//3. Gửi tới địa chỉ của Slave với bit r/nw được đặt thành w(0) (tổng cộng 8 bit)
	I2C_ExecuteAddressPhaseWrite(pI2CHandle->pI2Cx, SlaveAddr);
 8001478:	68fb      	ldr	r3, [r7, #12]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	78fa      	ldrb	r2, [r7, #3]
 800147e:	4611      	mov	r1, r2
 8001480:	4618      	mov	r0, r3
 8001482:	f000 f8f6 	bl	8001672 <I2C_ExecuteAddressPhaseWrite>

	//4. Confirm that address phase is completed by checking the ADDR flag in the SR1
	//4. Xác nhận rằng "address phase" đã hoàn tất bằng cách kiểm tra cờ ADDR trong SR1
	while(! I2C_GetFlagStatus(pI2CHandle->pI2Cx, I2C_FLAG_ADDR));
 8001486:	bf00      	nop
 8001488:	68fb      	ldr	r3, [r7, #12]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	2102      	movs	r1, #2
 800148e:	4618      	mov	r0, r3
 8001490:	f000 f8dc 	bl	800164c <I2C_GetFlagStatus>
 8001494:	4603      	mov	r3, r0
 8001496:	2b00      	cmp	r3, #0
 8001498:	d0f6      	beq.n	8001488 <I2C_MasterSendData+0x3c>

	//5. Clear the ADDR flag according to its software sequence
	//Note: Until ADDR is cleared SCL will be stretched (pulled to LOW)
	//5. Xóa cờ ADDR theo trình tự phần mềm của nó
	//Lưu ý: Cho đến khi xóa bit field ADDR, SCL sẽ bị kéo dài gián đoạn (kéo về Low)
	I2C_ClearADDRFlag(pI2CHandle);
 800149a:	68f8      	ldr	r0, [r7, #12]
 800149c:	f000 f913 	bl	80016c6 <I2C_ClearADDRFlag>

	//6. Send the Data until Len becomes 0 - Gửi data cho đến khi Len==0
	while(Len > 0)				//Kiểm tra độ dài của Data(Đã gửi hết data trong pTxBuffer hay chưa)
 80014a0:	e014      	b.n	80014cc <I2C_MasterSendData+0x80>
	{
		//Kiểm tra cờ Txe đã đc set, cho phép đc gửi data đi
		while(! I2C_GetFlagStatus(pI2CHandle->pI2Cx, I2C_FLAG_TXE));    //Wait till TxE is set
 80014a2:	bf00      	nop
 80014a4:	68fb      	ldr	r3, [r7, #12]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	2180      	movs	r1, #128	; 0x80
 80014aa:	4618      	mov	r0, r3
 80014ac:	f000 f8ce 	bl	800164c <I2C_GetFlagStatus>
 80014b0:	4603      	mov	r3, r0
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d0f6      	beq.n	80014a4 <I2C_MasterSendData+0x58>

		//Đưa nội dung data và DR Register
		pI2CHandle->pI2Cx->DR = *pTxbuffer; 		//Cấu hình thanh ghi DR cho processor(Data in DR)
 80014b6:	68bb      	ldr	r3, [r7, #8]
 80014b8:	781a      	ldrb	r2, [r3, #0]
 80014ba:	68fb      	ldr	r3, [r7, #12]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	611a      	str	r2, [r3, #16]
		pTxbuffer++;								//Mỗi lần gửi 8bit data. tăng đến ký tự data tiếp theo
 80014c0:	68bb      	ldr	r3, [r7, #8]
 80014c2:	3301      	adds	r3, #1
 80014c4:	60bb      	str	r3, [r7, #8]
		Len--;										//Giảm 1 đơn vị data(đã truyền 1 ký tự)
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	3b01      	subs	r3, #1
 80014ca:	607b      	str	r3, [r7, #4]
	while(Len > 0)				//Kiểm tra độ dài của Data(Đã gửi hết data trong pTxBuffer hay chưa)
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d1e7      	bne.n	80014a2 <I2C_MasterSendData+0x56>
	//Note: TXE=1, BTF=1, means that both SR and DR are empty and next transmission should begin
	//when BTF=1 SCL will be stretched(pulled to LOW)
	//7. Khi Len trở về 0, hãy đợi TXE=1 và BTF=1 trước khi tạo điều kiện STOP
	//Lưu ý: TXE=1, BTF=1, có nghĩa là cả SR và DR đều trống và quá trình truyền tiếp theo sẽ bắt đầu
	//khi BTF=1 SCL sẽ bị kéo giãn gián đoạn (kéo xuống THẤP)
	while(! I2C_GetFlagStatus(pI2CHandle->pI2Cx, I2C_FLAG_TXE));
 80014d2:	bf00      	nop
 80014d4:	68fb      	ldr	r3, [r7, #12]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	2180      	movs	r1, #128	; 0x80
 80014da:	4618      	mov	r0, r3
 80014dc:	f000 f8b6 	bl	800164c <I2C_GetFlagStatus>
 80014e0:	4603      	mov	r3, r0
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d0f6      	beq.n	80014d4 <I2C_MasterSendData+0x88>
	while(! I2C_GetFlagStatus(pI2CHandle->pI2Cx, I2C_FLAG_BTF));
 80014e6:	bf00      	nop
 80014e8:	68fb      	ldr	r3, [r7, #12]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	2104      	movs	r1, #4
 80014ee:	4618      	mov	r0, r3
 80014f0:	f000 f8ac 	bl	800164c <I2C_GetFlagStatus>
 80014f4:	4603      	mov	r3, r0
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d0f6      	beq.n	80014e8 <I2C_MasterSendData+0x9c>

	//8. Generate STOP condition and master need not to wait for the completion of STOP condition
	//Note: Generating STOP, automatically clears the BTF
	//8. Tạo điều kiện STOP và Master không cần đợi hoàn thành điều kiện STOP
	//Lưu ý: Tạo STOP, tự động xóa BTF
	if(Sr == I2C_DISABLE_SR)
 80014fa:	7e3b      	ldrb	r3, [r7, #24]
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d104      	bne.n	800150a <I2C_MasterSendData+0xbe>
		I2C_GenerateStopCondition(pI2CHandle->pI2Cx);
 8001500:	68fb      	ldr	r3, [r7, #12]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	4618      	mov	r0, r3
 8001506:	f000 f915 	bl	8001734 <I2C_GenerateStopCondition>
}
 800150a:	bf00      	nop
 800150c:	3710      	adds	r7, #16
 800150e:	46bd      	mov	sp, r7
 8001510:	bd80      	pop	{r7, pc}

08001512 <I2C_MasterReceiveData>:
 * @return      - none
 * @Note        - pRxbuffer: vì là con trỏ nên khi nhận đc data từ Slave sẽ nhúng trực tiếp vào
 * 				địa chỉ của con trỏ nên ko cần thiết lập biến trả về
 */
void I2C_MasterReceiveData(I2C_Handle_t *pI2CHandle, uint8_t *pRxbuffer, uint32_t Len,uint8_t SlaveAddr,uint8_t Sr)
{
 8001512:	b580      	push	{r7, lr}
 8001514:	b086      	sub	sp, #24
 8001516:	af00      	add	r7, sp, #0
 8001518:	60f8      	str	r0, [r7, #12]
 800151a:	60b9      	str	r1, [r7, #8]
 800151c:	607a      	str	r2, [r7, #4]
 800151e:	70fb      	strb	r3, [r7, #3]
	//1. Generate the START Condition
	I2C_GenerateStartCondition(pI2CHandle->pI2Cx);
 8001520:	68fb      	ldr	r3, [r7, #12]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	4618      	mov	r0, r3
 8001526:	f000 f882 	bl	800162e <I2C_GenerateStartCondition>

	//2. Confirm the start generation is completed by the checking the SB flag in the SR1
	//Note: Until SB is cleared SCL will be stretched (pulled to LOW)
	//Xác nhận việc tạo bắt đầu được hoàn thành bằng cách kiểm tra cờ SB trong SR1
	//Lưu ý: Cho đến khi SB bị xóa SCL sẽ bị kéo giãn (kéo về THẤP)
	while(! I2C_GetFlagStatus(pI2CHandle->pI2Cx, I2C_FLAG_SB));
 800152a:	bf00      	nop
 800152c:	68fb      	ldr	r3, [r7, #12]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	2101      	movs	r1, #1
 8001532:	4618      	mov	r0, r3
 8001534:	f000 f88a 	bl	800164c <I2C_GetFlagStatus>
 8001538:	4603      	mov	r3, r0
 800153a:	2b00      	cmp	r3, #0
 800153c:	d0f6      	beq.n	800152c <I2C_MasterReceiveData+0x1a>

	//3. Send the address of the Slave with r/nw bit set to R(1) (total 8 bits)
	//Gửi địa chỉ của Slave(gửi data đến Master) với bit r/nw được đặt thành R(1) (tổng cộng 8 bit)
	I2C_ExecuteAddressPhaseRead(pI2CHandle->pI2Cx, SlaveAddr);
 800153e:	68fb      	ldr	r3, [r7, #12]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	78fa      	ldrb	r2, [r7, #3]
 8001544:	4611      	mov	r1, r2
 8001546:	4618      	mov	r0, r3
 8001548:	f000 f8a8 	bl	800169c <I2C_ExecuteAddressPhaseRead>

	//4. Wait until address phase is completed by checking the ADDR flag in the SR1
	//Đợi cho đến khi hoàn thành giai đoạn địa chỉ bằng cách kiểm tra cờ ADDR trong SR1
	while(! I2C_GetFlagStatus(pI2CHandle->pI2Cx, I2C_FLAG_ADDR));
 800154c:	bf00      	nop
 800154e:	68fb      	ldr	r3, [r7, #12]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	2102      	movs	r1, #2
 8001554:	4618      	mov	r0, r3
 8001556:	f000 f879 	bl	800164c <I2C_GetFlagStatus>
 800155a:	4603      	mov	r3, r0
 800155c:	2b00      	cmp	r3, #0
 800155e:	d0f6      	beq.n	800154e <I2C_MasterReceiveData+0x3c>

	//TH1: Procedure to read only 1 byte from Slave(Slave gửi đến Master 1byte data)
	if(Len == 1)
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	2b01      	cmp	r3, #1
 8001564:	d121      	bne.n	80015aa <I2C_MasterReceiveData+0x98>
	{
		//Disable Acking, thông báo cho Master ko còn data tiếp theo sau khi đã nhận 1 byte data
		I2C_ManageAcking(pI2CHandle->pI2Cx,I2C_ACK_DISABLE);
 8001566:	68fb      	ldr	r3, [r7, #12]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	2100      	movs	r1, #0
 800156c:	4618      	mov	r0, r3
 800156e:	f000 f8f0 	bl	8001752 <I2C_ManageAcking>

		//Clear the ADDR flag
		I2C_ClearADDRFlag(pI2CHandle);
 8001572:	68f8      	ldr	r0, [r7, #12]
 8001574:	f000 f8a7 	bl	80016c6 <I2C_ClearADDRFlag>

		//Wait until bit field RxNE become 1
		while(! I2C_GetFlagStatus(pI2CHandle->pI2Cx,I2C_FLAG_RXNE));
 8001578:	bf00      	nop
 800157a:	68fb      	ldr	r3, [r7, #12]
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	2140      	movs	r1, #64	; 0x40
 8001580:	4618      	mov	r0, r3
 8001582:	f000 f863 	bl	800164c <I2C_GetFlagStatus>
 8001586:	4603      	mov	r3, r0
 8001588:	2b00      	cmp	r3, #0
 800158a:	d0f6      	beq.n	800157a <I2C_MasterReceiveData+0x68>

		//Generate STOP condition
		if(Sr == I2C_DISABLE_SR)
 800158c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001590:	2b00      	cmp	r3, #0
 8001592:	d104      	bne.n	800159e <I2C_MasterReceiveData+0x8c>
			I2C_GenerateStopCondition(pI2CHandle->pI2Cx);
 8001594:	68fb      	ldr	r3, [r7, #12]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	4618      	mov	r0, r3
 800159a:	f000 f8cb 	bl	8001734 <I2C_GenerateStopCondition>

		//Read data in to Buffer from DR Register
		*pRxbuffer = pI2CHandle->pI2Cx->DR;			//nhúng trực tiếp vào địa chỉ của param đưa vào
 800159e:	68fb      	ldr	r3, [r7, #12]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	691b      	ldr	r3, [r3, #16]
 80015a4:	b2da      	uxtb	r2, r3
 80015a6:	68bb      	ldr	r3, [r7, #8]
 80015a8:	701a      	strb	r2, [r3, #0]
	}

	//TH2: Procedure to read n byte from Slave(Slave gửi đến Master nbyte data)
	if(Len > 1)
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	2b01      	cmp	r3, #1
 80015ae:	d930      	bls.n	8001612 <I2C_MasterReceiveData+0x100>
	{
		//Clear the ADDR flag
		I2C_ClearADDRFlag(pI2CHandle);
 80015b0:	68f8      	ldr	r0, [r7, #12]
 80015b2:	f000 f888 	bl	80016c6 <I2C_ClearADDRFlag>

		//Read the data until(cho tới khi) Len becomes zero
		for(uint32_t i = Len; i > 0 ; i-- )
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	617b      	str	r3, [r7, #20]
 80015ba:	e027      	b.n	800160c <I2C_MasterReceiveData+0xfa>
		{
			//Wait until RxNE becomes 1
			while(! I2C_GetFlagStatus(pI2CHandle->pI2Cx, I2C_FLAG_RXNE));
 80015bc:	bf00      	nop
 80015be:	68fb      	ldr	r3, [r7, #12]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	2140      	movs	r1, #64	; 0x40
 80015c4:	4618      	mov	r0, r3
 80015c6:	f000 f841 	bl	800164c <I2C_GetFlagStatus>
 80015ca:	4603      	mov	r3, r0
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d0f6      	beq.n	80015be <I2C_MasterReceiveData+0xac>

			//If last 2 byte are remaining
			if(i == 2)
 80015d0:	697b      	ldr	r3, [r7, #20]
 80015d2:	2b02      	cmp	r3, #2
 80015d4:	d10e      	bne.n	80015f4 <I2C_MasterReceiveData+0xe2>
			{
				//Clear the ack bit
				I2C_ManageAcking(pI2CHandle->pI2Cx, I2C_ACK_DISABLE);
 80015d6:	68fb      	ldr	r3, [r7, #12]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	2100      	movs	r1, #0
 80015dc:	4618      	mov	r0, r3
 80015de:	f000 f8b8 	bl	8001752 <I2C_ManageAcking>

				//Generate STOP Condition
				if(Sr == I2C_DISABLE_SR)
 80015e2:	f897 3020 	ldrb.w	r3, [r7, #32]
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d104      	bne.n	80015f4 <I2C_MasterReceiveData+0xe2>
					I2C_GenerateStopCondition(pI2CHandle->pI2Cx);
 80015ea:	68fb      	ldr	r3, [r7, #12]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	4618      	mov	r0, r3
 80015f0:	f000 f8a0 	bl	8001734 <I2C_GenerateStopCondition>
			}

			//Read the Data from Data Register in to Buffer
			*pRxbuffer = pI2CHandle->pI2Cx->DR;
 80015f4:	68fb      	ldr	r3, [r7, #12]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	691b      	ldr	r3, [r3, #16]
 80015fa:	b2da      	uxtb	r2, r3
 80015fc:	68bb      	ldr	r3, [r7, #8]
 80015fe:	701a      	strb	r2, [r3, #0]

			//Increment(tăng) the Buffer address, đi đến byte data kế tiếp
			pRxbuffer++;
 8001600:	68bb      	ldr	r3, [r7, #8]
 8001602:	3301      	adds	r3, #1
 8001604:	60bb      	str	r3, [r7, #8]
		for(uint32_t i = Len; i > 0 ; i-- )
 8001606:	697b      	ldr	r3, [r7, #20]
 8001608:	3b01      	subs	r3, #1
 800160a:	617b      	str	r3, [r7, #20]
 800160c:	697b      	ldr	r3, [r7, #20]
 800160e:	2b00      	cmp	r3, #0
 8001610:	d1d4      	bne.n	80015bc <I2C_MasterReceiveData+0xaa>
		}
	}

	//Re-enable ACKing, nếu user cho phép Slave->Master
	if(pI2CHandle->I2C_Config.I2C_AckControl == I2C_ACK_ENABLE)
 8001612:	68fb      	ldr	r3, [r7, #12]
 8001614:	7a5b      	ldrb	r3, [r3, #9]
 8001616:	2b01      	cmp	r3, #1
 8001618:	d105      	bne.n	8001626 <I2C_MasterReceiveData+0x114>
	{
		//thông báo cho phép Master tiếp tục nhận data từ Slave ở lần kết nối sau
		I2C_ManageAcking(pI2CHandle->pI2Cx, I2C_ACK_ENABLE);
 800161a:	68fb      	ldr	r3, [r7, #12]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	2101      	movs	r1, #1
 8001620:	4618      	mov	r0, r3
 8001622:	f000 f896 	bl	8001752 <I2C_ManageAcking>
	}
}
 8001626:	bf00      	nop
 8001628:	3718      	adds	r7, #24
 800162a:	46bd      	mov	sp, r7
 800162c:	bd80      	pop	{r7, pc}

0800162e <I2C_GenerateStartCondition>:
 * @return      - none
 *
 * @Note        - I2C_CR1, bit field START[8]
 */
static void I2C_GenerateStartCondition(I2C_RegDef_t *pI2Cx)
{
 800162e:	b480      	push	{r7}
 8001630:	b083      	sub	sp, #12
 8001632:	af00      	add	r7, sp, #0
 8001634:	6078      	str	r0, [r7, #4]
	//Set bit field START[8] lên high
	pI2Cx->CR1 |= (1 << I2C_CR1_START);		//Cấu hình thanh ghi CR1 cho processor
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	601a      	str	r2, [r3, #0]
}
 8001642:	bf00      	nop
 8001644:	370c      	adds	r7, #12
 8001646:	46bd      	mov	sp, r7
 8001648:	bc80      	pop	{r7}
 800164a:	4770      	bx	lr

0800164c <I2C_GetFlagStatus>:
 * @return      - Trạng thái cờ_flag
 *
 * @Note        - none
 */
uint8_t I2C_GetFlagStatus(I2C_RegDef_t *pI2Cx, uint32_t FlagName)
{
 800164c:	b480      	push	{r7}
 800164e:	b083      	sub	sp, #12
 8001650:	af00      	add	r7, sp, #0
 8001652:	6078      	str	r0, [r7, #4]
 8001654:	6039      	str	r1, [r7, #0]
	if(pI2Cx->SR1 & FlagName)  //Kiểm tra value của pI2Cx->SR1 and với FlagName
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	695a      	ldr	r2, [r3, #20]
 800165a:	683b      	ldr	r3, [r7, #0]
 800165c:	4013      	ands	r3, r2
 800165e:	2b00      	cmp	r3, #0
 8001660:	d001      	beq.n	8001666 <I2C_GetFlagStatus+0x1a>
	{
		//Khi pI2Cx->SR1 & FlagName == 1 thì thực hiện if
		return FLAG_SET;		//Có cờ flag tại vị trí đó đang hoạt động 1
 8001662:	2301      	movs	r3, #1
 8001664:	e000      	b.n	8001668 <I2C_GetFlagStatus+0x1c>
	}
	return FLAG_RESET;		//Nếu ko có cờ flag thì trả về 0
 8001666:	2300      	movs	r3, #0
}
 8001668:	4618      	mov	r0, r3
 800166a:	370c      	adds	r7, #12
 800166c:	46bd      	mov	sp, r7
 800166e:	bc80      	pop	{r7}
 8001670:	4770      	bx	lr

08001672 <I2C_ExecuteAddressPhaseWrite>:
 * @return      - none
 *
 * @Note        - SlaveAddr : sẽ đc cài đặt ở phía phần cứng làm Slave
 */
static void I2C_ExecuteAddressPhaseWrite(I2C_RegDef_t *pI2Cx,uint8_t SlaveAddr)
{
 8001672:	b480      	push	{r7}
 8001674:	b083      	sub	sp, #12
 8001676:	af00      	add	r7, sp, #0
 8001678:	6078      	str	r0, [r7, #4]
 800167a:	460b      	mov	r3, r1
 800167c:	70fb      	strb	r3, [r7, #3]
	//Tiến hành dịch biến SlaveAddr lên 1 bit vì bit0 sẽ chứa giá trị thực hiện việc read hoặc write,
	SlaveAddr = SlaveAddr << 1;			//và bit1->7chứa data địa chỉ(ko làm mất data addr khi set bit0)
 800167e:	78fb      	ldrb	r3, [r7, #3]
 8001680:	005b      	lsls	r3, r3, #1
 8001682:	70fb      	strb	r3, [r7, #3]
	SlaveAddr &= ~(1); 					//thiết lập bit0 = 0 = write(gửi data từ master->slave)
 8001684:	78fb      	ldrb	r3, [r7, #3]
 8001686:	f023 0301 	bic.w	r3, r3, #1
 800168a:	70fb      	strb	r3, [r7, #3]
										//SlaveAddr: Slave Addrress + r/nw bit[0]=0

	pI2Cx->DR = SlaveAddr;				//Cấu hình thanh ghi DR cho processor DR[7:0]
 800168c:	78fa      	ldrb	r2, [r7, #3]
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	611a      	str	r2, [r3, #16]
}
 8001692:	bf00      	nop
 8001694:	370c      	adds	r7, #12
 8001696:	46bd      	mov	sp, r7
 8001698:	bc80      	pop	{r7}
 800169a:	4770      	bx	lr

0800169c <I2C_ExecuteAddressPhaseRead>:
 * @return      - none
 *
 * @Note        - SlaveAddr : sẽ đc cài đặt ở phía phần cứng làm Slave
 */
static void I2C_ExecuteAddressPhaseRead(I2C_RegDef_t *pI2Cx,uint8_t SlaveAddr)
{
 800169c:	b480      	push	{r7}
 800169e:	b083      	sub	sp, #12
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	6078      	str	r0, [r7, #4]
 80016a4:	460b      	mov	r3, r1
 80016a6:	70fb      	strb	r3, [r7, #3]
	//Tiến hành dịch biến SlaveAddr lên 1 bit vì bit0 sẽ chứa giá trị thực hiện việc read hoặc write,
	SlaveAddr = SlaveAddr << 1;			//và bit1->7chứa data địa chỉ(ko làm mất data addr khi set bit0)
 80016a8:	78fb      	ldrb	r3, [r7, #3]
 80016aa:	005b      	lsls	r3, r3, #1
 80016ac:	70fb      	strb	r3, [r7, #3]
	SlaveAddr |= 1; 					//thiết lập bit0 = 1 = read(gửi data từ slave->master)
 80016ae:	78fb      	ldrb	r3, [r7, #3]
 80016b0:	f043 0301 	orr.w	r3, r3, #1
 80016b4:	70fb      	strb	r3, [r7, #3]
										//SlaveAddr: Slave Addrress + r/nw bit[0]=1

	pI2Cx->DR = SlaveAddr;				//Cấu hình thanh ghi DR cho processor DR[7:0]
 80016b6:	78fa      	ldrb	r2, [r7, #3]
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	611a      	str	r2, [r3, #16]
}
 80016bc:	bf00      	nop
 80016be:	370c      	adds	r7, #12
 80016c0:	46bd      	mov	sp, r7
 80016c2:	bc80      	pop	{r7}
 80016c4:	4770      	bx	lr

080016c6 <I2C_ClearADDRFlag>:
 * @return      - none
 *
 * @Note        - Đạt đc EVx Condition
 */
static void I2C_ClearADDRFlag(I2C_Handle_t *pI2CHandle)
{
 80016c6:	b580      	push	{r7, lr}
 80016c8:	b084      	sub	sp, #16
 80016ca:	af00      	add	r7, sp, #0
 80016cc:	6078      	str	r0, [r7, #4]
	//Việc đọc(gán) giá trị của thanh ghi SR1 và SR2 sẽ làm xóa cờ ADDR.
	//Việc bỏ qua giá trị của biến tạm là để tránh lãng phí tài nguyên bộ nhớ.

	//New(V224)
	//Check for device mode
	if(pI2CHandle->pI2Cx->SR2 && (1 << I2C_SR2_MSL))
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	699b      	ldr	r3, [r3, #24]
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d01f      	beq.n	8001718 <I2C_ClearADDRFlag+0x52>
	{
		//device is in Master mode
		if(pI2CHandle->TxRxState == I2C_BUSY_IN_RX)
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	7f1b      	ldrb	r3, [r3, #28]
 80016dc:	2b01      	cmp	r3, #1
 80016de:	d112      	bne.n	8001706 <I2C_ClearADDRFlag+0x40>
		{
			if(pI2CHandle->RxLen == 1)
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	699b      	ldr	r3, [r3, #24]
 80016e4:	2b01      	cmp	r3, #1
 80016e6:	d120      	bne.n	800172a <I2C_ClearADDRFlag+0x64>
			{
				//first disable the ack - vô hiệu hóa ack
				I2C_ManageAcking(pI2CHandle->pI2Cx, DISABLE);
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	2100      	movs	r1, #0
 80016ee:	4618      	mov	r0, r3
 80016f0:	f000 f82f 	bl	8001752 <I2C_ManageAcking>
				//vô hiệu hóa vì ở hàm I2C_MasterReceiveData thì ở TH1 len==1 ta đã vô hiệu hóa
				//nhưng lúc đó có thể ko thuộc I2C_BUSY_IN_RX nên cần làm lại

				//clear the ADDR flag (read SR1, read SR2)
				dummyRead = pI2CHandle->pI2Cx->SR1;			//biến tạm lưu value SR1 Register 32bit
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	695b      	ldr	r3, [r3, #20]
 80016fa:	60fb      	str	r3, [r7, #12]
				dummyRead = pI2CHandle->pI2Cx->SR2;			//biến tạm lưu value SR2 Register 32bit
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	699b      	ldr	r3, [r3, #24]
 8001702:	60fb      	str	r3, [r7, #12]
		if(pI2CHandle->TxRxState == I2C_BUSY_IN_RX)
 8001704:	e011      	b.n	800172a <I2C_ClearADDRFlag+0x64>
			}
		}
		else
		{
			//clear the ADDR flag (read SR1, read SR2)
			dummyRead = pI2CHandle->pI2Cx->SR1;			//biến tạm lưu value SR1 Register 32bit
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	695b      	ldr	r3, [r3, #20]
 800170c:	60fb      	str	r3, [r7, #12]
			dummyRead = pI2CHandle->pI2Cx->SR2;			//biến tạm lưu value SR2 Register 32bit
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	699b      	ldr	r3, [r3, #24]
 8001714:	60fb      	str	r3, [r7, #12]
		if(pI2CHandle->TxRxState == I2C_BUSY_IN_RX)
 8001716:	e008      	b.n	800172a <I2C_ClearADDRFlag+0x64>
	}
	else
	{
		//device is in Slave mode
		//clear the ADDR flag (read SR1, read SR2)
		dummyRead = pI2CHandle->pI2Cx->SR1;			//biến tạm lưu value SR1 Register 32bit
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	695b      	ldr	r3, [r3, #20]
 800171e:	60fb      	str	r3, [r7, #12]
		dummyRead = pI2CHandle->pI2Cx->SR2;			//biến tạm lưu value SR2 Register 32bit
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	699b      	ldr	r3, [r3, #24]
 8001726:	60fb      	str	r3, [r7, #12]
		(void)dummyRead;				//Tránh trình biên dịch tối ưu hóa vì biến đã đc sử dụng
	}

}
 8001728:	e000      	b.n	800172c <I2C_ClearADDRFlag+0x66>
		if(pI2CHandle->TxRxState == I2C_BUSY_IN_RX)
 800172a:	bf00      	nop
}
 800172c:	bf00      	nop
 800172e:	3710      	adds	r7, #16
 8001730:	46bd      	mov	sp, r7
 8001732:	bd80      	pop	{r7, pc}

08001734 <I2C_GenerateStopCondition>:
 * @return      - none
 *
 * @Note        - I2C_CR1, bit field STOP[9]
 */
void I2C_GenerateStopCondition(I2C_RegDef_t *pI2Cx)
{
 8001734:	b480      	push	{r7}
 8001736:	b083      	sub	sp, #12
 8001738:	af00      	add	r7, sp, #0
 800173a:	6078      	str	r0, [r7, #4]
	//Set bit field STOP[9] lên high
	pI2Cx->CR1 |= (1 << I2C_CR1_STOP);		//Cấu hình thanh ghi CR1 cho processor
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	601a      	str	r2, [r3, #0]
}
 8001748:	bf00      	nop
 800174a:	370c      	adds	r7, #12
 800174c:	46bd      	mov	sp, r7
 800174e:	bc80      	pop	{r7}
 8001750:	4770      	bx	lr

08001752 <I2C_ManageAcking>:
 * 0: No acknowledge returned
   1: Acknowledge returned after a byte is received (matched address or data)
   Mặc định khi Slave->Master từ Ack=1
 */
void I2C_ManageAcking(I2C_RegDef_t *pI2Cx, uint8_t EnorDi)
{
 8001752:	b480      	push	{r7}
 8001754:	b083      	sub	sp, #12
 8001756:	af00      	add	r7, sp, #0
 8001758:	6078      	str	r0, [r7, #4]
 800175a:	460b      	mov	r3, r1
 800175c:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == I2C_ACK_ENABLE)
 800175e:	78fb      	ldrb	r3, [r7, #3]
 8001760:	2b01      	cmp	r3, #1
 8001762:	d106      	bne.n	8001772 <I2C_ManageAcking+0x20>
	{
		//Enable the Ack(set bit)
		pI2Cx->CR1 |= (1 << I2C_CR1_ACK);	//Cấu hình thanh ghi CR1[ACK] cho processor
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	601a      	str	r2, [r3, #0]
	else
	{
		//Disable the Ack(Clear bit)
		pI2Cx->CR1 &= ~(1 << I2C_CR1_ACK);	//Cấu hình thanh ghi CR1[ACK] cho processor
	}
}
 8001770:	e005      	b.n	800177e <I2C_ManageAcking+0x2c>
		pI2Cx->CR1 &= ~(1 << I2C_CR1_ACK);	//Cấu hình thanh ghi CR1[ACK] cho processor
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	601a      	str	r2, [r3, #0]
}
 800177e:	bf00      	nop
 8001780:	370c      	adds	r7, #12
 8001782:	46bd      	mov	sp, r7
 8001784:	bc80      	pop	{r7}
 8001786:	4770      	bx	lr

08001788 <I2C_PeripheralControl>:
 * @return      - none
 *
 * @Note        - none
 */
void I2C_PeripheralControl(I2C_RegDef_t *pI2Cx, uint8_t EnOrDi)
{
 8001788:	b480      	push	{r7}
 800178a:	b083      	sub	sp, #12
 800178c:	af00      	add	r7, sp, #0
 800178e:	6078      	str	r0, [r7, #4]
 8001790:	460b      	mov	r3, r1
 8001792:	70fb      	strb	r3, [r7, #3]
	if(EnOrDi == ENABLE)
 8001794:	78fb      	ldrb	r3, [r7, #3]
 8001796:	2b01      	cmp	r3, #1
 8001798:	d106      	bne.n	80017a8 <I2C_PeripheralControl+0x20>
	{
		pI2Cx->CR1 |= (1 << I2C_CR1_PE);
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	f043 0201 	orr.w	r2, r3, #1
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	601a      	str	r2, [r3, #0]
		//pI2cBaseAddress->CR1 |= I2C_CR1_PE_Bit_Mask;
	}else
	{
		pI2Cx->CR1 &= ~(1 << 0);
	}
}
 80017a6:	e005      	b.n	80017b4 <I2C_PeripheralControl+0x2c>
		pI2Cx->CR1 &= ~(1 << 0);
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	f023 0201 	bic.w	r2, r3, #1
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	601a      	str	r2, [r3, #0]
}
 80017b4:	bf00      	nop
 80017b6:	370c      	adds	r7, #12
 80017b8:	46bd      	mov	sp, r7
 80017ba:	bc80      	pop	{r7}
 80017bc:	4770      	bx	lr
	...

080017c0 <RCC_GetPCLK1Value>:
 *
 * @Note        - Sử dụng sơ đồ khối liên quan đến xung Clock của System Clock
 * 				- Thanh ghi CFGR thuộc RCC Register đc sử dụng
 */
uint32_t RCC_GetPCLK1Value(void)
{
 80017c0:	b580      	push	{r7, lr}
 80017c2:	b084      	sub	sp, #16
 80017c4:	af00      	add	r7, sp, #0

	uint8_t clksrc,temp,ahbp,abp1p;				//biến xung clock cho khối system clock

	//Kiểm tra xem SWS[3:2] đang có giá trị bit là bao nhiêu, từ đó xác định khối
	//Oscillator đang đc sử dụng là System Clock
	clksrc = (RCC->CFGR >> 2) & 0x3;	//0x03=0011, nghĩa là đọc 2 vị trí bit liền nhau từ vị trí bit số 2
 80017c6:	4b26      	ldr	r3, [pc, #152]	; (8001860 <RCC_GetPCLK1Value+0xa0>)
 80017c8:	689b      	ldr	r3, [r3, #8]
 80017ca:	089b      	lsrs	r3, r3, #2
 80017cc:	b2db      	uxtb	r3, r3
 80017ce:	f003 0303 	and.w	r3, r3, #3
 80017d2:	727b      	strb	r3, [r7, #9]


	//1. Xác định tần số xung clock tổng của System Clock
	if(clksrc == 0)    		 	//HSI Oscillator
 80017d4:	7a7b      	ldrb	r3, [r7, #9]
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d102      	bne.n	80017e0 <RCC_GetPCLK1Value+0x20>
	{
		SystemClk = 16000000;
 80017da:	4b22      	ldr	r3, [pc, #136]	; (8001864 <RCC_GetPCLK1Value+0xa4>)
 80017dc:	60fb      	str	r3, [r7, #12]
 80017de:	e00b      	b.n	80017f8 <RCC_GetPCLK1Value+0x38>
	}
	else if(clksrc == 1)		//HSE Oscillator
 80017e0:	7a7b      	ldrb	r3, [r7, #9]
 80017e2:	2b01      	cmp	r3, #1
 80017e4:	d102      	bne.n	80017ec <RCC_GetPCLK1Value+0x2c>
	{
		SystemClk = 8000000;
 80017e6:	4b20      	ldr	r3, [pc, #128]	; (8001868 <RCC_GetPCLK1Value+0xa8>)
 80017e8:	60fb      	str	r3, [r7, #12]
 80017ea:	e005      	b.n	80017f8 <RCC_GetPCLK1Value+0x38>
	}
	else if(clksrc == 2)		//PLL Oscillator
 80017ec:	7a7b      	ldrb	r3, [r7, #9]
 80017ee:	2b02      	cmp	r3, #2
 80017f0:	d102      	bne.n	80017f8 <RCC_GetPCLK1Value+0x38>
	{
		SystemClk = RCC_GetPLLOutputClock();
 80017f2:	f000 f83f 	bl	8001874 <RCC_GetPLLOutputClock>
 80017f6:	60f8      	str	r0, [r7, #12]
	}

	//2. Xác định bộ chia của AHBP Prescaler, bit field HPRE[7:4] của CFGR register
	temp = ((RCC->CFGR >> 4) & 0xF);	//0xF=1111, nghĩa là đọc 4 vị trí bit liền nhau từ vị trí bit số 4
 80017f8:	4b19      	ldr	r3, [pc, #100]	; (8001860 <RCC_GetPCLK1Value+0xa0>)
 80017fa:	689b      	ldr	r3, [r3, #8]
 80017fc:	091b      	lsrs	r3, r3, #4
 80017fe:	b2db      	uxtb	r3, r3
 8001800:	f003 030f 	and.w	r3, r3, #15
 8001804:	723b      	strb	r3, [r7, #8]
	if(temp < 4)
 8001806:	7a3b      	ldrb	r3, [r7, #8]
 8001808:	2b03      	cmp	r3, #3
 800180a:	d802      	bhi.n	8001812 <RCC_GetPCLK1Value+0x52>
	{
		ahbp = 1;			//Không sử dụng bộ chia
 800180c:	2301      	movs	r3, #1
 800180e:	72fb      	strb	r3, [r7, #11]
 8001810:	e005      	b.n	800181e <RCC_GetPCLK1Value+0x5e>
	}
	else
	{
		//Có sử dụng bộ chia, nếu temp=8 thì 8-8=0, sử dụng bộ chia 2,...
		ahbp = AHB_PreScaler[temp - 8];
 8001812:	7a3b      	ldrb	r3, [r7, #8]
 8001814:	3b08      	subs	r3, #8
 8001816:	4a15      	ldr	r2, [pc, #84]	; (800186c <RCC_GetPCLK1Value+0xac>)
 8001818:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800181c:	72fb      	strb	r3, [r7, #11]
	}

	//3. Xác định bộ chia của APB1 PreScaler,bit ffield PPRE[12:10] của CFGR register
	temp = ((RCC->CFGR >> 10) & 0x7);	//0xF=1111, nghĩa là đọc 3 vị trí bit liền nhau từ vị trí bit số 10
 800181e:	4b10      	ldr	r3, [pc, #64]	; (8001860 <RCC_GetPCLK1Value+0xa0>)
 8001820:	689b      	ldr	r3, [r3, #8]
 8001822:	0a9b      	lsrs	r3, r3, #10
 8001824:	b2db      	uxtb	r3, r3
 8001826:	f003 0307 	and.w	r3, r3, #7
 800182a:	723b      	strb	r3, [r7, #8]
	if(temp < 8)
 800182c:	7a3b      	ldrb	r3, [r7, #8]
 800182e:	2b07      	cmp	r3, #7
 8001830:	d802      	bhi.n	8001838 <RCC_GetPCLK1Value+0x78>
	{
		abp1p = 1;			//Không sử dụng bộ chia
 8001832:	2301      	movs	r3, #1
 8001834:	72bb      	strb	r3, [r7, #10]
 8001836:	e005      	b.n	8001844 <RCC_GetPCLK1Value+0x84>
	}
	else
	{
		//Có sử dụng bộ chia, nếu temp=8 thì 8-8=0, sử dụng bộ chia 2,...
		abp1p = APB1_PreScaler[temp - 4];
 8001838:	7a3b      	ldrb	r3, [r7, #8]
 800183a:	3b04      	subs	r3, #4
 800183c:	4a0c      	ldr	r2, [pc, #48]	; (8001870 <RCC_GetPCLK1Value+0xb0>)
 800183e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001842:	72bb      	strb	r3, [r7, #10]
	}

	//4. Xác định xung PCLK1 dùng cho I2C đc lấy từ từ System Clock
	pclk1 = (SystemClk / ahbp) / abp1p;
 8001844:	7afb      	ldrb	r3, [r7, #11]
 8001846:	68fa      	ldr	r2, [r7, #12]
 8001848:	fbb2 f2f3 	udiv	r2, r2, r3
 800184c:	7abb      	ldrb	r3, [r7, #10]
 800184e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001852:	607b      	str	r3, [r7, #4]

	return pclk1;
 8001854:	687b      	ldr	r3, [r7, #4]
}
 8001856:	4618      	mov	r0, r3
 8001858:	3710      	adds	r7, #16
 800185a:	46bd      	mov	sp, r7
 800185c:	bd80      	pop	{r7, pc}
 800185e:	bf00      	nop
 8001860:	40023800 	.word	0x40023800
 8001864:	00f42400 	.word	0x00f42400
 8001868:	007a1200 	.word	0x007a1200
 800186c:	20000000 	.word	0x20000000
 8001870:	20000010 	.word	0x20000010

08001874 <RCC_GetPLLOutputClock>:
 *
 * @Note        - Không sử dụng xung clock dạng PLL trong khóa học

 */
uint32_t RCC_GetPLLOutputClock(void)
{
 8001874:	b480      	push	{r7}
 8001876:	af00      	add	r7, sp, #0
	return 0;
 8001878:	2300      	movs	r3, #0
}
 800187a:	4618      	mov	r0, r3
 800187c:	46bd      	mov	sp, r7
 800187e:	bc80      	pop	{r7}
 8001880:	4770      	bx	lr
	...

08001884 <std>:
 8001884:	2300      	movs	r3, #0
 8001886:	b510      	push	{r4, lr}
 8001888:	4604      	mov	r4, r0
 800188a:	e9c0 3300 	strd	r3, r3, [r0]
 800188e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8001892:	6083      	str	r3, [r0, #8]
 8001894:	8181      	strh	r1, [r0, #12]
 8001896:	6643      	str	r3, [r0, #100]	; 0x64
 8001898:	81c2      	strh	r2, [r0, #14]
 800189a:	6183      	str	r3, [r0, #24]
 800189c:	4619      	mov	r1, r3
 800189e:	2208      	movs	r2, #8
 80018a0:	305c      	adds	r0, #92	; 0x5c
 80018a2:	f000 f9d3 	bl	8001c4c <memset>
 80018a6:	4b05      	ldr	r3, [pc, #20]	; (80018bc <std+0x38>)
 80018a8:	6263      	str	r3, [r4, #36]	; 0x24
 80018aa:	4b05      	ldr	r3, [pc, #20]	; (80018c0 <std+0x3c>)
 80018ac:	62a3      	str	r3, [r4, #40]	; 0x28
 80018ae:	4b05      	ldr	r3, [pc, #20]	; (80018c4 <std+0x40>)
 80018b0:	62e3      	str	r3, [r4, #44]	; 0x2c
 80018b2:	4b05      	ldr	r3, [pc, #20]	; (80018c8 <std+0x44>)
 80018b4:	6224      	str	r4, [r4, #32]
 80018b6:	6323      	str	r3, [r4, #48]	; 0x30
 80018b8:	bd10      	pop	{r4, pc}
 80018ba:	bf00      	nop
 80018bc:	08001a9d 	.word	0x08001a9d
 80018c0:	08001abf 	.word	0x08001abf
 80018c4:	08001af7 	.word	0x08001af7
 80018c8:	08001b1b 	.word	0x08001b1b

080018cc <stdio_exit_handler>:
 80018cc:	4a02      	ldr	r2, [pc, #8]	; (80018d8 <stdio_exit_handler+0xc>)
 80018ce:	4903      	ldr	r1, [pc, #12]	; (80018dc <stdio_exit_handler+0x10>)
 80018d0:	4803      	ldr	r0, [pc, #12]	; (80018e0 <stdio_exit_handler+0x14>)
 80018d2:	f000 b869 	b.w	80019a8 <_fwalk_sglue>
 80018d6:	bf00      	nop
 80018d8:	20000018 	.word	0x20000018
 80018dc:	08002031 	.word	0x08002031
 80018e0:	20000024 	.word	0x20000024

080018e4 <cleanup_stdio>:
 80018e4:	6841      	ldr	r1, [r0, #4]
 80018e6:	4b0c      	ldr	r3, [pc, #48]	; (8001918 <cleanup_stdio+0x34>)
 80018e8:	4299      	cmp	r1, r3
 80018ea:	b510      	push	{r4, lr}
 80018ec:	4604      	mov	r4, r0
 80018ee:	d001      	beq.n	80018f4 <cleanup_stdio+0x10>
 80018f0:	f000 fb9e 	bl	8002030 <_fflush_r>
 80018f4:	68a1      	ldr	r1, [r4, #8]
 80018f6:	4b09      	ldr	r3, [pc, #36]	; (800191c <cleanup_stdio+0x38>)
 80018f8:	4299      	cmp	r1, r3
 80018fa:	d002      	beq.n	8001902 <cleanup_stdio+0x1e>
 80018fc:	4620      	mov	r0, r4
 80018fe:	f000 fb97 	bl	8002030 <_fflush_r>
 8001902:	68e1      	ldr	r1, [r4, #12]
 8001904:	4b06      	ldr	r3, [pc, #24]	; (8001920 <cleanup_stdio+0x3c>)
 8001906:	4299      	cmp	r1, r3
 8001908:	d004      	beq.n	8001914 <cleanup_stdio+0x30>
 800190a:	4620      	mov	r0, r4
 800190c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001910:	f000 bb8e 	b.w	8002030 <_fflush_r>
 8001914:	bd10      	pop	{r4, pc}
 8001916:	bf00      	nop
 8001918:	200000d4 	.word	0x200000d4
 800191c:	2000013c 	.word	0x2000013c
 8001920:	200001a4 	.word	0x200001a4

08001924 <global_stdio_init.part.0>:
 8001924:	b510      	push	{r4, lr}
 8001926:	4b0b      	ldr	r3, [pc, #44]	; (8001954 <global_stdio_init.part.0+0x30>)
 8001928:	4c0b      	ldr	r4, [pc, #44]	; (8001958 <global_stdio_init.part.0+0x34>)
 800192a:	4a0c      	ldr	r2, [pc, #48]	; (800195c <global_stdio_init.part.0+0x38>)
 800192c:	601a      	str	r2, [r3, #0]
 800192e:	4620      	mov	r0, r4
 8001930:	2200      	movs	r2, #0
 8001932:	2104      	movs	r1, #4
 8001934:	f7ff ffa6 	bl	8001884 <std>
 8001938:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800193c:	2201      	movs	r2, #1
 800193e:	2109      	movs	r1, #9
 8001940:	f7ff ffa0 	bl	8001884 <std>
 8001944:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8001948:	2202      	movs	r2, #2
 800194a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800194e:	2112      	movs	r1, #18
 8001950:	f7ff bf98 	b.w	8001884 <std>
 8001954:	2000020c 	.word	0x2000020c
 8001958:	200000d4 	.word	0x200000d4
 800195c:	080018cd 	.word	0x080018cd

08001960 <__sfp_lock_acquire>:
 8001960:	4801      	ldr	r0, [pc, #4]	; (8001968 <__sfp_lock_acquire+0x8>)
 8001962:	f000 b9eb 	b.w	8001d3c <__retarget_lock_acquire_recursive>
 8001966:	bf00      	nop
 8001968:	20000215 	.word	0x20000215

0800196c <__sfp_lock_release>:
 800196c:	4801      	ldr	r0, [pc, #4]	; (8001974 <__sfp_lock_release+0x8>)
 800196e:	f000 b9e6 	b.w	8001d3e <__retarget_lock_release_recursive>
 8001972:	bf00      	nop
 8001974:	20000215 	.word	0x20000215

08001978 <__sinit>:
 8001978:	b510      	push	{r4, lr}
 800197a:	4604      	mov	r4, r0
 800197c:	f7ff fff0 	bl	8001960 <__sfp_lock_acquire>
 8001980:	6a23      	ldr	r3, [r4, #32]
 8001982:	b11b      	cbz	r3, 800198c <__sinit+0x14>
 8001984:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001988:	f7ff bff0 	b.w	800196c <__sfp_lock_release>
 800198c:	4b04      	ldr	r3, [pc, #16]	; (80019a0 <__sinit+0x28>)
 800198e:	6223      	str	r3, [r4, #32]
 8001990:	4b04      	ldr	r3, [pc, #16]	; (80019a4 <__sinit+0x2c>)
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	2b00      	cmp	r3, #0
 8001996:	d1f5      	bne.n	8001984 <__sinit+0xc>
 8001998:	f7ff ffc4 	bl	8001924 <global_stdio_init.part.0>
 800199c:	e7f2      	b.n	8001984 <__sinit+0xc>
 800199e:	bf00      	nop
 80019a0:	080018e5 	.word	0x080018e5
 80019a4:	2000020c 	.word	0x2000020c

080019a8 <_fwalk_sglue>:
 80019a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80019ac:	4607      	mov	r7, r0
 80019ae:	4688      	mov	r8, r1
 80019b0:	4614      	mov	r4, r2
 80019b2:	2600      	movs	r6, #0
 80019b4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80019b8:	f1b9 0901 	subs.w	r9, r9, #1
 80019bc:	d505      	bpl.n	80019ca <_fwalk_sglue+0x22>
 80019be:	6824      	ldr	r4, [r4, #0]
 80019c0:	2c00      	cmp	r4, #0
 80019c2:	d1f7      	bne.n	80019b4 <_fwalk_sglue+0xc>
 80019c4:	4630      	mov	r0, r6
 80019c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80019ca:	89ab      	ldrh	r3, [r5, #12]
 80019cc:	2b01      	cmp	r3, #1
 80019ce:	d907      	bls.n	80019e0 <_fwalk_sglue+0x38>
 80019d0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80019d4:	3301      	adds	r3, #1
 80019d6:	d003      	beq.n	80019e0 <_fwalk_sglue+0x38>
 80019d8:	4629      	mov	r1, r5
 80019da:	4638      	mov	r0, r7
 80019dc:	47c0      	blx	r8
 80019de:	4306      	orrs	r6, r0
 80019e0:	3568      	adds	r5, #104	; 0x68
 80019e2:	e7e9      	b.n	80019b8 <_fwalk_sglue+0x10>

080019e4 <_puts_r>:
 80019e4:	6a03      	ldr	r3, [r0, #32]
 80019e6:	b570      	push	{r4, r5, r6, lr}
 80019e8:	6884      	ldr	r4, [r0, #8]
 80019ea:	4605      	mov	r5, r0
 80019ec:	460e      	mov	r6, r1
 80019ee:	b90b      	cbnz	r3, 80019f4 <_puts_r+0x10>
 80019f0:	f7ff ffc2 	bl	8001978 <__sinit>
 80019f4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80019f6:	07db      	lsls	r3, r3, #31
 80019f8:	d405      	bmi.n	8001a06 <_puts_r+0x22>
 80019fa:	89a3      	ldrh	r3, [r4, #12]
 80019fc:	0598      	lsls	r0, r3, #22
 80019fe:	d402      	bmi.n	8001a06 <_puts_r+0x22>
 8001a00:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001a02:	f000 f99b 	bl	8001d3c <__retarget_lock_acquire_recursive>
 8001a06:	89a3      	ldrh	r3, [r4, #12]
 8001a08:	0719      	lsls	r1, r3, #28
 8001a0a:	d513      	bpl.n	8001a34 <_puts_r+0x50>
 8001a0c:	6923      	ldr	r3, [r4, #16]
 8001a0e:	b18b      	cbz	r3, 8001a34 <_puts_r+0x50>
 8001a10:	3e01      	subs	r6, #1
 8001a12:	68a3      	ldr	r3, [r4, #8]
 8001a14:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8001a18:	3b01      	subs	r3, #1
 8001a1a:	60a3      	str	r3, [r4, #8]
 8001a1c:	b9e9      	cbnz	r1, 8001a5a <_puts_r+0x76>
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	da2e      	bge.n	8001a80 <_puts_r+0x9c>
 8001a22:	4622      	mov	r2, r4
 8001a24:	210a      	movs	r1, #10
 8001a26:	4628      	mov	r0, r5
 8001a28:	f000 f87b 	bl	8001b22 <__swbuf_r>
 8001a2c:	3001      	adds	r0, #1
 8001a2e:	d007      	beq.n	8001a40 <_puts_r+0x5c>
 8001a30:	250a      	movs	r5, #10
 8001a32:	e007      	b.n	8001a44 <_puts_r+0x60>
 8001a34:	4621      	mov	r1, r4
 8001a36:	4628      	mov	r0, r5
 8001a38:	f000 f8b0 	bl	8001b9c <__swsetup_r>
 8001a3c:	2800      	cmp	r0, #0
 8001a3e:	d0e7      	beq.n	8001a10 <_puts_r+0x2c>
 8001a40:	f04f 35ff 	mov.w	r5, #4294967295
 8001a44:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8001a46:	07da      	lsls	r2, r3, #31
 8001a48:	d405      	bmi.n	8001a56 <_puts_r+0x72>
 8001a4a:	89a3      	ldrh	r3, [r4, #12]
 8001a4c:	059b      	lsls	r3, r3, #22
 8001a4e:	d402      	bmi.n	8001a56 <_puts_r+0x72>
 8001a50:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001a52:	f000 f974 	bl	8001d3e <__retarget_lock_release_recursive>
 8001a56:	4628      	mov	r0, r5
 8001a58:	bd70      	pop	{r4, r5, r6, pc}
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	da04      	bge.n	8001a68 <_puts_r+0x84>
 8001a5e:	69a2      	ldr	r2, [r4, #24]
 8001a60:	429a      	cmp	r2, r3
 8001a62:	dc06      	bgt.n	8001a72 <_puts_r+0x8e>
 8001a64:	290a      	cmp	r1, #10
 8001a66:	d004      	beq.n	8001a72 <_puts_r+0x8e>
 8001a68:	6823      	ldr	r3, [r4, #0]
 8001a6a:	1c5a      	adds	r2, r3, #1
 8001a6c:	6022      	str	r2, [r4, #0]
 8001a6e:	7019      	strb	r1, [r3, #0]
 8001a70:	e7cf      	b.n	8001a12 <_puts_r+0x2e>
 8001a72:	4622      	mov	r2, r4
 8001a74:	4628      	mov	r0, r5
 8001a76:	f000 f854 	bl	8001b22 <__swbuf_r>
 8001a7a:	3001      	adds	r0, #1
 8001a7c:	d1c9      	bne.n	8001a12 <_puts_r+0x2e>
 8001a7e:	e7df      	b.n	8001a40 <_puts_r+0x5c>
 8001a80:	6823      	ldr	r3, [r4, #0]
 8001a82:	250a      	movs	r5, #10
 8001a84:	1c5a      	adds	r2, r3, #1
 8001a86:	6022      	str	r2, [r4, #0]
 8001a88:	701d      	strb	r5, [r3, #0]
 8001a8a:	e7db      	b.n	8001a44 <_puts_r+0x60>

08001a8c <puts>:
 8001a8c:	4b02      	ldr	r3, [pc, #8]	; (8001a98 <puts+0xc>)
 8001a8e:	4601      	mov	r1, r0
 8001a90:	6818      	ldr	r0, [r3, #0]
 8001a92:	f7ff bfa7 	b.w	80019e4 <_puts_r>
 8001a96:	bf00      	nop
 8001a98:	20000070 	.word	0x20000070

08001a9c <__sread>:
 8001a9c:	b510      	push	{r4, lr}
 8001a9e:	460c      	mov	r4, r1
 8001aa0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001aa4:	f000 f8fc 	bl	8001ca0 <_read_r>
 8001aa8:	2800      	cmp	r0, #0
 8001aaa:	bfab      	itete	ge
 8001aac:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8001aae:	89a3      	ldrhlt	r3, [r4, #12]
 8001ab0:	181b      	addge	r3, r3, r0
 8001ab2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8001ab6:	bfac      	ite	ge
 8001ab8:	6563      	strge	r3, [r4, #84]	; 0x54
 8001aba:	81a3      	strhlt	r3, [r4, #12]
 8001abc:	bd10      	pop	{r4, pc}

08001abe <__swrite>:
 8001abe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001ac2:	461f      	mov	r7, r3
 8001ac4:	898b      	ldrh	r3, [r1, #12]
 8001ac6:	05db      	lsls	r3, r3, #23
 8001ac8:	4605      	mov	r5, r0
 8001aca:	460c      	mov	r4, r1
 8001acc:	4616      	mov	r6, r2
 8001ace:	d505      	bpl.n	8001adc <__swrite+0x1e>
 8001ad0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001ad4:	2302      	movs	r3, #2
 8001ad6:	2200      	movs	r2, #0
 8001ad8:	f000 f8d0 	bl	8001c7c <_lseek_r>
 8001adc:	89a3      	ldrh	r3, [r4, #12]
 8001ade:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001ae2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001ae6:	81a3      	strh	r3, [r4, #12]
 8001ae8:	4632      	mov	r2, r6
 8001aea:	463b      	mov	r3, r7
 8001aec:	4628      	mov	r0, r5
 8001aee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8001af2:	f000 b8e7 	b.w	8001cc4 <_write_r>

08001af6 <__sseek>:
 8001af6:	b510      	push	{r4, lr}
 8001af8:	460c      	mov	r4, r1
 8001afa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001afe:	f000 f8bd 	bl	8001c7c <_lseek_r>
 8001b02:	1c43      	adds	r3, r0, #1
 8001b04:	89a3      	ldrh	r3, [r4, #12]
 8001b06:	bf15      	itete	ne
 8001b08:	6560      	strne	r0, [r4, #84]	; 0x54
 8001b0a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8001b0e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8001b12:	81a3      	strheq	r3, [r4, #12]
 8001b14:	bf18      	it	ne
 8001b16:	81a3      	strhne	r3, [r4, #12]
 8001b18:	bd10      	pop	{r4, pc}

08001b1a <__sclose>:
 8001b1a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001b1e:	f000 b89d 	b.w	8001c5c <_close_r>

08001b22 <__swbuf_r>:
 8001b22:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001b24:	460e      	mov	r6, r1
 8001b26:	4614      	mov	r4, r2
 8001b28:	4605      	mov	r5, r0
 8001b2a:	b118      	cbz	r0, 8001b34 <__swbuf_r+0x12>
 8001b2c:	6a03      	ldr	r3, [r0, #32]
 8001b2e:	b90b      	cbnz	r3, 8001b34 <__swbuf_r+0x12>
 8001b30:	f7ff ff22 	bl	8001978 <__sinit>
 8001b34:	69a3      	ldr	r3, [r4, #24]
 8001b36:	60a3      	str	r3, [r4, #8]
 8001b38:	89a3      	ldrh	r3, [r4, #12]
 8001b3a:	071a      	lsls	r2, r3, #28
 8001b3c:	d525      	bpl.n	8001b8a <__swbuf_r+0x68>
 8001b3e:	6923      	ldr	r3, [r4, #16]
 8001b40:	b31b      	cbz	r3, 8001b8a <__swbuf_r+0x68>
 8001b42:	6823      	ldr	r3, [r4, #0]
 8001b44:	6922      	ldr	r2, [r4, #16]
 8001b46:	1a98      	subs	r0, r3, r2
 8001b48:	6963      	ldr	r3, [r4, #20]
 8001b4a:	b2f6      	uxtb	r6, r6
 8001b4c:	4283      	cmp	r3, r0
 8001b4e:	4637      	mov	r7, r6
 8001b50:	dc04      	bgt.n	8001b5c <__swbuf_r+0x3a>
 8001b52:	4621      	mov	r1, r4
 8001b54:	4628      	mov	r0, r5
 8001b56:	f000 fa6b 	bl	8002030 <_fflush_r>
 8001b5a:	b9e0      	cbnz	r0, 8001b96 <__swbuf_r+0x74>
 8001b5c:	68a3      	ldr	r3, [r4, #8]
 8001b5e:	3b01      	subs	r3, #1
 8001b60:	60a3      	str	r3, [r4, #8]
 8001b62:	6823      	ldr	r3, [r4, #0]
 8001b64:	1c5a      	adds	r2, r3, #1
 8001b66:	6022      	str	r2, [r4, #0]
 8001b68:	701e      	strb	r6, [r3, #0]
 8001b6a:	6962      	ldr	r2, [r4, #20]
 8001b6c:	1c43      	adds	r3, r0, #1
 8001b6e:	429a      	cmp	r2, r3
 8001b70:	d004      	beq.n	8001b7c <__swbuf_r+0x5a>
 8001b72:	89a3      	ldrh	r3, [r4, #12]
 8001b74:	07db      	lsls	r3, r3, #31
 8001b76:	d506      	bpl.n	8001b86 <__swbuf_r+0x64>
 8001b78:	2e0a      	cmp	r6, #10
 8001b7a:	d104      	bne.n	8001b86 <__swbuf_r+0x64>
 8001b7c:	4621      	mov	r1, r4
 8001b7e:	4628      	mov	r0, r5
 8001b80:	f000 fa56 	bl	8002030 <_fflush_r>
 8001b84:	b938      	cbnz	r0, 8001b96 <__swbuf_r+0x74>
 8001b86:	4638      	mov	r0, r7
 8001b88:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001b8a:	4621      	mov	r1, r4
 8001b8c:	4628      	mov	r0, r5
 8001b8e:	f000 f805 	bl	8001b9c <__swsetup_r>
 8001b92:	2800      	cmp	r0, #0
 8001b94:	d0d5      	beq.n	8001b42 <__swbuf_r+0x20>
 8001b96:	f04f 37ff 	mov.w	r7, #4294967295
 8001b9a:	e7f4      	b.n	8001b86 <__swbuf_r+0x64>

08001b9c <__swsetup_r>:
 8001b9c:	b538      	push	{r3, r4, r5, lr}
 8001b9e:	4b2a      	ldr	r3, [pc, #168]	; (8001c48 <__swsetup_r+0xac>)
 8001ba0:	4605      	mov	r5, r0
 8001ba2:	6818      	ldr	r0, [r3, #0]
 8001ba4:	460c      	mov	r4, r1
 8001ba6:	b118      	cbz	r0, 8001bb0 <__swsetup_r+0x14>
 8001ba8:	6a03      	ldr	r3, [r0, #32]
 8001baa:	b90b      	cbnz	r3, 8001bb0 <__swsetup_r+0x14>
 8001bac:	f7ff fee4 	bl	8001978 <__sinit>
 8001bb0:	89a3      	ldrh	r3, [r4, #12]
 8001bb2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8001bb6:	0718      	lsls	r0, r3, #28
 8001bb8:	d422      	bmi.n	8001c00 <__swsetup_r+0x64>
 8001bba:	06d9      	lsls	r1, r3, #27
 8001bbc:	d407      	bmi.n	8001bce <__swsetup_r+0x32>
 8001bbe:	2309      	movs	r3, #9
 8001bc0:	602b      	str	r3, [r5, #0]
 8001bc2:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8001bc6:	81a3      	strh	r3, [r4, #12]
 8001bc8:	f04f 30ff 	mov.w	r0, #4294967295
 8001bcc:	e034      	b.n	8001c38 <__swsetup_r+0x9c>
 8001bce:	0758      	lsls	r0, r3, #29
 8001bd0:	d512      	bpl.n	8001bf8 <__swsetup_r+0x5c>
 8001bd2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001bd4:	b141      	cbz	r1, 8001be8 <__swsetup_r+0x4c>
 8001bd6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8001bda:	4299      	cmp	r1, r3
 8001bdc:	d002      	beq.n	8001be4 <__swsetup_r+0x48>
 8001bde:	4628      	mov	r0, r5
 8001be0:	f000 f8ae 	bl	8001d40 <_free_r>
 8001be4:	2300      	movs	r3, #0
 8001be6:	6363      	str	r3, [r4, #52]	; 0x34
 8001be8:	89a3      	ldrh	r3, [r4, #12]
 8001bea:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8001bee:	81a3      	strh	r3, [r4, #12]
 8001bf0:	2300      	movs	r3, #0
 8001bf2:	6063      	str	r3, [r4, #4]
 8001bf4:	6923      	ldr	r3, [r4, #16]
 8001bf6:	6023      	str	r3, [r4, #0]
 8001bf8:	89a3      	ldrh	r3, [r4, #12]
 8001bfa:	f043 0308 	orr.w	r3, r3, #8
 8001bfe:	81a3      	strh	r3, [r4, #12]
 8001c00:	6923      	ldr	r3, [r4, #16]
 8001c02:	b94b      	cbnz	r3, 8001c18 <__swsetup_r+0x7c>
 8001c04:	89a3      	ldrh	r3, [r4, #12]
 8001c06:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8001c0a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001c0e:	d003      	beq.n	8001c18 <__swsetup_r+0x7c>
 8001c10:	4621      	mov	r1, r4
 8001c12:	4628      	mov	r0, r5
 8001c14:	f000 fa5a 	bl	80020cc <__smakebuf_r>
 8001c18:	89a0      	ldrh	r0, [r4, #12]
 8001c1a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8001c1e:	f010 0301 	ands.w	r3, r0, #1
 8001c22:	d00a      	beq.n	8001c3a <__swsetup_r+0x9e>
 8001c24:	2300      	movs	r3, #0
 8001c26:	60a3      	str	r3, [r4, #8]
 8001c28:	6963      	ldr	r3, [r4, #20]
 8001c2a:	425b      	negs	r3, r3
 8001c2c:	61a3      	str	r3, [r4, #24]
 8001c2e:	6923      	ldr	r3, [r4, #16]
 8001c30:	b943      	cbnz	r3, 8001c44 <__swsetup_r+0xa8>
 8001c32:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8001c36:	d1c4      	bne.n	8001bc2 <__swsetup_r+0x26>
 8001c38:	bd38      	pop	{r3, r4, r5, pc}
 8001c3a:	0781      	lsls	r1, r0, #30
 8001c3c:	bf58      	it	pl
 8001c3e:	6963      	ldrpl	r3, [r4, #20]
 8001c40:	60a3      	str	r3, [r4, #8]
 8001c42:	e7f4      	b.n	8001c2e <__swsetup_r+0x92>
 8001c44:	2000      	movs	r0, #0
 8001c46:	e7f7      	b.n	8001c38 <__swsetup_r+0x9c>
 8001c48:	20000070 	.word	0x20000070

08001c4c <memset>:
 8001c4c:	4402      	add	r2, r0
 8001c4e:	4603      	mov	r3, r0
 8001c50:	4293      	cmp	r3, r2
 8001c52:	d100      	bne.n	8001c56 <memset+0xa>
 8001c54:	4770      	bx	lr
 8001c56:	f803 1b01 	strb.w	r1, [r3], #1
 8001c5a:	e7f9      	b.n	8001c50 <memset+0x4>

08001c5c <_close_r>:
 8001c5c:	b538      	push	{r3, r4, r5, lr}
 8001c5e:	4d06      	ldr	r5, [pc, #24]	; (8001c78 <_close_r+0x1c>)
 8001c60:	2300      	movs	r3, #0
 8001c62:	4604      	mov	r4, r0
 8001c64:	4608      	mov	r0, r1
 8001c66:	602b      	str	r3, [r5, #0]
 8001c68:	f7fe fcc1 	bl	80005ee <_close>
 8001c6c:	1c43      	adds	r3, r0, #1
 8001c6e:	d102      	bne.n	8001c76 <_close_r+0x1a>
 8001c70:	682b      	ldr	r3, [r5, #0]
 8001c72:	b103      	cbz	r3, 8001c76 <_close_r+0x1a>
 8001c74:	6023      	str	r3, [r4, #0]
 8001c76:	bd38      	pop	{r3, r4, r5, pc}
 8001c78:	20000210 	.word	0x20000210

08001c7c <_lseek_r>:
 8001c7c:	b538      	push	{r3, r4, r5, lr}
 8001c7e:	4d07      	ldr	r5, [pc, #28]	; (8001c9c <_lseek_r+0x20>)
 8001c80:	4604      	mov	r4, r0
 8001c82:	4608      	mov	r0, r1
 8001c84:	4611      	mov	r1, r2
 8001c86:	2200      	movs	r2, #0
 8001c88:	602a      	str	r2, [r5, #0]
 8001c8a:	461a      	mov	r2, r3
 8001c8c:	f7fe fcd3 	bl	8000636 <_lseek>
 8001c90:	1c43      	adds	r3, r0, #1
 8001c92:	d102      	bne.n	8001c9a <_lseek_r+0x1e>
 8001c94:	682b      	ldr	r3, [r5, #0]
 8001c96:	b103      	cbz	r3, 8001c9a <_lseek_r+0x1e>
 8001c98:	6023      	str	r3, [r4, #0]
 8001c9a:	bd38      	pop	{r3, r4, r5, pc}
 8001c9c:	20000210 	.word	0x20000210

08001ca0 <_read_r>:
 8001ca0:	b538      	push	{r3, r4, r5, lr}
 8001ca2:	4d07      	ldr	r5, [pc, #28]	; (8001cc0 <_read_r+0x20>)
 8001ca4:	4604      	mov	r4, r0
 8001ca6:	4608      	mov	r0, r1
 8001ca8:	4611      	mov	r1, r2
 8001caa:	2200      	movs	r2, #0
 8001cac:	602a      	str	r2, [r5, #0]
 8001cae:	461a      	mov	r2, r3
 8001cb0:	f7fe fc64 	bl	800057c <_read>
 8001cb4:	1c43      	adds	r3, r0, #1
 8001cb6:	d102      	bne.n	8001cbe <_read_r+0x1e>
 8001cb8:	682b      	ldr	r3, [r5, #0]
 8001cba:	b103      	cbz	r3, 8001cbe <_read_r+0x1e>
 8001cbc:	6023      	str	r3, [r4, #0]
 8001cbe:	bd38      	pop	{r3, r4, r5, pc}
 8001cc0:	20000210 	.word	0x20000210

08001cc4 <_write_r>:
 8001cc4:	b538      	push	{r3, r4, r5, lr}
 8001cc6:	4d07      	ldr	r5, [pc, #28]	; (8001ce4 <_write_r+0x20>)
 8001cc8:	4604      	mov	r4, r0
 8001cca:	4608      	mov	r0, r1
 8001ccc:	4611      	mov	r1, r2
 8001cce:	2200      	movs	r2, #0
 8001cd0:	602a      	str	r2, [r5, #0]
 8001cd2:	461a      	mov	r2, r3
 8001cd4:	f7fe fc6f 	bl	80005b6 <_write>
 8001cd8:	1c43      	adds	r3, r0, #1
 8001cda:	d102      	bne.n	8001ce2 <_write_r+0x1e>
 8001cdc:	682b      	ldr	r3, [r5, #0]
 8001cde:	b103      	cbz	r3, 8001ce2 <_write_r+0x1e>
 8001ce0:	6023      	str	r3, [r4, #0]
 8001ce2:	bd38      	pop	{r3, r4, r5, pc}
 8001ce4:	20000210 	.word	0x20000210

08001ce8 <__errno>:
 8001ce8:	4b01      	ldr	r3, [pc, #4]	; (8001cf0 <__errno+0x8>)
 8001cea:	6818      	ldr	r0, [r3, #0]
 8001cec:	4770      	bx	lr
 8001cee:	bf00      	nop
 8001cf0:	20000070 	.word	0x20000070

08001cf4 <__libc_init_array>:
 8001cf4:	b570      	push	{r4, r5, r6, lr}
 8001cf6:	4d0d      	ldr	r5, [pc, #52]	; (8001d2c <__libc_init_array+0x38>)
 8001cf8:	4c0d      	ldr	r4, [pc, #52]	; (8001d30 <__libc_init_array+0x3c>)
 8001cfa:	1b64      	subs	r4, r4, r5
 8001cfc:	10a4      	asrs	r4, r4, #2
 8001cfe:	2600      	movs	r6, #0
 8001d00:	42a6      	cmp	r6, r4
 8001d02:	d109      	bne.n	8001d18 <__libc_init_array+0x24>
 8001d04:	4d0b      	ldr	r5, [pc, #44]	; (8001d34 <__libc_init_array+0x40>)
 8001d06:	4c0c      	ldr	r4, [pc, #48]	; (8001d38 <__libc_init_array+0x44>)
 8001d08:	f000 fa4e 	bl	80021a8 <_init>
 8001d0c:	1b64      	subs	r4, r4, r5
 8001d0e:	10a4      	asrs	r4, r4, #2
 8001d10:	2600      	movs	r6, #0
 8001d12:	42a6      	cmp	r6, r4
 8001d14:	d105      	bne.n	8001d22 <__libc_init_array+0x2e>
 8001d16:	bd70      	pop	{r4, r5, r6, pc}
 8001d18:	f855 3b04 	ldr.w	r3, [r5], #4
 8001d1c:	4798      	blx	r3
 8001d1e:	3601      	adds	r6, #1
 8001d20:	e7ee      	b.n	8001d00 <__libc_init_array+0xc>
 8001d22:	f855 3b04 	ldr.w	r3, [r5], #4
 8001d26:	4798      	blx	r3
 8001d28:	3601      	adds	r6, #1
 8001d2a:	e7f2      	b.n	8001d12 <__libc_init_array+0x1e>
 8001d2c:	0800224c 	.word	0x0800224c
 8001d30:	0800224c 	.word	0x0800224c
 8001d34:	0800224c 	.word	0x0800224c
 8001d38:	08002250 	.word	0x08002250

08001d3c <__retarget_lock_acquire_recursive>:
 8001d3c:	4770      	bx	lr

08001d3e <__retarget_lock_release_recursive>:
 8001d3e:	4770      	bx	lr

08001d40 <_free_r>:
 8001d40:	b538      	push	{r3, r4, r5, lr}
 8001d42:	4605      	mov	r5, r0
 8001d44:	2900      	cmp	r1, #0
 8001d46:	d041      	beq.n	8001dcc <_free_r+0x8c>
 8001d48:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001d4c:	1f0c      	subs	r4, r1, #4
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	bfb8      	it	lt
 8001d52:	18e4      	addlt	r4, r4, r3
 8001d54:	f000 f8de 	bl	8001f14 <__malloc_lock>
 8001d58:	4a1d      	ldr	r2, [pc, #116]	; (8001dd0 <_free_r+0x90>)
 8001d5a:	6813      	ldr	r3, [r2, #0]
 8001d5c:	b933      	cbnz	r3, 8001d6c <_free_r+0x2c>
 8001d5e:	6063      	str	r3, [r4, #4]
 8001d60:	6014      	str	r4, [r2, #0]
 8001d62:	4628      	mov	r0, r5
 8001d64:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001d68:	f000 b8da 	b.w	8001f20 <__malloc_unlock>
 8001d6c:	42a3      	cmp	r3, r4
 8001d6e:	d908      	bls.n	8001d82 <_free_r+0x42>
 8001d70:	6820      	ldr	r0, [r4, #0]
 8001d72:	1821      	adds	r1, r4, r0
 8001d74:	428b      	cmp	r3, r1
 8001d76:	bf01      	itttt	eq
 8001d78:	6819      	ldreq	r1, [r3, #0]
 8001d7a:	685b      	ldreq	r3, [r3, #4]
 8001d7c:	1809      	addeq	r1, r1, r0
 8001d7e:	6021      	streq	r1, [r4, #0]
 8001d80:	e7ed      	b.n	8001d5e <_free_r+0x1e>
 8001d82:	461a      	mov	r2, r3
 8001d84:	685b      	ldr	r3, [r3, #4]
 8001d86:	b10b      	cbz	r3, 8001d8c <_free_r+0x4c>
 8001d88:	42a3      	cmp	r3, r4
 8001d8a:	d9fa      	bls.n	8001d82 <_free_r+0x42>
 8001d8c:	6811      	ldr	r1, [r2, #0]
 8001d8e:	1850      	adds	r0, r2, r1
 8001d90:	42a0      	cmp	r0, r4
 8001d92:	d10b      	bne.n	8001dac <_free_r+0x6c>
 8001d94:	6820      	ldr	r0, [r4, #0]
 8001d96:	4401      	add	r1, r0
 8001d98:	1850      	adds	r0, r2, r1
 8001d9a:	4283      	cmp	r3, r0
 8001d9c:	6011      	str	r1, [r2, #0]
 8001d9e:	d1e0      	bne.n	8001d62 <_free_r+0x22>
 8001da0:	6818      	ldr	r0, [r3, #0]
 8001da2:	685b      	ldr	r3, [r3, #4]
 8001da4:	6053      	str	r3, [r2, #4]
 8001da6:	4408      	add	r0, r1
 8001da8:	6010      	str	r0, [r2, #0]
 8001daa:	e7da      	b.n	8001d62 <_free_r+0x22>
 8001dac:	d902      	bls.n	8001db4 <_free_r+0x74>
 8001dae:	230c      	movs	r3, #12
 8001db0:	602b      	str	r3, [r5, #0]
 8001db2:	e7d6      	b.n	8001d62 <_free_r+0x22>
 8001db4:	6820      	ldr	r0, [r4, #0]
 8001db6:	1821      	adds	r1, r4, r0
 8001db8:	428b      	cmp	r3, r1
 8001dba:	bf04      	itt	eq
 8001dbc:	6819      	ldreq	r1, [r3, #0]
 8001dbe:	685b      	ldreq	r3, [r3, #4]
 8001dc0:	6063      	str	r3, [r4, #4]
 8001dc2:	bf04      	itt	eq
 8001dc4:	1809      	addeq	r1, r1, r0
 8001dc6:	6021      	streq	r1, [r4, #0]
 8001dc8:	6054      	str	r4, [r2, #4]
 8001dca:	e7ca      	b.n	8001d62 <_free_r+0x22>
 8001dcc:	bd38      	pop	{r3, r4, r5, pc}
 8001dce:	bf00      	nop
 8001dd0:	20000218 	.word	0x20000218

08001dd4 <sbrk_aligned>:
 8001dd4:	b570      	push	{r4, r5, r6, lr}
 8001dd6:	4e0e      	ldr	r6, [pc, #56]	; (8001e10 <sbrk_aligned+0x3c>)
 8001dd8:	460c      	mov	r4, r1
 8001dda:	6831      	ldr	r1, [r6, #0]
 8001ddc:	4605      	mov	r5, r0
 8001dde:	b911      	cbnz	r1, 8001de6 <sbrk_aligned+0x12>
 8001de0:	f000 f9d2 	bl	8002188 <_sbrk_r>
 8001de4:	6030      	str	r0, [r6, #0]
 8001de6:	4621      	mov	r1, r4
 8001de8:	4628      	mov	r0, r5
 8001dea:	f000 f9cd 	bl	8002188 <_sbrk_r>
 8001dee:	1c43      	adds	r3, r0, #1
 8001df0:	d00a      	beq.n	8001e08 <sbrk_aligned+0x34>
 8001df2:	1cc4      	adds	r4, r0, #3
 8001df4:	f024 0403 	bic.w	r4, r4, #3
 8001df8:	42a0      	cmp	r0, r4
 8001dfa:	d007      	beq.n	8001e0c <sbrk_aligned+0x38>
 8001dfc:	1a21      	subs	r1, r4, r0
 8001dfe:	4628      	mov	r0, r5
 8001e00:	f000 f9c2 	bl	8002188 <_sbrk_r>
 8001e04:	3001      	adds	r0, #1
 8001e06:	d101      	bne.n	8001e0c <sbrk_aligned+0x38>
 8001e08:	f04f 34ff 	mov.w	r4, #4294967295
 8001e0c:	4620      	mov	r0, r4
 8001e0e:	bd70      	pop	{r4, r5, r6, pc}
 8001e10:	2000021c 	.word	0x2000021c

08001e14 <_malloc_r>:
 8001e14:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001e18:	1ccd      	adds	r5, r1, #3
 8001e1a:	f025 0503 	bic.w	r5, r5, #3
 8001e1e:	3508      	adds	r5, #8
 8001e20:	2d0c      	cmp	r5, #12
 8001e22:	bf38      	it	cc
 8001e24:	250c      	movcc	r5, #12
 8001e26:	2d00      	cmp	r5, #0
 8001e28:	4607      	mov	r7, r0
 8001e2a:	db01      	blt.n	8001e30 <_malloc_r+0x1c>
 8001e2c:	42a9      	cmp	r1, r5
 8001e2e:	d905      	bls.n	8001e3c <_malloc_r+0x28>
 8001e30:	230c      	movs	r3, #12
 8001e32:	603b      	str	r3, [r7, #0]
 8001e34:	2600      	movs	r6, #0
 8001e36:	4630      	mov	r0, r6
 8001e38:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001e3c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8001f10 <_malloc_r+0xfc>
 8001e40:	f000 f868 	bl	8001f14 <__malloc_lock>
 8001e44:	f8d8 3000 	ldr.w	r3, [r8]
 8001e48:	461c      	mov	r4, r3
 8001e4a:	bb5c      	cbnz	r4, 8001ea4 <_malloc_r+0x90>
 8001e4c:	4629      	mov	r1, r5
 8001e4e:	4638      	mov	r0, r7
 8001e50:	f7ff ffc0 	bl	8001dd4 <sbrk_aligned>
 8001e54:	1c43      	adds	r3, r0, #1
 8001e56:	4604      	mov	r4, r0
 8001e58:	d155      	bne.n	8001f06 <_malloc_r+0xf2>
 8001e5a:	f8d8 4000 	ldr.w	r4, [r8]
 8001e5e:	4626      	mov	r6, r4
 8001e60:	2e00      	cmp	r6, #0
 8001e62:	d145      	bne.n	8001ef0 <_malloc_r+0xdc>
 8001e64:	2c00      	cmp	r4, #0
 8001e66:	d048      	beq.n	8001efa <_malloc_r+0xe6>
 8001e68:	6823      	ldr	r3, [r4, #0]
 8001e6a:	4631      	mov	r1, r6
 8001e6c:	4638      	mov	r0, r7
 8001e6e:	eb04 0903 	add.w	r9, r4, r3
 8001e72:	f000 f989 	bl	8002188 <_sbrk_r>
 8001e76:	4581      	cmp	r9, r0
 8001e78:	d13f      	bne.n	8001efa <_malloc_r+0xe6>
 8001e7a:	6821      	ldr	r1, [r4, #0]
 8001e7c:	1a6d      	subs	r5, r5, r1
 8001e7e:	4629      	mov	r1, r5
 8001e80:	4638      	mov	r0, r7
 8001e82:	f7ff ffa7 	bl	8001dd4 <sbrk_aligned>
 8001e86:	3001      	adds	r0, #1
 8001e88:	d037      	beq.n	8001efa <_malloc_r+0xe6>
 8001e8a:	6823      	ldr	r3, [r4, #0]
 8001e8c:	442b      	add	r3, r5
 8001e8e:	6023      	str	r3, [r4, #0]
 8001e90:	f8d8 3000 	ldr.w	r3, [r8]
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d038      	beq.n	8001f0a <_malloc_r+0xf6>
 8001e98:	685a      	ldr	r2, [r3, #4]
 8001e9a:	42a2      	cmp	r2, r4
 8001e9c:	d12b      	bne.n	8001ef6 <_malloc_r+0xe2>
 8001e9e:	2200      	movs	r2, #0
 8001ea0:	605a      	str	r2, [r3, #4]
 8001ea2:	e00f      	b.n	8001ec4 <_malloc_r+0xb0>
 8001ea4:	6822      	ldr	r2, [r4, #0]
 8001ea6:	1b52      	subs	r2, r2, r5
 8001ea8:	d41f      	bmi.n	8001eea <_malloc_r+0xd6>
 8001eaa:	2a0b      	cmp	r2, #11
 8001eac:	d917      	bls.n	8001ede <_malloc_r+0xca>
 8001eae:	1961      	adds	r1, r4, r5
 8001eb0:	42a3      	cmp	r3, r4
 8001eb2:	6025      	str	r5, [r4, #0]
 8001eb4:	bf18      	it	ne
 8001eb6:	6059      	strne	r1, [r3, #4]
 8001eb8:	6863      	ldr	r3, [r4, #4]
 8001eba:	bf08      	it	eq
 8001ebc:	f8c8 1000 	streq.w	r1, [r8]
 8001ec0:	5162      	str	r2, [r4, r5]
 8001ec2:	604b      	str	r3, [r1, #4]
 8001ec4:	4638      	mov	r0, r7
 8001ec6:	f104 060b 	add.w	r6, r4, #11
 8001eca:	f000 f829 	bl	8001f20 <__malloc_unlock>
 8001ece:	f026 0607 	bic.w	r6, r6, #7
 8001ed2:	1d23      	adds	r3, r4, #4
 8001ed4:	1af2      	subs	r2, r6, r3
 8001ed6:	d0ae      	beq.n	8001e36 <_malloc_r+0x22>
 8001ed8:	1b9b      	subs	r3, r3, r6
 8001eda:	50a3      	str	r3, [r4, r2]
 8001edc:	e7ab      	b.n	8001e36 <_malloc_r+0x22>
 8001ede:	42a3      	cmp	r3, r4
 8001ee0:	6862      	ldr	r2, [r4, #4]
 8001ee2:	d1dd      	bne.n	8001ea0 <_malloc_r+0x8c>
 8001ee4:	f8c8 2000 	str.w	r2, [r8]
 8001ee8:	e7ec      	b.n	8001ec4 <_malloc_r+0xb0>
 8001eea:	4623      	mov	r3, r4
 8001eec:	6864      	ldr	r4, [r4, #4]
 8001eee:	e7ac      	b.n	8001e4a <_malloc_r+0x36>
 8001ef0:	4634      	mov	r4, r6
 8001ef2:	6876      	ldr	r6, [r6, #4]
 8001ef4:	e7b4      	b.n	8001e60 <_malloc_r+0x4c>
 8001ef6:	4613      	mov	r3, r2
 8001ef8:	e7cc      	b.n	8001e94 <_malloc_r+0x80>
 8001efa:	230c      	movs	r3, #12
 8001efc:	603b      	str	r3, [r7, #0]
 8001efe:	4638      	mov	r0, r7
 8001f00:	f000 f80e 	bl	8001f20 <__malloc_unlock>
 8001f04:	e797      	b.n	8001e36 <_malloc_r+0x22>
 8001f06:	6025      	str	r5, [r4, #0]
 8001f08:	e7dc      	b.n	8001ec4 <_malloc_r+0xb0>
 8001f0a:	605b      	str	r3, [r3, #4]
 8001f0c:	deff      	udf	#255	; 0xff
 8001f0e:	bf00      	nop
 8001f10:	20000218 	.word	0x20000218

08001f14 <__malloc_lock>:
 8001f14:	4801      	ldr	r0, [pc, #4]	; (8001f1c <__malloc_lock+0x8>)
 8001f16:	f7ff bf11 	b.w	8001d3c <__retarget_lock_acquire_recursive>
 8001f1a:	bf00      	nop
 8001f1c:	20000214 	.word	0x20000214

08001f20 <__malloc_unlock>:
 8001f20:	4801      	ldr	r0, [pc, #4]	; (8001f28 <__malloc_unlock+0x8>)
 8001f22:	f7ff bf0c 	b.w	8001d3e <__retarget_lock_release_recursive>
 8001f26:	bf00      	nop
 8001f28:	20000214 	.word	0x20000214

08001f2c <__sflush_r>:
 8001f2c:	898a      	ldrh	r2, [r1, #12]
 8001f2e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001f30:	4605      	mov	r5, r0
 8001f32:	0710      	lsls	r0, r2, #28
 8001f34:	460c      	mov	r4, r1
 8001f36:	d457      	bmi.n	8001fe8 <__sflush_r+0xbc>
 8001f38:	684b      	ldr	r3, [r1, #4]
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	dc04      	bgt.n	8001f48 <__sflush_r+0x1c>
 8001f3e:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	dc01      	bgt.n	8001f48 <__sflush_r+0x1c>
 8001f44:	2000      	movs	r0, #0
 8001f46:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001f48:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8001f4a:	2e00      	cmp	r6, #0
 8001f4c:	d0fa      	beq.n	8001f44 <__sflush_r+0x18>
 8001f4e:	2300      	movs	r3, #0
 8001f50:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8001f54:	682f      	ldr	r7, [r5, #0]
 8001f56:	6a21      	ldr	r1, [r4, #32]
 8001f58:	602b      	str	r3, [r5, #0]
 8001f5a:	d032      	beq.n	8001fc2 <__sflush_r+0x96>
 8001f5c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8001f5e:	89a3      	ldrh	r3, [r4, #12]
 8001f60:	075a      	lsls	r2, r3, #29
 8001f62:	d505      	bpl.n	8001f70 <__sflush_r+0x44>
 8001f64:	6863      	ldr	r3, [r4, #4]
 8001f66:	1ac0      	subs	r0, r0, r3
 8001f68:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8001f6a:	b10b      	cbz	r3, 8001f70 <__sflush_r+0x44>
 8001f6c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001f6e:	1ac0      	subs	r0, r0, r3
 8001f70:	2300      	movs	r3, #0
 8001f72:	4602      	mov	r2, r0
 8001f74:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8001f76:	6a21      	ldr	r1, [r4, #32]
 8001f78:	4628      	mov	r0, r5
 8001f7a:	47b0      	blx	r6
 8001f7c:	1c43      	adds	r3, r0, #1
 8001f7e:	89a3      	ldrh	r3, [r4, #12]
 8001f80:	d106      	bne.n	8001f90 <__sflush_r+0x64>
 8001f82:	6829      	ldr	r1, [r5, #0]
 8001f84:	291d      	cmp	r1, #29
 8001f86:	d82b      	bhi.n	8001fe0 <__sflush_r+0xb4>
 8001f88:	4a28      	ldr	r2, [pc, #160]	; (800202c <__sflush_r+0x100>)
 8001f8a:	410a      	asrs	r2, r1
 8001f8c:	07d6      	lsls	r6, r2, #31
 8001f8e:	d427      	bmi.n	8001fe0 <__sflush_r+0xb4>
 8001f90:	2200      	movs	r2, #0
 8001f92:	6062      	str	r2, [r4, #4]
 8001f94:	04d9      	lsls	r1, r3, #19
 8001f96:	6922      	ldr	r2, [r4, #16]
 8001f98:	6022      	str	r2, [r4, #0]
 8001f9a:	d504      	bpl.n	8001fa6 <__sflush_r+0x7a>
 8001f9c:	1c42      	adds	r2, r0, #1
 8001f9e:	d101      	bne.n	8001fa4 <__sflush_r+0x78>
 8001fa0:	682b      	ldr	r3, [r5, #0]
 8001fa2:	b903      	cbnz	r3, 8001fa6 <__sflush_r+0x7a>
 8001fa4:	6560      	str	r0, [r4, #84]	; 0x54
 8001fa6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001fa8:	602f      	str	r7, [r5, #0]
 8001faa:	2900      	cmp	r1, #0
 8001fac:	d0ca      	beq.n	8001f44 <__sflush_r+0x18>
 8001fae:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8001fb2:	4299      	cmp	r1, r3
 8001fb4:	d002      	beq.n	8001fbc <__sflush_r+0x90>
 8001fb6:	4628      	mov	r0, r5
 8001fb8:	f7ff fec2 	bl	8001d40 <_free_r>
 8001fbc:	2000      	movs	r0, #0
 8001fbe:	6360      	str	r0, [r4, #52]	; 0x34
 8001fc0:	e7c1      	b.n	8001f46 <__sflush_r+0x1a>
 8001fc2:	2301      	movs	r3, #1
 8001fc4:	4628      	mov	r0, r5
 8001fc6:	47b0      	blx	r6
 8001fc8:	1c41      	adds	r1, r0, #1
 8001fca:	d1c8      	bne.n	8001f5e <__sflush_r+0x32>
 8001fcc:	682b      	ldr	r3, [r5, #0]
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d0c5      	beq.n	8001f5e <__sflush_r+0x32>
 8001fd2:	2b1d      	cmp	r3, #29
 8001fd4:	d001      	beq.n	8001fda <__sflush_r+0xae>
 8001fd6:	2b16      	cmp	r3, #22
 8001fd8:	d101      	bne.n	8001fde <__sflush_r+0xb2>
 8001fda:	602f      	str	r7, [r5, #0]
 8001fdc:	e7b2      	b.n	8001f44 <__sflush_r+0x18>
 8001fde:	89a3      	ldrh	r3, [r4, #12]
 8001fe0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001fe4:	81a3      	strh	r3, [r4, #12]
 8001fe6:	e7ae      	b.n	8001f46 <__sflush_r+0x1a>
 8001fe8:	690f      	ldr	r7, [r1, #16]
 8001fea:	2f00      	cmp	r7, #0
 8001fec:	d0aa      	beq.n	8001f44 <__sflush_r+0x18>
 8001fee:	0793      	lsls	r3, r2, #30
 8001ff0:	680e      	ldr	r6, [r1, #0]
 8001ff2:	bf08      	it	eq
 8001ff4:	694b      	ldreq	r3, [r1, #20]
 8001ff6:	600f      	str	r7, [r1, #0]
 8001ff8:	bf18      	it	ne
 8001ffa:	2300      	movne	r3, #0
 8001ffc:	1bf6      	subs	r6, r6, r7
 8001ffe:	608b      	str	r3, [r1, #8]
 8002000:	2e00      	cmp	r6, #0
 8002002:	dd9f      	ble.n	8001f44 <__sflush_r+0x18>
 8002004:	6a21      	ldr	r1, [r4, #32]
 8002006:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 800200a:	4633      	mov	r3, r6
 800200c:	463a      	mov	r2, r7
 800200e:	4628      	mov	r0, r5
 8002010:	47e0      	blx	ip
 8002012:	2800      	cmp	r0, #0
 8002014:	dc06      	bgt.n	8002024 <__sflush_r+0xf8>
 8002016:	89a3      	ldrh	r3, [r4, #12]
 8002018:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800201c:	81a3      	strh	r3, [r4, #12]
 800201e:	f04f 30ff 	mov.w	r0, #4294967295
 8002022:	e790      	b.n	8001f46 <__sflush_r+0x1a>
 8002024:	4407      	add	r7, r0
 8002026:	1a36      	subs	r6, r6, r0
 8002028:	e7ea      	b.n	8002000 <__sflush_r+0xd4>
 800202a:	bf00      	nop
 800202c:	dfbffffe 	.word	0xdfbffffe

08002030 <_fflush_r>:
 8002030:	b538      	push	{r3, r4, r5, lr}
 8002032:	690b      	ldr	r3, [r1, #16]
 8002034:	4605      	mov	r5, r0
 8002036:	460c      	mov	r4, r1
 8002038:	b913      	cbnz	r3, 8002040 <_fflush_r+0x10>
 800203a:	2500      	movs	r5, #0
 800203c:	4628      	mov	r0, r5
 800203e:	bd38      	pop	{r3, r4, r5, pc}
 8002040:	b118      	cbz	r0, 800204a <_fflush_r+0x1a>
 8002042:	6a03      	ldr	r3, [r0, #32]
 8002044:	b90b      	cbnz	r3, 800204a <_fflush_r+0x1a>
 8002046:	f7ff fc97 	bl	8001978 <__sinit>
 800204a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800204e:	2b00      	cmp	r3, #0
 8002050:	d0f3      	beq.n	800203a <_fflush_r+0xa>
 8002052:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8002054:	07d0      	lsls	r0, r2, #31
 8002056:	d404      	bmi.n	8002062 <_fflush_r+0x32>
 8002058:	0599      	lsls	r1, r3, #22
 800205a:	d402      	bmi.n	8002062 <_fflush_r+0x32>
 800205c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800205e:	f7ff fe6d 	bl	8001d3c <__retarget_lock_acquire_recursive>
 8002062:	4628      	mov	r0, r5
 8002064:	4621      	mov	r1, r4
 8002066:	f7ff ff61 	bl	8001f2c <__sflush_r>
 800206a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800206c:	07da      	lsls	r2, r3, #31
 800206e:	4605      	mov	r5, r0
 8002070:	d4e4      	bmi.n	800203c <_fflush_r+0xc>
 8002072:	89a3      	ldrh	r3, [r4, #12]
 8002074:	059b      	lsls	r3, r3, #22
 8002076:	d4e1      	bmi.n	800203c <_fflush_r+0xc>
 8002078:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800207a:	f7ff fe60 	bl	8001d3e <__retarget_lock_release_recursive>
 800207e:	e7dd      	b.n	800203c <_fflush_r+0xc>

08002080 <__swhatbuf_r>:
 8002080:	b570      	push	{r4, r5, r6, lr}
 8002082:	460c      	mov	r4, r1
 8002084:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002088:	2900      	cmp	r1, #0
 800208a:	b096      	sub	sp, #88	; 0x58
 800208c:	4615      	mov	r5, r2
 800208e:	461e      	mov	r6, r3
 8002090:	da0d      	bge.n	80020ae <__swhatbuf_r+0x2e>
 8002092:	89a3      	ldrh	r3, [r4, #12]
 8002094:	f013 0f80 	tst.w	r3, #128	; 0x80
 8002098:	f04f 0100 	mov.w	r1, #0
 800209c:	bf0c      	ite	eq
 800209e:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 80020a2:	2340      	movne	r3, #64	; 0x40
 80020a4:	2000      	movs	r0, #0
 80020a6:	6031      	str	r1, [r6, #0]
 80020a8:	602b      	str	r3, [r5, #0]
 80020aa:	b016      	add	sp, #88	; 0x58
 80020ac:	bd70      	pop	{r4, r5, r6, pc}
 80020ae:	466a      	mov	r2, sp
 80020b0:	f000 f848 	bl	8002144 <_fstat_r>
 80020b4:	2800      	cmp	r0, #0
 80020b6:	dbec      	blt.n	8002092 <__swhatbuf_r+0x12>
 80020b8:	9901      	ldr	r1, [sp, #4]
 80020ba:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 80020be:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 80020c2:	4259      	negs	r1, r3
 80020c4:	4159      	adcs	r1, r3
 80020c6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80020ca:	e7eb      	b.n	80020a4 <__swhatbuf_r+0x24>

080020cc <__smakebuf_r>:
 80020cc:	898b      	ldrh	r3, [r1, #12]
 80020ce:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80020d0:	079d      	lsls	r5, r3, #30
 80020d2:	4606      	mov	r6, r0
 80020d4:	460c      	mov	r4, r1
 80020d6:	d507      	bpl.n	80020e8 <__smakebuf_r+0x1c>
 80020d8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80020dc:	6023      	str	r3, [r4, #0]
 80020de:	6123      	str	r3, [r4, #16]
 80020e0:	2301      	movs	r3, #1
 80020e2:	6163      	str	r3, [r4, #20]
 80020e4:	b002      	add	sp, #8
 80020e6:	bd70      	pop	{r4, r5, r6, pc}
 80020e8:	ab01      	add	r3, sp, #4
 80020ea:	466a      	mov	r2, sp
 80020ec:	f7ff ffc8 	bl	8002080 <__swhatbuf_r>
 80020f0:	9900      	ldr	r1, [sp, #0]
 80020f2:	4605      	mov	r5, r0
 80020f4:	4630      	mov	r0, r6
 80020f6:	f7ff fe8d 	bl	8001e14 <_malloc_r>
 80020fa:	b948      	cbnz	r0, 8002110 <__smakebuf_r+0x44>
 80020fc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002100:	059a      	lsls	r2, r3, #22
 8002102:	d4ef      	bmi.n	80020e4 <__smakebuf_r+0x18>
 8002104:	f023 0303 	bic.w	r3, r3, #3
 8002108:	f043 0302 	orr.w	r3, r3, #2
 800210c:	81a3      	strh	r3, [r4, #12]
 800210e:	e7e3      	b.n	80020d8 <__smakebuf_r+0xc>
 8002110:	89a3      	ldrh	r3, [r4, #12]
 8002112:	6020      	str	r0, [r4, #0]
 8002114:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002118:	81a3      	strh	r3, [r4, #12]
 800211a:	9b00      	ldr	r3, [sp, #0]
 800211c:	6163      	str	r3, [r4, #20]
 800211e:	9b01      	ldr	r3, [sp, #4]
 8002120:	6120      	str	r0, [r4, #16]
 8002122:	b15b      	cbz	r3, 800213c <__smakebuf_r+0x70>
 8002124:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002128:	4630      	mov	r0, r6
 800212a:	f000 f81d 	bl	8002168 <_isatty_r>
 800212e:	b128      	cbz	r0, 800213c <__smakebuf_r+0x70>
 8002130:	89a3      	ldrh	r3, [r4, #12]
 8002132:	f023 0303 	bic.w	r3, r3, #3
 8002136:	f043 0301 	orr.w	r3, r3, #1
 800213a:	81a3      	strh	r3, [r4, #12]
 800213c:	89a3      	ldrh	r3, [r4, #12]
 800213e:	431d      	orrs	r5, r3
 8002140:	81a5      	strh	r5, [r4, #12]
 8002142:	e7cf      	b.n	80020e4 <__smakebuf_r+0x18>

08002144 <_fstat_r>:
 8002144:	b538      	push	{r3, r4, r5, lr}
 8002146:	4d07      	ldr	r5, [pc, #28]	; (8002164 <_fstat_r+0x20>)
 8002148:	2300      	movs	r3, #0
 800214a:	4604      	mov	r4, r0
 800214c:	4608      	mov	r0, r1
 800214e:	4611      	mov	r1, r2
 8002150:	602b      	str	r3, [r5, #0]
 8002152:	f7fe fa57 	bl	8000604 <_fstat>
 8002156:	1c43      	adds	r3, r0, #1
 8002158:	d102      	bne.n	8002160 <_fstat_r+0x1c>
 800215a:	682b      	ldr	r3, [r5, #0]
 800215c:	b103      	cbz	r3, 8002160 <_fstat_r+0x1c>
 800215e:	6023      	str	r3, [r4, #0]
 8002160:	bd38      	pop	{r3, r4, r5, pc}
 8002162:	bf00      	nop
 8002164:	20000210 	.word	0x20000210

08002168 <_isatty_r>:
 8002168:	b538      	push	{r3, r4, r5, lr}
 800216a:	4d06      	ldr	r5, [pc, #24]	; (8002184 <_isatty_r+0x1c>)
 800216c:	2300      	movs	r3, #0
 800216e:	4604      	mov	r4, r0
 8002170:	4608      	mov	r0, r1
 8002172:	602b      	str	r3, [r5, #0]
 8002174:	f7fe fa55 	bl	8000622 <_isatty>
 8002178:	1c43      	adds	r3, r0, #1
 800217a:	d102      	bne.n	8002182 <_isatty_r+0x1a>
 800217c:	682b      	ldr	r3, [r5, #0]
 800217e:	b103      	cbz	r3, 8002182 <_isatty_r+0x1a>
 8002180:	6023      	str	r3, [r4, #0]
 8002182:	bd38      	pop	{r3, r4, r5, pc}
 8002184:	20000210 	.word	0x20000210

08002188 <_sbrk_r>:
 8002188:	b538      	push	{r3, r4, r5, lr}
 800218a:	4d06      	ldr	r5, [pc, #24]	; (80021a4 <_sbrk_r+0x1c>)
 800218c:	2300      	movs	r3, #0
 800218e:	4604      	mov	r4, r0
 8002190:	4608      	mov	r0, r1
 8002192:	602b      	str	r3, [r5, #0]
 8002194:	f7fe fa5c 	bl	8000650 <_sbrk>
 8002198:	1c43      	adds	r3, r0, #1
 800219a:	d102      	bne.n	80021a2 <_sbrk_r+0x1a>
 800219c:	682b      	ldr	r3, [r5, #0]
 800219e:	b103      	cbz	r3, 80021a2 <_sbrk_r+0x1a>
 80021a0:	6023      	str	r3, [r4, #0]
 80021a2:	bd38      	pop	{r3, r4, r5, pc}
 80021a4:	20000210 	.word	0x20000210

080021a8 <_init>:
 80021a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80021aa:	bf00      	nop
 80021ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80021ae:	bc08      	pop	{r3}
 80021b0:	469e      	mov	lr, r3
 80021b2:	4770      	bx	lr

080021b4 <_fini>:
 80021b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80021b6:	bf00      	nop
 80021b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80021ba:	bc08      	pop	{r3}
 80021bc:	469e      	mov	lr, r3
 80021be:	4770      	bx	lr
