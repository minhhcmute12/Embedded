/**
  ******************************************************************************
  * @file    main.c
  * @author  Auto-generated by STM32CubeIDE
  * @version V1.0
  * @brief   Default main function.
  ******************************************************************************
*/

/**
 * Banked Stack Pointer -- Con trỏ ngăn xếp (S10-V42)
 * ------------------------------------------
 *
 * 1. Bộ xử lý Cortex M có 3 con trỏ ngăn xếp: SP(R13), MSP và PSP
 * MSP: Con trỏ ngăn xếp chính - Main stack Pointer
 * PSP: Con trỏ ngăn xếp xử lý - Process stack pointer
 *
 * SP được gọi là con trỏ ngăn xếp hiện tại - current stack pointer
 *
 * 2.Sau khi thiết lập lại bộ xử lý, theo mặc định, MSP sẽ được chọn làm con trỏ ngăn xếp hiện tại. Điều đó có nghĩa là SP
 * sao chép nội dung của MSP.
 *
 * 3. Chế độ luồng(Thread) có thể thay đổi con trỏ ngăn xếp hiện tại thành PSP bằng cách cấu hình thanh ghi ĐIỀU KHIỂN(CONTROL)
 * là bit SPSEL.
 * Bit SPSEL cho phép địa chỉ bit của MSP hay PSP được sao chép vào SP(R13) trong chế độ Thread
 * SPSEL=0: MSP đc sử dụng
 * SPSEL=1: PSP đc sử dụng
 * Nói cách khác là lúc này địa chỉ của MSP và PSP sẽ như là current stack pointer vì cùng địa chỉ.
 * Ngoài chế độ Thread thì mặc định SPSEL = 0.
 *
 * 4. Việc thực thi mã ở chế độ trình xử lý(Handler mode) sẽ luôn sử dụng MSP làm con trỏ ngăn xếp hiện tại. Điều đó cũng có
 * nghĩa là, việc thay đổi giá trị của bit SPSEL trong chế độ xử lý không tạo ra bất kỳ lỗi nào. Việc ghi đó sẽ bị bỏ qua.
 * Có nghĩa là trong chế độ Handler mode(chế độ mặc định) thì SPSEL = 0
 *
 * 5. MSP sẽ được bộ xử lý khởi tạo(initialize) tự động sau khi đặt lại bằng cách đọc nội dung của địa chỉ 0x0000_0000.
 * Có nghĩa là công việc đầu tiên mà bộ xử lý thực hiện sau khi đặt lại là đọc nội dung của địa chỉ 0x0000_0000 và đặt
 * giá trị đó vào địa chỉ của MSP một cách tự động. Sau đó từ MSP -> R13 theo mặc định
 *
 * 6.Nếu bạn muốn sử dụng PSP thì hãy đảm bảo rằng bạn đã khởi tạo PSP thành địa chỉ ngăn xếp hợp lệ trong mã của mình.
 */

#if !defined(__SOFT_FP__) && defined(__ARM_FP)
  #warning "FPU is not initialized, but the project is compiling for an FPU. Please initialize the FPU before use."
#endif

/**
 * Stack Exercise(V43) - hoạt động của stack khi khởi động
 * ----------------------------------------------------
 * Khi chạy thì chọn phần Debug -> Showvỉew -> Register ->quan sát các thay đổi value trong các thanh ghi
 */
#include<stdio.h>

#define SRAM_START 				0x20000000U
#define SRAM_SIZE  				(128 * 1024)
#define SRAM_END  				( (SRAM_START) + (SRAM_SIZE) )
#define STACK_START SRAM_END

#define STACK_MSP_START 		 STACK_START
#define STACK_MSP_END   		(STACK_MSP_START - 512)
#define STACK_PSP_START 		STACK_MSP_END


int fun_add(int a, int b , int c , int d)
{
	return a+b+c+d;
}


/* this function changes SP to PSP */
__attribute__((naked)) void change_sp_to_psp(void)
{
	__asm volatile(".equ SRAM_END, (0x20000000 + ( 128 * 1024))");
	__asm volatile(".equ PSP_START , (SRAM_END-512)");
	__asm volatile("LDR R0,=PSP_START");
	__asm volatile("MSR PSP, R0");
	__asm volatile("MOV R0,#0X02");
	__asm volatile("MSR CONTROL,R0");
	__asm volatile("BX LR");

}

void generate_exception(void)
{
	/* execute SVC instruction to cause SVC exception */
	__asm volatile("SVC #0X2");
}

int main(void)
{
	change_sp_to_psp();

/* from here onwards PSP will be used for stack activities */
	int ret;

	ret = fun_add(1, 4, 5, 6);

	printf("result = %d\n",ret);

	generate_exception();

	for(;;);
}


void SVC_Handler(void)
{
	printf(" in SVC_Handler\n");
}
